
ArduinoUnderEclipse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003c2  00800100  00004886  0000491a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00004886  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000308  008004c2  008004c2  00004cdc  2**0
                  ALLOC
  3 .stab         00017c10  00000000  00000000  00004cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00029b74  00000000  00000000  0001c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <__ctors_end>
       4:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       8:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
       c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      10:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      14:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      18:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      1c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      20:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      24:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      28:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      2c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      30:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      34:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      38:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      3c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      40:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_16>
      44:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      48:	0c 94 aa 04 	jmp	0x954	; 0x954 <__vector_18>
      4c:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__vector_19>
      50:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      54:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      58:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      5c:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      60:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>
      64:	0c 94 0b 01 	jmp	0x216	; 0x216 <__bad_interrupt>

00000068 <digital_pin_to_timer_PGM>:
      68:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      78:	00 00 00 00                                         ....

0000007c <digital_pin_to_bit_mask_PGM>:
      7c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8c:	04 08 10 20                                         ... 

00000090 <digital_pin_to_port_PGM>:
      90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a0:	03 03 03 03                                         ....

000000a4 <port_to_input_PGM>:
      a4:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000ae <port_to_output_PGM>:
      ae:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000b8 <port_to_mode_PGM>:
      b8:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000c2 <_ZL11dscrc_table>:
      c2:	00 5e bc e2 61 3f dd 83 c2 9c 7e 20 a3 fd 1f 41     .^..a?....~ ...A
      d2:	9d c3 21 7f fc a2 40 1e 5f 01 e3 bd 3e 60 82 dc     ..!...@._...>`..
      e2:	23 7d 9f c1 42 1c fe a0 e1 bf 5d 03 80 de 3c 62     #}..B.....]...<b
      f2:	be e0 02 5c df 81 63 3d 7c 22 c0 9e 1d 43 a1 ff     ...\..c=|"...C..
     102:	46 18 fa a4 27 79 9b c5 84 da 38 66 e5 bb 59 07     F...'y....8f..Y.
     112:	db 85 67 39 ba e4 06 58 19 47 a5 fb 78 26 c4 9a     ..g9...X.G..x&..
     122:	65 3b d9 87 04 5a b8 e6 a7 f9 1b 45 c6 98 7a 24     e;...Z.....E..z$
     132:	f8 a6 44 1a 99 c7 25 7b 3a 64 86 d8 5b 05 e7 b9     ..D...%{:d..[...
     142:	8c d2 30 6e ed b3 51 0f 4e 10 f2 ac 2f 71 93 cd     ..0n..Q.N.../q..
     152:	11 4f ad f3 70 2e cc 92 d3 8d 6f 31 b2 ec 0e 50     .O..p.....o1...P
     162:	af f1 13 4d ce 90 72 2c 6d 33 d1 8f 0c 52 b0 ee     ...M..r,m3...R..
     172:	32 6c 8e d0 53 0d ef b1 f0 ae 4c 12 91 cf 2d 73     2l..S.....L...-s
     182:	ca 94 76 28 ab f5 17 49 08 56 b4 ea 69 37 d5 8b     ..v(...I.V..i7..
     192:	57 09 eb b5 36 68 8a d4 95 cb 29 77 f4 aa 48 16     W...6h....)w..H.
     1a2:	e9 b7 55 0b 88 d6 34 6a 2b 75 97 c9 4a 14 f6 a8     ..U...4j+u..J...
     1b2:	74 2a c8 96 15 4b a9 f7 b6 e8 0a 54 d7 89 6b 35     t*...K.....T..k5

000001c2 <__ctors_start>:
     1c2:	b1 05       	cpc	r27, r1
     1c4:	18 0f       	add	r17, r24

000001c6 <__ctors_end>:
     1c6:	11 24       	eor	r1, r1
     1c8:	1f be       	out	0x3f, r1	; 63
     1ca:	cf ef       	ldi	r28, 0xFF	; 255
     1cc:	d8 e0       	ldi	r29, 0x08	; 8
     1ce:	de bf       	out	0x3e, r29	; 62
     1d0:	cd bf       	out	0x3d, r28	; 61

000001d2 <__do_copy_data>:
     1d2:	14 e0       	ldi	r17, 0x04	; 4
     1d4:	a0 e0       	ldi	r26, 0x00	; 0
     1d6:	b1 e0       	ldi	r27, 0x01	; 1
     1d8:	e6 e8       	ldi	r30, 0x86	; 134
     1da:	f8 e4       	ldi	r31, 0x48	; 72
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <__do_copy_data+0x10>
     1de:	05 90       	lpm	r0, Z+
     1e0:	0d 92       	st	X+, r0
     1e2:	a2 3c       	cpi	r26, 0xC2	; 194
     1e4:	b1 07       	cpc	r27, r17
     1e6:	d9 f7       	brne	.-10     	; 0x1de <__do_copy_data+0xc>

000001e8 <__do_clear_bss>:
     1e8:	17 e0       	ldi	r17, 0x07	; 7
     1ea:	a2 ec       	ldi	r26, 0xC2	; 194
     1ec:	b4 e0       	ldi	r27, 0x04	; 4
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <.do_clear_bss_start>

000001f0 <.do_clear_bss_loop>:
     1f0:	1d 92       	st	X+, r1

000001f2 <.do_clear_bss_start>:
     1f2:	aa 3c       	cpi	r26, 0xCA	; 202
     1f4:	b1 07       	cpc	r27, r17
     1f6:	e1 f7       	brne	.-8      	; 0x1f0 <.do_clear_bss_loop>

000001f8 <__do_global_ctors>:
     1f8:	11 e0       	ldi	r17, 0x01	; 1
     1fa:	c6 ec       	ldi	r28, 0xC6	; 198
     1fc:	d1 e0       	ldi	r29, 0x01	; 1
     1fe:	04 c0       	rjmp	.+8      	; 0x208 <__do_global_ctors+0x10>
     200:	22 97       	sbiw	r28, 0x02	; 2
     202:	fe 01       	movw	r30, r28
     204:	0e 94 0e 23 	call	0x461c	; 0x461c <__tablejump__>
     208:	c2 3c       	cpi	r28, 0xC2	; 194
     20a:	d1 07       	cpc	r29, r17
     20c:	c9 f7       	brne	.-14     	; 0x200 <__do_global_ctors+0x8>
     20e:	0e 94 f5 07 	call	0xfea	; 0xfea <main>
     212:	0c 94 41 24 	jmp	0x4882	; 0x4882 <_exit>

00000216 <__bad_interrupt>:
     216:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000021a <loop>:

void loop()
{
	// ------------

	taskManager->execute();
     21a:	80 91 c2 04 	lds	r24, 0x04C2
     21e:	90 91 c3 04 	lds	r25, 0x04C3
     222:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <_ZN11TaskManager7executeEv>

	// ------------
}
     226:	08 95       	ret

00000228 <_ZN9QueueListImE4pushEm>:
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ec 01       	movw	r28, r24
     23a:	6a 01       	movw	r12, r20
     23c:	7b 01       	movw	r14, r22
     23e:	0e 81       	ldd	r16, Y+6	; 0x06
     240:	1f 81       	ldd	r17, Y+7	; 0x07
     242:	86 e0       	ldi	r24, 0x06	; 6
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 12 23 	call	0x4624	; 0x4624 <malloc>
     24a:	fc 01       	movw	r30, r24
     24c:	9f 83       	std	Y+7, r25	; 0x07
     24e:	8e 83       	std	Y+6, r24	; 0x06
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	09 f5       	brne	.+66     	; 0x296 <_ZN9QueueListImE4pushEm+0x6e>
     254:	88 81       	ld	r24, Y
     256:	99 81       	ldd	r25, Y+1	; 0x01
     258:	00 97       	sbiw	r24, 0x00	; 0
     25a:	21 f0       	breq	.+8      	; 0x264 <_ZN9QueueListImE4pushEm+0x3c>
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	71 e0       	ldi	r23, 0x01	; 1
     260:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>
     264:	8d e0       	ldi	r24, 0x0D	; 13
     266:	61 e0       	ldi	r22, 0x01	; 1
     268:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
     26c:	8d e0       	ldi	r24, 0x0D	; 13
     26e:	61 e0       	ldi	r22, 0x01	; 1
     270:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
     274:	6a ef       	ldi	r22, 0xFA	; 250
     276:	70 e0       	ldi	r23, 0x00	; 0
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
     280:	8d e0       	ldi	r24, 0x0D	; 13
     282:	60 e0       	ldi	r22, 0x00	; 0
     284:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
     288:	6a ef       	ldi	r22, 0xFA	; 250
     28a:	70 e0       	ldi	r23, 0x00	; 0
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
     294:	eb cf       	rjmp	.-42     	; 0x26c <_ZN9QueueListImE4pushEm+0x44>
     296:	15 82       	std	Z+5, r1	; 0x05
     298:	14 82       	std	Z+4, r1	; 0x04
     29a:	c0 82       	st	Z, r12
     29c:	d1 82       	std	Z+1, r13	; 0x01
     29e:	e2 82       	std	Z+2, r14	; 0x02
     2a0:	f3 82       	std	Z+3, r15	; 0x03
     2a2:	8c 81       	ldd	r24, Y+4	; 0x04
     2a4:	9d 81       	ldd	r25, Y+5	; 0x05
     2a6:	00 97       	sbiw	r24, 0x00	; 0
     2a8:	19 f4       	brne	.+6      	; 0x2b0 <_ZN9QueueListImE4pushEm+0x88>
     2aa:	fd 83       	std	Y+5, r31	; 0x05
     2ac:	ec 83       	std	Y+4, r30	; 0x04
     2ae:	05 c0       	rjmp	.+10     	; 0x2ba <_ZN9QueueListImE4pushEm+0x92>
     2b0:	d8 01       	movw	r26, r16
     2b2:	15 96       	adiw	r26, 0x05	; 5
     2b4:	fc 93       	st	X, r31
     2b6:	ee 93       	st	-X, r30
     2b8:	14 97       	sbiw	r26, 0x04	; 4
     2ba:	8a 81       	ldd	r24, Y+2	; 0x02
     2bc:	9b 81       	ldd	r25, Y+3	; 0x03
     2be:	01 96       	adiw	r24, 0x01	; 1
     2c0:	9b 83       	std	Y+3, r25	; 0x03
     2c2:	8a 83       	std	Y+2, r24	; 0x02
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	ff 90       	pop	r15
     2ce:	ef 90       	pop	r14
     2d0:	df 90       	pop	r13
     2d2:	cf 90       	pop	r12
     2d4:	08 95       	ret

000002d6 <_Z6setup2R5PrintP7OneWire>:
}

// =============================

void setup2( Print& p , OneWire* oneWire )
{
     2d6:	af 92       	push	r10
     2d8:	bf 92       	push	r11
     2da:	cf 92       	push	r12
     2dc:	df 92       	push	r13
     2de:	ef 92       	push	r14
     2e0:	ff 92       	push	r15
     2e2:	0f 93       	push	r16
     2e4:	1f 93       	push	r17
     2e6:	cf 93       	push	r28
     2e8:	df 93       	push	r29
     2ea:	cd b7       	in	r28, 0x3d	; 61
     2ec:	de b7       	in	r29, 0x3e	; 62
     2ee:	2d 97       	sbiw	r28, 0x0d	; 13
     2f0:	0f b6       	in	r0, 0x3f	; 63
     2f2:	f8 94       	cli
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	0f be       	out	0x3f, r0	; 63
     2f8:	cd bf       	out	0x3d, r28	; 61
     2fa:	7c 01       	movw	r14, r24
     2fc:	5b 01       	movw	r10, r22
	// ---------------

	analogReference( DEFAULT );
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	0e 94 fc 08 	call	0x11f8	; 0x11f8 <analogReference>
	}*/

	// ---------------

	{
		char prefix1[] = "setupSDcard:";
     304:	fe 01       	movw	r30, r28
     306:	31 96       	adiw	r30, 0x01	; 1
     308:	ae e9       	ldi	r26, 0x9E	; 158
     30a:	b1 e0       	ldi	r27, 0x01	; 1
     30c:	8d e0       	ldi	r24, 0x0D	; 13
     30e:	0d 90       	ld	r0, X+
     310:	01 92       	st	Z+, r0
     312:	81 50       	subi	r24, 0x01	; 1
     314:	e1 f7       	brne	.-8      	; 0x30e <_Z6setup2R5PrintP7OneWire+0x38>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     316:	c7 01       	movw	r24, r14
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     322:	c7 01       	movw	r24, r14
     324:	61 e3       	ldi	r22, 0x31	; 49
     326:	71 e0       	ldi	r23, 0x01	; 1
     328:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     32c:	c7 01       	movw	r24, r14
     32e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

		p << prefix1 << "Initializing SD card BEGIN..." << endl;

		uint8_t chipSelect = 10;
		pinMode( chipSelect , OUTPUT );
     332:	8a e0       	ldi	r24, 0x0A	; 10
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>


		if (!SD.begin(chipSelect))
     33a:	84 e7       	ldi	r24, 0x74	; 116
     33c:	95 e0       	ldi	r25, 0x05	; 5
     33e:	6a e0       	ldi	r22, 0x0A	; 10
     340:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN7SDClass5beginEh>
     344:	88 23       	and	r24, r24
     346:	51 f4       	brne	.+20     	; 0x35c <_Z6setup2R5PrintP7OneWire+0x86>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     348:	c7 01       	movw	r24, r14
     34a:	be 01       	movw	r22, r28
     34c:	6f 5f       	subi	r22, 0xFF	; 255
     34e:	7f 4f       	sbci	r23, 0xFF	; 255
     350:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     354:	c7 01       	movw	r24, r14
     356:	6f e4       	ldi	r22, 0x4F	; 79
     358:	71 e0       	ldi	r23, 0x01	; 1
     35a:	09 c0       	rjmp	.+18     	; 0x36e <_Z6setup2R5PrintP7OneWire+0x98>
     35c:	c7 01       	movw	r24, r14
     35e:	be 01       	movw	r22, r28
     360:	6f 5f       	subi	r22, 0xFF	; 255
     362:	7f 4f       	sbci	r23, 0xFF	; 255
     364:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     368:	c7 01       	movw	r24, r14
     36a:	60 e7       	ldi	r22, 0x70	; 112
     36c:	71 e0       	ldi	r23, 0x01	; 1
     36e:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     372:	c7 01       	movw	r24, r14
     374:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     378:	c7 01       	movw	r24, r14
     37a:	be 01       	movw	r22, r28
     37c:	6f 5f       	subi	r22, 0xFF	; 255
     37e:	7f 4f       	sbci	r23, 0xFF	; 255
     380:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     384:	c7 01       	movw	r24, r14
     386:	62 e8       	ldi	r22, 0x82	; 130
     388:	71 e0       	ldi	r23, 0x01	; 1
     38a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     38e:	c7 01       	movw	r24, r14
     390:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	}

	// ---------------

	{
		QueueList<unsigned long>* queue = new QueueList<unsigned long>();
     394:	88 e0       	ldi	r24, 0x08	; 8
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     39c:	8c 01       	movw	r16, r24
};

// init the queue (constructor).
template<typename T>
QueueList<T>::QueueList () {
  size = 0;       // set the size of queue to zero.
     39e:	fc 01       	movw	r30, r24
     3a0:	13 82       	std	Z+3, r1	; 0x03
     3a2:	12 82       	std	Z+2, r1	; 0x02
  head = NULL;    // set the head of the list to point nowhere.
     3a4:	15 82       	std	Z+5, r1	; 0x05
     3a6:	14 82       	std	Z+4, r1	; 0x04
  tail = NULL;    // set the tail of the list to point nowhere.
     3a8:	17 82       	std	Z+7, r1	; 0x07
     3aa:	16 82       	std	Z+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
     3ac:	11 82       	std	Z+1, r1	; 0x01
     3ae:	10 82       	st	Z, r1
		queue->push( 1000 );
     3b0:	48 ee       	ldi	r20, 0xE8	; 232
     3b2:	53 e0       	ldi	r21, 0x03	; 3
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	70 e0       	ldi	r23, 0x00	; 0
     3b8:	0e 94 14 01 	call	0x228	; 0x228 <_ZN9QueueListImE4pushEm>

		TaskManagerSchedulerTimeIntervals* taskScheduler = new TaskManagerSchedulerTimeIntervals( queue , true , true );
     3bc:	8d e0       	ldi	r24, 0x0D	; 13
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     3c4:	6c 01       	movw	r12, r24
     3c6:	b8 01       	movw	r22, r16
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	21 e0       	ldi	r18, 0x01	; 1
     3cc:	0e 94 2b 1d 	call	0x3a56	; 0x3a56 <_ZN33TaskManagerSchedulerTimeIntervalsC1EP9QueueListImEbb>

		CheckDallasDS18B20TemperatureRunnable* runnable = new CheckDallasDS18B20TemperatureRunnable( oneWire , p );
     3d0:	80 e1       	ldi	r24, 0x10	; 16
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     3d8:	8c 01       	movw	r16, r24
     3da:	b5 01       	movw	r22, r10
     3dc:	a7 01       	movw	r20, r14
     3de:	0e 94 56 03 	call	0x6ac	; 0x6ac <_ZN37CheckDallasDS18B20TemperatureRunnableC1EP7OneWireR5Print>

		taskManager->addTask( true , true , taskScheduler , runnable );
     3e2:	80 91 c2 04 	lds	r24, 0x04C2
     3e6:	90 91 c3 04 	lds	r25, 0x04C3
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	41 e0       	ldi	r20, 0x01	; 1
     3ee:	96 01       	movw	r18, r12
     3f0:	0e 94 9b 1a 	call	0x3536	; 0x3536 <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable>
	}

	// ---------------

}
     3f4:	2d 96       	adiw	r28, 0x0d	; 13
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	08 95       	ret

00000416 <setup>:
#include "SD.h"

// =============================

void setup()
{
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	cd b7       	in	r28, 0x3d	; 61
     428:	de b7       	in	r29, 0x3e	; 62
     42a:	29 97       	sbiw	r28, 0x09	; 9
     42c:	0f b6       	in	r0, 0x3f	; 63
     42e:	f8 94       	cli
     430:	de bf       	out	0x3e, r29	; 62
     432:	0f be       	out	0x3f, r0	; 63
     434:	cd bf       	out	0x3d, r28	; 61
	// ---------------

	Serial.begin(9600);
     436:	84 ec       	ldi	r24, 0xC4	; 196
     438:	94 e0       	ldi	r25, 0x04	; 4
     43a:	40 e8       	ldi	r20, 0x80	; 128
     43c:	55 e2       	ldi	r21, 0x25	; 37
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	0e 94 2d 05 	call	0xa5a	; 0xa5a <_ZN14HardwareSerial5beginEm>

	char prefix[] = "setup():";
     446:	de 01       	movw	r26, r28
     448:	11 96       	adiw	r26, 0x01	; 1
     44a:	e6 ee       	ldi	r30, 0xE6	; 230
     44c:	f1 e0       	ldi	r31, 0x01	; 1
     44e:	89 e0       	ldi	r24, 0x09	; 9
     450:	01 90       	ld	r0, Z+
     452:	0d 92       	st	X+, r0
     454:	81 50       	subi	r24, 0x01	; 1
     456:	e1 f7       	brne	.-8      	; 0x450 <setup+0x3a>
	Print& p = Serial;

	// ---------------

	uint8_t digitalOneWirePinNumber = 2;
	OneWire* oneWire = new OneWire( digitalOneWirePinNumber );
     458:	8e e0       	ldi	r24, 0x0E	; 14
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     460:	6c 01       	movw	r12, r24
     462:	62 e0       	ldi	r22, 0x02	; 2
     464:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN7OneWireC1Eh>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     468:	84 ec       	ldi	r24, 0xC4	; 196
     46a:	94 e0       	ldi	r25, 0x04	; 4
     46c:	be 01       	movw	r22, r28
     46e:	6f 5f       	subi	r22, 0xFF	; 255
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
// ART:

enum _ArthurCodes { hl };

inline Print &operator <<(Print &obj, _ArthurCodes arg)
{ obj.println( "---------------------" ); return obj; }
     476:	84 ec       	ldi	r24, 0xC4	; 196
     478:	94 e0       	ldi	r25, 0x04	; 4
     47a:	6b ea       	ldi	r22, 0xAB	; 171
     47c:	71 e0       	ldi	r23, 0x01	; 1
     47e:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>

	// ---------------

	p << prefix << hl;

	delay( 2 * 1000 );
     482:	60 ed       	ldi	r22, 0xD0	; 208
     484:	77 e0       	ldi	r23, 0x07	; 7
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	90 e0       	ldi	r25, 0x00	; 0
     48a:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     48e:	84 ec       	ldi	r24, 0xC4	; 196
     490:	94 e0       	ldi	r25, 0x04	; 4
     492:	be 01       	movw	r22, r28
     494:	6f 5f       	subi	r22, 0xFF	; 255
     496:	7f 4f       	sbci	r23, 0xFF	; 255
     498:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     49c:	84 ec       	ldi	r24, 0xC4	; 196
     49e:	94 e0       	ldi	r25, 0x04	; 4
     4a0:	61 ec       	ldi	r22, 0xC1	; 193
     4a2:	71 e0       	ldi	r23, 0x01	; 1
     4a4:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     4a8:	84 ec       	ldi	r24, 0xC4	; 196
     4aa:	94 e0       	ldi	r25, 0x04	; 4
     4ac:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     4b0:	84 ec       	ldi	r24, 0xC4	; 196
     4b2:	94 e0       	ldi	r25, 0x04	; 4
     4b4:	be 01       	movw	r22, r28
     4b6:	6f 5f       	subi	r22, 0xFF	; 255
     4b8:	7f 4f       	sbci	r23, 0xFF	; 255
     4ba:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     4be:	84 ec       	ldi	r24, 0xC4	; 196
     4c0:	94 e0       	ldi	r25, 0x04	; 4
     4c2:	67 ec       	ldi	r22, 0xC7	; 199
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>

	p << prefix << "START" << endl;

	p << prefix << "freeRamMemory()=" << freeRamMemory() << endl;
     4ca:	0e 94 e7 03 	call	0x7ce	; 0x7ce <freeRamMemory>
     4ce:	bc 01       	movw	r22, r24
     4d0:	84 ec       	ldi	r24, 0xC4	; 196
     4d2:	94 e0       	ldi	r25, 0x04	; 4
     4d4:	4a e0       	ldi	r20, 0x0A	; 10
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print5printEii>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     4dc:	84 ec       	ldi	r24, 0xC4	; 196
     4de:	94 e0       	ldi	r25, 0x04	; 4
     4e0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     4e4:	84 ec       	ldi	r24, 0xC4	; 196
     4e6:	94 e0       	ldi	r25, 0x04	; 4
     4e8:	be 01       	movw	r22, r28
     4ea:	6f 5f       	subi	r22, 0xFF	; 255
     4ec:	7f 4f       	sbci	r23, 0xFF	; 255
     4ee:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     4f2:	84 ec       	ldi	r24, 0xC4	; 196
     4f4:	94 e0       	ldi	r25, 0x04	; 4
     4f6:	68 ed       	ldi	r22, 0xD8	; 216
     4f8:	71 e0       	ldi	r23, 0x01	; 1
     4fa:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	p << prefix << "millis()=" << millis() << endl;
     4fe:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
     502:	ab 01       	movw	r20, r22
     504:	bc 01       	movw	r22, r24
     506:	84 ec       	ldi	r24, 0xC4	; 196
     508:	94 e0       	ldi	r25, 0x04	; 4
     50a:	2a e0       	ldi	r18, 0x0A	; 10
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5Print5printEmi>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     512:	84 ec       	ldi	r24, 0xC4	; 196
     514:	94 e0       	ldi	r25, 0x04	; 4
     516:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     51a:	84 ec       	ldi	r24, 0xC4	; 196
     51c:	94 e0       	ldi	r25, 0x04	; 4
     51e:	be 01       	movw	r22, r28
     520:	6f 5f       	subi	r22, 0xFF	; 255
     522:	7f 4f       	sbci	r23, 0xFF	; 255
     524:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
// ART:

enum _ArthurCodes { hl };

inline Print &operator <<(Print &obj, _ArthurCodes arg)
{ obj.println( "---------------------" ); return obj; }
     528:	84 ec       	ldi	r24, 0xC4	; 196
     52a:	94 e0       	ldi	r25, 0x04	; 4
     52c:	6b ea       	ldi	r22, 0xAB	; 171
     52e:	71 e0       	ldi	r23, 0x01	; 1
     530:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>
	p << prefix << hl;

	// ---------------

	TaskManagerStatisticsBasic* taskManagerStatisticsBasic = new TaskManagerStatisticsBasic( p , 10 * 1000 );
     534:	84 e2       	ldi	r24, 0x24	; 36
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     53c:	7c 01       	movw	r14, r24
     53e:	64 ec       	ldi	r22, 0xC4	; 196
     540:	74 e0       	ldi	r23, 0x04	; 4
     542:	20 e1       	ldi	r18, 0x10	; 16
     544:	37 e2       	ldi	r19, 0x27	; 39
     546:	40 e0       	ldi	r20, 0x00	; 0
     548:	50 e0       	ldi	r21, 0x00	; 0
     54a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <_ZN26TaskManagerStatisticsBasicC1ER5Printm>
	taskManager = new TaskManager( taskManagerStatisticsBasic );
     54e:	80 e1       	ldi	r24, 0x10	; 16
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     556:	8c 01       	movw	r16, r24
     558:	b7 01       	movw	r22, r14
     55a:	0e 94 d6 19 	call	0x33ac	; 0x33ac <_ZN11TaskManagerC1EP21TaskManagerStatistics>
     55e:	10 93 c3 04 	sts	0x04C3, r17
     562:	00 93 c2 04 	sts	0x04C2, r16

	// ---------------

	setup2( p , oneWire );
     566:	84 ec       	ldi	r24, 0xC4	; 196
     568:	94 e0       	ldi	r25, 0x04	; 4
     56a:	b6 01       	movw	r22, r12
     56c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z6setup2R5PrintP7OneWire>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     570:	84 ec       	ldi	r24, 0xC4	; 196
     572:	94 e0       	ldi	r25, 0x04	; 4
     574:	be 01       	movw	r22, r28
     576:	6f 5f       	subi	r22, 0xFF	; 255
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     57e:	84 ec       	ldi	r24, 0xC4	; 196
     580:	94 e0       	ldi	r25, 0x04	; 4
     582:	67 ec       	ldi	r22, 0xC7	; 199
     584:	71 e0       	ldi	r23, 0x01	; 1
     586:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>

	// ---------------

	p << prefix << "freeRamMemory()=" << freeRamMemory() << endl;
     58a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <freeRamMemory>
     58e:	bc 01       	movw	r22, r24
     590:	84 ec       	ldi	r24, 0xC4	; 196
     592:	94 e0       	ldi	r25, 0x04	; 4
     594:	4a e0       	ldi	r20, 0x0A	; 10
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print5printEii>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     59c:	84 ec       	ldi	r24, 0xC4	; 196
     59e:	94 e0       	ldi	r25, 0x04	; 4
     5a0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     5a4:	84 ec       	ldi	r24, 0xC4	; 196
     5a6:	94 e0       	ldi	r25, 0x04	; 4
     5a8:	be 01       	movw	r22, r28
     5aa:	6f 5f       	subi	r22, 0xFF	; 255
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     5b2:	84 ec       	ldi	r24, 0xC4	; 196
     5b4:	94 e0       	ldi	r25, 0x04	; 4
     5b6:	68 ed       	ldi	r22, 0xD8	; 216
     5b8:	71 e0       	ldi	r23, 0x01	; 1
     5ba:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	p << prefix << "millis()=" << millis() << endl;
     5be:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
     5c2:	ab 01       	movw	r20, r22
     5c4:	bc 01       	movw	r22, r24
     5c6:	84 ec       	ldi	r24, 0xC4	; 196
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	2a e0       	ldi	r18, 0x0A	; 10
     5cc:	30 e0       	ldi	r19, 0x00	; 0
     5ce:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5Print5printEmi>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     5d2:	84 ec       	ldi	r24, 0xC4	; 196
     5d4:	94 e0       	ldi	r25, 0x04	; 4
     5d6:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     5da:	84 ec       	ldi	r24, 0xC4	; 196
     5dc:	94 e0       	ldi	r25, 0x04	; 4
     5de:	be 01       	movw	r22, r28
     5e0:	6f 5f       	subi	r22, 0xFF	; 255
     5e2:	7f 4f       	sbci	r23, 0xFF	; 255
     5e4:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     5e8:	84 ec       	ldi	r24, 0xC4	; 196
     5ea:	94 e0       	ldi	r25, 0x04	; 4
     5ec:	62 ee       	ldi	r22, 0xE2	; 226
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     5f4:	84 ec       	ldi	r24, 0xC4	; 196
     5f6:	94 e0       	ldi	r25, 0x04	; 4
     5f8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
// ART:

enum _ArthurCodes { hl };

inline Print &operator <<(Print &obj, _ArthurCodes arg)
{ obj.println( "---------------------" ); return obj; }
     5fc:	84 ec       	ldi	r24, 0xC4	; 196
     5fe:	94 e0       	ldi	r25, 0x04	; 4
     600:	6b ea       	ldi	r22, 0xAB	; 171
     602:	71 e0       	ldi	r23, 0x01	; 1
     604:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>
	p << prefix << "END" << endl << hl;

	// ---------------
}
     608:	29 96       	adiw	r28, 0x09	; 9
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	1f 91       	pop	r17
     61a:	0f 91       	pop	r16
     61c:	ff 90       	pop	r15
     61e:	ef 90       	pop	r14
     620:	df 90       	pop	r13
     622:	cf 90       	pop	r12
     624:	08 95       	ret

00000626 <_ZN37CheckDallasDS18B20TemperatureRunnableD1Ev>:
	  //Serial.println(tempC);

	  p << prefix << sensors->getTempC(deviceAddress) << " oC" << endl;
}

CheckDallasDS18B20TemperatureRunnable::~CheckDallasDS18B20TemperatureRunnable()
     626:	2f e3       	ldi	r18, 0x3F	; 63
     628:	34 e0       	ldi	r19, 0x04	; 4
     62a:	fc 01       	movw	r30, r24
     62c:	31 83       	std	Z+1, r19	; 0x01
     62e:	20 83       	st	Z, r18
     630:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN8RunnableD1Ev>
{

}
     634:	08 95       	ret

00000636 <_ZN37CheckDallasDS18B20TemperatureRunnableD0Ev>:
	  //Serial.println(tempC);

	  p << prefix << sensors->getTempC(deviceAddress) << " oC" << endl;
}

CheckDallasDS18B20TemperatureRunnable::~CheckDallasDS18B20TemperatureRunnable()
     636:	cf 93       	push	r28
     638:	df 93       	push	r29
     63a:	ec 01       	movw	r28, r24
     63c:	8f e3       	ldi	r24, 0x3F	; 63
     63e:	94 e0       	ldi	r25, 0x04	; 4
     640:	99 83       	std	Y+1, r25	; 0x01
     642:	88 83       	st	Y, r24
     644:	ce 01       	movw	r24, r28
     646:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN8RunnableD1Ev>
{

}
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	08 95       	ret

00000656 <_ZN37CheckDallasDS18B20TemperatureRunnable3runEv>:
	    Serial.println();

}

void CheckDallasDS18B20TemperatureRunnable::run()
{
     656:	0f 93       	push	r16
     658:	1f 93       	push	r17
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	ec 01       	movw	r28, r24
	//int tempInC = 0;


	sensors->requestTemperatures();
     660:	8e 81       	ldd	r24, Y+6	; 0x06
     662:	9f 81       	ldd	r25, Y+7	; 0x07
     664:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <_ZN17DallasTemperature19requestTemperaturesEv>

	  //float tempInC = sensors->getTempC(deviceAddress);
	  //Serial.print("Temp C: ");
	  //Serial.println(tempC);

	  p << prefix << sensors->getTempC(deviceAddress) << " oC" << endl;
     668:	0a 81       	ldd	r16, Y+2	; 0x02
     66a:	1b 81       	ldd	r17, Y+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
     66c:	c8 01       	movw	r24, r16
     66e:	65 e4       	ldi	r22, 0x45	; 69
     670:	74 e0       	ldi	r23, 0x04	; 4
     672:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     676:	be 01       	movw	r22, r28
     678:	68 5f       	subi	r22, 0xF8	; 248
     67a:	7f 4f       	sbci	r23, 0xFF	; 255
     67c:	8e 81       	ldd	r24, Y+6	; 0x06
     67e:	9f 81       	ldd	r25, Y+7	; 0x07
     680:	0e 94 aa 0c 	call	0x1954	; 0x1954 <_ZN17DallasTemperature8getTempCEPh>
     684:	ab 01       	movw	r20, r22
     686:	bc 01       	movw	r22, r24
     688:	c8 01       	movw	r24, r16
     68a:	22 e0       	ldi	r18, 0x02	; 2
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN5Print5printEdi>
     692:	c8 01       	movw	r24, r16
     694:	6f ee       	ldi	r22, 0xEF	; 239
     696:	71 e0       	ldi	r23, 0x01	; 1
     698:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
     69c:	c8 01       	movw	r24, r16
     69e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <_ZN37CheckDallasDS18B20TemperatureRunnableC1EP7OneWireR5Print>:

#include "CheckDallasDS18B20TemperatureRunnable.h"

const char CheckDallasDS18B20TemperatureRunnable::prefix[] = "DS18B20:";

CheckDallasDS18B20TemperatureRunnable::CheckDallasDS18B20TemperatureRunnable( OneWire* _oneWire , Print& _p ) : p(_p)
     6ac:	ef 92       	push	r14
     6ae:	ff 92       	push	r15
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	8c 01       	movw	r16, r24
     6ba:	7b 01       	movw	r14, r22
     6bc:	ea 01       	movw	r28, r20
     6be:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <_ZN8RunnableC1Ev>
     6c2:	8f e3       	ldi	r24, 0x3F	; 63
     6c4:	94 e0       	ldi	r25, 0x04	; 4
     6c6:	f8 01       	movw	r30, r16
     6c8:	91 83       	std	Z+1, r25	; 0x01
     6ca:	80 83       	st	Z, r24
     6cc:	d3 83       	std	Z+3, r29	; 0x03
     6ce:	c2 83       	std	Z+2, r28	; 0x02
{
	oneWire = _oneWire;
     6d0:	f5 82       	std	Z+5, r15	; 0x05
     6d2:	e4 82       	std	Z+4, r14	; 0x04

	//oneWire = new OneWire( digitalOneWirePinNumber );

	sensors = new DallasTemperature( oneWire );
     6d4:	83 e1       	ldi	r24, 0x13	; 19
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
     6dc:	ec 01       	movw	r28, r24
     6de:	f8 01       	movw	r30, r16
     6e0:	64 81       	ldd	r22, Z+4	; 0x04
     6e2:	75 81       	ldd	r23, Z+5	; 0x05
     6e4:	0e 94 85 09 	call	0x130a	; 0x130a <_ZN17DallasTemperatureC1EP7OneWire>
     6e8:	f8 01       	movw	r30, r16
     6ea:	d7 83       	std	Z+7, r29	; 0x07
     6ec:	c6 83       	std	Z+6, r28	; 0x06


	//p << prefix << "Found " << sensors->getDeviceCount() << " devices." << endl;

	  // locate devices on the bus
	  Serial.print("Locating devices...");
     6ee:	84 ec       	ldi	r24, 0xC4	; 196
     6f0:	94 e0       	ldi	r25, 0x04	; 4
     6f2:	63 ef       	ldi	r22, 0xF3	; 243
     6f4:	71 e0       	ldi	r23, 0x01	; 1
     6f6:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	  sensors->begin();
     6fa:	f8 01       	movw	r30, r16
     6fc:	86 81       	ldd	r24, Z+6	; 0x06
     6fe:	97 81       	ldd	r25, Z+7	; 0x07
     700:	0e 94 07 0b 	call	0x160e	; 0x160e <_ZN17DallasTemperature5beginEv>

	  Serial.print("Found ");
     704:	84 ec       	ldi	r24, 0xC4	; 196
     706:	94 e0       	ldi	r25, 0x04	; 4
     708:	67 e0       	ldi	r22, 0x07	; 7
     70a:	72 e0       	ldi	r23, 0x02	; 2
     70c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	  Serial.print(sensors->getDeviceCount(), DEC);
     710:	f8 01       	movw	r30, r16
     712:	86 81       	ldd	r24, Z+6	; 0x06
     714:	97 81       	ldd	r25, Z+7	; 0x07
     716:	0e 94 94 09 	call	0x1328	; 0x1328 <_ZN17DallasTemperature14getDeviceCountEv>
     71a:	68 2f       	mov	r22, r24
     71c:	84 ec       	ldi	r24, 0xC4	; 196
     71e:	94 e0       	ldi	r25, 0x04	; 4
     720:	4a e0       	ldi	r20, 0x0A	; 10
     722:	50 e0       	ldi	r21, 0x00	; 0
     724:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5Print5printEhi>
	  Serial.println(" devices.");
     728:	84 ec       	ldi	r24, 0xC4	; 196
     72a:	94 e0       	ldi	r25, 0x04	; 4
     72c:	6e e0       	ldi	r22, 0x0E	; 14
     72e:	72 e0       	ldi	r23, 0x02	; 2
     730:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>

	// report parasite power requirements
	  Serial.print("Parasite power is: ");
     734:	84 ec       	ldi	r24, 0xC4	; 196
     736:	94 e0       	ldi	r25, 0x04	; 4
     738:	68 e1       	ldi	r22, 0x18	; 24
     73a:	72 e0       	ldi	r23, 0x02	; 2
     73c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	  if (sensors->isParasitePowerMode()) Serial.println("ON");
     740:	f8 01       	movw	r30, r16
     742:	86 81       	ldd	r24, Z+6	; 0x06
     744:	97 81       	ldd	r25, Z+7	; 0x07
     746:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <_ZN17DallasTemperature19isParasitePowerModeEv>
     74a:	88 23       	and	r24, r24
     74c:	29 f0       	breq	.+10     	; 0x758 <_ZN37CheckDallasDS18B20TemperatureRunnableC1EP7OneWireR5Print+0xac>
     74e:	84 ec       	ldi	r24, 0xC4	; 196
     750:	94 e0       	ldi	r25, 0x04	; 4
     752:	6c e2       	ldi	r22, 0x2C	; 44
     754:	72 e0       	ldi	r23, 0x02	; 2
     756:	04 c0       	rjmp	.+8      	; 0x760 <_ZN37CheckDallasDS18B20TemperatureRunnableC1EP7OneWireR5Print+0xb4>
	  else Serial.println("OFF");
     758:	84 ec       	ldi	r24, 0xC4	; 196
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	6f e2       	ldi	r22, 0x2F	; 47
     75e:	72 e0       	ldi	r23, 0x02	; 2
     760:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>

	    //Device 0 Address: 28 0C F8 55 03 00 00 46
	  //uint8_t da[8] = { 0x28, 0x0C , 0xF8, 0x55, 0x03, 0x0, 0x0, 0x46 };
	  //deviceAddress = { 0x28, 0x0C , 0xF8, 0x55, 0x03, 0x0, 0x0, 0x46 };

	    deviceAddress[0] = 0x28;
     764:	88 e2       	ldi	r24, 0x28	; 40
     766:	f8 01       	movw	r30, r16
     768:	80 87       	std	Z+8, r24	; 0x08
	    deviceAddress[1] = 0x0C;
     76a:	8c e0       	ldi	r24, 0x0C	; 12
     76c:	81 87       	std	Z+9, r24	; 0x09
	    deviceAddress[2] = 0xF8;
     76e:	88 ef       	ldi	r24, 0xF8	; 248
     770:	82 87       	std	Z+10, r24	; 0x0a
	    deviceAddress[3] = 0x55;
     772:	85 e5       	ldi	r24, 0x55	; 85
     774:	83 87       	std	Z+11, r24	; 0x0b
	    deviceAddress[4] = 0x03;
     776:	83 e0       	ldi	r24, 0x03	; 3
     778:	84 87       	std	Z+12, r24	; 0x0c
	    deviceAddress[5] = 0x0;
     77a:	15 86       	std	Z+13, r1	; 0x0d
	    deviceAddress[6] = 0x0;
     77c:	16 86       	std	Z+14, r1	; 0x0e
	    deviceAddress[7] = 0x46;
     77e:	86 e4       	ldi	r24, 0x46	; 70
     780:	87 87       	std	Z+15, r24	; 0x0f
	    //  Serial.print(deviceAddress[i], HEX);
	    //}

	    //Serial.println();

	    sensors->setResolution(deviceAddress, 9);
     782:	e8 01       	movw	r28, r16
     784:	28 96       	adiw	r28, 0x08	; 8
     786:	86 81       	ldd	r24, Z+6	; 0x06
     788:	97 81       	ldd	r25, Z+7	; 0x07
     78a:	be 01       	movw	r22, r28
     78c:	49 e0       	ldi	r20, 0x09	; 9
     78e:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN17DallasTemperature13setResolutionEPhh>

	    Serial.print("Device 0 Resolution: ");
     792:	84 ec       	ldi	r24, 0xC4	; 196
     794:	94 e0       	ldi	r25, 0x04	; 4
     796:	63 e3       	ldi	r22, 0x33	; 51
     798:	72 e0       	ldi	r23, 0x02	; 2
     79a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
	    Serial.print(sensors->getResolution(deviceAddress), DEC);
     79e:	f8 01       	movw	r30, r16
     7a0:	86 81       	ldd	r24, Z+6	; 0x06
     7a2:	97 81       	ldd	r25, Z+7	; 0x07
     7a4:	be 01       	movw	r22, r28
     7a6:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN17DallasTemperature13getResolutionEPh>
     7aa:	68 2f       	mov	r22, r24
     7ac:	84 ec       	ldi	r24, 0xC4	; 196
     7ae:	94 e0       	ldi	r25, 0x04	; 4
     7b0:	4a e0       	ldi	r20, 0x0A	; 10
     7b2:	50 e0       	ldi	r21, 0x00	; 0
     7b4:	0e 94 d4 06 	call	0xda8	; 0xda8 <_ZN5Print5printEhi>
	    Serial.println();
     7b8:	84 ec       	ldi	r24, 0xC4	; 196
     7ba:	94 e0       	ldi	r25, 0x04	; 4
     7bc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

}
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	1f 91       	pop	r17
     7c6:	0f 91       	pop	r16
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	08 95       	ret

000007ce <freeRamMemory>:
extern void *__brkval;

#include "MemoryFree.h"

int freeRamMemory()
{
     7ce:	cf 93       	push	r28
     7d0:	df 93       	push	r29
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <freeRamMemory+0x6>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if((int)__brkval == 0)
     7d8:	80 91 c6 07 	lds	r24, 0x07C6
     7dc:	90 91 c7 07 	lds	r25, 0x07C7
     7e0:	9e 01       	movw	r18, r28
     7e2:	2f 5f       	subi	r18, 0xFF	; 255
     7e4:	3f 4f       	sbci	r19, 0xFF	; 255
     7e6:	00 97       	sbiw	r24, 0x00	; 0
     7e8:	19 f4       	brne	.+6      	; 0x7f0 <freeRamMemory+0x22>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
     7ea:	2a 5c       	subi	r18, 0xCA	; 202
     7ec:	37 40       	sbci	r19, 0x07	; 7
     7ee:	02 c0       	rjmp	.+4      	; 0x7f4 <freeRamMemory+0x26>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
     7f0:	28 1b       	sub	r18, r24
     7f2:	39 0b       	sbc	r19, r25
     7f4:	3a 83       	std	Y+2, r19	; 0x02
     7f6:	29 83       	std	Y+1, r18	; 0x01

  return free_memory;
}
     7f8:	89 81       	ldd	r24, Y+1	; 0x01
     7fa:	9a 81       	ldd	r25, Y+2	; 0x02
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     806:	fc 01       	movw	r30, r24
     808:	24 85       	ldd	r18, Z+12	; 0x0c
     80a:	35 85       	ldd	r19, Z+13	; 0x0d
     80c:	f9 01       	movw	r30, r18
     80e:	e0 5c       	subi	r30, 0xC0	; 192
     810:	ff 4f       	sbci	r31, 0xFF	; 255
     812:	80 81       	ld	r24, Z
     814:	91 81       	ldd	r25, Z+1	; 0x01
     816:	2e 5b       	subi	r18, 0xBE	; 190
     818:	3f 4f       	sbci	r19, 0xFF	; 255
     81a:	f9 01       	movw	r30, r18
     81c:	20 81       	ld	r18, Z
     81e:	31 81       	ldd	r19, Z+1	; 0x01
     820:	82 1b       	sub	r24, r18
     822:	93 0b       	sbc	r25, r19
     824:	8f 73       	andi	r24, 0x3F	; 63
     826:	90 70       	andi	r25, 0x00	; 0
}
     828:	08 95       	ret

0000082a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     82a:	fc 01       	movw	r30, r24
     82c:	44 85       	ldd	r20, Z+12	; 0x0c
     82e:	55 85       	ldd	r21, Z+13	; 0x0d
     830:	fa 01       	movw	r30, r20
     832:	e0 5c       	subi	r30, 0xC0	; 192
     834:	ff 4f       	sbci	r31, 0xFF	; 255
     836:	80 81       	ld	r24, Z
     838:	91 81       	ldd	r25, Z+1	; 0x01
     83a:	fa 01       	movw	r30, r20
     83c:	ee 5b       	subi	r30, 0xBE	; 190
     83e:	ff 4f       	sbci	r31, 0xFF	; 255
     840:	20 81       	ld	r18, Z
     842:	31 81       	ldd	r19, Z+1	; 0x01
     844:	82 17       	cp	r24, r18
     846:	93 07       	cpc	r25, r19
     848:	41 f0       	breq	.+16     	; 0x85a <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     84a:	01 90       	ld	r0, Z+
     84c:	f0 81       	ld	r31, Z
     84e:	e0 2d       	mov	r30, r0
     850:	e4 0f       	add	r30, r20
     852:	f5 1f       	adc	r31, r21
     854:	80 81       	ld	r24, Z
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     85a:	8f ef       	ldi	r24, 0xFF	; 255
     85c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     85e:	08 95       	ret

00000860 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     860:	fc 01       	movw	r30, r24
     862:	44 85       	ldd	r20, Z+12	; 0x0c
     864:	55 85       	ldd	r21, Z+13	; 0x0d
     866:	fa 01       	movw	r30, r20
     868:	e0 5c       	subi	r30, 0xC0	; 192
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	20 81       	ld	r18, Z
     86e:	31 81       	ldd	r19, Z+1	; 0x01
     870:	fa 01       	movw	r30, r20
     872:	ee 5b       	subi	r30, 0xBE	; 190
     874:	ff 4f       	sbci	r31, 0xFF	; 255
     876:	80 81       	ld	r24, Z
     878:	91 81       	ldd	r25, Z+1	; 0x01
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	79 f0       	breq	.+30     	; 0x89e <_ZN14HardwareSerial4readEv+0x3e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     880:	a0 81       	ld	r26, Z
     882:	b1 81       	ldd	r27, Z+1	; 0x01
     884:	a4 0f       	add	r26, r20
     886:	b5 1f       	adc	r27, r21
     888:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     88a:	20 81       	ld	r18, Z
     88c:	31 81       	ldd	r19, Z+1	; 0x01
     88e:	2f 5f       	subi	r18, 0xFF	; 255
     890:	3f 4f       	sbci	r19, 0xFF	; 255
     892:	2f 73       	andi	r18, 0x3F	; 63
     894:	30 70       	andi	r19, 0x00	; 0
     896:	31 83       	std	Z+1, r19	; 0x01
     898:	20 83       	st	Z, r18
    return c;
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     8a2:	08 95       	ret

000008a4 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     8a4:	dc 01       	movw	r26, r24
     8a6:	1e 96       	adiw	r26, 0x0e	; 14
     8a8:	ed 91       	ld	r30, X+
     8aa:	fc 91       	ld	r31, X
     8ac:	1f 97       	sbiw	r26, 0x0f	; 15
     8ae:	df 01       	movw	r26, r30
     8b0:	a0 5c       	subi	r26, 0xC0	; 192
     8b2:	bf 4f       	sbci	r27, 0xFF	; 255
     8b4:	ee 5b       	subi	r30, 0xBE	; 190
     8b6:	ff 4f       	sbci	r31, 0xFF	; 255
     8b8:	2d 91       	ld	r18, X+
     8ba:	3c 91       	ld	r19, X
     8bc:	11 97       	sbiw	r26, 0x01	; 1
     8be:	80 81       	ld	r24, Z
     8c0:	91 81       	ldd	r25, Z+1	; 0x01
     8c2:	28 17       	cp	r18, r24
     8c4:	39 07       	cpc	r19, r25
     8c6:	c1 f7       	brne	.-16     	; 0x8b8 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     8c8:	08 95       	ret

000008ca <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     8ca:	ef 92       	push	r14
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	ec 01       	movw	r28, r24
     8d8:	26 2f       	mov	r18, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     8da:	0e 85       	ldd	r16, Y+14	; 0x0e
     8dc:	1f 85       	ldd	r17, Y+15	; 0x0f
     8de:	30 e4       	ldi	r19, 0x40	; 64
     8e0:	e3 2e       	mov	r14, r19
     8e2:	f1 2c       	mov	r15, r1
     8e4:	e0 0e       	add	r14, r16
     8e6:	f1 1e       	adc	r15, r17
     8e8:	d7 01       	movw	r26, r14
     8ea:	8d 91       	ld	r24, X+
     8ec:	9c 91       	ld	r25, X
     8ee:	11 97       	sbiw	r26, 0x01	; 1
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	60 e4       	ldi	r22, 0x40	; 64
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	0e 94 c3 22 	call	0x4586	; 0x4586 <__divmodhi4>
     8fa:	ac 01       	movw	r20, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     8fc:	f8 01       	movw	r30, r16
     8fe:	ee 5b       	subi	r30, 0xBE	; 190
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	80 81       	ld	r24, Z
     904:	91 81       	ldd	r25, Z+1	; 0x01
     906:	48 17       	cp	r20, r24
     908:	59 07       	cpc	r21, r25
     90a:	d9 f3       	breq	.-10     	; 0x902 <__stack+0x3>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     90c:	d7 01       	movw	r26, r14
     90e:	ed 91       	ld	r30, X+
     910:	fc 91       	ld	r31, X
     912:	11 97       	sbiw	r26, 0x01	; 1
     914:	e0 0f       	add	r30, r16
     916:	f1 1f       	adc	r31, r17
     918:	20 83       	st	Z, r18
  _tx_buffer->head = i;
     91a:	ee 85       	ldd	r30, Y+14	; 0x0e
     91c:	ff 85       	ldd	r31, Y+15	; 0x0f
     91e:	e0 5c       	subi	r30, 0xC0	; 192
     920:	ff 4f       	sbci	r31, 0xFF	; 255
     922:	51 83       	std	Z+1, r21	; 0x01
     924:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
     926:	ee 89       	ldd	r30, Y+22	; 0x16
     928:	ff 89       	ldd	r31, Y+23	; 0x17
     92a:	20 81       	ld	r18, Z
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0d 8c       	ldd	r0, Y+29	; 0x1d
     932:	02 c0       	rjmp	.+4      	; 0x938 <__stack+0x39>
     934:	88 0f       	add	r24, r24
     936:	99 1f       	adc	r25, r25
     938:	0a 94       	dec	r0
     93a:	e2 f7       	brpl	.-8      	; 0x934 <__stack+0x35>
     93c:	28 2b       	or	r18, r24
     93e:	20 83       	st	Z, r18
  
  return 1;
}
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	08 95       	ret

00000952 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
     952:	08 95       	ret

00000954 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	8f 93       	push	r24
     966:	9f 93       	push	r25
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     96c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     970:	80 91 67 05 	lds	r24, 0x0567
     974:	90 91 68 05 	lds	r25, 0x0568
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	8f 73       	andi	r24, 0x3F	; 63
     97c:	90 70       	andi	r25, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     97e:	20 91 69 05 	lds	r18, 0x0569
     982:	30 91 6a 05 	lds	r19, 0x056A
     986:	82 17       	cp	r24, r18
     988:	93 07       	cpc	r25, r19
     98a:	59 f0       	breq	.+22     	; 0x9a2 <__vector_18+0x4e>
    buffer->buffer[buffer->head] = c;
     98c:	e0 91 67 05 	lds	r30, 0x0567
     990:	f0 91 68 05 	lds	r31, 0x0568
     994:	e9 5d       	subi	r30, 0xD9	; 217
     996:	fa 4f       	sbci	r31, 0xFA	; 250
     998:	40 83       	st	Z, r20
    buffer->head = i;
     99a:	90 93 68 05 	sts	0x0568, r25
     99e:	80 93 67 05 	sts	0x0567, r24
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
     9a2:	ff 91       	pop	r31
     9a4:	ef 91       	pop	r30
     9a6:	9f 91       	pop	r25
     9a8:	8f 91       	pop	r24
     9aa:	4f 91       	pop	r20
     9ac:	3f 91       	pop	r19
     9ae:	2f 91       	pop	r18
     9b0:	0f 90       	pop	r0
     9b2:	0f be       	out	0x3f, r0	; 63
     9b4:	0f 90       	pop	r0
     9b6:	1f 90       	pop	r1
     9b8:	18 95       	reti

000009ba <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
     9ba:	84 ec       	ldi	r24, 0xC4	; 196
     9bc:	94 e0       	ldi	r25, 0x04	; 4
     9be:	0e 94 03 04 	call	0x806	; 0x806 <_ZN14HardwareSerial9availableEv>
     9c2:	00 97       	sbiw	r24, 0x00	; 0
     9c4:	11 f0       	breq	.+4      	; 0x9ca <_Z14serialEventRunv+0x10>
     9c6:	0e 94 a9 04 	call	0x952	; 0x952 <_Z11serialEventv>
     9ca:	08 95       	ret

000009cc <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	2f 93       	push	r18
     9d8:	3f 93       	push	r19
     9da:	5f 93       	push	r21
     9dc:	6f 93       	push	r22
     9de:	7f 93       	push	r23
     9e0:	8f 93       	push	r24
     9e2:	9f 93       	push	r25
     9e4:	af 93       	push	r26
     9e6:	bf 93       	push	r27
     9e8:	ef 93       	push	r30
     9ea:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     9ec:	20 91 23 05 	lds	r18, 0x0523
     9f0:	30 91 24 05 	lds	r19, 0x0524
     9f4:	80 91 25 05 	lds	r24, 0x0525
     9f8:	90 91 26 05 	lds	r25, 0x0526
     9fc:	28 17       	cp	r18, r24
     9fe:	39 07       	cpc	r19, r25
     a00:	31 f4       	brne	.+12     	; 0xa0e <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     a02:	80 91 c1 00 	lds	r24, 0x00C1
     a06:	8f 7d       	andi	r24, 0xDF	; 223
     a08:	80 93 c1 00 	sts	0x00C1, r24
     a0c:	16 c0       	rjmp	.+44     	; 0xa3a <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     a0e:	e0 91 25 05 	lds	r30, 0x0525
     a12:	f0 91 26 05 	lds	r31, 0x0526
     a16:	ed 51       	subi	r30, 0x1D	; 29
     a18:	fb 4f       	sbci	r31, 0xFB	; 251
     a1a:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     a1c:	80 91 25 05 	lds	r24, 0x0525
     a20:	90 91 26 05 	lds	r25, 0x0526
     a24:	01 96       	adiw	r24, 0x01	; 1
     a26:	60 e4       	ldi	r22, 0x40	; 64
     a28:	70 e0       	ldi	r23, 0x00	; 0
     a2a:	0e 94 c3 22 	call	0x4586	; 0x4586 <__divmodhi4>
     a2e:	90 93 26 05 	sts	0x0526, r25
     a32:	80 93 25 05 	sts	0x0525, r24
	
  #if defined(UDR0)
    UDR0 = c;
     a36:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     a3a:	ff 91       	pop	r31
     a3c:	ef 91       	pop	r30
     a3e:	bf 91       	pop	r27
     a40:	af 91       	pop	r26
     a42:	9f 91       	pop	r25
     a44:	8f 91       	pop	r24
     a46:	7f 91       	pop	r23
     a48:	6f 91       	pop	r22
     a4a:	5f 91       	pop	r21
     a4c:	3f 91       	pop	r19
     a4e:	2f 91       	pop	r18
     a50:	0f 90       	pop	r0
     a52:	0f be       	out	0x3f, r0	; 63
     a54:	0f 90       	pop	r0
     a56:	1f 90       	pop	r1
     a58:	18 95       	reti

00000a5a <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     a5a:	bf 92       	push	r11
     a5c:	cf 92       	push	r12
     a5e:	df 92       	push	r13
     a60:	ef 92       	push	r14
     a62:	ff 92       	push	r15
     a64:	0f 93       	push	r16
     a66:	1f 93       	push	r17
     a68:	cf 93       	push	r28
     a6a:	df 93       	push	r29
     a6c:	ec 01       	movw	r28, r24
     a6e:	6a 01       	movw	r12, r20
     a70:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     a72:	bb 24       	eor	r11, r11
     a74:	b3 94       	inc	r11
     a76:	40 30       	cpi	r20, 0x00	; 0
     a78:	81 ee       	ldi	r24, 0xE1	; 225
     a7a:	58 07       	cpc	r21, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	68 07       	cpc	r22, r24
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	78 07       	cpc	r23, r24
     a84:	49 f4       	brne	.+18     	; 0xa98 <_ZN14HardwareSerial5beginEm+0x3e>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     a86:	bb 24       	eor	r11, r11
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     a88:	ec 89       	ldd	r30, Y+20	; 0x14
     a8a:	fd 89       	ldd	r31, Y+21	; 0x15
     a8c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     a8e:	60 e8       	ldi	r22, 0x80	; 128
     a90:	74 e8       	ldi	r23, 0x84	; 132
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	0f c0       	rjmp	.+30     	; 0xab6 <_ZN14HardwareSerial5beginEm+0x5c>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     a98:	ec 89       	ldd	r30, Y+20	; 0x14
     a9a:	fd 89       	ldd	r31, Y+21	; 0x15
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	0e 8c       	ldd	r0, Y+30	; 0x1e
     aa2:	02 c0       	rjmp	.+4      	; 0xaa8 <_ZN14HardwareSerial5beginEm+0x4e>
     aa4:	88 0f       	add	r24, r24
     aa6:	99 1f       	adc	r25, r25
     aa8:	0a 94       	dec	r0
     aaa:	e2 f7       	brpl	.-8      	; 0xaa4 <_ZN14HardwareSerial5beginEm+0x4a>
     aac:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     aae:	60 e0       	ldi	r22, 0x00	; 0
     ab0:	79 e0       	ldi	r23, 0x09	; 9
     ab2:	8d e3       	ldi	r24, 0x3D	; 61
     ab4:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     ab6:	a7 01       	movw	r20, r14
     ab8:	96 01       	movw	r18, r12
     aba:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
     abe:	89 01       	movw	r16, r18
     ac0:	9a 01       	movw	r18, r20
     ac2:	01 50       	subi	r16, 0x01	; 1
     ac4:	10 40       	sbci	r17, 0x00	; 0
     ac6:	20 40       	sbci	r18, 0x00	; 0
     ac8:	30 40       	sbci	r19, 0x00	; 0
     aca:	36 95       	lsr	r19
     acc:	27 95       	ror	r18
     ace:	17 95       	ror	r17
     ad0:	07 95       	ror	r16
  }
  
  if ((baud_setting > 4095) && use_u2x)
     ad2:	80 e1       	ldi	r24, 0x10	; 16
     ad4:	00 30       	cpi	r16, 0x00	; 0
     ad6:	18 07       	cpc	r17, r24
     ad8:	10 f0       	brcs	.+4      	; 0xade <_ZN14HardwareSerial5beginEm+0x84>
     ada:	bb 20       	and	r11, r11
     adc:	a1 f6       	brne	.-88     	; 0xa86 <_ZN14HardwareSerial5beginEm+0x2c>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     ade:	e8 89       	ldd	r30, Y+16	; 0x10
     ae0:	f9 89       	ldd	r31, Y+17	; 0x11
     ae2:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
     ae4:	ea 89       	ldd	r30, Y+18	; 0x12
     ae6:	fb 89       	ldd	r31, Y+19	; 0x13
     ae8:	00 83       	st	Z, r16

  sbi(*_ucsrb, _rxen);
     aea:	ee 89       	ldd	r30, Y+22	; 0x16
     aec:	ff 89       	ldd	r31, Y+23	; 0x17
     aee:	40 81       	ld	r20, Z
     af0:	21 e0       	ldi	r18, 0x01	; 1
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	c9 01       	movw	r24, r18
     af6:	0a 8c       	ldd	r0, Y+26	; 0x1a
     af8:	02 c0       	rjmp	.+4      	; 0xafe <_ZN14HardwareSerial5beginEm+0xa4>
     afa:	88 0f       	add	r24, r24
     afc:	99 1f       	adc	r25, r25
     afe:	0a 94       	dec	r0
     b00:	e2 f7       	brpl	.-8      	; 0xafa <_ZN14HardwareSerial5beginEm+0xa0>
     b02:	48 2b       	or	r20, r24
     b04:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     b06:	ee 89       	ldd	r30, Y+22	; 0x16
     b08:	ff 89       	ldd	r31, Y+23	; 0x17
     b0a:	40 81       	ld	r20, Z
     b0c:	c9 01       	movw	r24, r18
     b0e:	0b 8c       	ldd	r0, Y+27	; 0x1b
     b10:	02 c0       	rjmp	.+4      	; 0xb16 <_ZN14HardwareSerial5beginEm+0xbc>
     b12:	88 0f       	add	r24, r24
     b14:	99 1f       	adc	r25, r25
     b16:	0a 94       	dec	r0
     b18:	e2 f7       	brpl	.-8      	; 0xb12 <_ZN14HardwareSerial5beginEm+0xb8>
     b1a:	48 2b       	or	r20, r24
     b1c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     b1e:	ee 89       	ldd	r30, Y+22	; 0x16
     b20:	ff 89       	ldd	r31, Y+23	; 0x17
     b22:	40 81       	ld	r20, Z
     b24:	c9 01       	movw	r24, r18
     b26:	0c 8c       	ldd	r0, Y+28	; 0x1c
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN14HardwareSerial5beginEm+0xd4>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	0a 94       	dec	r0
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <_ZN14HardwareSerial5beginEm+0xd0>
     b32:	48 2b       	or	r20, r24
     b34:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     b36:	ee 89       	ldd	r30, Y+22	; 0x16
     b38:	ff 89       	ldd	r31, Y+23	; 0x17
     b3a:	80 81       	ld	r24, Z
     b3c:	0d 8c       	ldd	r0, Y+29	; 0x1d
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <_ZN14HardwareSerial5beginEm+0xea>
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	0a 94       	dec	r0
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <_ZN14HardwareSerial5beginEm+0xe6>
     b48:	20 95       	com	r18
     b4a:	28 23       	and	r18, r24
     b4c:	20 83       	st	Z, r18
}
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	bf 90       	pop	r11
     b60:	08 95       	ret

00000b62 <_GLOBAL__sub_I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     b62:	10 92 c7 04 	sts	0x04C7, r1
     b66:	10 92 c6 04 	sts	0x04C6, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     b6a:	88 ee       	ldi	r24, 0xE8	; 232
     b6c:	93 e0       	ldi	r25, 0x03	; 3
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	80 93 c8 04 	sts	0x04C8, r24
     b76:	90 93 c9 04 	sts	0x04C9, r25
     b7a:	a0 93 ca 04 	sts	0x04CA, r26
     b7e:	b0 93 cb 04 	sts	0x04CB, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     b82:	e6 ec       	ldi	r30, 0xC6	; 198
     b84:	f4 e0       	ldi	r31, 0x04	; 4
     b86:	82 e5       	ldi	r24, 0x52	; 82
     b88:	94 e0       	ldi	r25, 0x04	; 4
     b8a:	92 93       	st	-Z, r25
     b8c:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     b8e:	87 e2       	ldi	r24, 0x27	; 39
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	95 87       	std	Z+13, r25	; 0x0d
     b94:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     b96:	83 ee       	ldi	r24, 0xE3	; 227
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	97 87       	std	Z+15, r25	; 0x0f
     b9c:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     b9e:	85 ec       	ldi	r24, 0xC5	; 197
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	91 8b       	std	Z+17, r25	; 0x11
     ba4:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     ba6:	84 ec       	ldi	r24, 0xC4	; 196
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	93 8b       	std	Z+19, r25	; 0x13
     bac:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     bae:	80 ec       	ldi	r24, 0xC0	; 192
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	95 8b       	std	Z+21, r25	; 0x15
     bb4:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     bb6:	81 ec       	ldi	r24, 0xC1	; 193
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	97 8b       	std	Z+23, r25	; 0x17
     bbc:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     bbe:	86 ec       	ldi	r24, 0xC6	; 198
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	91 8f       	std	Z+25, r25	; 0x19
     bc4:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     bc6:	84 e0       	ldi	r24, 0x04	; 4
     bc8:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     bd2:	85 e0       	ldi	r24, 0x05	; 5
     bd4:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     bda:	08 95       	ret

00000bdc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     bdc:	cf 92       	push	r12
     bde:	df 92       	push	r13
     be0:	ef 92       	push	r14
     be2:	ff 92       	push	r15
     be4:	0f 93       	push	r16
     be6:	1f 93       	push	r17
     be8:	cf 93       	push	r28
     bea:	df 93       	push	r29
     bec:	6c 01       	movw	r12, r24
     bee:	7b 01       	movw	r14, r22
     bf0:	ea 01       	movw	r28, r20
  size_t n = 0;
     bf2:	00 e0       	ldi	r16, 0x00	; 0
     bf4:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
     bf6:	0e c0       	rjmp	.+28     	; 0xc14 <_ZN5Print5writeEPKhj+0x38>
    n += write(*buffer++);
     bf8:	d7 01       	movw	r26, r14
     bfa:	6d 91       	ld	r22, X+
     bfc:	7d 01       	movw	r14, r26
     bfe:	d6 01       	movw	r26, r12
     c00:	ed 91       	ld	r30, X+
     c02:	fc 91       	ld	r31, X
     c04:	01 90       	ld	r0, Z+
     c06:	f0 81       	ld	r31, Z
     c08:	e0 2d       	mov	r30, r0
     c0a:	c6 01       	movw	r24, r12
     c0c:	09 95       	icall
     c0e:	08 0f       	add	r16, r24
     c10:	19 1f       	adc	r17, r25
     c12:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     c14:	20 97       	sbiw	r28, 0x00	; 0
     c16:	81 f7       	brne	.-32     	; 0xbf8 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     c18:	c8 01       	movw	r24, r16
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	1f 91       	pop	r17
     c20:	0f 91       	pop	r16
     c22:	ff 90       	pop	r15
     c24:	ef 90       	pop	r14
     c26:	df 90       	pop	r13
     c28:	cf 90       	pop	r12
     c2a:	08 95       	ret

00000c2c <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
     c2c:	db 01       	movw	r26, r22
     c2e:	0d 90       	ld	r0, X+
     c30:	00 20       	and	r0, r0
     c32:	e9 f7       	brne	.-6      	; 0xc2e <_ZN5Print5printEPKc+0x2>
     c34:	ad 01       	movw	r20, r26
     c36:	41 50       	subi	r20, 0x01	; 1
     c38:	50 40       	sbci	r21, 0x00	; 0
     c3a:	46 1b       	sub	r20, r22
     c3c:	57 0b       	sbc	r21, r23
     c3e:	dc 01       	movw	r26, r24
     c40:	ed 91       	ld	r30, X+
     c42:	fc 91       	ld	r31, X
     c44:	02 80       	ldd	r0, Z+2	; 0x02
     c46:	f3 81       	ldd	r31, Z+3	; 0x03
     c48:	e0 2d       	mov	r30, r0
     c4a:	09 95       	icall
}

size_t Print::print(const char str[])
{
  return write(str);
}
     c4c:	08 95       	ret

00000c4e <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
     c4e:	dc 01       	movw	r26, r24
     c50:	ed 91       	ld	r30, X+
     c52:	fc 91       	ld	r31, X
     c54:	01 90       	ld	r0, Z+
     c56:	f0 81       	ld	r31, Z
     c58:	e0 2d       	mov	r30, r0
     c5a:	09 95       	icall
}
     c5c:	08 95       	ret

00000c5e <_ZN5Print7printlnEv>:
{
  return x.printTo(*this);
}

size_t Print::println(void)
{
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	8c 01       	movw	r16, r24
  size_t n = print('\r');
     c68:	6d e0       	ldi	r22, 0x0D	; 13
     c6a:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN5Print5printEc>
     c6e:	ec 01       	movw	r28, r24
  n += print('\n');
     c70:	c8 01       	movw	r24, r16
     c72:	6a e0       	ldi	r22, 0x0A	; 10
     c74:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN5Print5printEc>
     c78:	8c 0f       	add	r24, r28
     c7a:	9d 1f       	adc	r25, r29
  return n;
}
     c7c:	df 91       	pop	r29
     c7e:	cf 91       	pop	r28
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	08 95       	ret

00000c86 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(const char c[])
{
     c86:	0f 93       	push	r16
     c88:	1f 93       	push	r17
     c8a:	cf 93       	push	r28
     c8c:	df 93       	push	r29
     c8e:	8c 01       	movw	r16, r24
  size_t n = print(c);
     c90:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     c94:	ec 01       	movw	r28, r24
  n += println();
     c96:	c8 01       	movw	r24, r16
     c98:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
     c9c:	8c 0f       	add	r24, r28
     c9e:	9d 1f       	adc	r25, r29
  return n;
}
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	1f 91       	pop	r17
     ca6:	0f 91       	pop	r16
     ca8:	08 95       	ret

00000caa <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
     caa:	6f 92       	push	r6
     cac:	7f 92       	push	r7
     cae:	8f 92       	push	r8
     cb0:	9f 92       	push	r9
     cb2:	af 92       	push	r10
     cb4:	bf 92       	push	r11
     cb6:	cf 92       	push	r12
     cb8:	df 92       	push	r13
     cba:	ef 92       	push	r14
     cbc:	ff 92       	push	r15
     cbe:	0f 93       	push	r16
     cc0:	1f 93       	push	r17
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62
     cca:	a1 97       	sbiw	r28, 0x21	; 33
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	3c 01       	movw	r6, r24
     cd8:	e4 2e       	mov	r14, r20
     cda:	cb 01       	movw	r24, r22
     cdc:	f2 2e       	mov	r15, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
     cde:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
     ce0:	21 e0       	ldi	r18, 0x01	; 1
     ce2:	2f 15       	cp	r18, r15
     ce4:	10 f0       	brcs	.+4      	; 0xcea <_ZN5Print11printNumberEmh+0x40>
     ce6:	3a e0       	ldi	r19, 0x0A	; 10
     ce8:	f3 2e       	mov	r15, r19
     cea:	21 e2       	ldi	r18, 0x21	; 33
     cec:	c2 2e       	mov	r12, r18
     cee:	d1 2c       	mov	r13, r1
     cf0:	cc 0e       	add	r12, r28
     cf2:	dd 1e       	adc	r13, r29

  do {
    unsigned long m = n;
    n /= base;
     cf4:	8f 2c       	mov	r8, r15
     cf6:	99 24       	eor	r9, r9
     cf8:	aa 24       	eor	r10, r10
     cfa:	bb 24       	eor	r11, r11
     cfc:	03 c0       	rjmp	.+6      	; 0xd04 <_ZN5Print11printNumberEmh+0x5a>
     cfe:	e0 2e       	mov	r14, r16
     d00:	51 2f       	mov	r21, r17
     d02:	c9 01       	movw	r24, r18
     d04:	6e 2d       	mov	r22, r14
     d06:	75 2f       	mov	r23, r21
     d08:	a5 01       	movw	r20, r10
     d0a:	94 01       	movw	r18, r8
     d0c:	0e 94 d6 22 	call	0x45ac	; 0x45ac <__udivmodsi4>
     d10:	89 01       	movw	r16, r18
     d12:	9a 01       	movw	r18, r20
    char c = m - base * n;
     d14:	f0 9e       	mul	r15, r16
     d16:	80 2d       	mov	r24, r0
     d18:	11 24       	eor	r1, r1
     d1a:	e8 1a       	sub	r14, r24
     d1c:	8e 2d       	mov	r24, r14
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
     d1e:	08 94       	sec
     d20:	c1 08       	sbc	r12, r1
     d22:	d1 08       	sbc	r13, r1
     d24:	8a 30       	cpi	r24, 0x0A	; 10
     d26:	14 f4       	brge	.+4      	; 0xd2c <_ZN5Print11printNumberEmh+0x82>
     d28:	80 5d       	subi	r24, 0xD0	; 208
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <_ZN5Print11printNumberEmh+0x84>
     d2c:	89 5c       	subi	r24, 0xC9	; 201
     d2e:	d6 01       	movw	r26, r12
     d30:	8c 93       	st	X, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
     d32:	01 15       	cp	r16, r1
     d34:	11 05       	cpc	r17, r1
     d36:	21 05       	cpc	r18, r1
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f7       	brne	.-62     	; 0xcfe <_ZN5Print11printNumberEmh+0x54>
     d3c:	d6 01       	movw	r26, r12
     d3e:	0d 90       	ld	r0, X+
     d40:	00 20       	and	r0, r0
     d42:	e9 f7       	brne	.-6      	; 0xd3e <_ZN5Print11printNumberEmh+0x94>
     d44:	ad 01       	movw	r20, r26
     d46:	41 50       	subi	r20, 0x01	; 1
     d48:	50 40       	sbci	r21, 0x00	; 0
     d4a:	4c 19       	sub	r20, r12
     d4c:	5d 09       	sbc	r21, r13
     d4e:	d3 01       	movw	r26, r6
     d50:	ed 91       	ld	r30, X+
     d52:	fc 91       	ld	r31, X
     d54:	02 80       	ldd	r0, Z+2	; 0x02
     d56:	f3 81       	ldd	r31, Z+3	; 0x03
     d58:	e0 2d       	mov	r30, r0
     d5a:	c3 01       	movw	r24, r6
     d5c:	b6 01       	movw	r22, r12
     d5e:	09 95       	icall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
     d60:	a1 96       	adiw	r28, 0x21	; 33
     d62:	0f b6       	in	r0, 0x3f	; 63
     d64:	f8 94       	cli
     d66:	de bf       	out	0x3e, r29	; 62
     d68:	0f be       	out	0x3f, r0	; 63
     d6a:	cd bf       	out	0x3d, r28	; 61
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	08 95       	ret

00000d8a <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
     d8a:	21 15       	cp	r18, r1
     d8c:	31 05       	cpc	r19, r1
     d8e:	49 f4       	brne	.+18     	; 0xda2 <_ZN5Print5printEmi+0x18>
     d90:	dc 01       	movw	r26, r24
     d92:	ed 91       	ld	r30, X+
     d94:	fc 91       	ld	r31, X
     d96:	01 90       	ld	r0, Z+
     d98:	f0 81       	ld	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	64 2f       	mov	r22, r20
     d9e:	09 95       	icall
     da0:	08 95       	ret
  else return printNumber(n, base);
     da2:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print11printNumberEmh>
}
     da6:	08 95       	ret

00000da8 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
     da8:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
     daa:	46 2f       	mov	r20, r22
     dac:	50 e0       	ldi	r21, 0x00	; 0
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	70 e0       	ldi	r23, 0x00	; 0
     db2:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5Print5printEmi>
}
     db6:	08 95       	ret

00000db8 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     db8:	cf 92       	push	r12
     dba:	df 92       	push	r13
     dbc:	ef 92       	push	r14
     dbe:	ff 92       	push	r15
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	ec 01       	movw	r28, r24
     dca:	6a 01       	movw	r12, r20
     dcc:	7b 01       	movw	r14, r22
  if (base == 0) {
     dce:	21 15       	cp	r18, r1
     dd0:	31 05       	cpc	r19, r1
     dd2:	41 f4       	brne	.+16     	; 0xde4 <_ZN5Print5printEli+0x2c>
    return write(n);
     dd4:	e8 81       	ld	r30, Y
     dd6:	f9 81       	ldd	r31, Y+1	; 0x01
     dd8:	01 90       	ld	r0, Z+
     dda:	f0 81       	ld	r31, Z
     ddc:	e0 2d       	mov	r30, r0
     dde:	64 2f       	mov	r22, r20
     de0:	09 95       	icall
     de2:	1a c0       	rjmp	.+52     	; 0xe18 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
     de4:	2a 30       	cpi	r18, 0x0A	; 10
     de6:	31 05       	cpc	r19, r1
     de8:	a9 f4       	brne	.+42     	; 0xe14 <_ZN5Print5printEli+0x5c>
    if (n < 0) {
     dea:	77 ff       	sbrs	r23, 7
     dec:	12 c0       	rjmp	.+36     	; 0xe12 <_ZN5Print5printEli+0x5a>
      int t = print('-');
     dee:	6d e2       	ldi	r22, 0x2D	; 45
     df0:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN5Print5printEc>
     df4:	8c 01       	movw	r16, r24
      n = -n;
     df6:	44 27       	eor	r20, r20
     df8:	55 27       	eor	r21, r21
     dfa:	ba 01       	movw	r22, r20
     dfc:	4c 19       	sub	r20, r12
     dfe:	5d 09       	sbc	r21, r13
     e00:	6e 09       	sbc	r22, r14
     e02:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
     e04:	ce 01       	movw	r24, r28
     e06:	2a e0       	ldi	r18, 0x0A	; 10
     e08:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print11printNumberEmh>
     e0c:	80 0f       	add	r24, r16
     e0e:	91 1f       	adc	r25, r17
     e10:	03 c0       	rjmp	.+6      	; 0xe18 <_ZN5Print5printEli+0x60>
    }
    return printNumber(n, 10);
     e12:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
     e14:	0e 94 55 06 	call	0xcaa	; 0xcaa <_ZN5Print11printNumberEmh>
  }
}
     e18:	df 91       	pop	r29
     e1a:	cf 91       	pop	r28
     e1c:	1f 91       	pop	r17
     e1e:	0f 91       	pop	r16
     e20:	ff 90       	pop	r15
     e22:	ef 90       	pop	r14
     e24:	df 90       	pop	r13
     e26:	cf 90       	pop	r12
     e28:	08 95       	ret

00000e2a <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     e2a:	9a 01       	movw	r18, r20
  return print((long) n, base);
     e2c:	fb 01       	movw	r30, r22
     e2e:	af 01       	movw	r20, r30
     e30:	66 27       	eor	r22, r22
     e32:	57 fd       	sbrc	r21, 7
     e34:	60 95       	com	r22
     e36:	76 2f       	mov	r23, r22
     e38:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN5Print5printEli>
}
     e3c:	08 95       	ret

00000e3e <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
     e3e:	6f 92       	push	r6
     e40:	7f 92       	push	r7
     e42:	9f 92       	push	r9
     e44:	af 92       	push	r10
     e46:	bf 92       	push	r11
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	3c 01       	movw	r6, r24
     e5a:	6a 01       	movw	r12, r20
     e5c:	7b 01       	movw	r14, r22
     e5e:	92 2e       	mov	r9, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
     e60:	cb 01       	movw	r24, r22
     e62:	ba 01       	movw	r22, r20
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	40 e0       	ldi	r20, 0x00	; 0
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	0e 94 f2 20 	call	0x41e4	; 0x41e4 <__cmpsf2>
     e70:	87 ff       	sbrs	r24, 7
     e72:	0a c0       	rjmp	.+20     	; 0xe88 <_ZN5Print10printFloatEdh+0x4a>
  {
     n += print('-');
     e74:	c3 01       	movw	r24, r6
     e76:	6d e2       	ldi	r22, 0x2D	; 45
     e78:	0e 94 27 06 	call	0xc4e	; 0xc4e <_ZN5Print5printEc>
     e7c:	5c 01       	movw	r10, r24
     number = -number;
     e7e:	f7 fa       	bst	r15, 7
     e80:	f0 94       	com	r15
     e82:	f7 f8       	bld	r15, 7
     e84:	f0 94       	com	r15
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <_ZN5Print10printFloatEdh+0x4e>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
     e88:	aa 24       	eor	r10, r10
     e8a:	bb 24       	eor	r11, r11
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     e8c:	c0 e0       	ldi	r28, 0x00	; 0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
     e96:	13 c0       	rjmp	.+38     	; 0xebe <_ZN5Print10printFloatEdh+0x80>
    rounding /= 10.0;
     e98:	fa 01       	movw	r30, r20
     e9a:	b9 01       	movw	r22, r18
     e9c:	8f 2f       	mov	r24, r31
     e9e:	94 2f       	mov	r25, r20
     ea0:	a7 2f       	mov	r26, r23
     ea2:	b2 2f       	mov	r27, r18
     ea4:	bc 01       	movw	r22, r24
     ea6:	cd 01       	movw	r24, r26
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e2       	ldi	r20, 0x20	; 32
     eae:	51 e4       	ldi	r21, 0x41	; 65
     eb0:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__divsf3>
     eb4:	56 2f       	mov	r21, r22
     eb6:	47 2f       	mov	r20, r23
     eb8:	38 2f       	mov	r19, r24
     eba:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
     ebc:	cf 5f       	subi	r28, 0xFF	; 255
     ebe:	c9 15       	cp	r28, r9
     ec0:	59 f7       	brne	.-42     	; 0xe98 <_ZN5Print10printFloatEdh+0x5a>
    rounding /= 10.0;
  
  number += rounding;
     ec2:	c7 01       	movw	r24, r14
     ec4:	b6 01       	movw	r22, r12
     ec6:	da 01       	movw	r26, r20
     ec8:	f9 01       	movw	r30, r18
     eca:	0b 2f       	mov	r16, r27
     ecc:	14 2f       	mov	r17, r20
     ece:	2f 2f       	mov	r18, r31
     ed0:	3e 2f       	mov	r19, r30
     ed2:	a9 01       	movw	r20, r18
     ed4:	98 01       	movw	r18, r16
     ed6:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
     eda:	d6 2e       	mov	r13, r22
     edc:	e7 2e       	mov	r14, r23
     ede:	f8 2e       	mov	r15, r24
     ee0:	19 2f       	mov	r17, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
     ee2:	86 2f       	mov	r24, r22
     ee4:	9e 2d       	mov	r25, r14
     ee6:	af 2d       	mov	r26, r15
     ee8:	b1 2f       	mov	r27, r17
     eea:	bc 01       	movw	r22, r24
     eec:	cd 01       	movw	r24, r26
     eee:	0e 94 63 21 	call	0x42c6	; 0x42c6 <__fixunssfsi>
     ef2:	c6 2e       	mov	r12, r22
     ef4:	07 2f       	mov	r16, r23
     ef6:	ec 01       	movw	r28, r24
  double remainder = number - (double)int_part;
     ef8:	0e 94 8f 21 	call	0x431e	; 0x431e <__floatunsisf>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	8d 2d       	mov	r24, r13
     f02:	9e 2d       	mov	r25, r14
     f04:	af 2d       	mov	r26, r15
     f06:	b1 2f       	mov	r27, r17
     f08:	bc 01       	movw	r22, r24
     f0a:	cd 01       	movw	r24, r26
     f0c:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     f10:	d6 2e       	mov	r13, r22
     f12:	e7 2e       	mov	r14, r23
     f14:	f8 2e       	mov	r15, r24
     f16:	19 2f       	mov	r17, r25
  n += print(int_part);
     f18:	c3 01       	movw	r24, r6
     f1a:	4c 2d       	mov	r20, r12
     f1c:	50 2f       	mov	r21, r16
     f1e:	be 01       	movw	r22, r28
     f20:	2a e0       	ldi	r18, 0x0A	; 10
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5Print5printEmi>
     f28:	ec 01       	movw	r28, r24
     f2a:	ca 0d       	add	r28, r10
     f2c:	db 1d       	adc	r29, r11

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
     f2e:	99 20       	and	r9, r9
     f30:	09 f4       	brne	.+2      	; 0xf34 <_ZN5Print10printFloatEdh+0xf6>
     f32:	46 c0       	rjmp	.+140    	; 0xfc0 <_ZN5Print10printFloatEdh+0x182>
    n += print("."); 
     f34:	c3 01       	movw	r24, r6
     f36:	69 e4       	ldi	r22, 0x49	; 73
     f38:	72 e0       	ldi	r23, 0x02	; 2
     f3a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
     f3e:	c8 0f       	add	r28, r24
     f40:	d9 1f       	adc	r29, r25
     f42:	3e c0       	rjmp	.+124    	; 0xfc0 <_ZN5Print10printFloatEdh+0x182>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
     f44:	8d 2d       	mov	r24, r13
     f46:	9e 2d       	mov	r25, r14
     f48:	af 2d       	mov	r26, r15
     f4a:	b1 2f       	mov	r27, r17
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e2       	ldi	r20, 0x20	; 32
     f56:	51 e4       	ldi	r21, 0x41	; 65
     f58:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
     f5c:	16 2f       	mov	r17, r22
     f5e:	07 2f       	mov	r16, r23
     f60:	b8 2e       	mov	r11, r24
     f62:	a9 2e       	mov	r10, r25
    int toPrint = int(remainder);
     f64:	a8 01       	movw	r20, r16
     f66:	95 01       	movw	r18, r10
     f68:	85 2f       	mov	r24, r21
     f6a:	94 2f       	mov	r25, r20
     f6c:	a3 2f       	mov	r26, r19
     f6e:	b2 2f       	mov	r27, r18
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 5e 21 	call	0x42bc	; 0x42bc <__fixsfsi>
     f78:	6b 01       	movw	r12, r22
     f7a:	7c 01       	movw	r14, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
     f7c:	ee 24       	eor	r14, r14
     f7e:	d7 fc       	sbrc	r13, 7
     f80:	e0 94       	com	r14
     f82:	fe 2c       	mov	r15, r14
     f84:	c3 01       	movw	r24, r6
     f86:	b7 01       	movw	r22, r14
     f88:	a6 01       	movw	r20, r12
     f8a:	2a e0       	ldi	r18, 0x0A	; 10
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
     f92:	c8 0f       	add	r28, r24
     f94:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
     f96:	c7 01       	movw	r24, r14
     f98:	b6 01       	movw	r22, r12
     f9a:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	f8 01       	movw	r30, r16
     fa4:	b5 01       	movw	r22, r10
     fa6:	8f 2f       	mov	r24, r31
     fa8:	9e 2f       	mov	r25, r30
     faa:	a7 2f       	mov	r26, r23
     fac:	b6 2f       	mov	r27, r22
     fae:	bc 01       	movw	r22, r24
     fb0:	cd 01       	movw	r24, r26
     fb2:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
     fb6:	d6 2e       	mov	r13, r22
     fb8:	e7 2e       	mov	r14, r23
     fba:	f8 2e       	mov	r15, r24
     fbc:	19 2f       	mov	r17, r25
     fbe:	9a 94       	dec	r9
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
     fc0:	99 20       	and	r9, r9
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <_ZN5Print10printFloatEdh+0x188>
     fc4:	bf cf       	rjmp	.-130    	; 0xf44 <_ZN5Print10printFloatEdh+0x106>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
     fc6:	ce 01       	movw	r24, r28
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	0f 91       	pop	r16
     fd0:	ff 90       	pop	r15
     fd2:	ef 90       	pop	r14
     fd4:	df 90       	pop	r13
     fd6:	cf 90       	pop	r12
     fd8:	bf 90       	pop	r11
     fda:	af 90       	pop	r10
     fdc:	9f 90       	pop	r9
     fde:	7f 90       	pop	r7
     fe0:	6f 90       	pop	r6
     fe2:	08 95       	ret

00000fe4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
     fe4:	0e 94 1f 07 	call	0xe3e	; 0xe3e <_ZN5Print10printFloatEdh>
}
     fe8:	08 95       	ret

00000fea <main>:
#include <Arduino.h>

int main(void)
{
	init();
     fea:	0e 94 c1 08 	call	0x1182	; 0x1182 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
     fee:	0e 94 0b 02 	call	0x416	; 0x416 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     ff2:	cd ed       	ldi	r28, 0xDD	; 221
     ff4:	d4 e0       	ldi	r29, 0x04	; 4
#endif
	
	setup();
    
	for (;;) {
		loop();
     ff6:	0e 94 0d 01 	call	0x21a	; 0x21a <loop>
		if (serialEventRun) serialEventRun();
     ffa:	20 97       	sbiw	r28, 0x00	; 0
     ffc:	e1 f3       	breq	.-8      	; 0xff6 <main+0xc>
     ffe:	0e 94 dd 04 	call	0x9ba	; 0x9ba <_Z14serialEventRunv>
    1002:	f9 cf       	rjmp	.-14     	; 0xff6 <main+0xc>

00001004 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    1004:	0e 94 12 23 	call	0x4624	; 0x4624 <malloc>
}
    1008:	08 95       	ret

0000100a <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    100a:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>
} 
    100e:	08 95       	ret

00001010 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1010:	1f 92       	push	r1
    1012:	0f 92       	push	r0
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	0f 92       	push	r0
    1018:	11 24       	eor	r1, r1
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1026:	80 91 6b 05 	lds	r24, 0x056B
    102a:	90 91 6c 05 	lds	r25, 0x056C
    102e:	a0 91 6d 05 	lds	r26, 0x056D
    1032:	b0 91 6e 05 	lds	r27, 0x056E
	unsigned char f = timer0_fract;
    1036:	30 91 73 05 	lds	r19, 0x0573

	m += MILLIS_INC;
	f += FRACT_INC;
    103a:	23 2f       	mov	r18, r19
    103c:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    103e:	2d 37       	cpi	r18, 0x7D	; 125
    1040:	20 f4       	brcc	.+8      	; 0x104a <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	a1 1d       	adc	r26, r1
    1046:	b1 1d       	adc	r27, r1
    1048:	05 c0       	rjmp	.+10     	; 0x1054 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    104a:	23 2f       	mov	r18, r19
    104c:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	a1 1d       	adc	r26, r1
    1052:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1054:	20 93 73 05 	sts	0x0573, r18
	timer0_millis = m;
    1058:	80 93 6b 05 	sts	0x056B, r24
    105c:	90 93 6c 05 	sts	0x056C, r25
    1060:	a0 93 6d 05 	sts	0x056D, r26
    1064:	b0 93 6e 05 	sts	0x056E, r27
	timer0_overflow_count++;
    1068:	80 91 6f 05 	lds	r24, 0x056F
    106c:	90 91 70 05 	lds	r25, 0x0570
    1070:	a0 91 71 05 	lds	r26, 0x0571
    1074:	b0 91 72 05 	lds	r27, 0x0572
    1078:	01 96       	adiw	r24, 0x01	; 1
    107a:	a1 1d       	adc	r26, r1
    107c:	b1 1d       	adc	r27, r1
    107e:	80 93 6f 05 	sts	0x056F, r24
    1082:	90 93 70 05 	sts	0x0570, r25
    1086:	a0 93 71 05 	sts	0x0571, r26
    108a:	b0 93 72 05 	sts	0x0572, r27
}
    108e:	bf 91       	pop	r27
    1090:	af 91       	pop	r26
    1092:	9f 91       	pop	r25
    1094:	8f 91       	pop	r24
    1096:	3f 91       	pop	r19
    1098:	2f 91       	pop	r18
    109a:	0f 90       	pop	r0
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	0f 90       	pop	r0
    10a0:	1f 90       	pop	r1
    10a2:	18 95       	reti

000010a4 <millis>:

unsigned long millis()
{
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    10a8:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    10aa:	f8 94       	cli
	m = timer0_millis;
    10ac:	00 91 6b 05 	lds	r16, 0x056B
    10b0:	10 91 6c 05 	lds	r17, 0x056C
    10b4:	20 91 6d 05 	lds	r18, 0x056D
    10b8:	30 91 6e 05 	lds	r19, 0x056E
	SREG = oldSREG;
    10bc:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    10be:	b8 01       	movw	r22, r16
    10c0:	c9 01       	movw	r24, r18
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	08 95       	ret

000010c8 <micros>:

unsigned long micros() {
    10c8:	0f 93       	push	r16
    10ca:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10cc:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    10ce:	f8 94       	cli
	m = timer0_overflow_count;
    10d0:	00 91 6f 05 	lds	r16, 0x056F
    10d4:	10 91 70 05 	lds	r17, 0x0570
    10d8:	20 91 71 05 	lds	r18, 0x0571
    10dc:	30 91 72 05 	lds	r19, 0x0572
#if defined(TCNT0)
	t = TCNT0;
    10e0:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    10e2:	a8 9b       	sbis	0x15, 0	; 21
    10e4:	06 c0       	rjmp	.+12     	; 0x10f2 <micros+0x2a>
    10e6:	8f 3f       	cpi	r24, 0xFF	; 255
    10e8:	21 f0       	breq	.+8      	; 0x10f2 <micros+0x2a>
		m++;
    10ea:	0f 5f       	subi	r16, 0xFF	; 255
    10ec:	1f 4f       	sbci	r17, 0xFF	; 255
    10ee:	2f 4f       	sbci	r18, 0xFF	; 255
    10f0:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    10f2:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    10f4:	32 2f       	mov	r19, r18
    10f6:	21 2f       	mov	r18, r17
    10f8:	10 2f       	mov	r17, r16
    10fa:	00 27       	eor	r16, r16
    10fc:	08 0f       	add	r16, r24
    10fe:	11 1d       	adc	r17, r1
    1100:	21 1d       	adc	r18, r1
    1102:	31 1d       	adc	r19, r1
    1104:	42 e0       	ldi	r20, 0x02	; 2
    1106:	00 0f       	add	r16, r16
    1108:	11 1f       	adc	r17, r17
    110a:	22 1f       	adc	r18, r18
    110c:	33 1f       	adc	r19, r19
    110e:	4a 95       	dec	r20
    1110:	d1 f7       	brne	.-12     	; 0x1106 <micros+0x3e>
}
    1112:	b8 01       	movw	r22, r16
    1114:	c9 01       	movw	r24, r18
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <delay>:

void delay(unsigned long ms)
{
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	cf 93       	push	r28
    1126:	df 93       	push	r29
    1128:	6b 01       	movw	r12, r22
    112a:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    112c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <micros>
    1130:	dc 01       	movw	r26, r24
    1132:	cb 01       	movw	r24, r22
    1134:	ec 01       	movw	r28, r24

	while (ms > 0) {
    1136:	0f c0       	rjmp	.+30     	; 0x1156 <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    1138:	0e 94 64 08 	call	0x10c8	; 0x10c8 <micros>
    113c:	6c 1b       	sub	r22, r28
    113e:	7d 0b       	sbc	r23, r29
    1140:	83 e0       	ldi	r24, 0x03	; 3
    1142:	68 3e       	cpi	r22, 0xE8	; 232
    1144:	78 07       	cpc	r23, r24
    1146:	38 f0       	brcs	.+14     	; 0x1156 <delay+0x3a>
			ms--;
    1148:	08 94       	sec
    114a:	c1 08       	sbc	r12, r1
    114c:	d1 08       	sbc	r13, r1
    114e:	e1 08       	sbc	r14, r1
    1150:	f1 08       	sbc	r15, r1
			start += 1000;
    1152:	c8 51       	subi	r28, 0x18	; 24
    1154:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1156:	c1 14       	cp	r12, r1
    1158:	d1 04       	cpc	r13, r1
    115a:	e1 04       	cpc	r14, r1
    115c:	f1 04       	cpc	r15, r1
    115e:	61 f7       	brne	.-40     	; 0x1138 <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    1160:	df 91       	pop	r29
    1162:	cf 91       	pop	r28
    1164:	ff 90       	pop	r15
    1166:	ef 90       	pop	r14
    1168:	df 90       	pop	r13
    116a:	cf 90       	pop	r12
    116c:	08 95       	ret

0000116e <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	39 f0       	breq	.+14     	; 0x1180 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    1172:	88 0f       	add	r24, r24
    1174:	99 1f       	adc	r25, r25
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    117a:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	f1 f7       	brne	.-4      	; 0x117c <delayMicroseconds+0xe>
    1180:	08 95       	ret

00001182 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    1182:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    1184:	84 b5       	in	r24, 0x24	; 36
    1186:	82 60       	ori	r24, 0x02	; 2
    1188:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    118a:	84 b5       	in	r24, 0x24	; 36
    118c:	81 60       	ori	r24, 0x01	; 1
    118e:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    1190:	85 b5       	in	r24, 0x25	; 37
    1192:	82 60       	ori	r24, 0x02	; 2
    1194:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    1196:	85 b5       	in	r24, 0x25	; 37
    1198:	81 60       	ori	r24, 0x01	; 1
    119a:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    119c:	ee e6       	ldi	r30, 0x6E	; 110
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	81 60       	ori	r24, 0x01	; 1
    11a4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11a6:	e1 e8       	ldi	r30, 0x81	; 129
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11ac:	80 81       	ld	r24, Z
    11ae:	82 60       	ori	r24, 0x02	; 2
    11b0:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11b2:	80 81       	ld	r24, Z
    11b4:	81 60       	ori	r24, 0x01	; 1
    11b6:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11b8:	e0 e8       	ldi	r30, 0x80	; 128
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	81 60       	ori	r24, 0x01	; 1
    11c0:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11c2:	e1 eb       	ldi	r30, 0xB1	; 177
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	84 60       	ori	r24, 0x04	; 4
    11ca:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11cc:	e0 eb       	ldi	r30, 0xB0	; 176
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	81 60       	ori	r24, 0x01	; 1
    11d4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    11d6:	ea e7       	ldi	r30, 0x7A	; 122
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	84 60       	ori	r24, 0x04	; 4
    11de:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    11e0:	80 81       	ld	r24, Z
    11e2:	82 60       	ori	r24, 0x02	; 2
    11e4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    11e6:	80 81       	ld	r24, Z
    11e8:	81 60       	ori	r24, 0x01	; 1
    11ea:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    11ec:	80 81       	ld	r24, Z
    11ee:	80 68       	ori	r24, 0x80	; 128
    11f0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    11f2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    11f6:	08 95       	ret

000011f8 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
    11f8:	80 93 36 04 	sts	0x0436, r24
}
    11fc:	08 95       	ret

000011fe <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	71 f0       	breq	.+28     	; 0x121e <turnOffPWM+0x20>
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	28 f4       	brcc	.+10     	; 0x1210 <turnOffPWM+0x12>
    1206:	81 30       	cpi	r24, 0x01	; 1
    1208:	a1 f0       	breq	.+40     	; 0x1232 <turnOffPWM+0x34>
    120a:	82 30       	cpi	r24, 0x02	; 2
    120c:	21 f5       	brne	.+72     	; 0x1256 <turnOffPWM+0x58>
    120e:	14 c0       	rjmp	.+40     	; 0x1238 <turnOffPWM+0x3a>
    1210:	86 30       	cpi	r24, 0x06	; 6
    1212:	b1 f0       	breq	.+44     	; 0x1240 <turnOffPWM+0x42>
    1214:	87 30       	cpi	r24, 0x07	; 7
    1216:	d1 f0       	breq	.+52     	; 0x124c <turnOffPWM+0x4e>
    1218:	84 30       	cpi	r24, 0x04	; 4
    121a:	e9 f4       	brne	.+58     	; 0x1256 <turnOffPWM+0x58>
    121c:	04 c0       	rjmp	.+8      	; 0x1226 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    121e:	80 91 80 00 	lds	r24, 0x0080
    1222:	8f 77       	andi	r24, 0x7F	; 127
    1224:	03 c0       	rjmp	.+6      	; 0x122c <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1226:	80 91 80 00 	lds	r24, 0x0080
    122a:	8f 7d       	andi	r24, 0xDF	; 223
    122c:	80 93 80 00 	sts	0x0080, r24
    1230:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1232:	84 b5       	in	r24, 0x24	; 36
    1234:	8f 77       	andi	r24, 0x7F	; 127
    1236:	02 c0       	rjmp	.+4      	; 0x123c <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1238:	84 b5       	in	r24, 0x24	; 36
    123a:	8f 7d       	andi	r24, 0xDF	; 223
    123c:	84 bd       	out	0x24, r24	; 36
    123e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1240:	80 91 b0 00 	lds	r24, 0x00B0
    1244:	8f 77       	andi	r24, 0x7F	; 127
    1246:	80 93 b0 00 	sts	0x00B0, r24
    124a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    124c:	80 91 b0 00 	lds	r24, 0x00B0
    1250:	8f 7d       	andi	r24, 0xDF	; 223
    1252:	80 93 b0 00 	sts	0x00B0, r24
    1256:	08 95       	ret

00001258 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	fc 01       	movw	r30, r24
    125c:	e4 58       	subi	r30, 0x84	; 132
    125e:	ff 4f       	sbci	r31, 0xFF	; 255
    1260:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    1262:	fc 01       	movw	r30, r24
    1264:	e0 57       	subi	r30, 0x70	; 112
    1266:	ff 4f       	sbci	r31, 0xFF	; 255
    1268:	e4 91       	lpm	r30, Z
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    126a:	ee 23       	and	r30, r30
    126c:	a9 f0       	breq	.+42     	; 0x1298 <pinMode+0x40>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	ee 0f       	add	r30, r30
    1272:	ff 1f       	adc	r31, r31
    1274:	e8 54       	subi	r30, 0x48	; 72
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	85 91       	lpm	r24, Z+
    127a:	94 91       	lpm	r25, Z
    127c:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    127e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1280:	f8 94       	cli
		*reg &= ~bit;
    1282:	8c 91       	ld	r24, X
	if (port == NOT_A_PIN) return;

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
    1284:	66 23       	and	r22, r22
    1286:	29 f4       	brne	.+10     	; 0x1292 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    1288:	20 95       	com	r18
    128a:	82 23       	and	r24, r18
    128c:	8c 93       	st	X, r24
		SREG = oldSREG;
    128e:	9f bf       	out	0x3f, r25	; 63
    1290:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    1292:	82 2b       	or	r24, r18
    1294:	8c 93       	st	X, r24
		SREG = oldSREG;
    1296:	9f bf       	out	0x3f, r25	; 63
    1298:	08 95       	ret

0000129a <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	0f 92       	push	r0
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	e8 59       	subi	r30, 0x98	; 152
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    12b4:	f9 01       	movw	r30, r18
    12b6:	e4 58       	subi	r30, 0x84	; 132
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    12bc:	f9 01       	movw	r30, r18
    12be:	e0 57       	subi	r30, 0x70	; 112
    12c0:	ff 4f       	sbci	r31, 0xFF	; 255
    12c2:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    12c4:	00 23       	and	r16, r16
    12c6:	d1 f0       	breq	.+52     	; 0x12fc <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12c8:	88 23       	and	r24, r24
    12ca:	21 f0       	breq	.+8      	; 0x12d4 <digitalWrite+0x3a>
    12cc:	69 83       	std	Y+1, r22	; 0x01
    12ce:	0e 94 ff 08 	call	0x11fe	; 0x11fe <turnOffPWM>
    12d2:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    12d4:	e0 2f       	mov	r30, r16
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	ee 0f       	add	r30, r30
    12da:	ff 1f       	adc	r31, r31
    12dc:	e2 55       	subi	r30, 0x52	; 82
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	85 91       	lpm	r24, Z+
    12e2:	94 91       	lpm	r25, Z
    12e4:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    12e6:	9f b7       	in	r25, 0x3f	; 63
	cli();
    12e8:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    12ea:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    12ec:	66 23       	and	r22, r22
    12ee:	19 f4       	brne	.+6      	; 0x12f6 <digitalWrite+0x5c>
		*out &= ~bit;
    12f0:	10 95       	com	r17
    12f2:	81 23       	and	r24, r17
    12f4:	01 c0       	rjmp	.+2      	; 0x12f8 <digitalWrite+0x5e>
	} else {
		*out |= bit;
    12f6:	81 2b       	or	r24, r17
    12f8:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    12fa:	9f bf       	out	0x3f, r25	; 63
}
    12fc:	0f 90       	pop	r0
    12fe:	df 91       	pop	r29
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// The default alarm handler
void DallasTemperature::defaultAlarmHandler(uint8_t* deviceAddress)
{
}
    1308:	08 95       	ret

0000130a <_ZN17DallasTemperatureC1EP7OneWire>:
extern "C" {
    #include "WConstants.h"
}
#endif

DallasTemperature::DallasTemperature(OneWire* _oneWire)
    130a:	fc 01       	movw	r30, r24
  #if REQUIRESALARMS
  : _AlarmHandler(&defaultAlarmHandler)
    130c:	84 e8       	ldi	r24, 0x84	; 132
    130e:	99 e0       	ldi	r25, 0x09	; 9
    1310:	92 8b       	std	Z+18, r25	; 0x12
    1312:	81 8b       	std	Z+17, r24	; 0x11
  #endif
{
  _wire = _oneWire;
    1314:	76 83       	std	Z+6, r23	; 0x06
    1316:	65 83       	std	Z+5, r22	; 0x05
  devices = 0;
    1318:	14 82       	std	Z+4, r1	; 0x04
  parasite = false;
    131a:	10 82       	st	Z, r1
  bitResolution = 9;
    131c:	89 e0       	ldi	r24, 0x09	; 9
    131e:	81 83       	std	Z+1, r24	; 0x01
  waitForConversion = true;
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	82 83       	std	Z+2, r24	; 0x02
  checkForConversion = true;
    1324:	83 83       	std	Z+3, r24	; 0x03
}
    1326:	08 95       	ret

00001328 <_ZN17DallasTemperature14getDeviceCountEv>:

// returns the number of devices found on the bus
uint8_t DallasTemperature::getDeviceCount(void)
{
  return devices;
}
    1328:	fc 01       	movw	r30, r24
    132a:	84 81       	ldd	r24, Z+4	; 0x04
    132c:	08 95       	ret

0000132e <_ZN17DallasTemperature12validAddressEPh>:

// returns true if address is valid
bool DallasTemperature::validAddress(uint8_t* deviceAddress)
{
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	eb 01       	movw	r28, r22
  return (_wire->crc8(deviceAddress, 7) == deviceAddress[7]);
    1334:	cb 01       	movw	r24, r22
    1336:	67 e0       	ldi	r22, 0x07	; 7
    1338:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN7OneWire4crc8EPhh>
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	2f 81       	ldd	r18, Y+7	; 0x07
    1340:	82 13       	cpse	r24, r18
    1342:	90 e0       	ldi	r25, 0x00	; 0
}
    1344:	89 2f       	mov	r24, r25
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	08 95       	ret

0000134c <_ZN17DallasTemperature14readScratchPadEPhS0_>:
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
}

// read device's scratch pad
void DallasTemperature::readScratchPad(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	ec 01       	movw	r28, r24
    135a:	7b 01       	movw	r14, r22
    135c:	8a 01       	movw	r16, r20
  // send the command
  _wire->reset();
    135e:	8d 81       	ldd	r24, Y+5	; 0x05
    1360:	9e 81       	ldd	r25, Y+6	; 0x06
    1362:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	b7 01       	movw	r22, r14
    136c:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN7OneWire6selectEPh>
  _wire->write(READSCRATCH);
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	6e eb       	ldi	r22, 0xBE	; 190
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>

  
  // read the response

  // byte 0: temperature LSB
  scratchPad[TEMP_LSB] = _wire->read();
    137c:	8d 81       	ldd	r24, Y+5	; 0x05
    137e:	9e 81       	ldd	r25, Y+6	; 0x06
    1380:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    1384:	f8 01       	movw	r30, r16
    1386:	80 83       	st	Z, r24

  // byte 1: temperature MSB
  scratchPad[TEMP_MSB] = _wire->read();
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    1390:	f8 01       	movw	r30, r16
    1392:	81 83       	std	Z+1, r24	; 0x01

  // byte 2: high alarm temp
  scratchPad[HIGH_ALARM_TEMP] = _wire->read();
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	9e 81       	ldd	r25, Y+6	; 0x06
    1398:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    139c:	f8 01       	movw	r30, r16
    139e:	82 83       	std	Z+2, r24	; 0x02

  // byte 3: low alarm temp
  scratchPad[LOW_ALARM_TEMP] = _wire->read();
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13a8:	f8 01       	movw	r30, r16
    13aa:	83 83       	std	Z+3, r24	; 0x03

  // byte 4:
  // DS18S20: store for crc
  // DS18B20 & DS1822: configuration register
  scratchPad[CONFIGURATION] = _wire->read();
    13ac:	8d 81       	ldd	r24, Y+5	; 0x05
    13ae:	9e 81       	ldd	r25, Y+6	; 0x06
    13b0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13b4:	f8 01       	movw	r30, r16
    13b6:	84 83       	std	Z+4, r24	; 0x04

  // byte 5:
  // internal use & crc
  scratchPad[INTERNAL_BYTE] = _wire->read();
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13c0:	f8 01       	movw	r30, r16
    13c2:	85 83       	std	Z+5, r24	; 0x05

  // byte 6:
  // DS18S20: COUNT_REMAIN
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_REMAIN] = _wire->read();
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13cc:	f8 01       	movw	r30, r16
    13ce:	86 83       	std	Z+6, r24	; 0x06

  // byte 7:
  // DS18S20: COUNT_PER_C
  // DS18B20 & DS1822: store for crc
  scratchPad[COUNT_PER_C] = _wire->read();
    13d0:	8d 81       	ldd	r24, Y+5	; 0x05
    13d2:	9e 81       	ldd	r25, Y+6	; 0x06
    13d4:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13d8:	f8 01       	movw	r30, r16
    13da:	87 83       	std	Z+7, r24	; 0x07

  // byte 8:
  // SCTRACHPAD_CRC
  scratchPad[SCRATCHPAD_CRC] = _wire->read();
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <_ZN7OneWire4readEv>
    13e4:	f8 01       	movw	r30, r16
    13e6:	80 87       	std	Z+8, r24	; 0x08

  _wire->reset();
    13e8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ea:	9e 81       	ldd	r25, Y+6	; 0x06
    13ec:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
}
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	08 95       	ret

000013fe <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DallasTemperature::isConnected(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ea 01       	movw	r28, r20
  readScratchPad(deviceAddress, scratchPad);
    1404:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN17DallasTemperature14readScratchPadEPhS0_>
  return (_wire->crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]);
    1408:	ce 01       	movw	r24, r28
    140a:	68 e0       	ldi	r22, 0x08	; 8
    140c:	0e 94 cc 0e 	call	0x1d98	; 0x1d98 <_ZN7OneWire4crc8EPhh>
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	28 85       	ldd	r18, Y+8	; 0x08
    1414:	82 13       	cpse	r24, r18
    1416:	90 e0       	ldi	r25, 0x00	; 0
}
    1418:	89 2f       	mov	r24, r25
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <_ZN17DallasTemperature15writeScratchPadEPhPKh>:
  _wire->reset();
}

// writes device's scratch pad
void DallasTemperature::writeScratchPad(uint8_t* deviceAddress, const uint8_t* scratchPad)
{
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
    142c:	8c 01       	movw	r16, r24
    142e:	eb 01       	movw	r28, r22
    1430:	7a 01       	movw	r14, r20
  _wire->reset();
    1432:	fc 01       	movw	r30, r24
    1434:	85 81       	ldd	r24, Z+5	; 0x05
    1436:	96 81       	ldd	r25, Z+6	; 0x06
    1438:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    143c:	f8 01       	movw	r30, r16
    143e:	85 81       	ldd	r24, Z+5	; 0x05
    1440:	96 81       	ldd	r25, Z+6	; 0x06
    1442:	be 01       	movw	r22, r28
    1444:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN7OneWire6selectEPh>
  _wire->write(WRITESCRATCH);
    1448:	f8 01       	movw	r30, r16
    144a:	85 81       	ldd	r24, Z+5	; 0x05
    144c:	96 81       	ldd	r25, Z+6	; 0x06
    144e:	6e e4       	ldi	r22, 0x4E	; 78
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[HIGH_ALARM_TEMP]); // high alarm temp
    1456:	f8 01       	movw	r30, r16
    1458:	85 81       	ldd	r24, Z+5	; 0x05
    145a:	96 81       	ldd	r25, Z+6	; 0x06
    145c:	f7 01       	movw	r30, r14
    145e:	62 81       	ldd	r22, Z+2	; 0x02
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  _wire->write(scratchPad[LOW_ALARM_TEMP]); // low alarm temp
    1466:	f8 01       	movw	r30, r16
    1468:	85 81       	ldd	r24, Z+5	; 0x05
    146a:	96 81       	ldd	r25, Z+6	; 0x06
    146c:	f7 01       	movw	r30, r14
    146e:	63 81       	ldd	r22, Z+3	; 0x03
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  // DS18S20 does not use the configuration register
  if (deviceAddress[0] != DS18S20MODEL) _wire->write(scratchPad[CONFIGURATION]); // configuration
    1476:	88 81       	ld	r24, Y
    1478:	80 31       	cpi	r24, 0x10	; 16
    147a:	41 f0       	breq	.+16     	; 0x148c <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x6c>
    147c:	f8 01       	movw	r30, r16
    147e:	85 81       	ldd	r24, Z+5	; 0x05
    1480:	96 81       	ldd	r25, Z+6	; 0x06
    1482:	f7 01       	movw	r30, r14
    1484:	64 81       	ldd	r22, Z+4	; 0x04
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  _wire->reset();
    148c:	f8 01       	movw	r30, r16
    148e:	85 81       	ldd	r24, Z+5	; 0x05
    1490:	96 81       	ldd	r25, Z+6	; 0x06
    1492:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  // save the newly written values to eeprom
  _wire->write(COPYSCRATCH, parasite);
    1496:	f8 01       	movw	r30, r16
    1498:	85 81       	ldd	r24, Z+5	; 0x05
    149a:	96 81       	ldd	r25, Z+6	; 0x06
    149c:	68 e4       	ldi	r22, 0x48	; 72
    149e:	40 81       	ld	r20, Z
    14a0:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  if (parasite) delay(10); // 10ms delay
    14a4:	f8 01       	movw	r30, r16
    14a6:	80 81       	ld	r24, Z
    14a8:	88 23       	and	r24, r24
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x98>
    14ac:	6a e0       	ldi	r22, 0x0A	; 10
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
  _wire->reset();
    14b8:	f8 01       	movw	r30, r16
    14ba:	85 81       	ldd	r24, Z+5	; 0x05
    14bc:	96 81       	ldd	r25, Z+6	; 0x06
    14be:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
}
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	08 95       	ret

000014d0 <_ZN17DallasTemperature15readPowerSupplyEPh>:

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
{
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	8b 01       	movw	r16, r22
  bool ret = false;
  _wire->reset();
    14dc:	8d 81       	ldd	r24, Y+5	; 0x05
    14de:	9e 81       	ldd	r25, Y+6	; 0x06
    14e0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  _wire->select(deviceAddress);
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	b8 01       	movw	r22, r16
    14ea:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <_ZN7OneWire6selectEPh>
  _wire->write(READPOWERSUPPLY);
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	64 eb       	ldi	r22, 0xB4	; 180
    14f4:	40 e0       	ldi	r20, 0x00	; 0
    14f6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
  if (_wire->read_bit() == 0) ret = true;
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN7OneWire8read_bitEv>
    1502:	08 2f       	mov	r16, r24
  _wire->reset();
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	9e 81       	ldd	r25, Y+6	; 0x06
    1508:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  if (parasite) delay(10); // 10ms delay
  _wire->reset();
}

// reads the device's power requirements
bool DallasTemperature::readPowerSupply(uint8_t* deviceAddress)
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	01 11       	cpse	r16, r1
    1510:	80 e0       	ldi	r24, 0x00	; 0
  _wire->select(deviceAddress);
  _wire->write(READPOWERSUPPLY);
  if (_wire->read_bit() == 0) ret = true;
  _wire->reset();
  return ret;
}
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	1f 91       	pop	r17
    1518:	0f 91       	pop	r16
    151a:	08 95       	ret

0000151c <_ZN17DallasTemperature13setResolutionEPhh>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used. 
bool DallasTemperature::setResolution(uint8_t* deviceAddress, uint8_t newResolution)
{
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	df 93       	push	r29
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
    152c:	2a 97       	sbiw	r28, 0x0a	; 10
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	7c 01       	movw	r14, r24
    153a:	8b 01       	movw	r16, r22
    153c:	24 2f       	mov	r18, r20
  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    153e:	ae 01       	movw	r20, r28
    1540:	4f 5f       	subi	r20, 0xFF	; 255
    1542:	5f 4f       	sbci	r21, 0xFF	; 255
    1544:	2a 87       	std	Y+10, r18	; 0x0a
    1546:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN17DallasTemperature11isConnectedEPhS0_>
    154a:	2a 85       	ldd	r18, Y+10	; 0x0a
    154c:	88 23       	and	r24, r24
    154e:	e1 f0       	breq	.+56     	; 0x1588 <_ZN17DallasTemperature13setResolutionEPhh+0x6c>
  {
    // DS18S20 has a fixed 9-bit resolution
    if (deviceAddress[0] != DS18S20MODEL)
    1550:	f8 01       	movw	r30, r16
    1552:	80 81       	ld	r24, Z
    1554:	80 31       	cpi	r24, 0x10	; 16
    1556:	d1 f0       	breq	.+52     	; 0x158c <_ZN17DallasTemperature13setResolutionEPhh+0x70>
    {
      switch (newResolution)
    1558:	2a 30       	cpi	r18, 0x0A	; 10
    155a:	51 f0       	breq	.+20     	; 0x1570 <_ZN17DallasTemperature13setResolutionEPhh+0x54>
    155c:	2a 30       	cpi	r18, 0x0A	; 10
    155e:	50 f0       	brcs	.+20     	; 0x1574 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
    1560:	2b 30       	cpi	r18, 0x0B	; 11
    1562:	21 f0       	breq	.+8      	; 0x156c <_ZN17DallasTemperature13setResolutionEPhh+0x50>
    1564:	2c 30       	cpi	r18, 0x0C	; 12
    1566:	31 f4       	brne	.+12     	; 0x1574 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
      {
        case 12:
          scratchPad[CONFIGURATION] = TEMP_12_BIT;
    1568:	8f e7       	ldi	r24, 0x7F	; 127
    156a:	05 c0       	rjmp	.+10     	; 0x1576 <_ZN17DallasTemperature13setResolutionEPhh+0x5a>
          break;
        case 11:
          scratchPad[CONFIGURATION] = TEMP_11_BIT;
    156c:	8f e5       	ldi	r24, 0x5F	; 95
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <_ZN17DallasTemperature13setResolutionEPhh+0x5a>
          break;
        case 10:
          scratchPad[CONFIGURATION] = TEMP_10_BIT;
    1570:	8f e3       	ldi	r24, 0x3F	; 63
    1572:	01 c0       	rjmp	.+2      	; 0x1576 <_ZN17DallasTemperature13setResolutionEPhh+0x5a>
          break;
        case 9:
        default:
          scratchPad[CONFIGURATION] = TEMP_9_BIT;
    1574:	8f e1       	ldi	r24, 0x1F	; 31
    1576:	8d 83       	std	Y+5, r24	; 0x05
          break;
      }
      writeScratchPad(deviceAddress, scratchPad);
    1578:	c7 01       	movw	r24, r14
    157a:	b8 01       	movw	r22, r16
    157c:	ae 01       	movw	r20, r28
    157e:	4f 5f       	subi	r20, 0xFF	; 255
    1580:	5f 4f       	sbci	r21, 0xFF	; 255
    1582:	0e 94 10 0a 	call	0x1420	; 0x1420 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
    1586:	02 c0       	rjmp	.+4      	; 0x158c <_ZN17DallasTemperature13setResolutionEPhh+0x70>
    }
	return true;  // new value set
  }
  return false;
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	01 c0       	rjmp	.+2      	; 0x158e <_ZN17DallasTemperature13setResolutionEPhh+0x72>
          scratchPad[CONFIGURATION] = TEMP_9_BIT;
          break;
      }
      writeScratchPad(deviceAddress, scratchPad);
    }
	return true;  // new value set
    158c:	81 e0       	ldi	r24, 0x01	; 1
  }
  return false;
}
    158e:	2a 96       	adiw	r28, 0x0a	; 10
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	08 95       	ret

000015a8 <_ZN17DallasTemperature13getResolutionEPh>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
    15a8:	cf 93       	push	r28
    15aa:	df 93       	push	r29
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	29 97       	sbiw	r28, 0x09	; 9
    15b2:	0f b6       	in	r0, 0x3f	; 63
    15b4:	f8 94       	cli
    15b6:	de bf       	out	0x3e, r29	; 62
    15b8:	0f be       	out	0x3f, r0	; 63
    15ba:	cd bf       	out	0x3d, r28	; 61
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    15bc:	fb 01       	movw	r30, r22
    15be:	20 81       	ld	r18, Z
    15c0:	20 31       	cpi	r18, 0x10	; 16
    15c2:	d9 f0       	breq	.+54     	; 0x15fa <_ZN17DallasTemperature13getResolutionEPh+0x52>

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad))
    15c4:	ae 01       	movw	r20, r28
    15c6:	4f 5f       	subi	r20, 0xFF	; 255
    15c8:	5f 4f       	sbci	r21, 0xFF	; 255
    15ca:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN17DallasTemperature11isConnectedEPhS0_>
    15ce:	88 23       	and	r24, r24
    15d0:	81 f0       	breq	.+32     	; 0x15f2 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
  {
	switch (scratchPad[CONFIGURATION])
    15d2:	8d 81       	ldd	r24, Y+5	; 0x05
    15d4:	8f 33       	cpi	r24, 0x3F	; 63
    15d6:	59 f0       	breq	.+22     	; 0x15ee <_ZN17DallasTemperature13getResolutionEPh+0x46>
    15d8:	80 34       	cpi	r24, 0x40	; 64
    15da:	18 f4       	brcc	.+6      	; 0x15e2 <_ZN17DallasTemperature13getResolutionEPh+0x3a>
    15dc:	8f 31       	cpi	r24, 0x1F	; 31
    15de:	49 f4       	brne	.+18     	; 0x15f2 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <_ZN17DallasTemperature13getResolutionEPh+0x52>
    15e2:	8f 35       	cpi	r24, 0x5F	; 95
    15e4:	41 f0       	breq	.+16     	; 0x15f6 <_ZN17DallasTemperature13getResolutionEPh+0x4e>
    15e6:	8f 37       	cpi	r24, 0x7F	; 127
    15e8:	21 f4       	brne	.+8      	; 0x15f2 <_ZN17DallasTemperature13getResolutionEPh+0x4a>
    {
      case TEMP_12_BIT:
        return 12;
    15ea:	8c e0       	ldi	r24, 0x0C	; 12
    15ec:	07 c0       	rjmp	.+14     	; 0x15fc <_ZN17DallasTemperature13getResolutionEPh+0x54>
        
      case TEMP_11_BIT:
        return 11;
        
      case TEMP_10_BIT:
        return 10;
    15ee:	8a e0       	ldi	r24, 0x0A	; 10
    15f0:	05 c0       	rjmp	.+10     	; 0x15fc <_ZN17DallasTemperature13getResolutionEPh+0x54>
      case TEMP_9_BIT:
        return 9;
        
	}
  }
  return 0;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <_ZN17DallasTemperature13getResolutionEPh+0x54>
    {
      case TEMP_12_BIT:
        return 12;
        
      case TEMP_11_BIT:
        return 11;
    15f6:	8b e0       	ldi	r24, 0x0B	; 11
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <_ZN17DallasTemperature13getResolutionEPh+0x54>

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DallasTemperature::getResolution(uint8_t* deviceAddress)
{
  if (deviceAddress[0] == DS18S20MODEL) return 9; // this model has a fixed resolution
    15fa:	89 e0       	ldi	r24, 0x09	; 9
        return 9;
        
	}
  }
  return 0;
}
    15fc:	29 96       	adiw	r28, 0x09	; 9
    15fe:	0f b6       	in	r0, 0x3f	; 63
    1600:	f8 94       	cli
    1602:	de bf       	out	0x3e, r29	; 62
    1604:	0f be       	out	0x3f, r0	; 63
    1606:	cd bf       	out	0x3d, r28	; 61
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	08 95       	ret

0000160e <_ZN17DallasTemperature5beginEv>:
  checkForConversion = true;
}

// initialise the bus
void DallasTemperature::begin(void)
{
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	61 97       	sbiw	r28, 0x11	; 17
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	8c 01       	movw	r16, r24
  DeviceAddress deviceAddress;

  _wire->reset_search();
    162c:	fc 01       	movw	r30, r24
    162e:	85 81       	ldd	r24, Z+5	; 0x05
    1630:	96 81       	ldd	r25, Z+6	; 0x06
    1632:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_ZN7OneWire12reset_searchEv>
  devices = 0; // Reset the number of devices when we enumerate wire devices
    1636:	f8 01       	movw	r30, r16
    1638:	14 82       	std	Z+4, r1	; 0x04

  while (_wire->search(deviceAddress))
  {
    if (validAddress(deviceAddress))
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    163a:	ff 24       	eor	r15, r15
    163c:	f3 94       	inc	r15
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    163e:	37 c0       	rjmp	.+110    	; 0x16ae <_ZN17DallasTemperature5beginEv+0xa0>
  {
    if (validAddress(deviceAddress))
    1640:	c8 01       	movw	r24, r16
    1642:	be 01       	movw	r22, r28
    1644:	6f 5f       	subi	r22, 0xFF	; 255
    1646:	7f 4f       	sbci	r23, 0xFF	; 255
    1648:	0e 94 97 09 	call	0x132e	; 0x132e <_ZN17DallasTemperature12validAddressEPh>
    164c:	88 23       	and	r24, r24
    164e:	79 f1       	breq	.+94     	; 0x16ae <_ZN17DallasTemperature5beginEv+0xa0>
    {
      if (!parasite && readPowerSupply(deviceAddress)) parasite = true;
    1650:	f8 01       	movw	r30, r16
    1652:	80 81       	ld	r24, Z
    1654:	88 23       	and	r24, r24
    1656:	51 f4       	brne	.+20     	; 0x166c <_ZN17DallasTemperature5beginEv+0x5e>
    1658:	c8 01       	movw	r24, r16
    165a:	be 01       	movw	r22, r28
    165c:	6f 5f       	subi	r22, 0xFF	; 255
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <_ZN17DallasTemperature15readPowerSupplyEPh>
    1664:	88 23       	and	r24, r24
    1666:	11 f0       	breq	.+4      	; 0x166c <_ZN17DallasTemperature5beginEv+0x5e>
    1668:	f8 01       	movw	r30, r16
    166a:	f0 82       	st	Z, r15

      ScratchPad scratchPad;

      readScratchPad(deviceAddress, scratchPad);
    166c:	c8 01       	movw	r24, r16
    166e:	be 01       	movw	r22, r28
    1670:	6f 5f       	subi	r22, 0xFF	; 255
    1672:	7f 4f       	sbci	r23, 0xFF	; 255
    1674:	ae 01       	movw	r20, r28
    1676:	47 5f       	subi	r20, 0xF7	; 247
    1678:	5f 4f       	sbci	r21, 0xFF	; 255
    167a:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN17DallasTemperature14readScratchPadEPhS0_>

	  bitResolution = max(bitResolution, getResolution(deviceAddress));
    167e:	f8 01       	movw	r30, r16
    1680:	e1 80       	ldd	r14, Z+1	; 0x01
    1682:	c8 01       	movw	r24, r16
    1684:	be 01       	movw	r22, r28
    1686:	6f 5f       	subi	r22, 0xFF	; 255
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN17DallasTemperature13getResolutionEPh>
    168e:	8e 15       	cp	r24, r14
    1690:	18 f4       	brcc	.+6      	; 0x1698 <_ZN17DallasTemperature5beginEv+0x8a>
    1692:	f8 01       	movw	r30, r16
    1694:	81 81       	ldd	r24, Z+1	; 0x01
    1696:	06 c0       	rjmp	.+12     	; 0x16a4 <_ZN17DallasTemperature5beginEv+0x96>
    1698:	c8 01       	movw	r24, r16
    169a:	be 01       	movw	r22, r28
    169c:	6f 5f       	subi	r22, 0xFF	; 255
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	0e 94 d4 0a 	call	0x15a8	; 0x15a8 <_ZN17DallasTemperature13getResolutionEPh>
    16a4:	f8 01       	movw	r30, r16
    16a6:	81 83       	std	Z+1, r24	; 0x01

      devices++;
    16a8:	84 81       	ldd	r24, Z+4	; 0x04
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	84 83       	std	Z+4, r24	; 0x04
  DeviceAddress deviceAddress;

  _wire->reset_search();
  devices = 0; // Reset the number of devices when we enumerate wire devices

  while (_wire->search(deviceAddress))
    16ae:	f8 01       	movw	r30, r16
    16b0:	85 81       	ldd	r24, Z+5	; 0x05
    16b2:	96 81       	ldd	r25, Z+6	; 0x06
    16b4:	be 01       	movw	r22, r28
    16b6:	6f 5f       	subi	r22, 0xFF	; 255
    16b8:	7f 4f       	sbci	r23, 0xFF	; 255
    16ba:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <_ZN7OneWire6searchEPh>
    16be:	88 23       	and	r24, r24
    16c0:	09 f0       	breq	.+2      	; 0x16c4 <_ZN17DallasTemperature5beginEv+0xb6>
    16c2:	be cf       	rjmp	.-132    	; 0x1640 <_ZN17DallasTemperature5beginEv+0x32>
	  bitResolution = max(bitResolution, getResolution(deviceAddress));

      devices++;
    }
  }
}
    16c4:	61 96       	adiw	r28, 0x11	; 17
    16c6:	0f b6       	in	r0, 0x3f	; 63
    16c8:	f8 94       	cli
    16ca:	de bf       	out	0x3e, r29	; 62
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	cd bf       	out	0x3d, r28	; 61
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	08 95       	ret

000016de <_ZN17DallasTemperature21isConversionAvailableEPh>:
{
	return checkForConversion;
}

bool DallasTemperature::isConversionAvailable(uint8_t* deviceAddress)
{
    16de:	cf 93       	push	r28
    16e0:	df 93       	push	r29
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	29 97       	sbiw	r28, 0x09	; 9
    16e8:	0f b6       	in	r0, 0x3f	; 63
    16ea:	f8 94       	cli
    16ec:	de bf       	out	0x3e, r29	; 62
    16ee:	0f be       	out	0x3f, r0	; 63
    16f0:	cd bf       	out	0x3d, r28	; 61
	// Check if the clock has been raised indicating the conversion is complete
  	ScratchPad scratchPad;
  	readScratchPad(deviceAddress, scratchPad);
    16f2:	ae 01       	movw	r20, r28
    16f4:	4f 5f       	subi	r20, 0xFF	; 255
    16f6:	5f 4f       	sbci	r21, 0xFF	; 255
    16f8:	0e 94 a6 09 	call	0x134c	; 0x134c <_ZN17DallasTemperature14readScratchPadEPhS0_>
	return scratchPad[0];
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	99 81       	ldd	r25, Y+1	; 0x01
    1700:	99 23       	and	r25, r25
    1702:	09 f4       	brne	.+2      	; 0x1706 <_ZN17DallasTemperature21isConversionAvailableEPh+0x28>
    1704:	80 e0       	ldi	r24, 0x00	; 0
}	
    1706:	29 96       	adiw	r28, 0x09	; 9
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	08 95       	ret

00001718 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
  return true;
}


void DallasTemperature::blockTillConversionComplete(uint8_t* bitResolution, uint8_t* deviceAddress)
{
    1718:	cf 92       	push	r12
    171a:	df 92       	push	r13
    171c:	ef 92       	push	r14
    171e:	ff 92       	push	r15
    1720:	0f 93       	push	r16
    1722:	1f 93       	push	r17
    1724:	cf 93       	push	r28
    1726:	df 93       	push	r29
    1728:	ec 01       	movw	r28, r24
    172a:	8b 01       	movw	r16, r22
	if(deviceAddress != 0 && checkForConversion && !parasite)
    172c:	41 15       	cp	r20, r1
    172e:	51 05       	cpc	r21, r1
    1730:	09 f1       	breq	.+66     	; 0x1774 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x5c>
    1732:	8b 81       	ldd	r24, Y+3	; 0x03
    1734:	88 23       	and	r24, r24
    1736:	f1 f0       	breq	.+60     	; 0x1774 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x5c>
    1738:	88 81       	ld	r24, Y
    173a:	88 23       	and	r24, r24
    173c:	d9 f4       	brne	.+54     	; 0x1774 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x5c>
	{
	  	// Continue to check if the IC has responded with a temperature
	  	// NB: Could cause issues with multiple devices (one device may respond faster)
	  	unsigned long start = millis();
    173e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    1742:	6b 01       	movw	r12, r22
    1744:	7c 01       	movw	r14, r24
		while(!isConversionAvailable(0) && ((millis() - start) < 750));	
    1746:	ce 01       	movw	r24, r28
    1748:	60 e0       	ldi	r22, 0x00	; 0
    174a:	70 e0       	ldi	r23, 0x00	; 0
    174c:	0e 94 6f 0b 	call	0x16de	; 0x16de <_ZN17DallasTemperature21isConversionAvailableEPh>
    1750:	88 23       	and	r24, r24
    1752:	81 f4       	brne	.+32     	; 0x1774 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x5c>
    1754:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    1758:	dc 01       	movw	r26, r24
    175a:	cb 01       	movw	r24, r22
    175c:	8c 19       	sub	r24, r12
    175e:	9d 09       	sbc	r25, r13
    1760:	ae 09       	sbc	r26, r14
    1762:	bf 09       	sbc	r27, r15
    1764:	8e 3e       	cpi	r24, 0xEE	; 238
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	92 07       	cpc	r25, r18
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	a2 07       	cpc	r26, r18
    176e:	20 e0       	ldi	r18, 0x00	; 0
    1770:	b2 07       	cpc	r27, r18
    1772:	48 f3       	brcs	.-46     	; 0x1746 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x2e>
	}
	
  	// Wait a fix number of cycles till conversion is complete (based on IC datasheet)
	  switch (*bitResolution)
    1774:	f8 01       	movw	r30, r16
    1776:	80 81       	ld	r24, Z
    1778:	89 30       	cpi	r24, 0x09	; 9
    177a:	39 f0       	breq	.+14     	; 0x178a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
    177c:	89 30       	cpi	r24, 0x09	; 9
    177e:	a0 f0       	brcs	.+40     	; 0x17a8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x90>
    1780:	8a 30       	cpi	r24, 0x0A	; 10
    1782:	41 f0       	breq	.+16     	; 0x1794 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7c>
    1784:	8b 30       	cpi	r24, 0x0B	; 11
    1786:	81 f4       	brne	.+32     	; 0x17a8 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x90>
    1788:	0a c0       	rjmp	.+20     	; 0x179e <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x86>
	  {
	    case 9:
	      delay(94);
    178a:	6e e5       	ldi	r22, 0x5E	; 94
    178c:	70 e0       	ldi	r23, 0x00	; 0
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e c0       	rjmp	.+28     	; 0x17b0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x98>
	      break;
	    case 10:
	      delay(188);
    1794:	6c eb       	ldi	r22, 0xBC	; 188
    1796:	70 e0       	ldi	r23, 0x00	; 0
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	09 c0       	rjmp	.+18     	; 0x17b0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x98>
	      break;
	    case 11:
	      delay(375);
    179e:	67 e7       	ldi	r22, 0x77	; 119
    17a0:	71 e0       	ldi	r23, 0x01	; 1
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	04 c0       	rjmp	.+8      	; 0x17b0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x98>
	      break;
	    case 12:
	    default:
	      delay(750);
    17a8:	6e ee       	ldi	r22, 0xEE	; 238
    17aa:	72 e0       	ldi	r23, 0x02	; 2
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
	      break;
	  }

}
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	ff 90       	pop	r15
    17be:	ef 90       	pop	r14
    17c0:	df 90       	pop	r13
    17c2:	cf 90       	pop	r12
    17c4:	08 95       	ret

000017c6 <_ZN17DallasTemperature19requestTemperaturesEv>:
}	


// sends command for all devices on the bus to perform a temperature conversion
void DallasTemperature::requestTemperatures()
{
    17c6:	cf 93       	push	r28
    17c8:	df 93       	push	r29
    17ca:	ec 01       	movw	r28, r24
  _wire->reset();
    17cc:	8d 81       	ldd	r24, Y+5	; 0x05
    17ce:	9e 81       	ldd	r25, Y+6	; 0x06
    17d0:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
  _wire->skip();
    17d4:	8d 81       	ldd	r24, Y+5	; 0x05
    17d6:	9e 81       	ldd	r25, Y+6	; 0x06
    17d8:	0e 94 0e 0e 	call	0x1c1c	; 0x1c1c <_ZN7OneWire4skipEv>
  _wire->write(STARTCONVO, parasite);
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	64 e4       	ldi	r22, 0x44	; 68
    17e2:	48 81       	ld	r20, Y
    17e4:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>

  // ASYNC mode?
  if (!waitForConversion) return; 
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	88 23       	and	r24, r24
    17ec:	41 f0       	breq	.+16     	; 0x17fe <_ZN17DallasTemperature19requestTemperaturesEv+0x38>
  blockTillConversionComplete(&bitResolution, 0);
    17ee:	be 01       	movw	r22, r28
    17f0:	6f 5f       	subi	r22, 0xFF	; 255
    17f2:	7f 4f       	sbci	r23, 0xFF	; 255
    17f4:	ce 01       	movw	r24, r28
    17f6:	40 e0       	ldi	r20, 0x00	; 0
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	0e 94 8c 0b 	call	0x1718	; 0x1718 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>

  return;
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	08 95       	ret

00001804 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
  return toFahrenheit(getTempCByIndex(deviceIndex));
}

// reads scratchpad and returns the temperature in degrees C
float DallasTemperature::calculateTemperature(uint8_t* deviceAddress, uint8_t* scratchPad)
{
    1804:	8f 92       	push	r8
    1806:	9f 92       	push	r9
    1808:	af 92       	push	r10
    180a:	bf 92       	push	r11
    180c:	cf 92       	push	r12
    180e:	df 92       	push	r13
    1810:	ef 92       	push	r14
    1812:	ff 92       	push	r15
    1814:	1f 93       	push	r17
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	fb 01       	movw	r30, r22
    181c:	ea 01       	movw	r28, r20
  int16_t rawTemperature = (((int16_t)scratchPad[TEMP_MSB]) << 8) | scratchPad[TEMP_LSB];
    181e:	99 81       	ldd	r25, Y+1	; 0x01
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	68 81       	ld	r22, Y
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	68 2b       	or	r22, r24
    1828:	79 2b       	or	r23, r25

  switch (deviceAddress[0])
    182a:	80 81       	ld	r24, Z
    182c:	82 32       	cpi	r24, 0x22	; 34
    182e:	31 f0       	breq	.+12     	; 0x183c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
    1830:	88 32       	cpi	r24, 0x28	; 40
    1832:	21 f0       	breq	.+8      	; 0x183c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
    1834:	80 31       	cpi	r24, 0x10	; 16
    1836:	09 f0       	breq	.+2      	; 0x183a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x36>
    1838:	79 c0       	rjmp	.+242    	; 0x192c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
    183a:	47 c0       	rjmp	.+142    	; 0x18ca <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xc6>
  {
    case DS18B20MODEL:
    case DS1822MODEL:
      switch (scratchPad[CONFIGURATION])
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	8f 33       	cpi	r24, 0x3F	; 63
    1840:	29 f1       	breq	.+74     	; 0x188c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x88>
    1842:	80 34       	cpi	r24, 0x40	; 64
    1844:	20 f4       	brcc	.+8      	; 0x184e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4a>
    1846:	8f 31       	cpi	r24, 0x1F	; 31
    1848:	09 f0       	breq	.+2      	; 0x184c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
    184a:	70 c0       	rjmp	.+224    	; 0x192c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
    184c:	2e c0       	rjmp	.+92     	; 0x18aa <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xa6>
    184e:	8f 35       	cpi	r24, 0x5F	; 95
    1850:	71 f0       	breq	.+28     	; 0x186e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6a>
    1852:	8f 37       	cpi	r24, 0x7F	; 127
    1854:	09 f0       	breq	.+2      	; 0x1858 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x54>
    1856:	6a c0       	rjmp	.+212    	; 0x192c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
      {
        case TEMP_12_BIT:
          return (float)rawTemperature * 0.0625;
    1858:	88 27       	eor	r24, r24
    185a:	77 fd       	sbrc	r23, 7
    185c:	80 95       	com	r24
    185e:	98 2f       	mov	r25, r24
    1860:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e8       	ldi	r20, 0x80	; 128
    186a:	5d e3       	ldi	r21, 0x3D	; 61
    186c:	0c c0       	rjmp	.+24     	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x82>
          break;
        case TEMP_11_BIT:
          return (float)(rawTemperature >> 1) * 0.125;
    186e:	75 95       	asr	r23
    1870:	67 95       	ror	r22
    1872:	88 27       	eor	r24, r24
    1874:	77 fd       	sbrc	r23, 7
    1876:	80 95       	com	r24
    1878:	98 2f       	mov	r25, r24
    187a:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	5e e3       	ldi	r21, 0x3E	; 62
    1886:	0e 94 41 22 	call	0x4482	; 0x4482 <__mulsf3>
    188a:	50 c0       	rjmp	.+160    	; 0x192c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
          break;
        case TEMP_10_BIT:
          return (float)(rawTemperature >> 2) * 0.25;
    188c:	75 95       	asr	r23
    188e:	67 95       	ror	r22
    1890:	75 95       	asr	r23
    1892:	67 95       	ror	r22
    1894:	88 27       	eor	r24, r24
    1896:	77 fd       	sbrc	r23, 7
    1898:	80 95       	com	r24
    189a:	98 2f       	mov	r25, r24
    189c:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5e e3       	ldi	r21, 0x3E	; 62
    18a8:	ee cf       	rjmp	.-36     	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x82>
          break;
        case TEMP_9_BIT:
          return (float)(rawTemperature >> 3) * 0.5;
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	75 95       	asr	r23
    18ae:	67 95       	ror	r22
    18b0:	9a 95       	dec	r25
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xa8>
    18b4:	88 27       	eor	r24, r24
    18b6:	77 fd       	sbrc	r23, 7
    18b8:	80 95       	com	r24
    18ba:	98 2f       	mov	r25, r24
    18bc:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    18c0:	20 e0       	ldi	r18, 0x00	; 0
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	5f e3       	ldi	r21, 0x3F	; 63
    18c8:	de cf       	rjmp	.-68     	; 0x1886 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x82>
      TEMPERATURE = TEMP_READ - 0.25 + --------------------------
                                               COUNT_PER_C
      */

      // Good spot. Thanks Nic Johns for your contribution
      return (float)(rawTemperature >> 1) - 0.25 +((float)(scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) / (float)scratchPad[COUNT_PER_C] );
    18ca:	1f 81       	ldd	r17, Y+7	; 0x07
    18cc:	75 95       	asr	r23
    18ce:	67 95       	ror	r22
    18d0:	88 27       	eor	r24, r24
    18d2:	77 fd       	sbrc	r23, 7
    18d4:	80 95       	com	r24
    18d6:	98 2f       	mov	r25, r24
    18d8:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5e e3       	ldi	r21, 0x3E	; 62
    18e4:	0e 94 8d 20 	call	0x411a	; 0x411a <__subsf3>
    18e8:	4b 01       	movw	r8, r22
    18ea:	5c 01       	movw	r10, r24
    18ec:	61 2f       	mov	r22, r17
    18ee:	70 e0       	ldi	r23, 0x00	; 0
    18f0:	8e 81       	ldd	r24, Y+6	; 0x06
    18f2:	68 1b       	sub	r22, r24
    18f4:	71 09       	sbc	r23, r1
    18f6:	88 27       	eor	r24, r24
    18f8:	77 fd       	sbrc	r23, 7
    18fa:	80 95       	com	r24
    18fc:	98 2f       	mov	r25, r24
    18fe:	0e 94 91 21 	call	0x4322	; 0x4322 <__floatsisf>
    1902:	6b 01       	movw	r12, r22
    1904:	7c 01       	movw	r14, r24
    1906:	61 2f       	mov	r22, r17
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 8f 21 	call	0x431e	; 0x431e <__floatunsisf>
    1912:	9b 01       	movw	r18, r22
    1914:	ac 01       	movw	r20, r24
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__divsf3>
    191e:	9b 01       	movw	r18, r22
    1920:	ac 01       	movw	r20, r24
    1922:	c5 01       	movw	r24, r10
    1924:	b4 01       	movw	r22, r8
    1926:	0e 94 8e 20 	call	0x411c	; 0x411c <__addsf3>
    192a:	00 c0       	rjmp	.+0      	; 0x192c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
      break;
  }
}
    192c:	38 2f       	mov	r19, r24
    192e:	29 2f       	mov	r18, r25
    1930:	86 2f       	mov	r24, r22
    1932:	97 2f       	mov	r25, r23
    1934:	a3 2f       	mov	r26, r19
    1936:	b2 2f       	mov	r27, r18
    1938:	bc 01       	movw	r22, r24
    193a:	cd 01       	movw	r24, r26
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	08 95       	ret

00001954 <_ZN17DallasTemperature8getTempCEPh>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DallasTemperature::getTempC(uint8_t* deviceAddress)
{
    1954:	ef 92       	push	r14
    1956:	ff 92       	push	r15
    1958:	0f 93       	push	r16
    195a:	1f 93       	push	r17
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
    1964:	29 97       	sbiw	r28, 0x09	; 9
    1966:	0f b6       	in	r0, 0x3f	; 63
    1968:	f8 94       	cli
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	8c 01       	movw	r16, r24
    1972:	7b 01       	movw	r14, r22
  // TODO: Multiple devices (up to 64) on the same bus may take 
  //       some time to negotiate a response
  // What happens in case of collision?

  ScratchPad scratchPad;
  if (isConnected(deviceAddress, scratchPad)) return calculateTemperature(deviceAddress, scratchPad);
    1974:	ae 01       	movw	r20, r28
    1976:	4f 5f       	subi	r20, 0xFF	; 255
    1978:	5f 4f       	sbci	r21, 0xFF	; 255
    197a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_ZN17DallasTemperature11isConnectedEPhS0_>
    197e:	88 23       	and	r24, r24
    1980:	41 f0       	breq	.+16     	; 0x1992 <_ZN17DallasTemperature8getTempCEPh+0x3e>
    1982:	c8 01       	movw	r24, r16
    1984:	b7 01       	movw	r22, r14
    1986:	ae 01       	movw	r20, r28
    1988:	4f 5f       	subi	r20, 0xFF	; 255
    198a:	5f 4f       	sbci	r21, 0xFF	; 255
    198c:	0e 94 02 0c 	call	0x1804	; 0x1804 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
    1990:	04 c0       	rjmp	.+8      	; 0x199a <_ZN17DallasTemperature8getTempCEPh+0x46>
  return DEVICE_DISCONNECTED;
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	70 e0       	ldi	r23, 0x00	; 0
    1996:	8e ef       	ldi	r24, 0xFE	; 254
    1998:	92 ec       	ldi	r25, 0xC2	; 194
}
    199a:	38 2f       	mov	r19, r24
    199c:	29 2f       	mov	r18, r25
    199e:	86 2f       	mov	r24, r22
    19a0:	97 2f       	mov	r25, r23
    19a2:	a3 2f       	mov	r26, r19
    19a4:	b2 2f       	mov	r27, r18
    19a6:	bc 01       	movw	r22, r24
    19a8:	cd 01       	movw	r24, r26
    19aa:	29 96       	adiw	r28, 0x09	; 9
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	f8 94       	cli
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	0f be       	out	0x3f, r0	; 63
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	1f 91       	pop	r17
    19bc:	0f 91       	pop	r16
    19be:	ff 90       	pop	r15
    19c0:	ef 90       	pop	r14
    19c2:	08 95       	ret

000019c4 <_ZN17DallasTemperature19isParasitePowerModeEv>:

// returns true if the bus requires parasite power
bool DallasTemperature::isParasitePowerMode(void)
{
  return parasite;
}
    19c4:	fc 01       	movw	r30, r24
    19c6:	80 81       	ld	r24, Z
    19c8:	08 95       	ret

000019ca <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
    19ca:	ff 92       	push	r15
    19cc:	0f 93       	push	r16
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	fc 01       	movw	r30, r24
	IO_REG_TYPE mask = bitmask;
    19d6:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    19d8:	c1 81       	ldd	r28, Z+1	; 0x01
    19da:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;
	uint8_t retries = 125;

	noInterrupts();
    19dc:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	01 2f       	mov	r16, r17
    19e2:	00 95       	com	r16
    19e4:	80 23       	and	r24, r16
    19e6:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    19e8:	78 94       	sei
    19ea:	8d e7       	ldi	r24, 0x7D	; 125
    19ec:	f8 2e       	mov	r15, r24
    19ee:	fa 94       	dec	r15
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
    19f0:	31 f1       	breq	.+76     	; 0x1a3e <_ZN7OneWire5resetEv+0x74>
		delayMicroseconds(2);
    19f2:	82 e0       	ldi	r24, 0x02	; 2
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	} while ( !DIRECT_READ(reg, mask));
    19fa:	88 81       	ld	r24, Y
    19fc:	81 23       	and	r24, r17

	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
    19fe:	b9 f3       	breq	.-18     	; 0x19ee <_ZN7OneWire5resetEv+0x24>
		if (--retries == 0) return 0;
		delayMicroseconds(2);
	} while ( !DIRECT_READ(reg, mask));

	noInterrupts();
    1a00:	f8 94       	cli
	DIRECT_WRITE_LOW(reg, mask);
    1a02:	8a 81       	ldd	r24, Y+2	; 0x02
    1a04:	80 23       	and	r24, r16
    1a06:	8a 83       	std	Y+2, r24	; 0x02
	DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	81 2b       	or	r24, r17
    1a0c:	89 83       	std	Y+1, r24	; 0x01
	interrupts();
    1a0e:	78 94       	sei
	delayMicroseconds(500);
    1a10:	84 ef       	ldi	r24, 0xF4	; 244
    1a12:	91 e0       	ldi	r25, 0x01	; 1
    1a14:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	noInterrupts();
    1a18:	f8 94       	cli
	DIRECT_MODE_INPUT(reg, mask);	// allow it to float
    1a1a:	89 81       	ldd	r24, Y+1	; 0x01
    1a1c:	80 23       	and	r24, r16
    1a1e:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(80);
    1a20:	80 e5       	ldi	r24, 0x50	; 80
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	r = !DIRECT_READ(reg, mask);
    1a28:	88 81       	ld	r24, Y
    1a2a:	81 23       	and	r24, r17
    1a2c:	c1 e0       	ldi	r28, 0x01	; 1
    1a2e:	09 f0       	breq	.+2      	; 0x1a32 <_ZN7OneWire5resetEv+0x68>
    1a30:	c0 e0       	ldi	r28, 0x00	; 0
	interrupts();
    1a32:	78 94       	sei
	delayMicroseconds(420);
    1a34:	84 ea       	ldi	r24, 0xA4	; 164
    1a36:	91 e0       	ldi	r25, 0x01	; 1
    1a38:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	return r;
    1a3c:	01 c0       	rjmp	.+2      	; 0x1a40 <_ZN7OneWire5resetEv+0x76>
	noInterrupts();
	DIRECT_MODE_INPUT(reg, mask);
	interrupts();
	// wait until the wire is high... just in case
	do {
		if (--retries == 0) return 0;
    1a3e:	c0 e0       	ldi	r28, 0x00	; 0
	delayMicroseconds(80);
	r = !DIRECT_READ(reg, mask);
	interrupts();
	delayMicroseconds(420);
	return r;
}
    1a40:	8c 2f       	mov	r24, r28
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	1f 91       	pop	r17
    1a48:	0f 91       	pop	r16
    1a4a:	ff 90       	pop	r15
    1a4c:	08 95       	ret

00001a4e <_ZN7OneWire9write_bitEh>:
//
// Write a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
void OneWire::write_bit(uint8_t v)
{
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	fc 01       	movw	r30, r24
	IO_REG_TYPE mask=bitmask;
    1a56:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1a58:	c1 81       	ldd	r28, Z+1	; 0x01
    1a5a:	d2 81       	ldd	r29, Z+2	; 0x02
    1a5c:	91 2f       	mov	r25, r17
    1a5e:	90 95       	com	r25

	if (v & 1) {
		noInterrupts();
    1a60:	f8 94       	cli
		DIRECT_WRITE_LOW(reg, mask);
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	89 23       	and	r24, r25
    1a66:	8a 83       	std	Y+2, r24	; 0x02
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
    1a68:	89 81       	ldd	r24, Y+1	; 0x01
    1a6a:	81 2b       	or	r24, r17
    1a6c:	89 83       	std	Y+1, r24	; 0x01
void OneWire::write_bit(uint8_t v)
{
	IO_REG_TYPE mask=bitmask;
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;

	if (v & 1) {
    1a6e:	60 ff       	sbrs	r22, 0
    1a70:	0b c0       	rjmp	.+22     	; 0x1a88 <_ZN7OneWire9write_bitEh+0x3a>
		noInterrupts();
		DIRECT_WRITE_LOW(reg, mask);
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
		delayMicroseconds(10);
    1a72:	8a e0       	ldi	r24, 0x0A	; 10
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	81 2b       	or	r24, r17
    1a7e:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    1a80:	78 94       	sei
		delayMicroseconds(55);
    1a82:	87 e3       	ldi	r24, 0x37	; 55
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	0a c0       	rjmp	.+20     	; 0x1a9c <_ZN7OneWire9write_bitEh+0x4e>
	} else {
		noInterrupts();
		DIRECT_WRITE_LOW(reg, mask);
		DIRECT_MODE_OUTPUT(reg, mask);	// drive output low
		delayMicroseconds(65);
    1a88:	81 e4       	ldi	r24, 0x41	; 65
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
		DIRECT_WRITE_HIGH(reg, mask);	// drive output high
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	81 2b       	or	r24, r17
    1a94:	8a 83       	std	Y+2, r24	; 0x02
		interrupts();
    1a96:	78 94       	sei
		delayMicroseconds(5);
    1a98:	85 e0       	ldi	r24, 0x05	; 5
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	}
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	08 95       	ret

00001aa8 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	fc 01       	movw	r30, r24
	IO_REG_TYPE mask=bitmask;
    1ab2:	10 81       	ld	r17, Z
	volatile IO_REG_TYPE *reg IO_REG_ASM = baseReg;
    1ab4:	c1 81       	ldd	r28, Z+1	; 0x01
    1ab6:	d2 81       	ldd	r29, Z+2	; 0x02
	uint8_t r;

	noInterrupts();
    1ab8:	f8 94       	cli
	DIRECT_MODE_OUTPUT(reg, mask);
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	81 2b       	or	r24, r17
    1abe:	89 83       	std	Y+1, r24	; 0x01
	DIRECT_WRITE_LOW(reg, mask);
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	01 2f       	mov	r16, r17
    1ac4:	00 95       	com	r16
    1ac6:	80 23       	and	r24, r16
    1ac8:	8a 83       	std	Y+2, r24	; 0x02
	delayMicroseconds(3);
    1aca:	83 e0       	ldi	r24, 0x03	; 3
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	80 23       	and	r24, r16
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	delayMicroseconds(10);
    1ad8:	8a e0       	ldi	r24, 0x0A	; 10
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	r = DIRECT_READ(reg, mask);
    1ae0:	c8 81       	ld	r28, Y
	interrupts();
    1ae2:	78 94       	sei
	delayMicroseconds(53);
    1ae4:	85 e3       	ldi	r24, 0x35	; 53
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	0e 94 b7 08 	call	0x116e	; 0x116e <delayMicroseconds>
	DIRECT_MODE_OUTPUT(reg, mask);
	DIRECT_WRITE_LOW(reg, mask);
	delayMicroseconds(3);
	DIRECT_MODE_INPUT(reg, mask);	// let pin float, pull up will raise
	delayMicroseconds(10);
	r = DIRECT_READ(reg, mask);
    1aec:	1c 23       	and	r17, r28
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <_ZN7OneWire8read_bitEv+0x4c>
    1af2:	80 e0       	ldi	r24, 0x00	; 0
	interrupts();
	delayMicroseconds(53);
	return r;
}
    1af4:	df 91       	pop	r29
    1af6:	cf 91       	pop	r28
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	08 95       	ret

00001afe <_ZN7OneWire5writeEhh>:
// pin high, if you need power after the write (e.g. DS18S20 in
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    1afe:	cf 92       	push	r12
    1b00:	df 92       	push	r13
    1b02:	ef 92       	push	r14
    1b04:	ff 92       	push	r15
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	0f 92       	push	r0
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	8c 01       	movw	r16, r24
    1b16:	f6 2e       	mov	r15, r22
    1b18:	28 e0       	ldi	r18, 0x08	; 8
    1b1a:	c2 2e       	mov	r12, r18
    1b1c:	d1 2c       	mov	r13, r1
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b1e:	ee 24       	eor	r14, r14
    1b20:	e3 94       	inc	r14
	OneWire::write_bit( (bitMask & v)?1:0);
    1b22:	8e 2d       	mov	r24, r14
    1b24:	8f 21       	and	r24, r15
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	09 f4       	brne	.+2      	; 0x1b2c <_ZN7OneWire5writeEhh+0x2e>
    1b2a:	60 e0       	ldi	r22, 0x00	; 0
    1b2c:	c8 01       	movw	r24, r16
    1b2e:	49 83       	std	Y+1, r20	; 0x01
    1b30:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7OneWire9write_bitEh>
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) {
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b34:	ee 0c       	add	r14, r14
    1b36:	08 94       	sec
    1b38:	c1 08       	sbc	r12, r1
    1b3a:	d1 08       	sbc	r13, r1
    1b3c:	49 81       	ldd	r20, Y+1	; 0x01
    1b3e:	c1 14       	cp	r12, r1
    1b40:	d1 04       	cpc	r13, r1
    1b42:	79 f7       	brne	.-34     	; 0x1b22 <_ZN7OneWire5writeEhh+0x24>
	OneWire::write_bit( (bitMask & v)?1:0);
    }
    if ( !power) {
    1b44:	44 23       	and	r20, r20
    1b46:	a9 f4       	brne	.+42     	; 0x1b72 <_ZN7OneWire5writeEhh+0x74>
	noInterrupts();
    1b48:	f8 94       	cli
	DIRECT_MODE_INPUT(baseReg, bitmask);
    1b4a:	d8 01       	movw	r26, r16
    1b4c:	11 96       	adiw	r26, 0x01	; 1
    1b4e:	ed 91       	ld	r30, X+
    1b50:	fc 91       	ld	r31, X
    1b52:	12 97       	sbiw	r26, 0x02	; 2
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	8c 91       	ld	r24, X
    1b58:	80 95       	com	r24
    1b5a:	89 23       	and	r24, r25
    1b5c:	81 83       	std	Z+1, r24	; 0x01
	DIRECT_WRITE_LOW(baseReg, bitmask);
    1b5e:	11 96       	adiw	r26, 0x01	; 1
    1b60:	ed 91       	ld	r30, X+
    1b62:	fc 91       	ld	r31, X
    1b64:	12 97       	sbiw	r26, 0x02	; 2
    1b66:	92 81       	ldd	r25, Z+2	; 0x02
    1b68:	8c 91       	ld	r24, X
    1b6a:	80 95       	com	r24
    1b6c:	89 23       	and	r24, r25
    1b6e:	82 83       	std	Z+2, r24	; 0x02
	interrupts();
    1b70:	78 94       	sei
    }
}
    1b72:	0f 90       	pop	r0
    1b74:	df 91       	pop	r29
    1b76:	cf 91       	pop	r28
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	df 90       	pop	r13
    1b82:	cf 90       	pop	r12
    1b84:	08 95       	ret

00001b86 <_ZN7OneWire4readEv>:
}

//
// Read a byte
//
uint8_t OneWire::read() {
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	8c 01       	movw	r16, r24
    1b94:	c8 e0       	ldi	r28, 0x08	; 8
    1b96:	d0 e0       	ldi	r29, 0x00	; 0
    uint8_t bitMask;
    uint8_t r = 0;
    1b98:	ff 24       	eor	r15, r15

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1b9a:	ee 24       	eor	r14, r14
    1b9c:	e3 94       	inc	r14
	if ( OneWire::read_bit()) r |= bitMask;
    1b9e:	c8 01       	movw	r24, r16
    1ba0:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN7OneWire8read_bitEv>
    1ba4:	81 11       	cpse	r24, r1
    1ba6:	fe 28       	or	r15, r14
//
uint8_t OneWire::read() {
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
    1ba8:	ee 0c       	add	r14, r14
    1baa:	21 97       	sbiw	r28, 0x01	; 1
    1bac:	c1 f7       	brne	.-16     	; 0x1b9e <_ZN7OneWire4readEv+0x18>
	if ( OneWire::read_bit()) r |= bitMask;
    }
    return r;
}
    1bae:	8f 2d       	mov	r24, r15
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	08 95       	ret

00001bbe <_ZN7OneWire6selectEPh>:

//
// Do a ROM select
//
void OneWire::select( uint8_t rom[8])
{
    1bbe:	cf 92       	push	r12
    1bc0:	df 92       	push	r13
    1bc2:	ef 92       	push	r14
    1bc4:	ff 92       	push	r15
    1bc6:	0f 93       	push	r16
    1bc8:	1f 93       	push	r17
    1bca:	cf 93       	push	r28
    1bcc:	df 93       	push	r29
    1bce:	0f 92       	push	r0
    1bd0:	cd b7       	in	r28, 0x3d	; 61
    1bd2:	de b7       	in	r29, 0x3e	; 62
    1bd4:	7c 01       	movw	r14, r24
    1bd6:	c6 2e       	mov	r12, r22
    int i;

    write(0x55);           // Choose ROM
    1bd8:	65 e5       	ldi	r22, 0x55	; 85
    1bda:	40 e0       	ldi	r20, 0x00	; 0
    1bdc:	79 83       	std	Y+1, r23	; 0x01
    1bde:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
    1be2:	0c 2d       	mov	r16, r12
    1be4:	79 81       	ldd	r23, Y+1	; 0x01
    1be6:	17 2f       	mov	r17, r23

    for( i = 0; i < 8; i++) write(rom[i]);
    1be8:	cc 24       	eor	r12, r12
    1bea:	dd 24       	eor	r13, r13
    1bec:	f8 01       	movw	r30, r16
    1bee:	61 91       	ld	r22, Z+
    1bf0:	8f 01       	movw	r16, r30
    1bf2:	c7 01       	movw	r24, r14
    1bf4:	40 e0       	ldi	r20, 0x00	; 0
    1bf6:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
    1bfa:	08 94       	sec
    1bfc:	c1 1c       	adc	r12, r1
    1bfe:	d1 1c       	adc	r13, r1
    1c00:	f8 e0       	ldi	r31, 0x08	; 8
    1c02:	cf 16       	cp	r12, r31
    1c04:	d1 04       	cpc	r13, r1
    1c06:	91 f7       	brne	.-28     	; 0x1bec <_ZN7OneWire6selectEPh+0x2e>
}
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	ef 90       	pop	r14
    1c16:	df 90       	pop	r13
    1c18:	cf 90       	pop	r12
    1c1a:	08 95       	ret

00001c1c <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
    1c1c:	6c ec       	ldi	r22, 0xCC	; 204
    1c1e:	40 e0       	ldi	r20, 0x00	; 0
    1c20:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>
}
    1c24:	08 95       	ret

00001c26 <_ZN7OneWire12reset_searchEv>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
  {
    1c26:	fc 01       	movw	r30, r24
  // reset the search state
  LastDiscrepancy = 0;
    1c28:	13 86       	std	Z+11, r1	; 0x0b
  LastDeviceFlag = FALSE;
    1c2a:	15 86       	std	Z+13, r1	; 0x0d
  LastFamilyDiscrepancy = 0;
    1c2c:	14 86       	std	Z+12, r1	; 0x0c
  for(int i = 7; ; i--)
    {
    ROM_NO[i] = 0;
    1c2e:	12 86       	std	Z+10, r1	; 0x0a
    1c30:	11 86       	std	Z+9, r1	; 0x09
    1c32:	10 86       	std	Z+8, r1	; 0x08
    1c34:	17 82       	std	Z+7, r1	; 0x07
    1c36:	16 82       	std	Z+6, r1	; 0x06
    1c38:	15 82       	std	Z+5, r1	; 0x05
    1c3a:	14 82       	std	Z+4, r1	; 0x04
    1c3c:	13 82       	std	Z+3, r1	; 0x03
    if ( i == 0) break;
    }
  }
    1c3e:	08 95       	ret

00001c40 <_ZN7OneWireC1Eh>:
*/

#include "OneWire.h"


OneWire::OneWire(uint8_t pin)
    1c40:	1f 93       	push	r17
    1c42:	cf 93       	push	r28
    1c44:	df 93       	push	r29
    1c46:	ec 01       	movw	r28, r24
    1c48:	16 2f       	mov	r17, r22
{
	pinMode(pin, INPUT);
    1c4a:	86 2f       	mov	r24, r22
    1c4c:	60 e0       	ldi	r22, 0x00	; 0
    1c4e:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
	bitmask = PIN_TO_BITMASK(pin);
    1c52:	61 2f       	mov	r22, r17
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	fb 01       	movw	r30, r22
    1c58:	e4 58       	subi	r30, 0x84	; 132
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	e4 91       	lpm	r30, Z
    1c5e:	e8 83       	st	Y, r30
	baseReg = PIN_TO_BASEREG(pin);
    1c60:	fb 01       	movw	r30, r22
    1c62:	e0 57       	subi	r30, 0x70	; 112
    1c64:	ff 4f       	sbci	r31, 0xFF	; 255
    1c66:	e4 91       	lpm	r30, Z
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	ee 0f       	add	r30, r30
    1c6c:	ff 1f       	adc	r31, r31
    1c6e:	ec 55       	subi	r30, 0x5C	; 92
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	85 91       	lpm	r24, Z+
    1c74:	94 91       	lpm	r25, Z
    1c76:	89 83       	std	Y+1, r24	; 0x01
    1c78:	9a 83       	std	Y+2, r25	; 0x02
#if ONEWIRE_SEARCH
	reset_search();
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <_ZN7OneWire12reset_searchEv>
#endif
}
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	08 95       	ret

00001c88 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
    1c88:	bf 92       	push	r11
    1c8a:	cf 92       	push	r12
    1c8c:	df 92       	push	r13
    1c8e:	ef 92       	push	r14
    1c90:	ff 92       	push	r15
    1c92:	0f 93       	push	r16
    1c94:	1f 93       	push	r17
    1c96:	cf 93       	push	r28
    1c98:	df 93       	push	r29
    1c9a:	ec 01       	movw	r28, r24
    1c9c:	6b 01       	movw	r12, r22
   rom_byte_number = 0;
   rom_byte_mask = 1;
   search_result = 0;

   // if the last call was not the last one
   if (!LastDeviceFlag)
    1c9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca0:	88 23       	and	r24, r24
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <_ZN7OneWire6searchEPh+0x1e>
    1ca4:	57 c0       	rjmp	.+174    	; 0x1d54 <_ZN7OneWire6searchEPh+0xcc>
   {
      // 1-Wire reset
      if (!reset())
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <_ZN7OneWire5resetEv>
    1cac:	88 23       	and	r24, r24
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <_ZN7OneWire6searchEPh+0x30>
      {
         // reset the search
         LastDiscrepancy = 0;
    1cb0:	1b 86       	std	Y+11, r1	; 0x0b
         LastDeviceFlag = FALSE;
    1cb2:	1d 86       	std	Y+13, r1	; 0x0d
         LastFamilyDiscrepancy = 0;
    1cb4:	1c 86       	std	Y+12, r1	; 0x0c
         return FALSE;
    1cb6:	5f c0       	rjmp	.+190    	; 0x1d76 <_ZN7OneWire6searchEPh+0xee>
      }

      // issue the search command
      write(0xF0);
    1cb8:	ce 01       	movw	r24, r28
    1cba:	60 ef       	ldi	r22, 0xF0	; 240
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <_ZN7OneWire5writeEhh>

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
   rom_byte_mask = 1;
    1cc2:	01 e0       	ldi	r16, 0x01	; 1
   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
   rom_byte_number = 0;
    1cc4:	ff 24       	eor	r15, r15

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
   last_zero = 0;
    1cc6:	ee 24       	eor	r14, r14
   uint8_t id_bit, cmp_id_bit;

   unsigned char rom_byte_mask, search_direction;

   // initialize for search
   id_bit_number = 1;
    1cc8:	11 e0       	ldi	r17, 0x01	; 1

      // loop to do the search
      do
      {
         // read a bit and its complement
         id_bit = read_bit();
    1cca:	ce 01       	movw	r24, r28
    1ccc:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN7OneWire8read_bitEv>
    1cd0:	b8 2e       	mov	r11, r24
         cmp_id_bit = read_bit();
    1cd2:	ce 01       	movw	r24, r28
    1cd4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_ZN7OneWire8read_bitEv>

         // check for no devices on 1-wire
         if ((id_bit == 1) && (cmp_id_bit == 1))
    1cd8:	91 e0       	ldi	r25, 0x01	; 1
    1cda:	b9 16       	cp	r11, r25
    1cdc:	19 f4       	brne	.+6      	; 0x1ce4 <_ZN7OneWire6searchEPh+0x5c>
    1cde:	81 30       	cpi	r24, 0x01	; 1
    1ce0:	a9 f4       	brne	.+42     	; 0x1d0c <_ZN7OneWire6searchEPh+0x84>
    1ce2:	30 c0       	rjmp	.+96     	; 0x1d44 <_ZN7OneWire6searchEPh+0xbc>
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1ce4:	b8 16       	cp	r11, r24
    1ce6:	d1 f4       	brne	.+52     	; 0x1d1c <_ZN7OneWire6searchEPh+0x94>
               search_direction = id_bit;  // bit write value for search
            else
            {
               // if this discrepancy if before the Last Discrepancy
               // on a previous next then pick the same as last time
               if (id_bit_number < LastDiscrepancy)
    1ce8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1cea:	18 17       	cp	r17, r24
    1cec:	38 f4       	brcc	.+14     	; 0x1cfc <_ZN7OneWire6searchEPh+0x74>
                  search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ef 0d       	add	r30, r15
    1cf2:	f1 1d       	adc	r31, r1
    1cf4:	83 81       	ldd	r24, Z+3	; 0x03
    1cf6:	80 23       	and	r24, r16
    1cf8:	49 f4       	brne	.+18     	; 0x1d0c <_ZN7OneWire6searchEPh+0x84>
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <_ZN7OneWire6searchEPh+0x78>
               else
                  // if equal to last pick 1, if not then pick 0
                  search_direction = (id_bit_number == LastDiscrepancy);
    1cfc:	18 17       	cp	r17, r24
    1cfe:	31 f0       	breq	.+12     	; 0x1d0c <_ZN7OneWire6searchEPh+0x84>
    1d00:	60 e0       	ldi	r22, 0x00	; 0
               if (search_direction == 0)
               {
                  last_zero = id_bit_number;

                  // check for Last discrepancy in family
                  if (last_zero < 9)
    1d02:	19 30       	cpi	r17, 0x09	; 9
    1d04:	08 f0       	brcs	.+2      	; 0x1d08 <_ZN7OneWire6searchEPh+0x80>
    1d06:	41 c0       	rjmp	.+130    	; 0x1d8a <_ZN7OneWire6searchEPh+0x102>
                     LastFamilyDiscrepancy = last_zero;
    1d08:	1c 87       	std	Y+12, r17	; 0x0c
    1d0a:	3f c0       	rjmp	.+126    	; 0x1d8a <_ZN7OneWire6searchEPh+0x102>
            }

            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	ef 0d       	add	r30, r15
    1d10:	f1 1d       	adc	r31, r1
    1d12:	83 81       	ldd	r24, Z+3	; 0x03
    1d14:	80 2b       	or	r24, r16
    1d16:	83 83       	std	Z+3, r24	; 0x03
    1d18:	61 e0       	ldi	r22, 0x01	; 1
    1d1a:	09 c0       	rjmp	.+18     	; 0x1d2e <_ZN7OneWire6searchEPh+0xa6>
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1d1c:	6b 2d       	mov	r22, r11
            // set or clear the bit in the ROM byte rom_byte_number
            // with mask rom_byte_mask
            if (search_direction == 1)
              ROM_NO[rom_byte_number] |= rom_byte_mask;
            else
              ROM_NO[rom_byte_number] &= ~rom_byte_mask;
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ef 0d       	add	r30, r15
    1d22:	f1 1d       	adc	r31, r1
    1d24:	90 2f       	mov	r25, r16
    1d26:	90 95       	com	r25
    1d28:	83 81       	ldd	r24, Z+3	; 0x03
    1d2a:	89 23       	and	r24, r25
    1d2c:	83 83       	std	Z+3, r24	; 0x03

            // serial number search direction write bit
            write_bit(search_direction);
    1d2e:	ce 01       	movw	r24, r28
    1d30:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <_ZN7OneWire9write_bitEh>

            // increment the byte counter id_bit_number
            // and shift the mask rom_byte_mask
            id_bit_number++;
    1d34:	1f 5f       	subi	r17, 0xFF	; 255
            rom_byte_mask <<= 1;
    1d36:	00 0f       	add	r16, r16

            // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
            if (rom_byte_mask == 0)
    1d38:	11 f4       	brne	.+4      	; 0x1d3e <_ZN7OneWire6searchEPh+0xb6>
            {
                rom_byte_number++;
    1d3a:	f3 94       	inc	r15
                rom_byte_mask = 1;
    1d3c:	01 e0       	ldi	r16, 0x01	; 1

      // issue the search command
      write(0xF0);

      // loop to do the search
      do
    1d3e:	87 e0       	ldi	r24, 0x07	; 7
    1d40:	8f 15       	cp	r24, r15
    1d42:	18 f6       	brcc	.-122    	; 0x1cca <_ZN7OneWire6searchEPh+0x42>
         }
      }
      while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7

      // if the search was successful then
      if (!(id_bit_number < 65))
    1d44:	11 34       	cpi	r17, 0x41	; 65
    1d46:	30 f0       	brcs	.+12     	; 0x1d54 <_ZN7OneWire6searchEPh+0xcc>
      {
         // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
         LastDiscrepancy = last_zero;
    1d48:	eb 86       	std	Y+11, r14	; 0x0b

         // check for last device
         if (LastDiscrepancy == 0)
    1d4a:	ee 20       	and	r14, r14
    1d4c:	01 f5       	brne	.+64     	; 0x1d8e <_ZN7OneWire6searchEPh+0x106>
            LastDeviceFlag = TRUE;
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	8d 87       	std	Y+13, r24	; 0x0d
    1d52:	1d c0       	rjmp	.+58     	; 0x1d8e <_ZN7OneWire6searchEPh+0x106>
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
    1d54:	1b 86       	std	Y+11, r1	; 0x0b
      LastDeviceFlag = FALSE;
    1d56:	1d 86       	std	Y+13, r1	; 0x0d
      LastFamilyDiscrepancy = 0;
    1d58:	1c 86       	std	Y+12, r1	; 0x0c
      search_result = FALSE;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
   {
      LastDiscrepancy = 0;
      LastDeviceFlag = FALSE;
      LastFamilyDiscrepancy = 0;
    1d5c:	d6 01       	movw	r26, r12
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
// Perform the 1-Wire Search Algorithm on the 1-Wire bus using the existing
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
    1d62:	fe 01       	movw	r30, r28
    1d64:	e2 0f       	add	r30, r18
    1d66:	f3 1f       	adc	r31, r19
      LastDiscrepancy = 0;
      LastDeviceFlag = FALSE;
      LastFamilyDiscrepancy = 0;
      search_result = FALSE;
   }
   for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
    1d68:	93 81       	ldd	r25, Z+3	; 0x03
    1d6a:	9d 93       	st	X+, r25
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d70:	28 30       	cpi	r18, 0x08	; 8
    1d72:	31 05       	cpc	r19, r1
    1d74:	b1 f7       	brne	.-20     	; 0x1d62 <_ZN7OneWire6searchEPh+0xda>
   return search_result;
  }
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	08 95       	ret
         if ((id_bit == 1) && (cmp_id_bit == 1))
            break;
         else
         {
            // all devices coupled have 0 or 1
            if (id_bit != cmp_id_bit)
    1d8a:	e1 2e       	mov	r14, r17
    1d8c:	c8 cf       	rjmp	.-112    	; 0x1d1e <_ZN7OneWire6searchEPh+0x96>
         search_result = TRUE;
      }
   }

   // if no device found then reset counters so next 'search' will be like a first
   if (!search_result || !ROM_NO[0])
    1d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d90:	88 23       	and	r24, r24
    1d92:	01 f3       	breq	.-64     	; 0x1d54 <_ZN7OneWire6searchEPh+0xcc>
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	e2 cf       	rjmp	.-60     	; 0x1d5c <_ZN7OneWire6searchEPh+0xd4>

00001d98 <_ZN7OneWire4crc8EPhh>:
// table, it would probably be smaller and certainly fast enough
// compared to all those delayMicrosecond() calls.  But I got
// confused, so I use this table from the examples.)
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
    1d98:	dc 01       	movw	r26, r24
	uint8_t crc = 0;
    1d9a:	80 e0       	ldi	r24, 0x00	; 0

	while (len--) {
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <_ZN7OneWire4crc8EPhh+0x14>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
    1d9e:	ed 91       	ld	r30, X+
    1da0:	e8 27       	eor	r30, r24
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	ee 53       	subi	r30, 0x3E	; 62
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	84 91       	lpm	r24, Z
    1daa:	61 50       	subi	r22, 0x01	; 1
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
	uint8_t crc = 0;

	while (len--) {
    1dac:	66 23       	and	r22, r22
    1dae:	b9 f7       	brne	.-18     	; 0x1d9e <_ZN7OneWire4crc8EPhh+0x6>
		crc = pgm_read_byte(dscrc_table + (crc ^ *addr++));
	}
	return crc;
}
    1db0:	08 95       	ret

00001db2 <_ZN8Runnable3runEv>:
{
}

void Runnable::run()
{
}
    1db2:	08 95       	ret

00001db4 <_ZN8RunnableD1Ev>:

Runnable::~Runnable()
    1db4:	22 e6       	ldi	r18, 0x62	; 98
    1db6:	34 e0       	ldi	r19, 0x04	; 4
    1db8:	fc 01       	movw	r30, r24
    1dba:	31 83       	std	Z+1, r19	; 0x01
    1dbc:	20 83       	st	Z, r18
{
}
    1dbe:	08 95       	ret

00001dc0 <_ZN8RunnableD0Ev>:

void Runnable::run()
{
}

Runnable::~Runnable()
    1dc0:	22 e6       	ldi	r18, 0x62	; 98
    1dc2:	34 e0       	ldi	r19, 0x04	; 4
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	31 83       	std	Z+1, r19	; 0x01
    1dc8:	20 83       	st	Z, r18
{
}
    1dca:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    1dce:	08 95       	ret

00001dd0 <_ZN8RunnableC1Ev>:
 *      Author: root
 */

#include "Runnable.h"

Runnable::Runnable()
    1dd0:	22 e6       	ldi	r18, 0x62	; 98
    1dd2:	34 e0       	ldi	r19, 0x04	; 4
    1dd4:	fc 01       	movw	r30, r24
    1dd6:	31 83       	std	Z+1, r19	; 0x01
    1dd8:	20 83       	st	Z, r18
{
}
    1dda:	08 95       	ret

00001ddc <_ZN7SDClass5beginEh>:

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	cf 93       	push	r28
    1de2:	df 93       	push	r29
    1de4:	8c 01       	movw	r16, r24
    1de6:	46 2f       	mov	r20, r22
    Performs the initialisation required by the sdfatlib library.

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
    1de8:	61 e0       	ldi	r22, 0x01	; 1
    1dea:	0e 94 01 10 	call	0x2002	; 0x2002 <_ZN7Sd2Card4initEhh>
         volume.init(card) &&
         root.openRoot(volume);
    1dee:	88 23       	and	r24, r24
    1df0:	c1 f0       	breq	.+48     	; 0x1e22 <_ZN7SDClass5beginEh+0x46>

    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
    1df2:	e8 01       	movw	r28, r16
    1df4:	2c 96       	adiw	r28, 0x0c	; 12
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
    1df6:	ce 01       	movw	r24, r28
    1df8:	b8 01       	movw	r22, r16
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN8SdVolume4initEP7Sd2Cardh>
    1e00:	88 23       	and	r24, r24
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <_ZN7SDClass5beginEh+0x36>
    1e04:	ce 01       	movw	r24, r28
    1e06:	b8 01       	movw	r22, r16
    1e08:	40 e0       	ldi	r20, 0x00	; 0
    1e0a:	0e 94 8c 18 	call	0x3118	; 0x3118 <_ZN8SdVolume4initEP7Sd2Cardh>
         root.openRoot(volume);
    1e0e:	88 23       	and	r24, r24
    1e10:	41 f0       	breq	.+16     	; 0x1e22 <_ZN7SDClass5beginEh+0x46>
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
    1e12:	c8 01       	movw	r24, r16
    1e14:	8a 96       	adiw	r24, 0x2a	; 42
    1e16:	be 01       	movw	r22, r28
    1e18:	0e 94 73 12 	call	0x24e6	; 0x24e6 <_ZN6SdFile8openRootEP8SdVolume>

/* Implementation of class used to create `SDCard` object. */



boolean SDClass::begin(uint8_t csPin) {
    1e1c:	91 e0       	ldi	r25, 0x01	; 1
    1e1e:	88 23       	and	r24, r24
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <_ZN7SDClass5beginEh+0x48>
    Return true if initialization succeeds, false otherwise.

   */
  return card.init(SPI_HALF_SPEED, csPin) &&
         volume.init(card) &&
         root.openRoot(volume);
    1e22:	90 e0       	ldi	r25, 0x00	; 0
}
    1e24:	89 2f       	mov	r24, r25
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	08 95       	ret

00001e30 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
    1e30:	10 92 79 05 	sts	0x0579, r1
    1e34:	10 92 7a 05 	sts	0x057A, r1
    1e38:	10 92 7d 05 	sts	0x057D, r1
    1e3c:	10 92 7f 05 	sts	0x057F, r1
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	a0 e0       	ldi	r26, 0x00	; 0
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	80 93 80 05 	sts	0x0580, r24
    1e4c:	90 93 81 05 	sts	0x0581, r25
    1e50:	a0 93 82 05 	sts	0x0582, r26
    1e54:	b0 93 83 05 	sts	0x0583, r27
    1e58:	10 92 97 05 	sts	0x0597, r1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e5c:	10 92 a1 05 	sts	0x05A1, r1
    1e60:	10 92 a0 05 	sts	0x05A0, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
    1e64:	8c e6       	ldi	r24, 0x6C	; 108
    1e66:	94 e0       	ldi	r25, 0x04	; 4
    1e68:	90 93 9f 05 	sts	0x059F, r25
    1e6c:	80 93 9e 05 	sts	0x059E, r24
    1e70:	10 92 a3 05 	sts	0x05A3, r1
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
    1e74:	08 95       	ret

00001e76 <_ZL7spiSendh>:
//------------------------------------------------------------------------------
#ifndef SOFTWARE_SPI
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
  SPDR = b;
    1e76:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)));
    1e78:	0d b4       	in	r0, 0x2d	; 45
    1e7a:	07 fe       	sbrs	r0, 7
    1e7c:	fd cf       	rjmp	.-6      	; 0x1e78 <_ZL7spiSendh+0x2>
}
    1e7e:	08 95       	ret

00001e80 <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
  spiSend(0XFF);
    1e80:	8f ef       	ldi	r24, 0xFF	; 255
    1e82:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>
  return SPDR;
    1e86:	8e b5       	in	r24, 0x2e	; 46
}
    1e88:	08 95       	ret

00001e8a <_ZN7Sd2Card14chipSelectHighEv>:
    return 0;
  }
}
//------------------------------------------------------------------------------
void Sd2Card::chipSelectHigh(void) {
  digitalWrite(chipSelectPin_, HIGH);
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	84 81       	ldd	r24, Z+4	; 0x04
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
}
    1e94:	08 95       	ret

00001e96 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
  digitalWrite(chipSelectPin_, LOW);
    1e96:	fc 01       	movw	r30, r24
    1e98:	84 81       	ldd	r24, Z+4	; 0x04
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
}
    1ea0:	08 95       	ret

00001ea2 <_ZN7Sd2Card7readEndEv>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
    1ea2:	cf 93       	push	r28
    1ea4:	df 93       	push	r29
    1ea6:	ec 01       	movw	r28, r24
  if (inBlock_) {
    1ea8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eaa:	88 23       	and	r24, r24
    1eac:	d1 f0       	breq	.+52     	; 0x1ee2 <_ZN7Sd2Card7readEndEv+0x40>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	8e bd       	out	0x2e, r24	; 46
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    1eb2:	4f ef       	ldi	r20, 0xFF	; 255
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <_ZN7Sd2Card7readEndEv+0x1c>
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
      while (!(SPSR & (1 << SPIF)));
    1eb6:	0d b4       	in	r0, 0x2d	; 45
    1eb8:	07 fe       	sbrs	r0, 7
    1eba:	fd cf       	rjmp	.-6      	; 0x1eb6 <_ZN7Sd2Card7readEndEv+0x14>
      SPDR = 0XFF;
    1ebc:	4e bd       	out	0x2e, r20	; 46
  if (inBlock_) {
      // skip data and crc
#ifdef OPTIMIZE_HARDWARE_SPI
    // optimize skip for hardware
    SPDR = 0XFF;
    while (offset_++ < 513) {
    1ebe:	8f 81       	ldd	r24, Y+7	; 0x07
    1ec0:	98 85       	ldd	r25, Y+8	; 0x08
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	2f 5f       	subi	r18, 0xFF	; 255
    1ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ec8:	38 87       	std	Y+8, r19	; 0x08
    1eca:	2f 83       	std	Y+7, r18	; 0x07
    1ecc:	22 e0       	ldi	r18, 0x02	; 2
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	92 07       	cpc	r25, r18
    1ed2:	88 f3       	brcs	.-30     	; 0x1eb6 <_ZN7Sd2Card7readEndEv+0x14>
      while (!(SPSR & (1 << SPIF)));
      SPDR = 0XFF;
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)));
    1ed4:	0d b4       	in	r0, 0x2d	; 45
    1ed6:	07 fe       	sbrs	r0, 7
    1ed8:	fd cf       	rjmp	.-6      	; 0x1ed4 <_ZN7Sd2Card7readEndEv+0x32>
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
    1eda:	ce 01       	movw	r24, r28
    1edc:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
    1ee0:	1e 82       	std	Y+6, r1	; 0x06
  }
}
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <_ZN7Sd2Card10setSckRateEh>:
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
  if (sckRateID > 6) {
    1ee8:	67 30       	cpi	r22, 0x07	; 7
    1eea:	28 f0       	brcs	.+10     	; 0x1ef6 <_ZN7Sd2Card10setSckRateEh+0xe>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    1eec:	26 e1       	ldi	r18, 0x16	; 22
    1eee:	fc 01       	movw	r30, r24
    1ef0:	25 83       	std	Z+5, r18	; 0x05
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	08 95       	ret
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
    1ef6:	96 2f       	mov	r25, r22
    SPSR &= ~(1 << SPI2X);
    1ef8:	8d b5       	in	r24, 0x2d	; 45
  if (sckRateID > 6) {
    error(SD_CARD_ERROR_SCK_RATE);
    return false;
  }
  // see avr processor datasheet for SPI register bit definitions
  if ((sckRateID & 1) || sckRateID == 6) {
    1efa:	60 fd       	sbrc	r22, 0
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <_ZN7Sd2Card10setSckRateEh+0x1a>
    1efe:	66 30       	cpi	r22, 0x06	; 6
    1f00:	11 f4       	brne	.+4      	; 0x1f06 <_ZN7Sd2Card10setSckRateEh+0x1e>
    SPSR &= ~(1 << SPI2X);
    1f02:	8e 7f       	andi	r24, 0xFE	; 254
    1f04:	01 c0       	rjmp	.+2      	; 0x1f08 <_ZN7Sd2Card10setSckRateEh+0x20>
  } else {
    SPSR |= (1 << SPI2X);
    1f06:	81 60       	ori	r24, 0x01	; 1
    1f08:	8d bd       	out	0x2d, r24	; 45
  }
  SPCR &= ~((1 <<SPR1) | (1 << SPR0));
    1f0a:	8c b5       	in	r24, 0x2c	; 44
    1f0c:	8c 7f       	andi	r24, 0xFC	; 252
    1f0e:	8c bd       	out	0x2c, r24	; 44
  SPCR |= (sckRateID & 4 ? (1 << SPR1) : 0)
    | (sckRateID & 2 ? (1 << SPR0) : 0);
    1f10:	3c b5       	in	r19, 0x2c	; 44
    1f12:	92 ff       	sbrs	r25, 2
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <_ZN7Sd2Card10setSckRateEh+0x32>
    1f16:	22 e0       	ldi	r18, 0x02	; 2
    1f18:	01 c0       	rjmp	.+2      	; 0x1f1c <_ZN7Sd2Card10setSckRateEh+0x34>
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	91 ff       	sbrs	r25, 1
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	83 2b       	or	r24, r19
    1f24:	82 2b       	or	r24, r18
    1f26:	8c bd       	out	0x2c, r24	; 44
  return true;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
}
    1f2a:	08 95       	ret

00001f2c <_ZN7Sd2Card11waitNotBusyEj>:
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	eb 01       	movw	r28, r22
  uint16_t t0 = millis();
    1f36:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    1f3a:	8b 01       	movw	r16, r22
    1f3c:	9c 01       	movw	r18, r24
  do {
    if (spiRec() == 0XFF) return true;
    1f3e:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    1f42:	8f 3f       	cpi	r24, 0xFF	; 255
    1f44:	49 f0       	breq	.+18     	; 0x1f58 <_ZN7Sd2Card11waitNotBusyEj+0x2c>
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
    1f46:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
}
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    1f4a:	60 1b       	sub	r22, r16
    1f4c:	71 0b       	sbc	r23, r17
    1f4e:	6c 17       	cp	r22, r28
    1f50:	7d 07       	cpc	r23, r29
    1f52:	a8 f3       	brcs	.-22     	; 0x1f3e <_ZN7Sd2Card11waitNotBusyEj+0x12>
    if (spiRec() == 0XFF) return true;
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
    1f54:	80 e0       	ldi	r24, 0x00	; 0
    1f56:	01 c0       	rjmp	.+2      	; 0x1f5a <_ZN7Sd2Card11waitNotBusyEj+0x2e>
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(uint16_t timeoutMillis) {
  uint16_t t0 = millis();
  do {
    if (spiRec() == 0XFF) return true;
    1f58:	81 e0       	ldi	r24, 0x01	; 1
  }
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	08 95       	ret

00001f64 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
    1f64:	8f 92       	push	r8
    1f66:	9f 92       	push	r9
    1f68:	af 92       	push	r10
    1f6a:	bf 92       	push	r11
    1f6c:	ff 92       	push	r15
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	cf 93       	push	r28
    1f74:	df 93       	push	r29
    1f76:	8c 01       	movw	r16, r24
    1f78:	f6 2e       	mov	r15, r22
    1f7a:	49 01       	movw	r8, r18
    1f7c:	5a 01       	movw	r10, r20
  // end read if in partialBlockRead mode
  readEnd();
    1f7e:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
    1f82:	c8 01       	movw	r24, r16
    1f84:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
    1f88:	c8 01       	movw	r24, r16
    1f8a:	6c e2       	ldi	r22, 0x2C	; 44
    1f8c:	71 e0       	ldi	r23, 0x01	; 1
    1f8e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
    1f92:	8f 2d       	mov	r24, r15
    1f94:	80 64       	ori	r24, 0x40	; 64
    1f96:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>
    1f9a:	c8 e1       	ldi	r28, 0x18	; 24
    1f9c:	d0 e0       	ldi	r29, 0x00	; 0

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
    1f9e:	d5 01       	movw	r26, r10
    1fa0:	c4 01       	movw	r24, r8
    1fa2:	0c 2e       	mov	r0, r28
    1fa4:	04 c0       	rjmp	.+8      	; 0x1fae <_ZN7Sd2Card11cardCommandEhm+0x4a>
    1fa6:	b6 95       	lsr	r27
    1fa8:	a7 95       	ror	r26
    1faa:	97 95       	ror	r25
    1fac:	87 95       	ror	r24
    1fae:	0a 94       	dec	r0
    1fb0:	d2 f7       	brpl	.-12     	; 0x1fa6 <_ZN7Sd2Card11cardCommandEhm+0x42>
    1fb2:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>
    1fb6:	28 97       	sbiw	r28, 0x08	; 8
    1fb8:	8f ef       	ldi	r24, 0xFF	; 255
    1fba:	c8 3f       	cpi	r28, 0xF8	; 248
    1fbc:	d8 07       	cpc	r29, r24
    1fbe:	79 f7       	brne	.-34     	; 0x1f9e <_ZN7Sd2Card11cardCommandEhm+0x3a>

  // send CRC
  uint8_t crc = 0XFF;
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1fc0:	ff 20       	and	r15, r15
    1fc2:	29 f0       	breq	.+10     	; 0x1fce <_ZN7Sd2Card11cardCommandEhm+0x6a>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    1fc4:	e8 e0       	ldi	r30, 0x08	; 8
    1fc6:	fe 16       	cp	r15, r30
    1fc8:	21 f0       	breq	.+8      	; 0x1fd2 <_ZN7Sd2Card11cardCommandEhm+0x6e>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);

  // send CRC
  uint8_t crc = 0XFF;
    1fca:	8f ef       	ldi	r24, 0xFF	; 255
    1fcc:	03 c0       	rjmp	.+6      	; 0x1fd4 <_ZN7Sd2Card11cardCommandEhm+0x70>
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
    1fce:	85 e9       	ldi	r24, 0x95	; 149
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <_ZN7Sd2Card11cardCommandEhm+0x70>
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
    1fd2:	87 e8       	ldi	r24, 0x87	; 135
  spiSend(crc);
    1fd4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++);
    1fd8:	c0 e0       	ldi	r28, 0x00	; 0
    1fda:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    1fde:	f8 01       	movw	r30, r16
    1fe0:	82 87       	std	Z+10, r24	; 0x0a
    1fe2:	87 ff       	sbrs	r24, 7
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1fe6:	cf 3f       	cpi	r28, 0xFF	; 255
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <_ZN7Sd2Card11cardCommandEhm+0x8a>
    1fea:	cf 5f       	subi	r28, 0xFF	; 255
    1fec:	f6 cf       	rjmp	.-20     	; 0x1fda <_ZN7Sd2Card11cardCommandEhm+0x76>
  return status_;
}
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	bf 90       	pop	r11
    1ffa:	af 90       	pop	r10
    1ffc:	9f 90       	pop	r9
    1ffe:	8f 90       	pop	r8
    2000:	08 95       	ret

00002002 <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
    2002:	af 92       	push	r10
    2004:	bf 92       	push	r11
    2006:	cf 92       	push	r12
    2008:	df 92       	push	r13
    200a:	ef 92       	push	r14
    200c:	ff 92       	push	r15
    200e:	0f 93       	push	r16
    2010:	1f 93       	push	r17
    2012:	cf 93       	push	r28
    2014:	df 93       	push	r29
    2016:	ec 01       	movw	r28, r24
    2018:	06 2f       	mov	r16, r22
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
    201a:	1b 86       	std	Y+11, r1	; 0x0b
    201c:	19 86       	std	Y+9, r1	; 0x09
    201e:	1e 82       	std	Y+6, r1	; 0x06
    2020:	1d 82       	std	Y+5, r1	; 0x05
  chipSelectPin_ = chipSelectPin;
    2022:	4c 83       	std	Y+4, r20	; 0x04
  // 16-bit init start time allows over a minute
  uint16_t t0 = (uint16_t)millis();
    2024:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	5c 01       	movw	r10, r24
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	61 e0       	ldi	r22, 0x01	; 1
    2032:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
  chipSelectHigh();
    2036:	ce 01       	movw	r24, r28
    2038:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  pinMode(SPI_MISO_PIN, INPUT);
    203c:	8c e0       	ldi	r24, 0x0C	; 12
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
  pinMode(SPI_MOSI_PIN, OUTPUT);
    2044:	8b e0       	ldi	r24, 0x0B	; 11
    2046:	61 e0       	ldi	r22, 0x01	; 1
    2048:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
  pinMode(SPI_SCK_PIN, OUTPUT);
    204c:	8d e0       	ldi	r24, 0x0D	; 13
    204e:	61 e0       	ldi	r22, 0x01	; 1
    2050:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>

#ifndef SOFTWARE_SPI
  // SS must be in output mode even it is not chip select
  pinMode(SS_PIN, OUTPUT);
    2054:	8a e0       	ldi	r24, 0x0A	; 10
    2056:	61 e0       	ldi	r22, 0x01	; 1
    2058:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>
  digitalWrite(SS_PIN, HIGH); // disable any SPI device using hardware SS pin
    205c:	8a e0       	ldi	r24, 0x0A	; 10
    205e:	61 e0       	ldi	r22, 0x01	; 1
    2060:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
    2064:	83 e5       	ldi	r24, 0x53	; 83
    2066:	8c bd       	out	0x2c, r24	; 44
  // clear double speed
  SPSR &= ~(1 << SPI2X);
    2068:	8d b5       	in	r24, 0x2d	; 45
    206a:	8e 7f       	andi	r24, 0xFE	; 254
    206c:	8d bd       	out	0x2d, r24	; 45
    206e:	1a e0       	ldi	r17, 0x0A	; 10
#endif  // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
    2070:	8f ef       	ldi	r24, 0xFF	; 255
    2072:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>
    2076:	11 50       	subi	r17, 0x01	; 1
    2078:	d9 f7       	brne	.-10     	; 0x2070 <_ZN7Sd2Card4initEhh+0x6e>

  chipSelectLow();
    207a:	ce 01       	movw	r24, r28
    207c:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    2080:	0a c0       	rjmp	.+20     	; 0x2096 <_ZN7Sd2Card4initEhh+0x94>
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    2082:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    2086:	6a 19       	sub	r22, r10
    2088:	7b 09       	sbc	r23, r11
    208a:	87 e0       	ldi	r24, 0x07	; 7
    208c:	61 3d       	cpi	r22, 0xD1	; 209
    208e:	78 07       	cpc	r23, r24
    2090:	10 f0       	brcs	.+4      	; 0x2096 <_ZN7Sd2Card4initEhh+0x94>
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	5a c0       	rjmp	.+180    	; 0x214a <_ZN7Sd2Card4initEhh+0x148>
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);

  chipSelectLow();

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
    2096:	ce 01       	movw	r24, r28
    2098:	60 e0       	ldi	r22, 0x00	; 0
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	50 e0       	ldi	r21, 0x00	; 0
    20a2:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    20a6:	18 2f       	mov	r17, r24
    20a8:	8a 87       	std	Y+10, r24	; 0x0a
    20aa:	81 30       	cpi	r24, 0x01	; 1
    20ac:	51 f7       	brne	.-44     	; 0x2082 <_ZN7Sd2Card4initEhh+0x80>
      error(SD_CARD_ERROR_CMD0);
      goto fail;
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
    20ae:	ce 01       	movw	r24, r28
    20b0:	68 e0       	ldi	r22, 0x08	; 8
    20b2:	2a ea       	ldi	r18, 0xAA	; 170
    20b4:	31 e0       	ldi	r19, 0x01	; 1
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	50 e0       	ldi	r21, 0x00	; 0
    20ba:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    20be:	82 ff       	sbrs	r24, 2
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <_ZN7Sd2Card4initEhh+0xc4>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    20c2:	1b 87       	std	Y+11, r17	; 0x0b
    20c4:	0c c0       	rjmp	.+24     	; 0x20de <_ZN7Sd2Card4initEhh+0xdc>
    20c6:	14 e0       	ldi	r17, 0x04	; 4
    type(SD_CARD_TYPE_SD1);
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
    20c8:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    20cc:	8a 87       	std	Y+10, r24	; 0x0a
    20ce:	11 50       	subi	r17, 0x01	; 1
    20d0:	d9 f7       	brne	.-10     	; 0x20c8 <_ZN7Sd2Card4initEhh+0xc6>
    if (status_ != 0XAA) {
    20d2:	8a 3a       	cpi	r24, 0xAA	; 170
    20d4:	11 f0       	breq	.+4      	; 0x20da <_ZN7Sd2Card4initEhh+0xd8>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	38 c0       	rjmp	.+112    	; 0x214a <_ZN7Sd2Card4initEhh+0x148>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    20da:	82 e0       	ldi	r24, 0x02	; 2
    20dc:	8b 87       	std	Y+11, r24	; 0x0b
      goto fail;
    }
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
    20de:	8b 85       	ldd	r24, Y+11	; 0x0b
    20e0:	82 30       	cpi	r24, 0x02	; 2
    20e2:	31 f4       	brne	.+12     	; 0x20f0 <_ZN7Sd2Card4initEhh+0xee>
    20e4:	c1 2c       	mov	r12, r1
    20e6:	d1 2c       	mov	r13, r1
    20e8:	e1 2c       	mov	r14, r1
    20ea:	80 e4       	ldi	r24, 0x40	; 64
    20ec:	f8 2e       	mov	r15, r24
    20ee:	0e c0       	rjmp	.+28     	; 0x210c <_ZN7Sd2Card4initEhh+0x10a>
    20f0:	cc 24       	eor	r12, r12
    20f2:	dd 24       	eor	r13, r13
    20f4:	76 01       	movw	r14, r12

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    20f6:	0a c0       	rjmp	.+20     	; 0x210c <_ZN7Sd2Card4initEhh+0x10a>
    // check for timeout
    if (((uint16_t)millis() - t0) > SD_INIT_TIMEOUT) {
    20f8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    20fc:	6a 19       	sub	r22, r10
    20fe:	7b 09       	sbc	r23, r11
    2100:	87 e0       	ldi	r24, 0x07	; 7
    2102:	61 3d       	cpi	r22, 0xD1	; 209
    2104:	78 07       	cpc	r23, r24
    2106:	10 f0       	brcs	.+4      	; 0x210c <_ZN7Sd2Card4initEhh+0x10a>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    2108:	88 e0       	ldi	r24, 0x08	; 8
    210a:	1f c0       	rjmp	.+62     	; 0x214a <_ZN7Sd2Card4initEhh+0x148>
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    210c:	ce 01       	movw	r24, r28
    210e:	67 e3       	ldi	r22, 0x37	; 55
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	50 e0       	ldi	r21, 0x00	; 0
    2118:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
    211c:	ce 01       	movw	r24, r28
    211e:	69 e2       	ldi	r22, 0x29	; 41
    2120:	a7 01       	movw	r20, r14
    2122:	96 01       	movw	r18, r12
    2124:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    type(SD_CARD_TYPE_SD2);
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
    2128:	8a 87       	std	Y+10, r24	; 0x0a
    212a:	88 23       	and	r24, r24
    212c:	29 f7       	brne	.-54     	; 0x20f8 <_ZN7Sd2Card4initEhh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    212e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2130:	82 30       	cpi	r24, 0x02	; 2
    2132:	f1 f4       	brne	.+60     	; 0x2170 <_ZN7Sd2Card4initEhh+0x16e>
    if (cardCommand(CMD58, 0)) {
    2134:	ce 01       	movw	r24, r28
    2136:	6a e3       	ldi	r22, 0x3A	; 58
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	40 e0       	ldi	r20, 0x00	; 0
    213e:	50 e0       	ldi	r21, 0x00	; 0
    2140:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    2144:	88 23       	and	r24, r24
    2146:	39 f0       	breq	.+14     	; 0x2156 <_ZN7Sd2Card4initEhh+0x154>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    2148:	86 e0       	ldi	r24, 0x06	; 6
    214a:	8d 83       	std	Y+5, r24	; 0x05
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
    214c:	ce 01       	movw	r24, r28
    214e:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	14 c0       	rjmp	.+40     	; 0x217e <_ZN7Sd2Card4initEhh+0x17c>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
    2156:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    215a:	80 7c       	andi	r24, 0xC0	; 192
    215c:	80 3c       	cpi	r24, 0xC0	; 192
    215e:	11 f4       	brne	.+4      	; 0x2164 <_ZN7Sd2Card4initEhh+0x162>
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
    2160:	83 e0       	ldi	r24, 0x03	; 3
    2162:	8b 87       	std	Y+11, r24	; 0x0b
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
    2164:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    2168:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    216c:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
  }
  chipSelectHigh();
    2170:	ce 01       	movw	r24, r28
    2172:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
    2176:	ce 01       	movw	r24, r28
    2178:	60 2f       	mov	r22, r16
    217a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <_ZN7Sd2Card10setSckRateEh>
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
  return false;
}
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	1f 91       	pop	r17
    2184:	0f 91       	pop	r16
    2186:	ff 90       	pop	r15
    2188:	ef 90       	pop	r14
    218a:	df 90       	pop	r13
    218c:	cf 90       	pop	r12
    218e:	bf 90       	pop	r11
    2190:	af 90       	pop	r10
    2192:	08 95       	ret

00002194 <_ZN7Sd2Card14waitStartBlockEv>:
  while (((uint16_t)millis() - t0) < timeoutMillis);
  return false;
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
    2194:	0f 93       	push	r16
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
  uint16_t t0 = millis();
    219e:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    21a2:	8b 01       	movw	r16, r22
    21a4:	9c 01       	movw	r18, r24
  while ((status_ = spiRec()) == 0XFF) {
    21a6:	0a c0       	rjmp	.+20     	; 0x21bc <_ZN7Sd2Card14waitStartBlockEv+0x28>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
    21a8:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    21ac:	60 1b       	sub	r22, r16
    21ae:	71 0b       	sbc	r23, r17
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	6d 32       	cpi	r22, 0x2D	; 45
    21b4:	78 07       	cpc	r23, r24
    21b6:	10 f0       	brcs	.+4      	; 0x21bc <_ZN7Sd2Card14waitStartBlockEv+0x28>
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
    21b8:	8f e0       	ldi	r24, 0x0F	; 15
    21ba:	08 c0       	rjmp	.+16     	; 0x21cc <_ZN7Sd2Card14waitStartBlockEv+0x38>
}
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
  uint16_t t0 = millis();
  while ((status_ = spiRec()) == 0XFF) {
    21bc:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    21c0:	8a 87       	std	Y+10, r24	; 0x0a
    21c2:	8f 3f       	cpi	r24, 0xFF	; 255
    21c4:	89 f3       	breq	.-30     	; 0x21a8 <_ZN7Sd2Card14waitStartBlockEv+0x14>
    if (((uint16_t)millis() - t0) > SD_READ_TIMEOUT) {
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (status_ != DATA_START_BLOCK) {
    21c6:	8e 3f       	cpi	r24, 0xFE	; 254
    21c8:	39 f0       	breq	.+14     	; 0x21d8 <_ZN7Sd2Card14waitStartBlockEv+0x44>
    21ca:	8d e0       	ldi	r24, 0x0D	; 13
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    goto fail;
  }
  return true;

 fail:
  chipSelectHigh();
    21ce:	ce 01       	movw	r24, r28
    21d0:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    21d4:	80 e0       	ldi	r24, 0x00	; 0
    21d6:	01 c0       	rjmp	.+2      	; 0x21da <_ZN7Sd2Card14waitStartBlockEv+0x46>
  }
  if (status_ != DATA_START_BLOCK) {
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  return true;
    21d8:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    21da:	df 91       	pop	r29
    21dc:	cf 91       	pop	r28
    21de:	1f 91       	pop	r17
    21e0:	0f 91       	pop	r16
    21e2:	08 95       	ret

000021e4 <_ZN7Sd2Card8readDataEmjjPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
    21e4:	8f 92       	push	r8
    21e6:	9f 92       	push	r9
    21e8:	af 92       	push	r10
    21ea:	bf 92       	push	r11
    21ec:	cf 92       	push	r12
    21ee:	df 92       	push	r13
    21f0:	ef 92       	push	r14
    21f2:	ff 92       	push	r15
    21f4:	0f 93       	push	r16
    21f6:	1f 93       	push	r17
    21f8:	cf 93       	push	r28
    21fa:	df 93       	push	r29
    21fc:	ec 01       	movw	r28, r24
    21fe:	4a 01       	movw	r8, r20
    2200:	5b 01       	movw	r10, r22
    2202:	69 01       	movw	r12, r18
  uint16_t n;
  if (count == 0) return true;
    2204:	01 15       	cp	r16, r1
    2206:	11 05       	cpc	r17, r1
    2208:	09 f4       	brne	.+2      	; 0x220c <_ZN7Sd2Card8readDataEmjjPh+0x28>
    220a:	7e c0       	rjmp	.+252    	; 0x2308 <_ZN7Sd2Card8readDataEmjjPh+0x124>
  if ((count + offset) > 512) {
    220c:	c8 01       	movw	r24, r16
    220e:	82 0f       	add	r24, r18
    2210:	93 1f       	adc	r25, r19
    2212:	22 e0       	ldi	r18, 0x02	; 2
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	92 07       	cpc	r25, r18
    2218:	08 f0       	brcs	.+2      	; 0x221c <_ZN7Sd2Card8readDataEmjjPh+0x38>
    221a:	71 c0       	rjmp	.+226    	; 0x22fe <_ZN7Sd2Card8readDataEmjjPh+0x11a>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
    221c:	8e 81       	ldd	r24, Y+6	; 0x06
    221e:	88 23       	and	r24, r24
    2220:	71 f0       	breq	.+28     	; 0x223e <_ZN7Sd2Card8readDataEmjjPh+0x5a>
    2222:	88 81       	ld	r24, Y
    2224:	99 81       	ldd	r25, Y+1	; 0x01
    2226:	aa 81       	ldd	r26, Y+2	; 0x02
    2228:	bb 81       	ldd	r27, Y+3	; 0x03
    222a:	48 17       	cp	r20, r24
    222c:	59 07       	cpc	r21, r25
    222e:	6a 07       	cpc	r22, r26
    2230:	7b 07       	cpc	r23, r27
    2232:	29 f4       	brne	.+10     	; 0x223e <_ZN7Sd2Card8readDataEmjjPh+0x5a>
    2234:	8f 81       	ldd	r24, Y+7	; 0x07
    2236:	98 85       	ldd	r25, Y+8	; 0x08
    2238:	c8 16       	cp	r12, r24
    223a:	d9 06       	cpc	r13, r25
    223c:	18 f5       	brcc	.+70     	; 0x2284 <_ZN7Sd2Card8readDataEmjjPh+0xa0>
    block_ = block;
    223e:	88 82       	st	Y, r8
    2240:	99 82       	std	Y+1, r9	; 0x01
    2242:	aa 82       	std	Y+2, r10	; 0x02
    2244:	bb 82       	std	Y+3, r11	; 0x03
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
    2246:	8b 85       	ldd	r24, Y+11	; 0x0b
    2248:	83 30       	cpi	r24, 0x03	; 3
    224a:	39 f0       	breq	.+14     	; 0x225a <_ZN7Sd2Card8readDataEmjjPh+0x76>
    224c:	79 e0       	ldi	r23, 0x09	; 9
    224e:	88 0c       	add	r8, r8
    2250:	99 1c       	adc	r9, r9
    2252:	aa 1c       	adc	r10, r10
    2254:	bb 1c       	adc	r11, r11
    2256:	7a 95       	dec	r23
    2258:	d1 f7       	brne	.-12     	; 0x224e <_ZN7Sd2Card8readDataEmjjPh+0x6a>
    if (cardCommand(CMD17, block)) {
    225a:	ce 01       	movw	r24, r28
    225c:	61 e1       	ldi	r22, 0x11	; 17
    225e:	a5 01       	movw	r20, r10
    2260:	94 01       	movw	r18, r8
    2262:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    2266:	88 23       	and	r24, r24
    2268:	19 f0       	breq	.+6      	; 0x2270 <_ZN7Sd2Card8readDataEmjjPh+0x8c>
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	8d 83       	std	Y+5, r24	; 0x05
    226e:	47 c0       	rjmp	.+142    	; 0x22fe <_ZN7Sd2Card8readDataEmjjPh+0x11a>
      error(SD_CARD_ERROR_CMD17);
      goto fail;
    }
    if (!waitStartBlock()) {
    2270:	ce 01       	movw	r24, r28
    2272:	0e 94 ca 10 	call	0x2194	; 0x2194 <_ZN7Sd2Card14waitStartBlockEv>
    2276:	88 23       	and	r24, r24
    2278:	09 f4       	brne	.+2      	; 0x227c <_ZN7Sd2Card8readDataEmjjPh+0x98>
    227a:	41 c0       	rjmp	.+130    	; 0x22fe <_ZN7Sd2Card8readDataEmjjPh+0x11a>
      goto fail;
    }
    offset_ = 0;
    227c:	18 86       	std	Y+8, r1	; 0x08
    227e:	1f 82       	std	Y+7, r1	; 0x07
    inBlock_ = 1;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	8e 83       	std	Y+6, r24	; 0x06
  }

#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;
    2284:	8f ef       	ldi	r24, 0xFF	; 255
    2286:	8e bd       	out	0x2e, r24	; 46

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
    2288:	2f ef       	ldi	r18, 0xFF	; 255
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    228a:	09 c0       	rjmp	.+18     	; 0x229e <_ZN7Sd2Card8readDataEmjjPh+0xba>
    while (!(SPSR & (1 << SPIF)));
    228c:	0d b4       	in	r0, 0x2d	; 45
    228e:	07 fe       	sbrs	r0, 7
    2290:	fd cf       	rjmp	.-6      	; 0x228c <_ZN7Sd2Card8readDataEmjjPh+0xa8>
    SPDR = 0XFF;
    2292:	2e bd       	out	0x2e, r18	; 46
#ifdef OPTIMIZE_HARDWARE_SPI
  // start first spi transfer
  SPDR = 0XFF;

  // skip data before offset
  for (;offset_ < offset; offset_++) {
    2294:	8f 81       	ldd	r24, Y+7	; 0x07
    2296:	98 85       	ldd	r25, Y+8	; 0x08
    2298:	01 96       	adiw	r24, 0x01	; 1
    229a:	98 87       	std	Y+8, r25	; 0x08
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	8f 81       	ldd	r24, Y+7	; 0x07
    22a0:	98 85       	ldd	r25, Y+8	; 0x08
    22a2:	8c 15       	cp	r24, r12
    22a4:	9d 05       	cpc	r25, r13
    22a6:	90 f3       	brcs	.-28     	; 0x228c <_ZN7Sd2Card8readDataEmjjPh+0xa8>
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
    22a8:	98 01       	movw	r18, r16
    22aa:	21 50       	subi	r18, 0x01	; 1
    22ac:	30 40       	sbci	r19, 0x00	; 0
    22ae:	f7 01       	movw	r30, r14
  for (uint16_t i = 0; i < n; i++) {
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
    22b4:	4f ef       	ldi	r20, 0xFF	; 255
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    22b6:	07 c0       	rjmp	.+14     	; 0x22c6 <_ZN7Sd2Card8readDataEmjjPh+0xe2>
    while (!(SPSR & (1 << SPIF)));
    22b8:	0d b4       	in	r0, 0x2d	; 45
    22ba:	07 fe       	sbrs	r0, 7
    22bc:	fd cf       	rjmp	.-6      	; 0x22b8 <_ZN7Sd2Card8readDataEmjjPh+0xd4>
    dst[i] = SPDR;
    22be:	5e b5       	in	r21, 0x2e	; 46
    22c0:	51 93       	st	Z+, r21
    SPDR = 0XFF;
    22c2:	4e bd       	out	0x2e, r20	; 46
    while (!(SPSR & (1 << SPIF)));
    SPDR = 0XFF;
  }
  // transfer data
  n = count - 1;
  for (uint16_t i = 0; i < n; i++) {
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	82 17       	cp	r24, r18
    22c8:	93 07       	cpc	r25, r19
    22ca:	b0 f3       	brcs	.-20     	; 0x22b8 <_ZN7Sd2Card8readDataEmjjPh+0xd4>
    while (!(SPSR & (1 << SPIF)));
    dst[i] = SPDR;
    SPDR = 0XFF;
  }
  // wait for last byte
  while (!(SPSR & (1 << SPIF)));
    22cc:	0d b4       	in	r0, 0x2d	; 45
    22ce:	07 fe       	sbrs	r0, 7
    22d0:	fd cf       	rjmp	.-6      	; 0x22cc <_ZN7Sd2Card8readDataEmjjPh+0xe8>
  dst[n] = SPDR;
    22d2:	8e b5       	in	r24, 0x2e	; 46
    22d4:	2e 0d       	add	r18, r14
    22d6:	3f 1d       	adc	r19, r15
    22d8:	f9 01       	movw	r30, r18
    22da:	80 83       	st	Z, r24
  for (uint16_t i = 0; i < count; i++) {
    dst[i] = spiRec();
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
    22dc:	8f 81       	ldd	r24, Y+7	; 0x07
    22de:	98 85       	ldd	r25, Y+8	; 0x08
    22e0:	80 0f       	add	r24, r16
    22e2:	91 1f       	adc	r25, r17
    22e4:	98 87       	std	Y+8, r25	; 0x08
    22e6:	8f 83       	std	Y+7, r24	; 0x07
  if (!partialBlockRead_ || offset_ >= 512) {
    22e8:	29 85       	ldd	r18, Y+9	; 0x09
    22ea:	22 23       	and	r18, r18
    22ec:	21 f0       	breq	.+8      	; 0x22f6 <_ZN7Sd2Card8readDataEmjjPh+0x112>
    22ee:	f2 e0       	ldi	r31, 0x02	; 2
    22f0:	80 30       	cpi	r24, 0x00	; 0
    22f2:	9f 07       	cpc	r25, r31
    22f4:	48 f0       	brcs	.+18     	; 0x2308 <_ZN7Sd2Card8readDataEmjjPh+0x124>
    // read rest of data, checksum and set chip select high
    readEnd();
    22f6:	ce 01       	movw	r24, r28
    22f8:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <_ZN7Sd2Card7readEndEv>
    22fc:	05 c0       	rjmp	.+10     	; 0x2308 <_ZN7Sd2Card8readDataEmjjPh+0x124>
  }
  return true;

 fail:
  chipSelectHigh();
    22fe:	ce 01       	movw	r24, r28
    2300:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	01 c0       	rjmp	.+2      	; 0x230a <_ZN7Sd2Card8readDataEmjjPh+0x126>
  offset_ += count;
  if (!partialBlockRead_ || offset_ >= 512) {
    // read rest of data, checksum and set chip select high
    readEnd();
  }
  return true;
    2308:	81 e0       	ldi	r24, 0x01	; 1

 fail:
  chipSelectHigh();
  return false;
}
    230a:	df 91       	pop	r29
    230c:	cf 91       	pop	r28
    230e:	1f 91       	pop	r17
    2310:	0f 91       	pop	r16
    2312:	ff 90       	pop	r15
    2314:	ef 90       	pop	r14
    2316:	df 90       	pop	r13
    2318:	cf 90       	pop	r12
    231a:	bf 90       	pop	r11
    231c:	af 90       	pop	r10
    231e:	9f 90       	pop	r9
    2320:	8f 90       	pop	r8
    2322:	08 95       	ret

00002324 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
    2324:	ef 92       	push	r14
    2326:	ff 92       	push	r15
    2328:	0f 93       	push	r16
    232a:	1f 93       	push	r17
    232c:	79 01       	movw	r14, r18
  return readData(block, 0, 512, dst);
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	12 e0       	ldi	r17, 0x02	; 2
    2336:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <_ZN7Sd2Card8readDataEmjjPh>
}
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	ff 90       	pop	r15
    2340:	ef 90       	pop	r14
    2342:	08 95       	ret

00002344 <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
    2344:	cf 93       	push	r28
    2346:	df 93       	push	r29
    2348:	ec 01       	movw	r28, r24
#ifdef OPTIMIZE_HARDWARE_SPI

  // send data - optimized loop
  SPDR = token;
    234a:	6e bd       	out	0x2e, r22	; 46
    234c:	fa 01       	movw	r30, r20

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    while (!(SPSR & (1 << SPIF)));
    2352:	0d b4       	in	r0, 0x2d	; 45
    2354:	07 fe       	sbrs	r0, 7
    2356:	fd cf       	rjmp	.-6      	; 0x2352 <_ZN7Sd2Card9writeDataEhPKh+0xe>
    SPDR = src[i];
    2358:	20 81       	ld	r18, Z
    235a:	2e bd       	out	0x2e, r18	; 46
    while (!(SPSR & (1 << SPIF)));
    235c:	0d b4       	in	r0, 0x2d	; 45
    235e:	07 fe       	sbrs	r0, 7
    2360:	fd cf       	rjmp	.-6      	; 0x235c <_ZN7Sd2Card9writeDataEhPKh+0x18>
    SPDR = src[i+1];
    2362:	21 81       	ldd	r18, Z+1	; 0x01
    2364:	2e bd       	out	0x2e, r18	; 46

  // send data - optimized loop
  SPDR = token;

  // send two byte per iteration
  for (uint16_t i = 0; i < 512; i += 2) {
    2366:	02 96       	adiw	r24, 0x02	; 2
    2368:	32 96       	adiw	r30, 0x02	; 2
    236a:	22 e0       	ldi	r18, 0x02	; 2
    236c:	80 30       	cpi	r24, 0x00	; 0
    236e:	92 07       	cpc	r25, r18
    2370:	81 f7       	brne	.-32     	; 0x2352 <_ZN7Sd2Card9writeDataEhPKh+0xe>
    while (!(SPSR & (1 << SPIF)));
    SPDR = src[i+1];
  }

  // wait for last data byte
  while (!(SPSR & (1 << SPIF)));
    2372:	0d b4       	in	r0, 0x2d	; 45
    2374:	07 fe       	sbrs	r0, 7
    2376:	fd cf       	rjmp	.-6      	; 0x2372 <_ZN7Sd2Card9writeDataEhPKh+0x2e>
  spiSend(token);
  for (uint16_t i = 0; i < 512; i++) {
    spiSend(src[i]);
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
    2378:	8f ef       	ldi	r24, 0xFF	; 255
    237a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
    237e:	8f ef       	ldi	r24, 0xFF	; 255
    2380:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <_ZL7spiSendh>

  status_ = spiRec();
    2384:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    2388:	8a 87       	std	Y+10, r24	; 0x0a
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    238a:	8f 71       	andi	r24, 0x1F	; 31
    238c:	85 30       	cpi	r24, 0x05	; 5
    238e:	39 f0       	breq	.+14     	; 0x239e <_ZN7Sd2Card9writeDataEhPKh+0x5a>
    2390:	81 e1       	ldi	r24, 0x11	; 17
    2392:	8d 83       	std	Y+5, r24	; 0x05
    error(SD_CARD_ERROR_WRITE);
    chipSelectHigh();
    2394:	ce 01       	movw	r24, r28
    2396:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
    return false;
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <_ZN7Sd2Card9writeDataEhPKh+0x5c>
  }
  return true;
    239e:	81 e0       	ldi	r24, 0x01	; 1
}
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	08 95       	ret

000023a6 <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
    23a6:	cf 92       	push	r12
    23a8:	df 92       	push	r13
    23aa:	ef 92       	push	r14
    23ac:	ff 92       	push	r15
    23ae:	0f 93       	push	r16
    23b0:	1f 93       	push	r17
    23b2:	cf 93       	push	r28
    23b4:	df 93       	push	r29
    23b6:	ec 01       	movw	r28, r24
    23b8:	6a 01       	movw	r12, r20
    23ba:	7b 01       	movw	r14, r22
    23bc:	89 01       	movw	r16, r18
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
    23be:	41 15       	cp	r20, r1
    23c0:	51 05       	cpc	r21, r1
    23c2:	61 05       	cpc	r22, r1
    23c4:	71 05       	cpc	r23, r1
    23c6:	11 f4       	brne	.+4      	; 0x23cc <_ZN7Sd2Card10writeBlockEmPKh+0x26>
    23c8:	82 e1       	ldi	r24, 0x12	; 18
    23ca:	33 c0       	rjmp	.+102    	; 0x2432 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    goto fail;
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
    23cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ce:	83 30       	cpi	r24, 0x03	; 3
    23d0:	39 f0       	breq	.+14     	; 0x23e0 <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
    23d2:	e9 e0       	ldi	r30, 0x09	; 9
    23d4:	cc 0c       	add	r12, r12
    23d6:	dd 1c       	adc	r13, r13
    23d8:	ee 1c       	adc	r14, r14
    23da:	ff 1c       	adc	r15, r15
    23dc:	ea 95       	dec	r30
    23de:	d1 f7       	brne	.-12     	; 0x23d4 <_ZN7Sd2Card10writeBlockEmPKh+0x2e>
  if (cardCommand(CMD24, blockNumber)) {
    23e0:	ce 01       	movw	r24, r28
    23e2:	68 e1       	ldi	r22, 0x18	; 24
    23e4:	a7 01       	movw	r20, r14
    23e6:	96 01       	movw	r18, r12
    23e8:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    23ec:	88 23       	and	r24, r24
    23ee:	11 f0       	breq	.+4      	; 0x23f4 <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
    23f0:	84 e0       	ldi	r24, 0x04	; 4
    23f2:	1f c0       	rjmp	.+62     	; 0x2432 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
    23f4:	ce 01       	movw	r24, r28
    23f6:	6e ef       	ldi	r22, 0xFE	; 254
    23f8:	a8 01       	movw	r20, r16
    23fa:	0e 94 a2 11 	call	0x2344	; 0x2344 <_ZN7Sd2Card9writeDataEhPKh>
    23fe:	88 23       	and	r24, r24
    2400:	c9 f0       	breq	.+50     	; 0x2434 <_ZN7Sd2Card10writeBlockEmPKh+0x8e>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    2402:	ce 01       	movw	r24, r28
    2404:	68 e5       	ldi	r22, 0x58	; 88
    2406:	72 e0       	ldi	r23, 0x02	; 2
    2408:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <_ZN7Sd2Card11waitNotBusyEj>
    240c:	88 23       	and	r24, r24
    240e:	11 f4       	brne	.+4      	; 0x2414 <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
    2410:	85 e1       	ldi	r24, 0x15	; 21
    2412:	0f c0       	rjmp	.+30     	; 0x2432 <_ZN7Sd2Card10writeBlockEmPKh+0x8c>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    2414:	ce 01       	movw	r24, r28
    2416:	6d e0       	ldi	r22, 0x0D	; 13
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	50 e0       	ldi	r21, 0x00	; 0
    2420:	0e 94 b2 0f 	call	0x1f64	; 0x1f64 <_ZN7Sd2Card11cardCommandEhm>
    2424:	88 23       	and	r24, r24
    2426:	21 f4       	brne	.+8      	; 0x2430 <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
    2428:	0e 94 40 0f 	call	0x1e80	; 0x1e80 <_ZL6spiRecv>
    242c:	88 23       	and	r24, r24
    242e:	79 f0       	breq	.+30     	; 0x244e <_ZN7Sd2Card10writeBlockEmPKh+0xa8>
    2430:	84 e1       	ldi	r24, 0x14	; 20
    2432:	8d 83       	std	Y+5, r24	; 0x05
  }
  chipSelectHigh();
  return true;

 fail:
  chipSelectHigh();
    2434:	ce 01       	movw	r24, r28
    2436:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  return false;
    243a:	80 e0       	ldi	r24, 0x00	; 0
}
    243c:	df 91       	pop	r29
    243e:	cf 91       	pop	r28
    2440:	1f 91       	pop	r17
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	08 95       	ret
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
  chipSelectHigh();
    244e:	ce 01       	movw	r24, r28
    2450:	0e 94 45 0f 	call	0x1e8a	; 0x1e8a <_ZN7Sd2Card14chipSelectHighEv>
  return true;
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	f2 cf       	rjmp	.-28     	; 0x243c <_ZN7Sd2Card10writeBlockEmPKh+0x96>

00002458 <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
    245c:	ec 01       	movw	r28, r24
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    245e:	9c 01       	movw	r18, r24
    2460:	2a 5f       	subi	r18, 0xFA	; 250
    2462:	3f 4f       	sbci	r19, 0xFF	; 255
    2464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2468:	41 e0       	ldi	r20, 0x01	; 1
    246a:	50 e0       	ldi	r21, 0x00	; 0
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	0e 94 77 17 	call	0x2eee	; 0x2eee <_ZN8SdVolume15allocContiguousEmPm>
    2474:	88 23       	and	r24, r24
    2476:	a1 f0       	breq	.+40     	; 0x24a0 <_ZN6SdFile10addClusterEv+0x48>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    2478:	8f 89       	ldd	r24, Y+23	; 0x17
    247a:	98 8d       	ldd	r25, Y+24	; 0x18
    247c:	a9 8d       	ldd	r26, Y+25	; 0x19
    247e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	a1 05       	cpc	r26, r1
    2484:	b1 05       	cpc	r27, r1
    2486:	71 f4       	brne	.+28     	; 0x24a4 <_ZN6SdFile10addClusterEv+0x4c>
    firstCluster_ = curCluster_;
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	a8 85       	ldd	r26, Y+8	; 0x08
    248e:	b9 85       	ldd	r27, Y+9	; 0x09
    2490:	8f 8b       	std	Y+23, r24	; 0x17
    2492:	98 8f       	std	Y+24, r25	; 0x18
    2494:	a9 8f       	std	Y+25, r26	; 0x19
    2496:	ba 8f       	std	Y+26, r27	; 0x1a
    flags_ |= F_FILE_DIR_DIRTY;
    2498:	8c 81       	ldd	r24, Y+4	; 0x04
    249a:	80 68       	ori	r24, 0x80	; 128
    249c:	8c 83       	std	Y+4, r24	; 0x04
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <_ZN6SdFile10addClusterEv+0x4c>
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	01 c0       	rjmp	.+2      	; 0x24a6 <_ZN6SdFile10addClusterEv+0x4e>
  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
    firstCluster_ = curCluster_;
    flags_ |= F_FILE_DIR_DIRTY;
  }
  return true;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
}
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	ec 01       	movw	r28, r24
    24b2:	46 2f       	mov	r20, r22
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    24b4:	8e 85       	ldd	r24, Y+14	; 0x0e
    24b6:	9f 85       	ldd	r25, Y+15	; 0x0f
    24b8:	a8 89       	ldd	r26, Y+16	; 0x10
    24ba:	b9 89       	ldd	r27, Y+17	; 0x11
    24bc:	bc 01       	movw	r22, r24
    24be:	cd 01       	movw	r24, r26
    24c0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    24c4:	88 23       	and	r24, r24
    24c6:	51 f0       	breq	.+20     	; 0x24dc <_ZN6SdFile13cacheDirEntryEh+0x30>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
    24c8:	8a 89       	ldd	r24, Y+18	; 0x12
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	25 e0       	ldi	r18, 0x05	; 5
    24ce:	88 0f       	add	r24, r24
    24d0:	99 1f       	adc	r25, r25
    24d2:	2a 95       	dec	r18
    24d4:	e1 f7       	brne	.-8      	; 0x24ce <_ZN6SdFile13cacheDirEntryEh+0x22>
    24d6:	8a 53       	subi	r24, 0x3A	; 58
    24d8:	9a 4f       	sbci	r25, 0xFA	; 250
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <_ZN6SdFile13cacheDirEntryEh+0x34>
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	90 e0       	ldi	r25, 0x00	; 0
  return SdVolume::cacheBuffer_.dir + dirIndex_;
}
    24e0:	df 91       	pop	r29
    24e2:	cf 91       	pop	r28
    24e4:	08 95       	ret

000024e6 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	ec 01       	movw	r28, r24
    24f0:	8b 01       	movw	r16, r22
  // error if file is already open
  if (isOpen()) return false;
    24f2:	8d 81       	ldd	r24, Y+5	; 0x05
    24f4:	88 23       	and	r24, r24
    24f6:	09 f0       	breq	.+2      	; 0x24fa <_ZN6SdFile8openRootEP8SdVolume+0x14>
    24f8:	41 c0       	rjmp	.+130    	; 0x257c <_ZN6SdFile8openRootEP8SdVolume+0x96>
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    24fa:	fb 01       	movw	r30, r22
    24fc:	87 89       	ldd	r24, Z+23	; 0x17
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
  // error if file is already open
  if (isOpen()) return false;

  if (vol->fatType() == 16) {
    24fe:	80 31       	cpi	r24, 0x10	; 16
    2500:	b1 f4       	brne	.+44     	; 0x252e <_ZN6SdFile8openRootEP8SdVolume+0x48>
    type_ = FAT_FILE_TYPE_ROOT16;
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	8d 83       	std	Y+5, r24	; 0x05
    firstCluster_ = 0;
    2506:	1f 8a       	std	Y+23, r1	; 0x17
    2508:	18 8e       	std	Y+24, r1	; 0x18
    250a:	19 8e       	std	Y+25, r1	; 0x19
    250c:	1a 8e       	std	Y+26, r1	; 0x1a
  /** \return The logical block number for the start of the first FAT. */
  uint32_t fatStartBlock(void) const {return fatStartBlock_;}
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType(void) const {return fatType_;}
  /** \return The number of entries in the root directory for FAT16 volumes. */
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
    250e:	80 8d       	ldd	r24, Z+24	; 0x18
    2510:	91 8d       	ldd	r25, Z+25	; 0x19
    2512:	a0 e0       	ldi	r26, 0x00	; 0
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    fileSize_ = 32 * vol->rootDirEntryCount();
    2516:	35 e0       	ldi	r19, 0x05	; 5
    2518:	88 0f       	add	r24, r24
    251a:	99 1f       	adc	r25, r25
    251c:	aa 1f       	adc	r26, r26
    251e:	bb 1f       	adc	r27, r27
    2520:	3a 95       	dec	r19
    2522:	d1 f7       	brne	.-12     	; 0x2518 <_ZN6SdFile8openRootEP8SdVolume+0x32>
    2524:	8b 8b       	std	Y+19, r24	; 0x13
    2526:	9c 8b       	std	Y+20, r25	; 0x14
    2528:	ad 8b       	std	Y+21, r26	; 0x15
    252a:	be 8b       	std	Y+22, r27	; 0x16
    252c:	15 c0       	rjmp	.+42     	; 0x2558 <_ZN6SdFile8openRootEP8SdVolume+0x72>
  } else if (vol->fatType() == 32) {
    252e:	80 32       	cpi	r24, 0x20	; 32
    2530:	29 f5       	brne	.+74     	; 0x257c <_ZN6SdFile8openRootEP8SdVolume+0x96>
    type_ = FAT_FILE_TYPE_ROOT32;
    2532:	83 e0       	ldi	r24, 0x03	; 3
    2534:	8d 83       	std	Y+5, r24	; 0x05
  /** \return The logical block number for the start of the root directory
       on FAT16 volumes or the first cluster number on FAT32 volumes. */
  uint32_t rootDirStart(void) const {return rootDirStart_;}
    2536:	fb 01       	movw	r30, r22
    2538:	42 8d       	ldd	r20, Z+26	; 0x1a
    253a:	53 8d       	ldd	r21, Z+27	; 0x1b
    253c:	64 8d       	ldd	r22, Z+28	; 0x1c
    253e:	75 8d       	ldd	r23, Z+29	; 0x1d
    firstCluster_ = vol->rootDirStart();
    2540:	4f 8b       	std	Y+23, r20	; 0x17
    2542:	58 8f       	std	Y+24, r21	; 0x18
    2544:	69 8f       	std	Y+25, r22	; 0x19
    2546:	7a 8f       	std	Y+26, r23	; 0x1a
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    2548:	9e 01       	movw	r18, r28
    254a:	2d 5e       	subi	r18, 0xED	; 237
    254c:	3f 4f       	sbci	r19, 0xFF	; 255
    254e:	c8 01       	movw	r24, r16
    2550:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <_ZNK8SdVolume9chainSizeEmPm>
    2554:	88 23       	and	r24, r24
    2556:	91 f0       	breq	.+36     	; 0x257c <_ZN6SdFile8openRootEP8SdVolume+0x96>
  } else {
    // volume is not initialized or FAT12
    return false;
  }
  vol_ = vol;
    2558:	1c 8f       	std	Y+28, r17	; 0x1c
    255a:	0b 8f       	std	Y+27, r16	; 0x1b
  // read only
  flags_ = O_READ;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	8c 83       	std	Y+4, r24	; 0x04

  // set to start of file
  curCluster_ = 0;
    2560:	1e 82       	std	Y+6, r1	; 0x06
    2562:	1f 82       	std	Y+7, r1	; 0x07
    2564:	18 86       	std	Y+8, r1	; 0x08
    2566:	19 86       	std	Y+9, r1	; 0x09
  curPosition_ = 0;
    2568:	1a 86       	std	Y+10, r1	; 0x0a
    256a:	1b 86       	std	Y+11, r1	; 0x0b
    256c:	1c 86       	std	Y+12, r1	; 0x0c
    256e:	1d 86       	std	Y+13, r1	; 0x0d

  // root has no directory entry
  dirBlock_ = 0;
    2570:	1e 86       	std	Y+14, r1	; 0x0e
    2572:	1f 86       	std	Y+15, r1	; 0x0f
    2574:	18 8a       	std	Y+16, r1	; 0x10
    2576:	19 8a       	std	Y+17, r1	; 0x11
  dirIndex_ = 0;
    2578:	1a 8a       	std	Y+18, r1	; 0x12
  return true;
    257a:	01 c0       	rjmp	.+2      	; 0x257e <_ZN6SdFile8openRootEP8SdVolume+0x98>
    firstCluster_ = 0;
    fileSize_ = 32 * vol->rootDirEntryCount();
  } else if (vol->fatType() == 32) {
    type_ = FAT_FILE_TYPE_ROOT32;
    firstCluster_ = vol->rootDirStart();
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
    257c:	80 e0       	ldi	r24, 0x00	; 0

  // root has no directory entry
  dirBlock_ = 0;
  dirIndex_ = 0;
  return true;
}
    257e:	df 91       	pop	r29
    2580:	cf 91       	pop	r28
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	08 95       	ret

00002588 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
    2588:	8f 92       	push	r8
    258a:	9f 92       	push	r9
    258c:	af 92       	push	r10
    258e:	bf 92       	push	r11
    2590:	cf 92       	push	r12
    2592:	df 92       	push	r13
    2594:	ef 92       	push	r14
    2596:	ff 92       	push	r15
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	cf 93       	push	r28
    259e:	df 93       	push	r29
    25a0:	ec 01       	movw	r28, r24
    25a2:	4a 01       	movw	r8, r20
    25a4:	5b 01       	movw	r10, r22
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    25a6:	2d 81       	ldd	r18, Y+5	; 0x05
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    25a8:	22 23       	and	r18, r18
    25aa:	09 f4       	brne	.+2      	; 0x25ae <_ZN6SdFile7seekSetEm+0x26>
    25ac:	75 c0       	rjmp	.+234    	; 0x2698 <_ZN6SdFile7seekSetEm+0x110>
    25ae:	8b 89       	ldd	r24, Y+19	; 0x13
    25b0:	9c 89       	ldd	r25, Y+20	; 0x14
    25b2:	ad 89       	ldd	r26, Y+21	; 0x15
    25b4:	be 89       	ldd	r27, Y+22	; 0x16
    25b6:	84 17       	cp	r24, r20
    25b8:	95 07       	cpc	r25, r21
    25ba:	a6 07       	cpc	r26, r22
    25bc:	b7 07       	cpc	r27, r23
    25be:	08 f4       	brcc	.+2      	; 0x25c2 <_ZN6SdFile7seekSetEm+0x3a>
    25c0:	6b c0       	rjmp	.+214    	; 0x2698 <_ZN6SdFile7seekSetEm+0x110>
    25c2:	78 c0       	rjmp	.+240    	; 0x26b4 <_ZN6SdFile7seekSetEm+0x12c>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    curPosition_ = pos;
    return true;
  }
  if (pos == 0) {
    25c4:	81 14       	cp	r8, r1
    25c6:	91 04       	cpc	r9, r1
    25c8:	a1 04       	cpc	r10, r1
    25ca:	b1 04       	cpc	r11, r1
    25cc:	49 f4       	brne	.+18     	; 0x25e0 <_ZN6SdFile7seekSetEm+0x58>
    // set position to start of file
    curCluster_ = 0;
    25ce:	1e 82       	std	Y+6, r1	; 0x06
    25d0:	1f 82       	std	Y+7, r1	; 0x07
    25d2:	18 86       	std	Y+8, r1	; 0x08
    25d4:	19 86       	std	Y+9, r1	; 0x09
    curPosition_ = 0;
    25d6:	1a 86       	std	Y+10, r1	; 0x0a
    25d8:	1b 86       	std	Y+11, r1	; 0x0b
    25da:	1c 86       	std	Y+12, r1	; 0x0c
    25dc:	1d 86       	std	Y+13, r1	; 0x0d
    25de:	5a c0       	rjmp	.+180    	; 0x2694 <_ZN6SdFile7seekSetEm+0x10c>
    return true;
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
    25e0:	4a 85       	ldd	r20, Y+10	; 0x0a
    25e2:	5b 85       	ldd	r21, Y+11	; 0x0b
    25e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    25e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    25e8:	eb 8d       	ldd	r30, Y+27	; 0x1b
    25ea:	fc 8d       	ldd	r31, Y+28	; 0x1c
    25ec:	25 85       	ldd	r18, Z+13	; 0x0d
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	27 5f       	subi	r18, 0xF7	; 247
    25f2:	3f 4f       	sbci	r19, 0xFF	; 255
    25f4:	db 01       	movw	r26, r22
    25f6:	ca 01       	movw	r24, r20
    25f8:	01 97       	sbiw	r24, 0x01	; 1
    25fa:	a1 09       	sbc	r26, r1
    25fc:	b1 09       	sbc	r27, r1
    25fe:	02 2e       	mov	r0, r18
    2600:	04 c0       	rjmp	.+8      	; 0x260a <_ZN6SdFile7seekSetEm+0x82>
    2602:	b6 95       	lsr	r27
    2604:	a7 95       	ror	r26
    2606:	97 95       	ror	r25
    2608:	87 95       	ror	r24
    260a:	0a 94       	dec	r0
    260c:	d2 f7       	brpl	.-12     	; 0x2602 <_ZN6SdFile7seekSetEm+0x7a>
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
    260e:	75 01       	movw	r14, r10
    2610:	64 01       	movw	r12, r8
    2612:	08 94       	sec
    2614:	c1 08       	sbc	r12, r1
    2616:	d1 08       	sbc	r13, r1
    2618:	e1 08       	sbc	r14, r1
    261a:	f1 08       	sbc	r15, r1
    261c:	04 c0       	rjmp	.+8      	; 0x2626 <_ZN6SdFile7seekSetEm+0x9e>
    261e:	f6 94       	lsr	r15
    2620:	e7 94       	ror	r14
    2622:	d7 94       	ror	r13
    2624:	c7 94       	ror	r12
    2626:	2a 95       	dec	r18
    2628:	d2 f7       	brpl	.-12     	; 0x261e <_ZN6SdFile7seekSetEm+0x96>

  if (nNew < nCur || curPosition_ == 0) {
    262a:	c8 16       	cp	r12, r24
    262c:	d9 06       	cpc	r13, r25
    262e:	ea 06       	cpc	r14, r26
    2630:	fb 06       	cpc	r15, r27
    2632:	28 f0       	brcs	.+10     	; 0x263e <_ZN6SdFile7seekSetEm+0xb6>
    2634:	41 15       	cp	r20, r1
    2636:	51 05       	cpc	r21, r1
    2638:	61 05       	cpc	r22, r1
    263a:	71 05       	cpc	r23, r1
    263c:	49 f4       	brne	.+18     	; 0x2650 <_ZN6SdFile7seekSetEm+0xc8>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
    263e:	8f 89       	ldd	r24, Y+23	; 0x17
    2640:	98 8d       	ldd	r25, Y+24	; 0x18
    2642:	a9 8d       	ldd	r26, Y+25	; 0x19
    2644:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2646:	8e 83       	std	Y+6, r24	; 0x06
    2648:	9f 83       	std	Y+7, r25	; 0x07
    264a:	a8 87       	std	Y+8, r26	; 0x08
    264c:	b9 87       	std	Y+9, r27	; 0x09
    264e:	16 c0       	rjmp	.+44     	; 0x267c <_ZN6SdFile7seekSetEm+0xf4>
  } else {
    // advance from curPosition
    nNew -= nCur;
    2650:	c8 1a       	sub	r12, r24
    2652:	d9 0a       	sbc	r13, r25
    2654:	ea 0a       	sbc	r14, r26
    2656:	fb 0a       	sbc	r15, r27
    2658:	11 c0       	rjmp	.+34     	; 0x267c <_ZN6SdFile7seekSetEm+0xf4>
  }
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
    265a:	4e 81       	ldd	r20, Y+6	; 0x06
    265c:	5f 81       	ldd	r21, Y+7	; 0x07
    265e:	68 85       	ldd	r22, Y+8	; 0x08
    2660:	79 85       	ldd	r23, Y+9	; 0x09
    2662:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2664:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2666:	98 01       	movw	r18, r16
    2668:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK8SdVolume6fatGetEmPm>
    266c:	08 94       	sec
    266e:	c1 08       	sbc	r12, r1
    2670:	d1 08       	sbc	r13, r1
    2672:	e1 08       	sbc	r14, r1
    2674:	f1 08       	sbc	r15, r1
    2676:	88 23       	and	r24, r24
    2678:	21 f4       	brne	.+8      	; 0x2682 <_ZN6SdFile7seekSetEm+0xfa>
    267a:	0e c0       	rjmp	.+28     	; 0x2698 <_ZN6SdFile7seekSetEm+0x110>
    267c:	8e 01       	movw	r16, r28
    267e:	0a 5f       	subi	r16, 0xFA	; 250
    2680:	1f 4f       	sbci	r17, 0xFF	; 255
    curCluster_ = firstCluster_;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    2682:	c1 14       	cp	r12, r1
    2684:	d1 04       	cpc	r13, r1
    2686:	e1 04       	cpc	r14, r1
    2688:	f1 04       	cpc	r15, r1
    268a:	39 f7       	brne	.-50     	; 0x265a <_ZN6SdFile7seekSetEm+0xd2>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
    268c:	8a 86       	std	Y+10, r8	; 0x0a
    268e:	9b 86       	std	Y+11, r9	; 0x0b
    2690:	ac 86       	std	Y+12, r10	; 0x0c
    2692:	bd 86       	std	Y+13, r11	; 0x0d
  return true;
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	01 c0       	rjmp	.+2      	; 0x269a <_ZN6SdFile7seekSetEm+0x112>
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
    2698:	80 e0       	ldi	r24, 0x00	; 0
  while (nNew--) {
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
  }
  curPosition_ = pos;
  return true;
}
    269a:	df 91       	pop	r29
    269c:	cf 91       	pop	r28
    269e:	1f 91       	pop	r17
    26a0:	0f 91       	pop	r16
    26a2:	ff 90       	pop	r15
    26a4:	ef 90       	pop	r14
    26a6:	df 90       	pop	r13
    26a8:	cf 90       	pop	r12
    26aa:	bf 90       	pop	r11
    26ac:	af 90       	pop	r10
    26ae:	9f 90       	pop	r9
    26b0:	8f 90       	pop	r8
    26b2:	08 95       	ret
 */
uint8_t SdFile::seekSet(uint32_t pos) {
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;

  if (type_ == FAT_FILE_TYPE_ROOT16) {
    26b4:	22 30       	cpi	r18, 0x02	; 2
    26b6:	09 f0       	breq	.+2      	; 0x26ba <_ZN6SdFile7seekSetEm+0x132>
    26b8:	85 cf       	rjmp	.-246    	; 0x25c4 <_ZN6SdFile7seekSetEm+0x3c>
    26ba:	e8 cf       	rjmp	.-48     	; 0x268c <_ZN6SdFile7seekSetEm+0x104>

000026bc <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	8c 01       	movw	r16, r24
  // only allow open files and directories
  if (!isOpen()) return false;
    26c6:	fc 01       	movw	r30, r24
    26c8:	85 81       	ldd	r24, Z+5	; 0x05
    26ca:	88 23       	and	r24, r24
    26cc:	b1 f1       	breq	.+108    	; 0x273a <_ZN6SdFile4syncEv+0x7e>

  if (flags_ & F_FILE_DIR_DIRTY) {
    26ce:	84 81       	ldd	r24, Z+4	; 0x04
    26d0:	87 ff       	sbrs	r24, 7
    26d2:	30 c0       	rjmp	.+96     	; 0x2734 <_ZN6SdFile4syncEv+0x78>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
    26d4:	c8 01       	movw	r24, r16
    26d6:	61 e0       	ldi	r22, 0x01	; 1
    26d8:	0e 94 56 12 	call	0x24ac	; 0x24ac <_ZN6SdFile13cacheDirEntryEh>
    26dc:	ec 01       	movw	r28, r24
    if (!d) return false;
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	61 f1       	breq	.+88     	; 0x273a <_ZN6SdFile4syncEv+0x7e>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
    26e2:	f8 01       	movw	r30, r16
    26e4:	85 81       	ldd	r24, Z+5	; 0x05
    26e6:	82 30       	cpi	r24, 0x02	; 2
    26e8:	40 f4       	brcc	.+16     	; 0x26fa <_ZN6SdFile4syncEv+0x3e>
    26ea:	83 89       	ldd	r24, Z+19	; 0x13
    26ec:	94 89       	ldd	r25, Z+20	; 0x14
    26ee:	a5 89       	ldd	r26, Z+21	; 0x15
    26f0:	b6 89       	ldd	r27, Z+22	; 0x16
    26f2:	8c 8f       	std	Y+28, r24	; 0x1c
    26f4:	9d 8f       	std	Y+29, r25	; 0x1d
    26f6:	ae 8f       	std	Y+30, r26	; 0x1e
    26f8:	bf 8f       	std	Y+31, r27	; 0x1f

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
    26fa:	f8 01       	movw	r30, r16
    26fc:	87 89       	ldd	r24, Z+23	; 0x17
    26fe:	90 8d       	ldd	r25, Z+24	; 0x18
    2700:	a1 8d       	ldd	r26, Z+25	; 0x19
    2702:	b2 8d       	ldd	r27, Z+26	; 0x1a
    2704:	9b 8f       	std	Y+27, r25	; 0x1b
    2706:	8a 8f       	std	Y+26, r24	; 0x1a
    d->firstClusterHigh = firstCluster_ >> 16;
    2708:	bd 8b       	std	Y+21, r27	; 0x15
    270a:	ac 8b       	std	Y+20, r26	; 0x14

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
    270c:	e0 91 bd 05 	lds	r30, 0x05BD
    2710:	f0 91 be 05 	lds	r31, 0x05BE
    2714:	30 97       	sbiw	r30, 0x00	; 0
    2716:	51 f0       	breq	.+20     	; 0x272c <_ZN6SdFile4syncEv+0x70>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
    2718:	be 01       	movw	r22, r28
    271a:	6a 5e       	subi	r22, 0xEA	; 234
    271c:	7f 4f       	sbci	r23, 0xFF	; 255
    271e:	ce 01       	movw	r24, r28
    2720:	48 96       	adiw	r24, 0x18	; 24
    2722:	09 95       	icall
      d->lastAccessDate = d->lastWriteDate;
    2724:	88 8d       	ldd	r24, Y+24	; 0x18
    2726:	99 8d       	ldd	r25, Y+25	; 0x19
    2728:	9b 8b       	std	Y+19, r25	; 0x13
    272a:	8a 8b       	std	Y+18, r24	; 0x12
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
    272c:	f8 01       	movw	r30, r16
    272e:	84 81       	ldd	r24, Z+4	; 0x04
    2730:	8f 77       	andi	r24, 0x7F	; 127
    2732:	84 83       	std	Z+4, r24	; 0x04
  }
  return SdVolume::cacheFlush();
    2734:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN8SdVolume10cacheFlushEv>
    2738:	01 c0       	rjmp	.+2      	; 0x273c <_ZN6SdFile4syncEv+0x80>
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
  // only allow open files and directories
  if (!isOpen()) return false;
    273a:	80 e0       	ldi	r24, 0x00	; 0
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
  }
  return SdVolume::cacheFlush();
}
    273c:	df 91       	pop	r29
    273e:	cf 91       	pop	r28
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	08 95       	ret

00002746 <_ZN6SdFile5writeEPKvj>:
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    2746:	2f 92       	push	r2
    2748:	3f 92       	push	r3
    274a:	4f 92       	push	r4
    274c:	5f 92       	push	r5
    274e:	6f 92       	push	r6
    2750:	7f 92       	push	r7
    2752:	8f 92       	push	r8
    2754:	9f 92       	push	r9
    2756:	bf 92       	push	r11
    2758:	cf 92       	push	r12
    275a:	df 92       	push	r13
    275c:	ef 92       	push	r14
    275e:	ff 92       	push	r15
    2760:	0f 93       	push	r16
    2762:	1f 93       	push	r17
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	00 d0       	rcall	.+0      	; 0x276a <_ZN6SdFile5writeEPKvj+0x24>
    276a:	00 d0       	rcall	.+0      	; 0x276c <_ZN6SdFile5writeEPKvj+0x26>
    276c:	00 d0       	rcall	.+0      	; 0x276e <_ZN6SdFile5writeEPKvj+0x28>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	8c 01       	movw	r16, r24
    2774:	b6 2e       	mov	r11, r22
    2776:	c7 2e       	mov	r12, r23
    2778:	5e 83       	std	Y+6, r21	; 0x06
    277a:	4d 83       	std	Y+5, r20	; 0x05

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
    277c:	dc 01       	movw	r26, r24
    277e:	15 96       	adiw	r26, 0x05	; 5
    2780:	8c 91       	ld	r24, X
    2782:	15 97       	sbiw	r26, 0x05	; 5
    2784:	81 30       	cpi	r24, 0x01	; 1
    2786:	09 f0       	breq	.+2      	; 0x278a <_ZN6SdFile5writeEPKvj+0x44>
    2788:	67 c1       	rjmp	.+718    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
    278a:	14 96       	adiw	r26, 0x04	; 4
    278c:	8c 91       	ld	r24, X
    278e:	14 97       	sbiw	r26, 0x04	; 4
    2790:	81 ff       	sbrs	r24, 1
    2792:	62 c1       	rjmp	.+708    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
    2794:	84 c1       	rjmp	.+776    	; 0x2a9e <_ZN6SdFile5writeEPKvj+0x358>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2796:	f8 01       	movw	r30, r16
    2798:	43 89       	ldd	r20, Z+19	; 0x13
    279a:	54 89       	ldd	r21, Z+20	; 0x14
    279c:	65 89       	ldd	r22, Z+21	; 0x15
    279e:	76 89       	ldd	r23, Z+22	; 0x16
    27a0:	82 85       	ldd	r24, Z+10	; 0x0a
    27a2:	93 85       	ldd	r25, Z+11	; 0x0b
    27a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    27a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    27a8:	84 17       	cp	r24, r20
    27aa:	95 07       	cpc	r25, r21
    27ac:	a6 07       	cpc	r26, r22
    27ae:	b7 07       	cpc	r27, r23
    27b0:	31 f0       	breq	.+12     	; 0x27be <_ZN6SdFile5writeEPKvj+0x78>
  }
  /**
   *  Set the files current position to end of file.  Useful to position
   *  a file for append. See seekSet().
   */
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
    27b2:	c8 01       	movw	r24, r16
    27b4:	0e 94 c4 12 	call	0x2588	; 0x2588 <_ZN6SdFile7seekSetEm>
    if (!seekEnd()) goto writeErrorReturn;
    27b8:	88 23       	and	r24, r24
    27ba:	09 f4       	brne	.+2      	; 0x27be <_ZN6SdFile5writeEPKvj+0x78>
    27bc:	4d c1       	rjmp	.+666    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    27be:	2d 80       	ldd	r2, Y+5	; 0x05
    27c0:	3e 80       	ldd	r3, Y+6	; 0x06
    27c2:	4b 2c       	mov	r4, r11
    27c4:	5c 2c       	mov	r5, r12
    27c6:	18 c1       	rjmp	.+560    	; 0x29f8 <_ZN6SdFile5writeEPKvj+0x2b2>
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
    27c8:	f8 01       	movw	r30, r16
    27ca:	23 8d       	ldd	r18, Z+27	; 0x1b
    27cc:	34 8d       	ldd	r19, Z+28	; 0x1c
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
    27ce:	f9 01       	movw	r30, r18
    27d0:	b4 80       	ldd	r11, Z+4	; 0x04
    27d2:	ba 94       	dec	r11
    27d4:	ac 01       	movw	r20, r24
    27d6:	bd 01       	movw	r22, r26
    27d8:	03 2e       	mov	r0, r19
    27da:	39 e0       	ldi	r19, 0x09	; 9
    27dc:	76 95       	lsr	r23
    27de:	67 95       	ror	r22
    27e0:	57 95       	ror	r21
    27e2:	47 95       	ror	r20
    27e4:	3a 95       	dec	r19
    27e6:	d1 f7       	brne	.-12     	; 0x27dc <_ZN6SdFile5writeEPKvj+0x96>
    27e8:	30 2d       	mov	r19, r0
    27ea:	b4 22       	and	r11, r20
    uint16_t blockOffset = curPosition_ & 0X1FF;
    27ec:	4f ef       	ldi	r20, 0xFF	; 255
    27ee:	64 2e       	mov	r6, r20
    27f0:	41 e0       	ldi	r20, 0x01	; 1
    27f2:	74 2e       	mov	r7, r20
    27f4:	68 22       	and	r6, r24
    27f6:	79 22       	and	r7, r25
    if (blockOfCluster == 0 && blockOffset == 0) {
    27f8:	bb 20       	and	r11, r11
    27fa:	09 f0       	breq	.+2      	; 0x27fe <_ZN6SdFile5writeEPKvj+0xb8>
    27fc:	4e c0       	rjmp	.+156    	; 0x289a <_ZN6SdFile5writeEPKvj+0x154>
    27fe:	61 14       	cp	r6, r1
    2800:	71 04       	cpc	r7, r1
    2802:	09 f0       	breq	.+2      	; 0x2806 <_ZN6SdFile5writeEPKvj+0xc0>
    2804:	4a c0       	rjmp	.+148    	; 0x289a <_ZN6SdFile5writeEPKvj+0x154>
      // start of new cluster
      if (curCluster_ == 0) {
    2806:	d8 01       	movw	r26, r16
    2808:	16 96       	adiw	r26, 0x06	; 6
    280a:	4d 91       	ld	r20, X+
    280c:	5d 91       	ld	r21, X+
    280e:	6d 91       	ld	r22, X+
    2810:	7c 91       	ld	r23, X
    2812:	19 97       	sbiw	r26, 0x09	; 9
    2814:	41 15       	cp	r20, r1
    2816:	51 05       	cpc	r21, r1
    2818:	61 05       	cpc	r22, r1
    281a:	71 05       	cpc	r23, r1
    281c:	81 f4       	brne	.+32     	; 0x283e <_ZN6SdFile5writeEPKvj+0xf8>
        if (firstCluster_ == 0) {
    281e:	57 96       	adiw	r26, 0x17	; 23
    2820:	8d 91       	ld	r24, X+
    2822:	9d 91       	ld	r25, X+
    2824:	0d 90       	ld	r0, X+
    2826:	bc 91       	ld	r27, X
    2828:	a0 2d       	mov	r26, r0
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	a1 05       	cpc	r26, r1
    282e:	b1 05       	cpc	r27, r1
    2830:	49 f1       	breq	.+82     	; 0x2884 <_ZN6SdFile5writeEPKvj+0x13e>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
        } else {
          curCluster_ = firstCluster_;
    2832:	f8 01       	movw	r30, r16
    2834:	86 83       	std	Z+6, r24	; 0x06
    2836:	97 83       	std	Z+7, r25	; 0x07
    2838:	a0 87       	std	Z+8, r26	; 0x08
    283a:	b1 87       	std	Z+9, r27	; 0x09
    283c:	2e c0       	rjmp	.+92     	; 0x289a <_ZN6SdFile5writeEPKvj+0x154>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    283e:	c9 01       	movw	r24, r18
    2840:	9e 01       	movw	r18, r28
    2842:	2f 5f       	subi	r18, 0xFF	; 255
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK8SdVolume6fatGetEmPm>
    284a:	88 23       	and	r24, r24
    284c:	09 f4       	brne	.+2      	; 0x2850 <_ZN6SdFile5writeEPKvj+0x10a>
    284e:	0b c1       	rjmp	.+534    	; 0x2a66 <_ZN6SdFile5writeEPKvj+0x320>
        if (vol_->isEOC(next)) {
    2850:	49 81       	ldd	r20, Y+1	; 0x01
    2852:	5a 81       	ldd	r21, Y+2	; 0x02
    2854:	6b 81       	ldd	r22, Y+3	; 0x03
    2856:	7c 81       	ldd	r23, Y+4	; 0x04
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
  write_P(str);
  println();
}
    2858:	d8 01       	movw	r26, r16
    285a:	5b 96       	adiw	r26, 0x1b	; 27
    285c:	ed 91       	ld	r30, X+
    285e:	fc 91       	ld	r31, X
    2860:	5c 97       	sbiw	r26, 0x1c	; 28
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2862:	87 89       	ldd	r24, Z+23	; 0x17
    2864:	80 31       	cpi	r24, 0x10	; 16
    2866:	29 f4       	brne	.+10     	; 0x2872 <_ZN6SdFile5writeEPKvj+0x12c>
    2868:	88 ef       	ldi	r24, 0xF8	; 248
    286a:	9f ef       	ldi	r25, 0xFF	; 255
    286c:	a0 e0       	ldi	r26, 0x00	; 0
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	04 c0       	rjmp	.+8      	; 0x287a <_ZN6SdFile5writeEPKvj+0x134>
    2872:	88 ef       	ldi	r24, 0xF8	; 248
    2874:	9f ef       	ldi	r25, 0xFF	; 255
    2876:	af ef       	ldi	r26, 0xFF	; 255
    2878:	bf e0       	ldi	r27, 0x0F	; 15
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
        if (vol_->isEOC(next)) {
    287a:	48 17       	cp	r20, r24
    287c:	59 07       	cpc	r21, r25
    287e:	6a 07       	cpc	r22, r26
    2880:	7b 07       	cpc	r23, r27
    2882:	30 f0       	brcs	.+12     	; 0x2890 <_ZN6SdFile5writeEPKvj+0x14a>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
    2884:	c8 01       	movw	r24, r16
    2886:	0e 94 2c 12 	call	0x2458	; 0x2458 <_ZN6SdFile10addClusterEv>
    288a:	88 23       	and	r24, r24
    288c:	31 f4       	brne	.+12     	; 0x289a <_ZN6SdFile5writeEPKvj+0x154>
    288e:	e4 c0       	rjmp	.+456    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
        } else {
          curCluster_ = next;
    2890:	f8 01       	movw	r30, r16
    2892:	46 83       	std	Z+6, r20	; 0x06
    2894:	57 83       	std	Z+7, r21	; 0x07
    2896:	60 87       	std	Z+8, r22	; 0x08
    2898:	71 87       	std	Z+9, r23	; 0x09
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	92 e0       	ldi	r25, 0x02	; 2
    289e:	86 19       	sub	r24, r6
    28a0:	97 09       	sbc	r25, r7
    28a2:	41 01       	movw	r8, r2
    28a4:	82 15       	cp	r24, r2
    28a6:	93 05       	cpc	r25, r3
    28a8:	08 f4       	brcc	.+2      	; 0x28ac <_ZN6SdFile5writeEPKvj+0x166>
    28aa:	4c 01       	movw	r8, r24

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
    28ac:	d8 01       	movw	r26, r16
    28ae:	5b 96       	adiw	r26, 0x1b	; 27
    28b0:	ed 91       	ld	r30, X+
    28b2:	fc 91       	ld	r31, X
    28b4:	5c 97       	sbiw	r26, 0x1c	; 28
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
          return (position >> 9) & (blocksPerCluster_ - 1);}
  uint32_t clusterStartBlock(uint32_t cluster) const {
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
    28b6:	16 96       	adiw	r26, 0x06	; 6
    28b8:	cd 90       	ld	r12, X+
    28ba:	dd 90       	ld	r13, X+
    28bc:	ed 90       	ld	r14, X+
    28be:	fc 90       	ld	r15, X
    28c0:	19 97       	sbiw	r26, 0x09	; 9
    28c2:	8e ef       	ldi	r24, 0xFE	; 254
    28c4:	9f ef       	ldi	r25, 0xFF	; 255
    28c6:	af ef       	ldi	r26, 0xFF	; 255
    28c8:	bf ef       	ldi	r27, 0xFF	; 255
    28ca:	c8 0e       	add	r12, r24
    28cc:	d9 1e       	adc	r13, r25
    28ce:	ea 1e       	adc	r14, r26
    28d0:	fb 1e       	adc	r15, r27
    28d2:	05 84       	ldd	r0, Z+13	; 0x0d
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <_ZN6SdFile5writeEPKvj+0x198>
    28d6:	cc 0c       	add	r12, r12
    28d8:	dd 1c       	adc	r13, r13
    28da:	ee 1c       	adc	r14, r14
    28dc:	ff 1c       	adc	r15, r15
    28de:	0a 94       	dec	r0
    28e0:	d2 f7       	brpl	.-12     	; 0x28d6 <_ZN6SdFile5writeEPKvj+0x190>
    28e2:	86 85       	ldd	r24, Z+14	; 0x0e
    28e4:	97 85       	ldd	r25, Z+15	; 0x0f
    28e6:	a0 89       	ldd	r26, Z+16	; 0x10
    28e8:	b1 89       	ldd	r27, Z+17	; 0x11
    28ea:	c8 0e       	add	r12, r24
    28ec:	d9 1e       	adc	r13, r25
    28ee:	ea 1e       	adc	r14, r26
    28f0:	fb 1e       	adc	r15, r27
    28f2:	cb 0c       	add	r12, r11
    28f4:	d1 1c       	adc	r13, r1
    28f6:	e1 1c       	adc	r14, r1
    28f8:	f1 1c       	adc	r15, r1
    if (n == 512) {
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	89 16       	cp	r8, r25
    28fe:	92 e0       	ldi	r25, 0x02	; 2
    2900:	99 06       	cpc	r9, r25
    2902:	51 f5       	brne	.+84     	; 0x2958 <_ZN6SdFile5writeEPKvj+0x212>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
    2904:	80 91 37 04 	lds	r24, 0x0437
    2908:	90 91 38 04 	lds	r25, 0x0438
    290c:	a0 91 39 04 	lds	r26, 0x0439
    2910:	b0 91 3a 04 	lds	r27, 0x043A
    2914:	8c 15       	cp	r24, r12
    2916:	9d 05       	cpc	r25, r13
    2918:	ae 05       	cpc	r26, r14
    291a:	bf 05       	cpc	r27, r15
    291c:	61 f4       	brne	.+24     	; 0x2936 <_ZN6SdFile5writeEPKvj+0x1f0>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
    291e:	8f ef       	ldi	r24, 0xFF	; 255
    2920:	9f ef       	ldi	r25, 0xFF	; 255
    2922:	af ef       	ldi	r26, 0xFF	; 255
    2924:	bf ef       	ldi	r27, 0xFF	; 255
    2926:	80 93 37 04 	sts	0x0437, r24
    292a:	90 93 38 04 	sts	0x0438, r25
    292e:	a0 93 39 04 	sts	0x0439, r26
    2932:	b0 93 3a 04 	sts	0x043A, r27
  uint8_t readData(uint32_t block, uint16_t offset,
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
  }
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
    return sdCard_->writeBlock(block, dst);
    2936:	80 91 c4 05 	lds	r24, 0x05C4
    293a:	90 91 c5 05 	lds	r25, 0x05C5
    293e:	b7 01       	movw	r22, r14
    2940:	a6 01       	movw	r20, r12
    2942:	92 01       	movw	r18, r4
    2944:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN7Sd2Card10writeBlockEmPKh>
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
    2948:	88 23       	and	r24, r24
    294a:	09 f4       	brne	.+2      	; 0x294e <_ZN6SdFile5writeEPKvj+0x208>
    294c:	85 c0       	rjmp	.+266    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
      src += 512;
    294e:	a0 e0       	ldi	r26, 0x00	; 0
    2950:	b2 e0       	ldi	r27, 0x02	; 2
    2952:	4a 0e       	add	r4, r26
    2954:	5b 1e       	adc	r5, r27
    2956:	3e c0       	rjmp	.+124    	; 0x29d4 <_ZN6SdFile5writeEPKvj+0x28e>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
    2958:	61 14       	cp	r6, r1
    295a:	71 04       	cpc	r7, r1
    295c:	09 f5       	brne	.+66     	; 0x29a0 <_ZN6SdFile5writeEPKvj+0x25a>
    295e:	f8 01       	movw	r30, r16
    2960:	82 85       	ldd	r24, Z+10	; 0x0a
    2962:	93 85       	ldd	r25, Z+11	; 0x0b
    2964:	a4 85       	ldd	r26, Z+12	; 0x0c
    2966:	b5 85       	ldd	r27, Z+13	; 0x0d
    2968:	43 89       	ldd	r20, Z+19	; 0x13
    296a:	54 89       	ldd	r21, Z+20	; 0x14
    296c:	65 89       	ldd	r22, Z+21	; 0x15
    296e:	76 89       	ldd	r23, Z+22	; 0x16
    2970:	84 17       	cp	r24, r20
    2972:	95 07       	cpc	r25, r21
    2974:	a6 07       	cpc	r26, r22
    2976:	b7 07       	cpc	r27, r23
    2978:	98 f0       	brcs	.+38     	; 0x29a0 <_ZN6SdFile5writeEPKvj+0x25a>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
    297a:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN8SdVolume10cacheFlushEv>
    297e:	88 23       	and	r24, r24
    2980:	09 f4       	brne	.+2      	; 0x2984 <_ZN6SdFile5writeEPKvj+0x23e>
    2982:	6a c0       	rjmp	.+212    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
        SdVolume::cacheBlockNumber_ = block;
    2984:	c0 92 37 04 	sts	0x0437, r12
    2988:	d0 92 38 04 	sts	0x0438, r13
    298c:	e0 92 39 04 	sts	0x0439, r14
    2990:	f0 92 3a 04 	sts	0x043A, r15
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2994:	80 91 c3 05 	lds	r24, 0x05C3
    2998:	81 60       	ori	r24, 0x01	; 1
    299a:	80 93 c3 05 	sts	0x05C3, r24
    299e:	08 c0       	rjmp	.+16     	; 0x29b0 <_ZN6SdFile5writeEPKvj+0x26a>
        SdVolume::cacheSetDirty();
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
    29a0:	c7 01       	movw	r24, r14
    29a2:	b6 01       	movw	r22, r12
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    29aa:	88 23       	and	r24, r24
    29ac:	09 f4       	brne	.+2      	; 0x29b0 <_ZN6SdFile5writeEPKvj+0x26a>
    29ae:	54 c0       	rjmp	.+168    	; 0x2a58 <_ZN6SdFile5writeEPKvj+0x312>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    29b0:	93 01       	movw	r18, r6
    29b2:	2a 53       	subi	r18, 0x3A	; 58
    29b4:	3a 4f       	sbci	r19, 0xFA	; 250
      uint8_t* end = dst + n;
    29b6:	c9 01       	movw	r24, r18
    29b8:	88 0d       	add	r24, r8
    29ba:	99 1d       	adc	r25, r9
    29bc:	d2 01       	movw	r26, r4
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
    29be:	f9 01       	movw	r30, r18
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    29c0:	02 c0       	rjmp	.+4      	; 0x29c6 <_ZN6SdFile5writeEPKvj+0x280>
    29c2:	4d 91       	ld	r20, X+
    29c4:	41 93       	st	Z+, r20
    29c6:	e8 17       	cp	r30, r24
    29c8:	f9 07       	cpc	r31, r25
    29ca:	d9 f7       	brne	.-10     	; 0x29c2 <_ZN6SdFile5writeEPKvj+0x27c>
 * \a nbyte.  If an error occurs, write() returns -1.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
    29cc:	e2 1b       	sub	r30, r18
    29ce:	f3 0b       	sbc	r31, r19
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
      uint8_t* end = dst + n;
      while (dst != end) *dst++ = *src++;
    29d0:	4e 0e       	add	r4, r30
    29d2:	5f 1e       	adc	r5, r31
    }
    nToWrite -= n;
    29d4:	28 18       	sub	r2, r8
    29d6:	39 08       	sbc	r3, r9
    curPosition_ += n;
    29d8:	a4 01       	movw	r20, r8
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	f8 01       	movw	r30, r16
    29e0:	82 85       	ldd	r24, Z+10	; 0x0a
    29e2:	93 85       	ldd	r25, Z+11	; 0x0b
    29e4:	a4 85       	ldd	r26, Z+12	; 0x0c
    29e6:	b5 85       	ldd	r27, Z+13	; 0x0d
    29e8:	84 0f       	add	r24, r20
    29ea:	95 1f       	adc	r25, r21
    29ec:	a6 1f       	adc	r26, r22
    29ee:	b7 1f       	adc	r27, r23
    29f0:	82 87       	std	Z+10, r24	; 0x0a
    29f2:	93 87       	std	Z+11, r25	; 0x0b
    29f4:	a4 87       	std	Z+12, r26	; 0x0c
    29f6:	b5 87       	std	Z+13, r27	; 0x0d
    29f8:	f8 01       	movw	r30, r16
    29fa:	82 85       	ldd	r24, Z+10	; 0x0a
    29fc:	93 85       	ldd	r25, Z+11	; 0x0b
    29fe:	a4 85       	ldd	r26, Z+12	; 0x0c
    2a00:	b5 85       	ldd	r27, Z+13	; 0x0d
  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    if (!seekEnd()) goto writeErrorReturn;
  }

  while (nToWrite > 0) {
    2a02:	21 14       	cp	r2, r1
    2a04:	31 04       	cpc	r3, r1
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <_ZN6SdFile5writeEPKvj+0x2c4>
    2a08:	df ce       	rjmp	.-578    	; 0x27c8 <_ZN6SdFile5writeEPKvj+0x82>
      while (dst != end) *dst++ = *src++;
    }
    nToWrite -= n;
    curPosition_ += n;
  }
  if (curPosition_ > fileSize_) {
    2a0a:	43 89       	ldd	r20, Z+19	; 0x13
    2a0c:	54 89       	ldd	r21, Z+20	; 0x14
    2a0e:	65 89       	ldd	r22, Z+21	; 0x15
    2a10:	76 89       	ldd	r23, Z+22	; 0x16
    2a12:	48 17       	cp	r20, r24
    2a14:	59 07       	cpc	r21, r25
    2a16:	6a 07       	cpc	r22, r26
    2a18:	7b 07       	cpc	r23, r27
    2a1a:	40 f4       	brcc	.+16     	; 0x2a2c <_ZN6SdFile5writeEPKvj+0x2e6>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
    2a1c:	83 8b       	std	Z+19, r24	; 0x13
    2a1e:	94 8b       	std	Z+20, r25	; 0x14
    2a20:	a5 8b       	std	Z+21, r26	; 0x15
    2a22:	b6 8b       	std	Z+22, r27	; 0x16
    flags_ |= F_FILE_DIR_DIRTY;
    2a24:	84 81       	ldd	r24, Z+4	; 0x04
    2a26:	80 68       	ori	r24, 0x80	; 128
    2a28:	84 83       	std	Z+4, r24	; 0x04
    2a2a:	0d c0       	rjmp	.+26     	; 0x2a46 <_ZN6SdFile5writeEPKvj+0x300>
  } else if (dateTime_ && nbyte) {
    2a2c:	80 91 bd 05 	lds	r24, 0x05BD
    2a30:	90 91 be 05 	lds	r25, 0x05BE
    2a34:	00 97       	sbiw	r24, 0x00	; 0
    2a36:	39 f0       	breq	.+14     	; 0x2a46 <_ZN6SdFile5writeEPKvj+0x300>
    2a38:	8d 81       	ldd	r24, Y+5	; 0x05
    2a3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	19 f0       	breq	.+6      	; 0x2a46 <_ZN6SdFile5writeEPKvj+0x300>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
    2a40:	84 81       	ldd	r24, Z+4	; 0x04
    2a42:	80 68       	ori	r24, 0x80	; 128
    2a44:	84 83       	std	Z+4, r24	; 0x04
  }

  if (flags_ & O_SYNC) {
    2a46:	f8 01       	movw	r30, r16
    2a48:	84 81       	ldd	r24, Z+4	; 0x04
    2a4a:	83 ff       	sbrs	r24, 3
    2a4c:	0e c0       	rjmp	.+28     	; 0x2a6a <_ZN6SdFile5writeEPKvj+0x324>
    if (!sync()) goto writeErrorReturn;
    2a4e:	c8 01       	movw	r24, r16
    2a50:	0e 94 5e 13 	call	0x26bc	; 0x26bc <_ZN6SdFile4syncEv>
    2a54:	88 23       	and	r24, r24
    2a56:	49 f4       	brne	.+18     	; 0x2a6a <_ZN6SdFile5writeEPKvj+0x324>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	d8 01       	movw	r26, r16
    2a5e:	13 96       	adiw	r26, 0x03	; 3
    2a60:	9c 93       	st	X, r25
    2a62:	8e 93       	st	-X, r24
    2a64:	12 97       	sbiw	r26, 0x02	; 2
        } else {
          curCluster_ = firstCluster_;
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
    2a66:	1e 82       	std	Y+6, r1	; 0x06
    2a68:	1d 82       	std	Y+5, r1	; 0x05
 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
  return 0;
}
    2a6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a6e:	26 96       	adiw	r28, 0x06	; 6
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	df 91       	pop	r29
    2a7c:	cf 91       	pop	r28
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	ff 90       	pop	r15
    2a84:	ef 90       	pop	r14
    2a86:	df 90       	pop	r13
    2a88:	cf 90       	pop	r12
    2a8a:	bf 90       	pop	r11
    2a8c:	9f 90       	pop	r9
    2a8e:	8f 90       	pop	r8
    2a90:	7f 90       	pop	r7
    2a92:	6f 90       	pop	r6
    2a94:	5f 90       	pop	r5
    2a96:	4f 90       	pop	r4
    2a98:	3f 90       	pop	r3
    2a9a:	2f 90       	pop	r2
    2a9c:	08 95       	ret

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
    2a9e:	82 fd       	sbrc	r24, 2
    2aa0:	7a ce       	rjmp	.-780    	; 0x2796 <_ZN6SdFile5writeEPKvj+0x50>
    2aa2:	8d ce       	rjmp	.-742    	; 0x27be <_ZN6SdFile5writeEPKvj+0x78>

00002aa4 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
    2aa4:	cf 93       	push	r28
    2aa6:	df 93       	push	r29
    2aa8:	0f 92       	push	r0
    2aaa:	cd b7       	in	r28, 0x3d	; 61
    2aac:	de b7       	in	r29, 0x3e	; 62
    2aae:	69 83       	std	Y+1, r22	; 0x01
  return write(&b, 1);
    2ab0:	be 01       	movw	r22, r28
    2ab2:	6f 5f       	subi	r22, 0xFF	; 255
    2ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	50 e0       	ldi	r21, 0x00	; 0
    2aba:	0e 94 a3 13 	call	0x2746	; 0x2746 <_ZN6SdFile5writeEPKvj>
}
    2abe:	0f 90       	pop	r0
    2ac0:	df 91       	pop	r29
    2ac2:	cf 91       	pop	r28
    2ac4:	08 95       	ret

00002ac6 <_ZN8SdVolume10cacheFlushEv>:

  return true;
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    2ac6:	80 91 c3 05 	lds	r24, 0x05C3
    2aca:	88 23       	and	r24, r24
    2acc:	b1 f1       	breq	.+108    	; 0x2b3a <_ZN8SdVolume10cacheFlushEv+0x74>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
    2ace:	40 91 37 04 	lds	r20, 0x0437
    2ad2:	50 91 38 04 	lds	r21, 0x0438
    2ad6:	60 91 39 04 	lds	r22, 0x0439
    2ada:	70 91 3a 04 	lds	r23, 0x043A
    2ade:	80 91 c4 05 	lds	r24, 0x05C4
    2ae2:	90 91 c5 05 	lds	r25, 0x05C5
    2ae6:	26 ec       	ldi	r18, 0xC6	; 198
    2ae8:	35 e0       	ldi	r19, 0x05	; 5
    2aea:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN7Sd2Card10writeBlockEmPKh>
    2aee:	88 23       	and	r24, r24
    2af0:	31 f1       	breq	.+76     	; 0x2b3e <_ZN8SdVolume10cacheFlushEv+0x78>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
    2af2:	40 91 bf 05 	lds	r20, 0x05BF
    2af6:	50 91 c0 05 	lds	r21, 0x05C0
    2afa:	60 91 c1 05 	lds	r22, 0x05C1
    2afe:	70 91 c2 05 	lds	r23, 0x05C2
    2b02:	41 15       	cp	r20, r1
    2b04:	51 05       	cpc	r21, r1
    2b06:	61 05       	cpc	r22, r1
    2b08:	71 05       	cpc	r23, r1
    2b0a:	91 f0       	breq	.+36     	; 0x2b30 <_ZN8SdVolume10cacheFlushEv+0x6a>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
    2b0c:	80 91 c4 05 	lds	r24, 0x05C4
    2b10:	90 91 c5 05 	lds	r25, 0x05C5
    2b14:	26 ec       	ldi	r18, 0xC6	; 198
    2b16:	35 e0       	ldi	r19, 0x05	; 5
    2b18:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <_ZN7Sd2Card10writeBlockEmPKh>
    2b1c:	88 23       	and	r24, r24
    2b1e:	59 f0       	breq	.+22     	; 0x2b36 <_ZN8SdVolume10cacheFlushEv+0x70>
        return false;
      }
      cacheMirrorBlock_ = 0;
    2b20:	10 92 bf 05 	sts	0x05BF, r1
    2b24:	10 92 c0 05 	sts	0x05C0, r1
    2b28:	10 92 c1 05 	sts	0x05C1, r1
    2b2c:	10 92 c2 05 	sts	0x05C2, r1
    }
    cacheDirty_ = 0;
    2b30:	10 92 c3 05 	sts	0x05C3, r1
    2b34:	02 c0       	rjmp	.+4      	; 0x2b3a <_ZN8SdVolume10cacheFlushEv+0x74>
      return false;
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
        return false;
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	08 95       	ret
      }
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	08 95       	ret
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
  if (cacheDirty_) {
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
      return false;
    2b3e:	80 e0       	ldi	r24, 0x00	; 0
      cacheMirrorBlock_ = 0;
    }
    cacheDirty_ = 0;
  }
  return true;
}
    2b40:	08 95       	ret

00002b42 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
    2b42:	cf 92       	push	r12
    2b44:	df 92       	push	r13
    2b46:	ef 92       	push	r14
    2b48:	ff 92       	push	r15
    2b4a:	cf 93       	push	r28
    2b4c:	6b 01       	movw	r12, r22
    2b4e:	7c 01       	movw	r14, r24
    2b50:	c4 2f       	mov	r28, r20
  if (cacheBlockNumber_ != blockNumber) {
    2b52:	80 91 37 04 	lds	r24, 0x0437
    2b56:	90 91 38 04 	lds	r25, 0x0438
    2b5a:	a0 91 39 04 	lds	r26, 0x0439
    2b5e:	b0 91 3a 04 	lds	r27, 0x043A
    2b62:	8c 15       	cp	r24, r12
    2b64:	9d 05       	cpc	r25, r13
    2b66:	ae 05       	cpc	r26, r14
    2b68:	bf 05       	cpc	r27, r15
    2b6a:	c1 f0       	breq	.+48     	; 0x2b9c <_ZN8SdVolume13cacheRawBlockEmh+0x5a>
    if (!cacheFlush()) return false;
    2b6c:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <_ZN8SdVolume10cacheFlushEv>
    2b70:	88 23       	and	r24, r24
    2b72:	d9 f0       	breq	.+54     	; 0x2baa <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2b74:	80 91 c4 05 	lds	r24, 0x05C4
    2b78:	90 91 c5 05 	lds	r25, 0x05C5
    2b7c:	b7 01       	movw	r22, r14
    2b7e:	a6 01       	movw	r20, r12
    2b80:	26 ec       	ldi	r18, 0xC6	; 198
    2b82:	35 e0       	ldi	r19, 0x05	; 5
    2b84:	0e 94 92 11 	call	0x2324	; 0x2324 <_ZN7Sd2Card9readBlockEmPh>
    2b88:	88 23       	and	r24, r24
    2b8a:	79 f0       	breq	.+30     	; 0x2baa <_ZN8SdVolume13cacheRawBlockEmh+0x68>
    cacheBlockNumber_ = blockNumber;
    2b8c:	c0 92 37 04 	sts	0x0437, r12
    2b90:	d0 92 38 04 	sts	0x0438, r13
    2b94:	e0 92 39 04 	sts	0x0439, r14
    2b98:	f0 92 3a 04 	sts	0x043A, r15
  }
  cacheDirty_ |= action;
    2b9c:	80 91 c3 05 	lds	r24, 0x05C3
    2ba0:	8c 2b       	or	r24, r28
    2ba2:	80 93 c3 05 	sts	0x05C3, r24
  return true;
    2ba6:	81 e0       	ldi	r24, 0x01	; 1
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <_ZN8SdVolume13cacheRawBlockEmh+0x6a>
}
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
  if (cacheBlockNumber_ != blockNumber) {
    if (!cacheFlush()) return false;
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
    2baa:	80 e0       	ldi	r24, 0x00	; 0
    cacheBlockNumber_ = blockNumber;
  }
  cacheDirty_ |= action;
  return true;
}
    2bac:	cf 91       	pop	r28
    2bae:	ff 90       	pop	r15
    2bb0:	ef 90       	pop	r14
    2bb2:	df 90       	pop	r13
    2bb4:	cf 90       	pop	r12
    2bb6:	08 95       	ret

00002bb8 <_ZNK8SdVolume6fatGetEmPm>:
  *size = s;
  return true;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
    2bb8:	af 92       	push	r10
    2bba:	bf 92       	push	r11
    2bbc:	cf 92       	push	r12
    2bbe:	df 92       	push	r13
    2bc0:	ef 92       	push	r14
    2bc2:	ff 92       	push	r15
    2bc4:	0f 93       	push	r16
    2bc6:	1f 93       	push	r17
    2bc8:	cf 93       	push	r28
    2bca:	df 93       	push	r29
    2bcc:	ec 01       	movw	r28, r24
    2bce:	6a 01       	movw	r12, r20
    2bd0:	7b 01       	movw	r14, r22
    2bd2:	59 01       	movw	r10, r18
  if (cluster > (clusterCount_ + 1)) return false;
    2bd4:	89 85       	ldd	r24, Y+9	; 0x09
    2bd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bd8:	ab 85       	ldd	r26, Y+11	; 0x0b
    2bda:	bc 85       	ldd	r27, Y+12	; 0x0c
    2bdc:	01 96       	adiw	r24, 0x01	; 1
    2bde:	a1 1d       	adc	r26, r1
    2be0:	b1 1d       	adc	r27, r1
    2be2:	84 17       	cp	r24, r20
    2be4:	95 07       	cpc	r25, r21
    2be6:	a6 07       	cpc	r26, r22
    2be8:	b7 07       	cpc	r27, r23
    2bea:	08 f4       	brcc	.+2      	; 0x2bee <_ZNK8SdVolume6fatGetEmPm+0x36>
    2bec:	5f c0       	rjmp	.+190    	; 0x2cac <_ZNK8SdVolume6fatGetEmPm+0xf4>
  uint32_t lba = fatStartBlock_;
    2bee:	4b 89       	ldd	r20, Y+19	; 0x13
    2bf0:	5c 89       	ldd	r21, Y+20	; 0x14
    2bf2:	6d 89       	ldd	r22, Y+21	; 0x15
    2bf4:	7e 89       	ldd	r23, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2bf6:	8f 89       	ldd	r24, Y+23	; 0x17
    2bf8:	80 31       	cpi	r24, 0x10	; 16
    2bfa:	29 f4       	brne	.+10     	; 0x2c06 <_ZNK8SdVolume6fatGetEmPm+0x4e>
    2bfc:	bb 27       	eor	r27, r27
    2bfe:	af 2d       	mov	r26, r15
    2c00:	9e 2d       	mov	r25, r14
    2c02:	8d 2d       	mov	r24, r13
    2c04:	09 c0       	rjmp	.+18     	; 0x2c18 <_ZNK8SdVolume6fatGetEmPm+0x60>
    2c06:	d7 01       	movw	r26, r14
    2c08:	c6 01       	movw	r24, r12
    2c0a:	37 e0       	ldi	r19, 0x07	; 7
    2c0c:	b6 95       	lsr	r27
    2c0e:	a7 95       	ror	r26
    2c10:	97 95       	ror	r25
    2c12:	87 95       	ror	r24
    2c14:	3a 95       	dec	r19
    2c16:	d1 f7       	brne	.-12     	; 0x2c0c <_ZNK8SdVolume6fatGetEmPm+0x54>
    2c18:	8c 01       	movw	r16, r24
    2c1a:	9d 01       	movw	r18, r26
    2c1c:	04 0f       	add	r16, r20
    2c1e:	15 1f       	adc	r17, r21
    2c20:	26 1f       	adc	r18, r22
    2c22:	37 1f       	adc	r19, r23
    2c24:	c9 01       	movw	r24, r18
    2c26:	b8 01       	movw	r22, r16
  if (lba != cacheBlockNumber_) {
    2c28:	00 91 37 04 	lds	r16, 0x0437
    2c2c:	10 91 38 04 	lds	r17, 0x0438
    2c30:	20 91 39 04 	lds	r18, 0x0439
    2c34:	30 91 3a 04 	lds	r19, 0x043A
    2c38:	60 17       	cp	r22, r16
    2c3a:	71 07       	cpc	r23, r17
    2c3c:	82 07       	cpc	r24, r18
    2c3e:	93 07       	cpc	r25, r19
    2c40:	29 f0       	breq	.+10     	; 0x2c4c <_ZNK8SdVolume6fatGetEmPm+0x94>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2c42:	40 e0       	ldi	r20, 0x00	; 0
    2c44:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    2c48:	88 23       	and	r24, r24
    2c4a:	81 f1       	breq	.+96     	; 0x2cac <_ZNK8SdVolume6fatGetEmPm+0xf4>
  }
  if (fatType_ == 16) {
    2c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4e:	80 31       	cpi	r24, 0x10	; 16
    2c50:	91 f4       	brne	.+36     	; 0x2c76 <_ZNK8SdVolume6fatGetEmPm+0xbe>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	a0 e0       	ldi	r26, 0x00	; 0
    2c58:	b0 e0       	ldi	r27, 0x00	; 0
    2c5a:	c8 22       	and	r12, r24
    2c5c:	d9 22       	and	r13, r25
    2c5e:	ea 22       	and	r14, r26
    2c60:	fb 22       	and	r15, r27
    2c62:	f6 01       	movw	r30, r12
    2c64:	ee 0f       	add	r30, r30
    2c66:	ff 1f       	adc	r31, r31
    2c68:	ea 53       	subi	r30, 0x3A	; 58
    2c6a:	fa 4f       	sbci	r31, 0xFA	; 250
    2c6c:	80 81       	ld	r24, Z
    2c6e:	91 81       	ldd	r25, Z+1	; 0x01
    2c70:	a0 e0       	ldi	r26, 0x00	; 0
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	14 c0       	rjmp	.+40     	; 0x2c9e <_ZNK8SdVolume6fatGetEmPm+0xe6>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
    2c76:	0f e7       	ldi	r16, 0x7F	; 127
    2c78:	10 e0       	ldi	r17, 0x00	; 0
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	30 e0       	ldi	r19, 0x00	; 0
    2c7e:	c0 22       	and	r12, r16
    2c80:	d1 22       	and	r13, r17
    2c82:	e2 22       	and	r14, r18
    2c84:	f3 22       	and	r15, r19
    2c86:	f6 01       	movw	r30, r12
    2c88:	ee 0f       	add	r30, r30
    2c8a:	ff 1f       	adc	r31, r31
    2c8c:	ee 0f       	add	r30, r30
    2c8e:	ff 1f       	adc	r31, r31
    2c90:	ea 53       	subi	r30, 0x3A	; 58
    2c92:	fa 4f       	sbci	r31, 0xFA	; 250
    2c94:	80 81       	ld	r24, Z
    2c96:	91 81       	ldd	r25, Z+1	; 0x01
    2c98:	a2 81       	ldd	r26, Z+2	; 0x02
    2c9a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c9c:	bf 70       	andi	r27, 0x0F	; 15
    2c9e:	f5 01       	movw	r30, r10
    2ca0:	80 83       	st	Z, r24
    2ca2:	91 83       	std	Z+1, r25	; 0x01
    2ca4:	a2 83       	std	Z+2, r26	; 0x02
    2ca6:	b3 83       	std	Z+3, r27	; 0x03
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	01 c0       	rjmp	.+2      	; 0x2cae <_ZNK8SdVolume6fatGetEmPm+0xf6>
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
  if (cluster > (clusterCount_ + 1)) return false;
  uint32_t lba = fatStartBlock_;
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
  if (lba != cacheBlockNumber_) {
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2cac:	80 e0       	ldi	r24, 0x00	; 0
    *value = cacheBuffer_.fat16[cluster & 0XFF];
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
  }
  return true;
}
    2cae:	df 91       	pop	r29
    2cb0:	cf 91       	pop	r28
    2cb2:	1f 91       	pop	r17
    2cb4:	0f 91       	pop	r16
    2cb6:	ff 90       	pop	r15
    2cb8:	ef 90       	pop	r14
    2cba:	df 90       	pop	r13
    2cbc:	cf 90       	pop	r12
    2cbe:	bf 90       	pop	r11
    2cc0:	af 90       	pop	r10
    2cc2:	08 95       	ret

00002cc4 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
    2cc4:	6f 92       	push	r6
    2cc6:	7f 92       	push	r7
    2cc8:	8f 92       	push	r8
    2cca:	9f 92       	push	r9
    2ccc:	af 92       	push	r10
    2cce:	bf 92       	push	r11
    2cd0:	cf 92       	push	r12
    2cd2:	df 92       	push	r13
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <_ZNK8SdVolume9chainSizeEmPm+0x1e>
    2ce2:	00 d0       	rcall	.+0      	; 0x2ce4 <_ZNK8SdVolume9chainSizeEmPm+0x20>
    2ce4:	cd b7       	in	r28, 0x3d	; 61
    2ce6:	de b7       	in	r29, 0x3e	; 62
    2ce8:	8c 01       	movw	r16, r24
    2cea:	49 83       	std	Y+1, r20	; 0x01
    2cec:	5a 83       	std	Y+2, r21	; 0x02
    2cee:	6b 83       	std	Y+3, r22	; 0x03
    2cf0:	7c 83       	std	Y+4, r23	; 0x04
    2cf2:	39 01       	movw	r6, r18
  uint32_t s = 0;
    2cf4:	cc 24       	eor	r12, r12
    2cf6:	dd 24       	eor	r13, r13
    2cf8:	76 01       	movw	r14, r12
  do {
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
    2cfa:	81 2c       	mov	r8, r1
    2cfc:	f2 e0       	ldi	r31, 0x02	; 2
    2cfe:	9f 2e       	mov	r9, r31
    2d00:	a1 2c       	mov	r10, r1
    2d02:	b1 2c       	mov	r11, r1
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2d04:	49 81       	ldd	r20, Y+1	; 0x01
    2d06:	5a 81       	ldd	r21, Y+2	; 0x02
    2d08:	6b 81       	ldd	r22, Y+3	; 0x03
    2d0a:	7c 81       	ldd	r23, Y+4	; 0x04
    2d0c:	c8 01       	movw	r24, r16
    2d0e:	9e 01       	movw	r18, r28
    2d10:	2f 5f       	subi	r18, 0xFF	; 255
    2d12:	3f 4f       	sbci	r19, 0xFF	; 255
    2d14:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK8SdVolume6fatGetEmPm>
    2d18:	88 23       	and	r24, r24
    2d1a:	59 f1       	breq	.+86     	; 0x2d72 <_ZNK8SdVolume9chainSizeEmPm+0xae>
    s += 512UL << clusterSizeShift_;
    2d1c:	d5 01       	movw	r26, r10
    2d1e:	c4 01       	movw	r24, r8
    2d20:	f8 01       	movw	r30, r16
    2d22:	05 84       	ldd	r0, Z+13	; 0x0d
    2d24:	04 c0       	rjmp	.+8      	; 0x2d2e <_ZNK8SdVolume9chainSizeEmPm+0x6a>
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	aa 1f       	adc	r26, r26
    2d2c:	bb 1f       	adc	r27, r27
    2d2e:	0a 94       	dec	r0
    2d30:	d2 f7       	brpl	.-12     	; 0x2d26 <_ZNK8SdVolume9chainSizeEmPm+0x62>
    2d32:	c8 0e       	add	r12, r24
    2d34:	d9 1e       	adc	r13, r25
    2d36:	ea 1e       	adc	r14, r26
    2d38:	fb 1e       	adc	r15, r27
  } while (!isEOC(cluster));
    2d3a:	49 81       	ldd	r20, Y+1	; 0x01
    2d3c:	5a 81       	ldd	r21, Y+2	; 0x02
    2d3e:	6b 81       	ldd	r22, Y+3	; 0x03
    2d40:	7c 81       	ldd	r23, Y+4	; 0x04
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
  }
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
    2d42:	87 89       	ldd	r24, Z+23	; 0x17
    2d44:	80 31       	cpi	r24, 0x10	; 16
    2d46:	29 f4       	brne	.+10     	; 0x2d52 <_ZNK8SdVolume9chainSizeEmPm+0x8e>
    2d48:	88 ef       	ldi	r24, 0xF8	; 248
    2d4a:	9f ef       	ldi	r25, 0xFF	; 255
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	04 c0       	rjmp	.+8      	; 0x2d5a <_ZNK8SdVolume9chainSizeEmPm+0x96>
    2d52:	88 ef       	ldi	r24, 0xF8	; 248
    2d54:	9f ef       	ldi	r25, 0xFF	; 255
    2d56:	af ef       	ldi	r26, 0xFF	; 255
    2d58:	bf e0       	ldi	r27, 0x0F	; 15
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    2d5a:	48 17       	cp	r20, r24
    2d5c:	59 07       	cpc	r21, r25
    2d5e:	6a 07       	cpc	r22, r26
    2d60:	7b 07       	cpc	r23, r27
    2d62:	80 f2       	brcs	.-96     	; 0x2d04 <_ZNK8SdVolume9chainSizeEmPm+0x40>
    if (!fatGet(cluster, &cluster)) return false;
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
    2d64:	f3 01       	movw	r30, r6
    2d66:	c0 82       	st	Z, r12
    2d68:	d1 82       	std	Z+1, r13	; 0x01
    2d6a:	e2 82       	std	Z+2, r14	; 0x02
    2d6c:	f3 82       	std	Z+3, r15	; 0x03
  return true;
    2d6e:	81 e0       	ldi	r24, 0x01	; 1
    2d70:	01 c0       	rjmp	.+2      	; 0x2d74 <_ZNK8SdVolume9chainSizeEmPm+0xb0>
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
  uint32_t s = 0;
  do {
    if (!fatGet(cluster, &cluster)) return false;
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    s += 512UL << clusterSizeShift_;
  } while (!isEOC(cluster));
  *size = s;
  return true;
}
    2d74:	0f 90       	pop	r0
    2d76:	0f 90       	pop	r0
    2d78:	0f 90       	pop	r0
    2d7a:	0f 90       	pop	r0
    2d7c:	df 91       	pop	r29
    2d7e:	cf 91       	pop	r28
    2d80:	1f 91       	pop	r17
    2d82:	0f 91       	pop	r16
    2d84:	ff 90       	pop	r15
    2d86:	ef 90       	pop	r14
    2d88:	df 90       	pop	r13
    2d8a:	cf 90       	pop	r12
    2d8c:	bf 90       	pop	r11
    2d8e:	af 90       	pop	r10
    2d90:	9f 90       	pop	r9
    2d92:	8f 90       	pop	r8
    2d94:	7f 90       	pop	r7
    2d96:	6f 90       	pop	r6
    2d98:	08 95       	ret

00002d9a <_ZN8SdVolume6fatPutEmm>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
    2d9a:	4f 92       	push	r4
    2d9c:	5f 92       	push	r5
    2d9e:	6f 92       	push	r6
    2da0:	7f 92       	push	r7
    2da2:	8f 92       	push	r8
    2da4:	9f 92       	push	r9
    2da6:	af 92       	push	r10
    2da8:	bf 92       	push	r11
    2daa:	cf 92       	push	r12
    2dac:	df 92       	push	r13
    2dae:	ef 92       	push	r14
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	ec 01       	movw	r28, r24
    2dbc:	6a 01       	movw	r12, r20
    2dbe:	7b 01       	movw	r14, r22
    2dc0:	28 01       	movw	r4, r16
    2dc2:	39 01       	movw	r6, r18
  // error if reserved cluster
  if (cluster < 2) return false;
    2dc4:	42 30       	cpi	r20, 0x02	; 2
    2dc6:	51 05       	cpc	r21, r1
    2dc8:	61 05       	cpc	r22, r1
    2dca:	71 05       	cpc	r23, r1
    2dcc:	08 f4       	brcc	.+2      	; 0x2dd0 <_ZN8SdVolume6fatPutEmm+0x36>
    2dce:	7d c0       	rjmp	.+250    	; 0x2eca <_ZN8SdVolume6fatPutEmm+0x130>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2dd0:	89 85       	ldd	r24, Y+9	; 0x09
    2dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd4:	ab 85       	ldd	r26, Y+11	; 0x0b
    2dd6:	bc 85       	ldd	r27, Y+12	; 0x0c
    2dd8:	01 96       	adiw	r24, 0x01	; 1
    2dda:	a1 1d       	adc	r26, r1
    2ddc:	b1 1d       	adc	r27, r1
    2dde:	84 17       	cp	r24, r20
    2de0:	95 07       	cpc	r25, r21
    2de2:	a6 07       	cpc	r26, r22
    2de4:	b7 07       	cpc	r27, r23
    2de6:	08 f4       	brcc	.+2      	; 0x2dea <_ZN8SdVolume6fatPutEmm+0x50>
    2de8:	70 c0       	rjmp	.+224    	; 0x2eca <_ZN8SdVolume6fatPutEmm+0x130>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
    2dea:	4b 89       	ldd	r20, Y+19	; 0x13
    2dec:	5c 89       	ldd	r21, Y+20	; 0x14
    2dee:	6d 89       	ldd	r22, Y+21	; 0x15
    2df0:	7e 89       	ldd	r23, Y+22	; 0x16
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
    2df2:	8f 89       	ldd	r24, Y+23	; 0x17
    2df4:	80 31       	cpi	r24, 0x10	; 16
    2df6:	29 f4       	brne	.+10     	; 0x2e02 <_ZN8SdVolume6fatPutEmm+0x68>
    2df8:	bb 27       	eor	r27, r27
    2dfa:	af 2d       	mov	r26, r15
    2dfc:	9e 2d       	mov	r25, r14
    2dfe:	8d 2d       	mov	r24, r13
    2e00:	09 c0       	rjmp	.+18     	; 0x2e14 <_ZN8SdVolume6fatPutEmm+0x7a>
    2e02:	d7 01       	movw	r26, r14
    2e04:	c6 01       	movw	r24, r12
    2e06:	27 e0       	ldi	r18, 0x07	; 7
    2e08:	b6 95       	lsr	r27
    2e0a:	a7 95       	ror	r26
    2e0c:	97 95       	ror	r25
    2e0e:	87 95       	ror	r24
    2e10:	2a 95       	dec	r18
    2e12:	d1 f7       	brne	.-12     	; 0x2e08 <_ZN8SdVolume6fatPutEmm+0x6e>
    2e14:	4c 01       	movw	r8, r24
    2e16:	5d 01       	movw	r10, r26
    2e18:	84 0e       	add	r8, r20
    2e1a:	95 1e       	adc	r9, r21
    2e1c:	a6 1e       	adc	r10, r22
    2e1e:	b7 1e       	adc	r11, r23

  if (lba != cacheBlockNumber_) {
    2e20:	80 91 37 04 	lds	r24, 0x0437
    2e24:	90 91 38 04 	lds	r25, 0x0438
    2e28:	a0 91 39 04 	lds	r26, 0x0439
    2e2c:	b0 91 3a 04 	lds	r27, 0x043A
    2e30:	88 16       	cp	r8, r24
    2e32:	99 06       	cpc	r9, r25
    2e34:	aa 06       	cpc	r10, r26
    2e36:	bb 06       	cpc	r11, r27
    2e38:	41 f0       	breq	.+16     	; 0x2e4a <_ZN8SdVolume6fatPutEmm+0xb0>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
    2e3a:	c5 01       	movw	r24, r10
    2e3c:	b4 01       	movw	r22, r8
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    2e44:	88 23       	and	r24, r24
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <_ZN8SdVolume6fatPutEmm+0xb0>
    2e48:	40 c0       	rjmp	.+128    	; 0x2eca <_ZN8SdVolume6fatPutEmm+0x130>
  }
  // store entry
  if (fatType_ == 16) {
    2e4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e4c:	80 31       	cpi	r24, 0x10	; 16
    2e4e:	81 f4       	brne	.+32     	; 0x2e70 <_ZN8SdVolume6fatPutEmm+0xd6>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
    2e50:	8f ef       	ldi	r24, 0xFF	; 255
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	a0 e0       	ldi	r26, 0x00	; 0
    2e56:	b0 e0       	ldi	r27, 0x00	; 0
    2e58:	c8 22       	and	r12, r24
    2e5a:	d9 22       	and	r13, r25
    2e5c:	ea 22       	and	r14, r26
    2e5e:	fb 22       	and	r15, r27
    2e60:	f6 01       	movw	r30, r12
    2e62:	ee 0f       	add	r30, r30
    2e64:	ff 1f       	adc	r31, r31
    2e66:	ea 53       	subi	r30, 0x3A	; 58
    2e68:	fa 4f       	sbci	r31, 0xFA	; 250
    2e6a:	51 82       	std	Z+1, r5	; 0x01
    2e6c:	40 82       	st	Z, r4
    2e6e:	13 c0       	rjmp	.+38     	; 0x2e96 <_ZN8SdVolume6fatPutEmm+0xfc>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
    2e70:	8f e7       	ldi	r24, 0x7F	; 127
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	a0 e0       	ldi	r26, 0x00	; 0
    2e76:	b0 e0       	ldi	r27, 0x00	; 0
    2e78:	c8 22       	and	r12, r24
    2e7a:	d9 22       	and	r13, r25
    2e7c:	ea 22       	and	r14, r26
    2e7e:	fb 22       	and	r15, r27
    2e80:	f6 01       	movw	r30, r12
    2e82:	ee 0f       	add	r30, r30
    2e84:	ff 1f       	adc	r31, r31
    2e86:	ee 0f       	add	r30, r30
    2e88:	ff 1f       	adc	r31, r31
    2e8a:	ea 53       	subi	r30, 0x3A	; 58
    2e8c:	fa 4f       	sbci	r31, 0xFA	; 250
    2e8e:	40 82       	st	Z, r4
    2e90:	51 82       	std	Z+1, r5	; 0x01
    2e92:	62 82       	std	Z+2, r6	; 0x02
    2e94:	73 82       	std	Z+3, r7	; 0x03
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
    2e96:	80 91 c3 05 	lds	r24, 0x05C3
    2e9a:	81 60       	ori	r24, 0x01	; 1
    2e9c:	80 93 c3 05 	sts	0x05C3, r24
  }
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
    2ea0:	8a 89       	ldd	r24, Y+18	; 0x12
    2ea2:	82 30       	cpi	r24, 0x02	; 2
    2ea4:	80 f0       	brcs	.+32     	; 0x2ec6 <_ZN8SdVolume6fatPutEmm+0x12c>
    2ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    2eaa:	af 81       	ldd	r26, Y+7	; 0x07
    2eac:	b8 85       	ldd	r27, Y+8	; 0x08
    2eae:	88 0d       	add	r24, r8
    2eb0:	99 1d       	adc	r25, r9
    2eb2:	aa 1d       	adc	r26, r10
    2eb4:	bb 1d       	adc	r27, r11
    2eb6:	80 93 bf 05 	sts	0x05BF, r24
    2eba:	90 93 c0 05 	sts	0x05C0, r25
    2ebe:	a0 93 c1 05 	sts	0x05C1, r26
    2ec2:	b0 93 c2 05 	sts	0x05C2, r27
  return true;
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	01 c0       	rjmp	.+2      	; 0x2ecc <_ZN8SdVolume6fatPutEmm+0x132>
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
  // error if reserved cluster
  if (cluster < 2) return false;

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
    2eca:	80 e0       	ldi	r24, 0x00	; 0
  cacheSetDirty();

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
  return true;
}
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	bf 90       	pop	r11
    2ede:	af 90       	pop	r10
    2ee0:	9f 90       	pop	r9
    2ee2:	8f 90       	pop	r8
    2ee4:	7f 90       	pop	r7
    2ee6:	6f 90       	pop	r6
    2ee8:	5f 90       	pop	r5
    2eea:	4f 90       	pop	r4
    2eec:	08 95       	ret

00002eee <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
    2eee:	2f 92       	push	r2
    2ef0:	3f 92       	push	r3
    2ef2:	4f 92       	push	r4
    2ef4:	5f 92       	push	r5
    2ef6:	6f 92       	push	r6
    2ef8:	7f 92       	push	r7
    2efa:	8f 92       	push	r8
    2efc:	9f 92       	push	r9
    2efe:	af 92       	push	r10
    2f00:	bf 92       	push	r11
    2f02:	cf 92       	push	r12
    2f04:	df 92       	push	r13
    2f06:	ef 92       	push	r14
    2f08:	ff 92       	push	r15
    2f0a:	0f 93       	push	r16
    2f0c:	1f 93       	push	r17
    2f0e:	cf 93       	push	r28
    2f10:	df 93       	push	r29
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	2f 97       	sbiw	r28, 0x0f	; 15
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	1c 01       	movw	r2, r24
    2f24:	4c 87       	std	Y+12, r20	; 0x0c
    2f26:	5d 87       	std	Y+13, r21	; 0x0d
    2f28:	6e 87       	std	Y+14, r22	; 0x0e
    2f2a:	7f 87       	std	Y+15, r23	; 0x0f
    2f2c:	3b 87       	std	Y+11, r19	; 0x0b
    2f2e:	2a 87       	std	Y+10, r18	; 0x0a

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
    2f30:	d9 01       	movw	r26, r18
    2f32:	4d 90       	ld	r4, X+
    2f34:	5d 90       	ld	r5, X+
    2f36:	6d 90       	ld	r6, X+
    2f38:	7c 90       	ld	r7, X
    2f3a:	13 97       	sbiw	r26, 0x03	; 3
    2f3c:	41 14       	cp	r4, r1
    2f3e:	51 04       	cpc	r5, r1
    2f40:	61 04       	cpc	r6, r1
    2f42:	71 04       	cpc	r7, r1
    2f44:	31 f0       	breq	.+12     	; 0x2f52 <_ZN8SdVolume15allocContiguousEmPm+0x64>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
    2f46:	08 94       	sec
    2f48:	41 1c       	adc	r4, r1
    2f4a:	51 1c       	adc	r5, r1
    2f4c:	61 1c       	adc	r6, r1
    2f4e:	71 1c       	adc	r7, r1
    2f50:	10 c0       	rjmp	.+32     	; 0x2f72 <_ZN8SdVolume15allocContiguousEmPm+0x84>

    // don't save new start location
    setStart = false;
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
    2f52:	fc 01       	movw	r30, r24
    2f54:	40 80       	ld	r4, Z
    2f56:	51 80       	ldd	r5, Z+1	; 0x01
    2f58:	62 80       	ldd	r6, Z+2	; 0x02
    2f5a:	73 80       	ldd	r7, Z+3	; 0x03

    // save next search start if one cluster
    setStart = 1 == count;
    2f5c:	f1 e0       	ldi	r31, 0x01	; 1
    2f5e:	fd 83       	std	Y+5, r31	; 0x05
    2f60:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f62:	3d 85       	ldd	r19, Y+13	; 0x0d
    2f64:	4e 85       	ldd	r20, Y+14	; 0x0e
    2f66:	5f 85       	ldd	r21, Y+15	; 0x0f
    2f68:	21 30       	cpi	r18, 0x01	; 1
    2f6a:	31 05       	cpc	r19, r1
    2f6c:	41 05       	cpc	r20, r1
    2f6e:	51 05       	cpc	r21, r1
    2f70:	09 f0       	breq	.+2      	; 0x2f74 <_ZN8SdVolume15allocContiguousEmPm+0x86>
    2f72:	1d 82       	std	Y+5, r1	; 0x05
  }
  // end of group
  uint32_t endCluster = bgnCluster;

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
    2f74:	d1 01       	movw	r26, r2
    2f76:	19 96       	adiw	r26, 0x09	; 9
    2f78:	cd 90       	ld	r12, X+
    2f7a:	dd 90       	ld	r13, X+
    2f7c:	ed 90       	ld	r14, X+
    2f7e:	fc 90       	ld	r15, X
    2f80:	1c 97       	sbiw	r26, 0x0c	; 12
    2f82:	08 94       	sec
    2f84:	c1 1c       	adc	r12, r1
    2f86:	d1 1c       	adc	r13, r1
    2f88:	e1 1c       	adc	r14, r1
    2f8a:	f1 1c       	adc	r15, r1

    // save next search start if one cluster
    setStart = 1 == count;
  }
  // end of group
  uint32_t endCluster = bgnCluster;
    2f8c:	53 01       	movw	r10, r6
    2f8e:	42 01       	movw	r8, r4

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    2f90:	1e 82       	std	Y+6, r1	; 0x06
    2f92:	1f 82       	std	Y+7, r1	; 0x07
    2f94:	18 86       	std	Y+8, r1	; 0x08
    2f96:	19 86       	std	Y+9, r1	; 0x09
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
    2f98:	f1 01       	movw	r30, r2
    2f9a:	81 85       	ldd	r24, Z+9	; 0x09
    2f9c:	92 85       	ldd	r25, Z+10	; 0x0a
    2f9e:	a3 85       	ldd	r26, Z+11	; 0x0b
    2fa0:	b4 85       	ldd	r27, Z+12	; 0x0c
    2fa2:	2e 81       	ldd	r18, Y+6	; 0x06
    2fa4:	3f 81       	ldd	r19, Y+7	; 0x07
    2fa6:	48 85       	ldd	r20, Y+8	; 0x08
    2fa8:	59 85       	ldd	r21, Y+9	; 0x09
    2faa:	28 17       	cp	r18, r24
    2fac:	39 07       	cpc	r19, r25
    2fae:	4a 07       	cpc	r20, r26
    2fb0:	5b 07       	cpc	r21, r27
    2fb2:	08 f0       	brcs	.+2      	; 0x2fb6 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
    2fb4:	95 c0       	rjmp	.+298    	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
    2fb6:	c8 14       	cp	r12, r8
    2fb8:	d9 04       	cpc	r13, r9
    2fba:	ea 04       	cpc	r14, r10
    2fbc:	fb 04       	cpc	r15, r11
    2fbe:	50 f4       	brcc	.+20     	; 0x2fd4 <_ZN8SdVolume15allocContiguousEmPm+0xe6>
      bgnCluster = endCluster = 2;
    2fc0:	42 e0       	ldi	r20, 0x02	; 2
    2fc2:	84 2e       	mov	r8, r20
    2fc4:	91 2c       	mov	r9, r1
    2fc6:	a1 2c       	mov	r10, r1
    2fc8:	b1 2c       	mov	r11, r1
    2fca:	52 e0       	ldi	r21, 0x02	; 2
    2fcc:	45 2e       	mov	r4, r21
    2fce:	51 2c       	mov	r5, r1
    2fd0:	61 2c       	mov	r6, r1
    2fd2:	71 2c       	mov	r7, r1
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
    2fd4:	c1 01       	movw	r24, r2
    2fd6:	b5 01       	movw	r22, r10
    2fd8:	a4 01       	movw	r20, r8
    2fda:	9e 01       	movw	r18, r28
    2fdc:	2f 5f       	subi	r18, 0xFF	; 255
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <_ZNK8SdVolume6fatGetEmPm>
    2fe4:	88 23       	and	r24, r24
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <_ZN8SdVolume15allocContiguousEmPm+0xfc>
    2fe8:	7b c0       	rjmp	.+246    	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

    if (f != 0) {
    2fea:	49 81       	ldd	r20, Y+1	; 0x01
    2fec:	5a 81       	ldd	r21, Y+2	; 0x02
    2fee:	6b 81       	ldd	r22, Y+3	; 0x03
    2ff0:	7c 81       	ldd	r23, Y+4	; 0x04
    2ff2:	d5 01       	movw	r26, r10
    2ff4:	c4 01       	movw	r24, r8
    2ff6:	01 96       	adiw	r24, 0x01	; 1
    2ff8:	a1 1d       	adc	r26, r1
    2ffa:	b1 1d       	adc	r27, r1
    2ffc:	41 15       	cp	r20, r1
    2ffe:	51 05       	cpc	r21, r1
    3000:	61 05       	cpc	r22, r1
    3002:	71 05       	cpc	r23, r1
    3004:	19 f0       	breq	.+6      	; 0x300c <_ZN8SdVolume15allocContiguousEmPm+0x11e>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    3006:	2c 01       	movw	r4, r24
    3008:	3d 01       	movw	r6, r26
    300a:	0d c0       	rjmp	.+26     	; 0x3026 <_ZN8SdVolume15allocContiguousEmPm+0x138>
    } else if ((endCluster - bgnCluster + 1) == count) {
    300c:	84 19       	sub	r24, r4
    300e:	95 09       	sbc	r25, r5
    3010:	a6 09       	sbc	r26, r6
    3012:	b7 09       	sbc	r27, r7
    3014:	2c 85       	ldd	r18, Y+12	; 0x0c
    3016:	3d 85       	ldd	r19, Y+13	; 0x0d
    3018:	4e 85       	ldd	r20, Y+14	; 0x0e
    301a:	5f 85       	ldd	r21, Y+15	; 0x0f
    301c:	82 17       	cp	r24, r18
    301e:	93 07       	cpc	r25, r19
    3020:	a4 07       	cpc	r26, r20
    3022:	b5 07       	cpc	r27, r21
    3024:	89 f0       	breq	.+34     	; 0x3048 <_ZN8SdVolume15allocContiguousEmPm+0x15a>

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
    3026:	8e 81       	ldd	r24, Y+6	; 0x06
    3028:	9f 81       	ldd	r25, Y+7	; 0x07
    302a:	a8 85       	ldd	r26, Y+8	; 0x08
    302c:	b9 85       	ldd	r27, Y+9	; 0x09
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	a1 1d       	adc	r26, r1
    3032:	b1 1d       	adc	r27, r1
    3034:	8e 83       	std	Y+6, r24	; 0x06
    3036:	9f 83       	std	Y+7, r25	; 0x07
    3038:	a8 87       	std	Y+8, r26	; 0x08
    303a:	b9 87       	std	Y+9, r27	; 0x09
    303c:	08 94       	sec
    303e:	81 1c       	adc	r8, r1
    3040:	91 1c       	adc	r9, r1
    3042:	a1 1c       	adc	r10, r1
    3044:	b1 1c       	adc	r11, r1
    3046:	a8 cf       	rjmp	.-176    	; 0x2f98 <_ZN8SdVolume15allocContiguousEmPm+0xaa>
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    3048:	c1 01       	movw	r24, r2
    304a:	a4 01       	movw	r20, r8
    304c:	b5 01       	movw	r22, r10
    304e:	0f ef       	ldi	r16, 0xFF	; 255
    3050:	1f ef       	ldi	r17, 0xFF	; 255
    3052:	2f ef       	ldi	r18, 0xFF	; 255
    3054:	3f e0       	ldi	r19, 0x0F	; 15
    3056:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN8SdVolume6fatPutEmm>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
    305a:	88 23       	and	r24, r24
    305c:	91 f4       	brne	.+36     	; 0x3082 <_ZN8SdVolume15allocContiguousEmPm+0x194>
    305e:	40 c0       	rjmp	.+128    	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>

  // link clusters
  while (endCluster > bgnCluster) {
    if (!fatPut(endCluster - 1, endCluster)) return false;
    3060:	68 01       	movw	r12, r16
    3062:	79 01       	movw	r14, r18
    3064:	08 94       	sec
    3066:	c1 08       	sbc	r12, r1
    3068:	d1 08       	sbc	r13, r1
    306a:	e1 08       	sbc	r14, r1
    306c:	f1 08       	sbc	r15, r1
    306e:	c1 01       	movw	r24, r2
    3070:	b7 01       	movw	r22, r14
    3072:	a6 01       	movw	r20, r12
    3074:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN8SdVolume6fatPutEmm>
    3078:	88 23       	and	r24, r24
    307a:	91 f1       	breq	.+100    	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
    endCluster--;
    307c:	97 01       	movw	r18, r14
    307e:	86 01       	movw	r16, r12
    3080:	02 c0       	rjmp	.+4      	; 0x3086 <_ZN8SdVolume15allocContiguousEmPm+0x198>
    3082:	95 01       	movw	r18, r10
    3084:	84 01       	movw	r16, r8
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;

  // link clusters
  while (endCluster > bgnCluster) {
    3086:	40 16       	cp	r4, r16
    3088:	51 06       	cpc	r5, r17
    308a:	62 06       	cpc	r6, r18
    308c:	73 06       	cpc	r7, r19
    308e:	40 f3       	brcs	.-48     	; 0x3060 <_ZN8SdVolume15allocContiguousEmPm+0x172>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    3090:	aa 85       	ldd	r26, Y+10	; 0x0a
    3092:	bb 85       	ldd	r27, Y+11	; 0x0b
    3094:	4d 91       	ld	r20, X+
    3096:	5d 91       	ld	r21, X+
    3098:	6d 91       	ld	r22, X+
    309a:	7c 91       	ld	r23, X
    309c:	13 97       	sbiw	r26, 0x03	; 3
    309e:	41 15       	cp	r20, r1
    30a0:	51 05       	cpc	r21, r1
    30a2:	61 05       	cpc	r22, r1
    30a4:	71 05       	cpc	r23, r1
    30a6:	39 f0       	breq	.+14     	; 0x30b6 <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    30a8:	c1 01       	movw	r24, r2
    30aa:	93 01       	movw	r18, r6
    30ac:	82 01       	movw	r16, r4
    30ae:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN8SdVolume6fatPutEmm>
    30b2:	88 23       	and	r24, r24
    30b4:	a9 f0       	breq	.+42     	; 0x30e0 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
    30b6:	ea 85       	ldd	r30, Y+10	; 0x0a
    30b8:	fb 85       	ldd	r31, Y+11	; 0x0b
    30ba:	40 82       	st	Z, r4
    30bc:	51 82       	std	Z+1, r5	; 0x01
    30be:	62 82       	std	Z+2, r6	; 0x02
    30c0:	73 82       	std	Z+3, r7	; 0x03

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
    30c2:	fd 81       	ldd	r31, Y+5	; 0x05
    30c4:	ff 23       	and	r31, r31
    30c6:	71 f0       	breq	.+28     	; 0x30e4 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    30c8:	08 94       	sec
    30ca:	41 1c       	adc	r4, r1
    30cc:	51 1c       	adc	r5, r1
    30ce:	61 1c       	adc	r6, r1
    30d0:	71 1c       	adc	r7, r1
    30d2:	d1 01       	movw	r26, r2
    30d4:	4d 92       	st	X+, r4
    30d6:	5d 92       	st	X+, r5
    30d8:	6d 92       	st	X+, r6
    30da:	7c 92       	st	X, r7
    30dc:	13 97       	sbiw	r26, 0x03	; 3
    30de:	02 c0       	rjmp	.+4      	; 0x30e4 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
    if (!fatPut(endCluster - 1, endCluster)) return false;
    endCluster--;
  }
  if (*curCluster != 0) {
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <_ZN8SdVolume15allocContiguousEmPm+0x1f8>
  *curCluster = bgnCluster;

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;

  return true;
    30e4:	81 e0       	ldi	r24, 0x01	; 1
}
    30e6:	2f 96       	adiw	r28, 0x0f	; 15
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	df 90       	pop	r13
    3100:	cf 90       	pop	r12
    3102:	bf 90       	pop	r11
    3104:	af 90       	pop	r10
    3106:	9f 90       	pop	r9
    3108:	8f 90       	pop	r8
    310a:	7f 90       	pop	r7
    310c:	6f 90       	pop	r6
    310e:	5f 90       	pop	r5
    3110:	4f 90       	pop	r4
    3112:	3f 90       	pop	r3
    3114:	2f 90       	pop	r2
    3116:	08 95       	ret

00003118 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
    3118:	6f 92       	push	r6
    311a:	7f 92       	push	r7
    311c:	8f 92       	push	r8
    311e:	9f 92       	push	r9
    3120:	af 92       	push	r10
    3122:	bf 92       	push	r11
    3124:	cf 92       	push	r12
    3126:	df 92       	push	r13
    3128:	ef 92       	push	r14
    312a:	ff 92       	push	r15
    312c:	1f 93       	push	r17
    312e:	cf 93       	push	r28
    3130:	df 93       	push	r29
    3132:	ec 01       	movw	r28, r24
    3134:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
    3136:	70 93 c5 05 	sts	0x05C5, r23
    313a:	60 93 c4 05 	sts	0x05C4, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    313e:	44 23       	and	r20, r20
    3140:	89 f1       	breq	.+98     	; 0x31a4 <_ZN8SdVolume4initEP7Sd2Cardh+0x8c>
    if (part > 4)return false;
    3142:	45 30       	cpi	r20, 0x05	; 5
    3144:	08 f0       	brcs	.+2      	; 0x3148 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    3146:	06 c1       	rjmp	.+524    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    3148:	60 e0       	ldi	r22, 0x00	; 0
    314a:	70 e0       	ldi	r23, 0x00	; 0
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	40 e0       	ldi	r20, 0x00	; 0
    3152:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    3156:	88 23       	and	r24, r24
    3158:	09 f4       	brne	.+2      	; 0x315c <_ZN8SdVolume4initEP7Sd2Cardh+0x44>
    315a:	fc c0       	rjmp	.+504    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
    315c:	e1 2f       	mov	r30, r17
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	a4 e0       	ldi	r26, 0x04	; 4
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	aa 95       	dec	r26
    3168:	e1 f7       	brne	.-8      	; 0x3162 <_ZN8SdVolume4initEP7Sd2Cardh+0x4a>
    316a:	ec 58       	subi	r30, 0x8C	; 140
    316c:	f8 4f       	sbci	r31, 0xF8	; 248
    if ((p->boot & 0X7F) !=0  ||
    316e:	80 81       	ld	r24, Z
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	8f 77       	andi	r24, 0x7F	; 127
    3174:	90 70       	andi	r25, 0x00	; 0
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	09 f0       	breq	.+2      	; 0x317c <_ZN8SdVolume4initEP7Sd2Cardh+0x64>
    317a:	ec c0       	rjmp	.+472    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    317c:	84 85       	ldd	r24, Z+12	; 0x0c
    317e:	95 85       	ldd	r25, Z+13	; 0x0d
    3180:	a6 85       	ldd	r26, Z+14	; 0x0e
    3182:	b7 85       	ldd	r27, Z+15	; 0x0f
    3184:	84 36       	cpi	r24, 0x64	; 100
    3186:	91 05       	cpc	r25, r1
    3188:	a1 05       	cpc	r26, r1
    318a:	b1 05       	cpc	r27, r1
    318c:	08 f4       	brcc	.+2      	; 0x3190 <_ZN8SdVolume4initEP7Sd2Cardh+0x78>
    318e:	e2 c0       	rjmp	.+452    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    3190:	80 84       	ldd	r8, Z+8	; 0x08
    3192:	91 84       	ldd	r9, Z+9	; 0x09
    3194:	a2 84       	ldd	r10, Z+10	; 0x0a
    3196:	b3 84       	ldd	r11, Z+11	; 0x0b
    3198:	81 14       	cp	r8, r1
    319a:	91 04       	cpc	r9, r1
    319c:	a1 04       	cpc	r10, r1
    319e:	b1 04       	cpc	r11, r1
    31a0:	21 f4       	brne	.+8      	; 0x31aa <_ZN8SdVolume4initEP7Sd2Cardh+0x92>
    31a2:	d8 c0       	rjmp	.+432    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
    31a4:	88 24       	eor	r8, r8
    31a6:	99 24       	eor	r9, r9
    31a8:	54 01       	movw	r10, r8
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
    31aa:	c5 01       	movw	r24, r10
    31ac:	b4 01       	movw	r22, r8
    31ae:	40 e0       	ldi	r20, 0x00	; 0
    31b0:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <_ZN8SdVolume13cacheRawBlockEmh>
    31b4:	88 23       	and	r24, r24
    31b6:	09 f4       	brne	.+2      	; 0x31ba <_ZN8SdVolume4initEP7Sd2Cardh+0xa2>
    31b8:	cd c0       	rjmp	.+410    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
    31ba:	80 91 d1 05 	lds	r24, 0x05D1
    31be:	90 91 d2 05 	lds	r25, 0x05D2
    31c2:	22 e0       	ldi	r18, 0x02	; 2
    31c4:	80 30       	cpi	r24, 0x00	; 0
    31c6:	92 07       	cpc	r25, r18
    31c8:	09 f0       	breq	.+2      	; 0x31cc <_ZN8SdVolume4initEP7Sd2Cardh+0xb4>
    31ca:	c4 c0       	rjmp	.+392    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    31cc:	30 91 d6 05 	lds	r19, 0x05D6
    31d0:	33 23       	and	r19, r19
    31d2:	09 f4       	brne	.+2      	; 0x31d6 <_ZN8SdVolume4initEP7Sd2Cardh+0xbe>
    31d4:	bf c0       	rjmp	.+382    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    31d6:	80 91 d4 05 	lds	r24, 0x05D4
    31da:	90 91 d5 05 	lds	r25, 0x05D5
    31de:	00 97       	sbiw	r24, 0x00	; 0
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <_ZN8SdVolume4initEP7Sd2Cardh+0xcc>
    31e2:	b8 c0       	rjmp	.+368    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    31e4:	20 91 d3 05 	lds	r18, 0x05D3
    31e8:	22 23       	and	r18, r18
    31ea:	09 f4       	brne	.+2      	; 0x31ee <_ZN8SdVolume4initEP7Sd2Cardh+0xd6>
    31ec:	b3 c0       	rjmp	.+358    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
    31ee:	3a 8b       	std	Y+18, r19	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
    31f0:	2c 83       	std	Y+4, r18	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
    31f2:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    31f4:	30 e0       	ldi	r19, 0x00	; 0
    31f6:	41 e0       	ldi	r20, 0x01	; 1
    31f8:	50 e0       	ldi	r21, 0x00	; 0
    31fa:	06 c0       	rjmp	.+12     	; 0x3208 <_ZN8SdVolume4initEP7Sd2Cardh+0xf0>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    31fc:	81 2f       	mov	r24, r17
    31fe:	8f 5f       	subi	r24, 0xFF	; 255
    3200:	8d 87       	std	Y+13, r24	; 0x0d
    3202:	18 30       	cpi	r17, 0x08	; 8
    3204:	08 f0       	brcs	.+2      	; 0x3208 <_ZN8SdVolume4initEP7Sd2Cardh+0xf0>
    3206:	a6 c0       	rjmp	.+332    	; 0x3354 <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    3208:	1d 85       	ldd	r17, Y+13	; 0x0d
    320a:	ca 01       	movw	r24, r20
    320c:	01 2e       	mov	r0, r17
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <_ZN8SdVolume4initEP7Sd2Cardh+0xfc>
    3210:	88 0f       	add	r24, r24
    3212:	99 1f       	adc	r25, r25
    3214:	0a 94       	dec	r0
    3216:	e2 f7       	brpl	.-8      	; 0x3210 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
    3218:	28 17       	cp	r18, r24
    321a:	39 07       	cpc	r19, r25
    321c:	79 f7       	brne	.-34     	; 0x31fc <_ZN8SdVolume4initEP7Sd2Cardh+0xe4>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
    321e:	80 91 dc 05 	lds	r24, 0x05DC
    3222:	90 91 dd 05 	lds	r25, 0x05DD
    3226:	00 97       	sbiw	r24, 0x00	; 0
    3228:	19 f0       	breq	.+6      	; 0x3230 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
    322a:	a0 e0       	ldi	r26, 0x00	; 0
    322c:	b0 e0       	ldi	r27, 0x00	; 0
    322e:	08 c0       	rjmp	.+16     	; 0x3240 <_ZN8SdVolume4initEP7Sd2Cardh+0x128>
    3230:	80 91 ea 05 	lds	r24, 0x05EA
    3234:	90 91 eb 05 	lds	r25, 0x05EB
    3238:	a0 91 ec 05 	lds	r26, 0x05EC
    323c:	b0 91 ed 05 	lds	r27, 0x05ED
    3240:	8d 83       	std	Y+5, r24	; 0x05
    3242:	9e 83       	std	Y+6, r25	; 0x06
    3244:	af 83       	std	Y+7, r26	; 0x07
    3246:	b8 87       	std	Y+8, r27	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
    3248:	c0 90 d4 05 	lds	r12, 0x05D4
    324c:	d0 90 d5 05 	lds	r13, 0x05D5
    3250:	ee 24       	eor	r14, r14
    3252:	ff 24       	eor	r15, r15
    3254:	c8 0c       	add	r12, r8
    3256:	d9 1c       	adc	r13, r9
    3258:	ea 1c       	adc	r14, r10
    325a:	fb 1c       	adc	r15, r11
    325c:	cb 8a       	std	Y+19, r12	; 0x13
    325e:	dc 8a       	std	Y+20, r13	; 0x14
    3260:	ed 8a       	std	Y+21, r14	; 0x15
    3262:	fe 8a       	std	Y+22, r15	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
    3264:	60 90 d7 05 	lds	r6, 0x05D7
    3268:	70 90 d8 05 	lds	r7, 0x05D8
    326c:	79 8e       	std	Y+25, r7	; 0x19
    326e:	68 8e       	std	Y+24, r6	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
    3270:	20 91 d6 05 	lds	r18, 0x05D6
    3274:	30 e0       	ldi	r19, 0x00	; 0
    3276:	40 e0       	ldi	r20, 0x00	; 0
    3278:	50 e0       	ldi	r21, 0x00	; 0
    327a:	bc 01       	movw	r22, r24
    327c:	cd 01       	movw	r24, r26
    327e:	0e 94 a4 22 	call	0x4548	; 0x4548 <__mulsi3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	8c 0d       	add	r24, r12
    3288:	9d 1d       	adc	r25, r13
    328a:	ae 1d       	adc	r26, r14
    328c:	bf 1d       	adc	r27, r15
    328e:	8a 8f       	std	Y+26, r24	; 0x1a
    3290:	9b 8f       	std	Y+27, r25	; 0x1b
    3292:	ac 8f       	std	Y+28, r26	; 0x1c
    3294:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
    3296:	a3 01       	movw	r20, r6
    3298:	e5 e0       	ldi	r30, 0x05	; 5
    329a:	44 0f       	add	r20, r20
    329c:	55 1f       	adc	r21, r21
    329e:	ea 95       	dec	r30
    32a0:	e1 f7       	brne	.-8      	; 0x329a <_ZN8SdVolume4initEP7Sd2Cardh+0x182>
    32a2:	41 50       	subi	r20, 0x01	; 1
    32a4:	5e 4f       	sbci	r21, 0xFE	; 254
    32a6:	45 2f       	mov	r20, r21
    32a8:	55 27       	eor	r21, r21
    32aa:	46 95       	lsr	r20
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	70 e0       	ldi	r23, 0x00	; 0
    32b0:	48 0f       	add	r20, r24
    32b2:	59 1f       	adc	r21, r25
    32b4:	6a 1f       	adc	r22, r26
    32b6:	7b 1f       	adc	r23, r27
    32b8:	4e 87       	std	Y+14, r20	; 0x0e
    32ba:	5f 87       	std	Y+15, r21	; 0x0f
    32bc:	68 8b       	std	Y+16, r22	; 0x10
    32be:	79 8b       	std	Y+17, r23	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
    32c0:	80 91 d9 05 	lds	r24, 0x05D9
    32c4:	90 91 da 05 	lds	r25, 0x05DA
    32c8:	00 97       	sbiw	r24, 0x00	; 0
    32ca:	19 f0       	breq	.+6      	; 0x32d2 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ba>
    32cc:	a0 e0       	ldi	r26, 0x00	; 0
    32ce:	b0 e0       	ldi	r27, 0x00	; 0
    32d0:	08 c0       	rjmp	.+16     	; 0x32e2 <_ZN8SdVolume4initEP7Sd2Cardh+0x1ca>
    32d2:	80 91 e6 05 	lds	r24, 0x05E6
    32d6:	90 91 e7 05 	lds	r25, 0x05E7
    32da:	a0 91 e8 05 	lds	r26, 0x05E8
    32de:	b0 91 e9 05 	lds	r27, 0x05E9
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
    32e2:	84 1a       	sub	r8, r20
    32e4:	95 0a       	sbc	r9, r21
    32e6:	a6 0a       	sbc	r10, r22
    32e8:	b7 0a       	sbc	r11, r23
    32ea:	88 0e       	add	r8, r24
    32ec:	99 1e       	adc	r9, r25
    32ee:	aa 1e       	adc	r10, r26
    32f0:	bb 1e       	adc	r11, r27

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
    32f2:	04 c0       	rjmp	.+8      	; 0x32fc <_ZN8SdVolume4initEP7Sd2Cardh+0x1e4>
    32f4:	b6 94       	lsr	r11
    32f6:	a7 94       	ror	r10
    32f8:	97 94       	ror	r9
    32fa:	87 94       	ror	r8
    32fc:	1a 95       	dec	r17
    32fe:	d2 f7       	brpl	.-12     	; 0x32f4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1dc>
    3300:	89 86       	std	Y+9, r8	; 0x09
    3302:	9a 86       	std	Y+10, r9	; 0x0a
    3304:	ab 86       	std	Y+11, r10	; 0x0b
    3306:	bc 86       	std	Y+12, r11	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
    3308:	85 ef       	ldi	r24, 0xF5	; 245
    330a:	88 16       	cp	r8, r24
    330c:	8f e0       	ldi	r24, 0x0F	; 15
    330e:	98 06       	cpc	r9, r24
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	a8 06       	cpc	r10, r24
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	b8 06       	cpc	r11, r24
    3318:	10 f4       	brcc	.+4      	; 0x331e <_ZN8SdVolume4initEP7Sd2Cardh+0x206>
    fatType_ = 12;
    331a:	8c e0       	ldi	r24, 0x0C	; 12
    331c:	18 c0       	rjmp	.+48     	; 0x334e <_ZN8SdVolume4initEP7Sd2Cardh+0x236>
  } else if (clusterCount_ < 65525) {
    331e:	25 ef       	ldi	r18, 0xF5	; 245
    3320:	82 16       	cp	r8, r18
    3322:	2f ef       	ldi	r18, 0xFF	; 255
    3324:	92 06       	cpc	r9, r18
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	a2 06       	cpc	r10, r18
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	b2 06       	cpc	r11, r18
    332e:	10 f4       	brcc	.+4      	; 0x3334 <_ZN8SdVolume4initEP7Sd2Cardh+0x21c>
    fatType_ = 16;
    3330:	80 e1       	ldi	r24, 0x10	; 16
    3332:	0d c0       	rjmp	.+26     	; 0x334e <_ZN8SdVolume4initEP7Sd2Cardh+0x236>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    3334:	80 91 f2 05 	lds	r24, 0x05F2
    3338:	90 91 f3 05 	lds	r25, 0x05F3
    333c:	a0 91 f4 05 	lds	r26, 0x05F4
    3340:	b0 91 f5 05 	lds	r27, 0x05F5
    3344:	8a 8f       	std	Y+26, r24	; 0x1a
    3346:	9b 8f       	std	Y+27, r25	; 0x1b
    3348:	ac 8f       	std	Y+28, r26	; 0x1c
    334a:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
    334c:	80 e2       	ldi	r24, 0x20	; 32
    334e:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	01 c0       	rjmp	.+2      	; 0x3356 <_ZN8SdVolume4initEP7Sd2Cardh+0x23e>

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
    3354:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
    3356:	df 91       	pop	r29
    3358:	cf 91       	pop	r28
    335a:	1f 91       	pop	r17
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	df 90       	pop	r13
    3362:	cf 90       	pop	r12
    3364:	bf 90       	pop	r11
    3366:	af 90       	pop	r10
    3368:	9f 90       	pop	r9
    336a:	8f 90       	pop	r8
    336c:	7f 90       	pop	r7
    336e:	6f 90       	pop	r6
    3370:	08 95       	ret

00003372 <_ZNK9QueueListIP17TaskManagerRecordE4exitEPKc.isra.3>:

// exit report method in case of error.
template<typename T>
void QueueList<T>::exit (const char * m) const {
  // print the message if there is a printer.
  if (printer)
    3372:	00 97       	sbiw	r24, 0x00	; 0
    3374:	11 f0       	breq	.+4      	; 0x337a <_ZNK9QueueListIP17TaskManagerRecordE4exitEPKc.isra.3+0x8>
    printer->println (m);
    3376:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>

// led blinking method in case of error.
template<typename T>
void QueueList<T>::blink () const {
  // set led pin as output.
  pinMode (ledPin, OUTPUT);
    337a:	8d e0       	ldi	r24, 0x0D	; 13
    337c:	61 e0       	ldi	r22, 0x01	; 1
    337e:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>

  // continue looping until hardware reset.
  while (true) {
    digitalWrite (ledPin, HIGH); // sets the LED on.
    3382:	8d e0       	ldi	r24, 0x0D	; 13
    3384:	61 e0       	ldi	r22, 0x01	; 1
    3386:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    338a:	6a ef       	ldi	r22, 0xFA	; 250
    338c:	70 e0       	ldi	r23, 0x00	; 0
    338e:	80 e0       	ldi	r24, 0x00	; 0
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
    digitalWrite (ledPin, LOW);  // sets the LED off.
    3396:	8d e0       	ldi	r24, 0x0D	; 13
    3398:	60 e0       	ldi	r22, 0x00	; 0
    339a:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    339e:	6a ef       	ldi	r22, 0xFA	; 250
    33a0:	70 e0       	ldi	r23, 0x00	; 0
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
    33aa:	eb cf       	rjmp	.-42     	; 0x3382 <_ZNK9QueueListIP17TaskManagerRecordE4exitEPKc.isra.3+0x10>

000033ac <_ZN11TaskManagerC1EP21TaskManagerStatistics>:

#include "TaskManager.h"

#include <Arduino.h>

TaskManager::TaskManager( TaskManagerStatistics* _taskManagerStatistics )
    33ac:	0f 93       	push	r16
    33ae:	1f 93       	push	r17
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	ec 01       	movw	r28, r24
    33b6:	84 e7       	ldi	r24, 0x74	; 116
    33b8:	94 e0       	ldi	r25, 0x04	; 4
    33ba:	99 83       	std	Y+1, r25	; 0x01
    33bc:	88 83       	st	Y, r24
{
	taskManagerStatistics = _taskManagerStatistics;
    33be:	7b 83       	std	Y+3, r23	; 0x03
    33c0:	6a 83       	std	Y+2, r22	; 0x02

	tasksQueueA = new QueueList <TaskManagerRecord*>();
    33c2:	88 e0       	ldi	r24, 0x08	; 8
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    33ca:	fc 01       	movw	r30, r24
};

// init the queue (constructor).
template<typename T>
QueueList<T>::QueueList () {
  size = 0;       // set the size of queue to zero.
    33cc:	13 82       	std	Z+3, r1	; 0x03
    33ce:	12 82       	std	Z+2, r1	; 0x02
  head = NULL;    // set the head of the list to point nowhere.
    33d0:	15 82       	std	Z+5, r1	; 0x05
    33d2:	14 82       	std	Z+4, r1	; 0x04
  tail = NULL;    // set the tail of the list to point nowhere.
    33d4:	17 82       	std	Z+7, r1	; 0x07
    33d6:	16 82       	std	Z+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    33d8:	11 82       	std	Z+1, r1	; 0x01
    33da:	10 82       	st	Z, r1
    33dc:	9d 83       	std	Y+5, r25	; 0x05
    33de:	8c 83       	std	Y+4, r24	; 0x04
	tasksQueueB = new QueueList <TaskManagerRecord*>();
    33e0:	88 e0       	ldi	r24, 0x08	; 8
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    33e8:	fc 01       	movw	r30, r24
};

// init the queue (constructor).
template<typename T>
QueueList<T>::QueueList () {
  size = 0;       // set the size of queue to zero.
    33ea:	13 82       	std	Z+3, r1	; 0x03
    33ec:	12 82       	std	Z+2, r1	; 0x02
  head = NULL;    // set the head of the list to point nowhere.
    33ee:	15 82       	std	Z+5, r1	; 0x05
    33f0:	14 82       	std	Z+4, r1	; 0x04
  tail = NULL;    // set the tail of the list to point nowhere.
    33f2:	17 82       	std	Z+7, r1	; 0x07
    33f4:	16 82       	std	Z+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    33f6:	11 82       	std	Z+1, r1	; 0x01
    33f8:	10 82       	st	Z, r1
    33fa:	9f 83       	std	Y+7, r25	; 0x07
    33fc:	8e 83       	std	Y+6, r24	; 0x06

	memConfFreeSchedulerFreeRunnable = new TaskManagerMemoryConfigurator( true , true , false );
    33fe:	85 e0       	ldi	r24, 0x05	; 5
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    3406:	8c 01       	movw	r16, r24
    3408:	61 e0       	ldi	r22, 0x01	; 1
    340a:	41 e0       	ldi	r20, 0x01	; 1
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	0e 94 48 1c 	call	0x3890	; 0x3890 <_ZN29TaskManagerMemoryConfiguratorC1Ebbb>
    3412:	19 87       	std	Y+9, r17	; 0x09
    3414:	08 87       	std	Y+8, r16	; 0x08
	memConfFreeSchedulerLeaveRunnable = new TaskManagerMemoryConfigurator( true , false , false );
    3416:	85 e0       	ldi	r24, 0x05	; 5
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    341e:	8c 01       	movw	r16, r24
    3420:	61 e0       	ldi	r22, 0x01	; 1
    3422:	40 e0       	ldi	r20, 0x00	; 0
    3424:	20 e0       	ldi	r18, 0x00	; 0
    3426:	0e 94 48 1c 	call	0x3890	; 0x3890 <_ZN29TaskManagerMemoryConfiguratorC1Ebbb>
    342a:	1b 87       	std	Y+11, r17	; 0x0b
    342c:	0a 87       	std	Y+10, r16	; 0x0a
	memConfLeaveSchedulerFreeRunnable = new TaskManagerMemoryConfigurator( false , true , false );
    342e:	85 e0       	ldi	r24, 0x05	; 5
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    3436:	8c 01       	movw	r16, r24
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	41 e0       	ldi	r20, 0x01	; 1
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	0e 94 48 1c 	call	0x3890	; 0x3890 <_ZN29TaskManagerMemoryConfiguratorC1Ebbb>
    3442:	1d 87       	std	Y+13, r17	; 0x0d
    3444:	0c 87       	std	Y+12, r16	; 0x0c
	memConfLeaveSchedulerLeaveRunnable = new TaskManagerMemoryConfigurator( false , false , false );
    3446:	85 e0       	ldi	r24, 0x05	; 5
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    344e:	8c 01       	movw	r16, r24
    3450:	60 e0       	ldi	r22, 0x00	; 0
    3452:	40 e0       	ldi	r20, 0x00	; 0
    3454:	20 e0       	ldi	r18, 0x00	; 0
    3456:	0e 94 48 1c 	call	0x3890	; 0x3890 <_ZN29TaskManagerMemoryConfiguratorC1Ebbb>
    345a:	1f 87       	std	Y+15, r17	; 0x0f
    345c:	0e 87       	std	Y+14, r16	; 0x0e
}
    345e:	df 91       	pop	r29
    3460:	cf 91       	pop	r28
    3462:	1f 91       	pop	r17
    3464:	0f 91       	pop	r16
    3466:	08 95       	ret

00003468 <_ZN9QueueListIP17TaskManagerRecordE4pushES1_>:
  printer = NULL; // set the printer of queue to point nowhere.
}

// push an item to the queue.
template<typename T>
void QueueList<T>::push (const T i) {
    3468:	ef 92       	push	r14
    346a:	ff 92       	push	r15
    346c:	0f 93       	push	r16
    346e:	1f 93       	push	r17
    3470:	cf 93       	push	r28
    3472:	df 93       	push	r29
    3474:	ec 01       	movw	r28, r24
    3476:	8b 01       	movw	r16, r22
  // create a temporary pointer to tail.
  link t = tail;
    3478:	ee 80       	ldd	r14, Y+6	; 0x06
    347a:	ff 80       	ldd	r15, Y+7	; 0x07

  // create a new node for the tail.
  tail = (link) malloc (sizeof (node));
    347c:	84 e0       	ldi	r24, 0x04	; 4
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	0e 94 12 23 	call	0x4624	; 0x4624 <malloc>
    3484:	fc 01       	movw	r30, r24
    3486:	9f 83       	std	Y+7, r25	; 0x07
    3488:	8e 83       	std	Y+6, r24	; 0x06

  // if there is a memory allocation error.
  if (tail == NULL)
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	31 f4       	brne	.+12     	; 0x349a <_ZN9QueueListIP17TaskManagerRecordE4pushES1_+0x32>
    exit ("QUEUE: insufficient memory to create a new node.");
    348e:	88 81       	ld	r24, Y
    3490:	99 81       	ldd	r25, Y+1	; 0x01
    3492:	6b e4       	ldi	r22, 0x4B	; 75
    3494:	72 e0       	ldi	r23, 0x02	; 2
    3496:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZNK9QueueListIP17TaskManagerRecordE4exitEPKc.isra.3>

  // set the next of the new node.
  tail->next = NULL;
    349a:	13 82       	std	Z+3, r1	; 0x03
    349c:	12 82       	std	Z+2, r1	; 0x02

  // store the item to the new node.
  tail->item = i;
    349e:	11 83       	std	Z+1, r17	; 0x01
    34a0:	00 83       	st	Z, r16

  // check if the queue is empty.
  if (isEmpty ())
    34a2:	8c 81       	ldd	r24, Y+4	; 0x04
    34a4:	9d 81       	ldd	r25, Y+5	; 0x05
    34a6:	00 97       	sbiw	r24, 0x00	; 0
    34a8:	19 f4       	brne	.+6      	; 0x34b0 <_ZN9QueueListIP17TaskManagerRecordE4pushES1_+0x48>
    // make the new node the head of the list.
    head = tail;
    34aa:	fd 83       	std	Y+5, r31	; 0x05
    34ac:	ec 83       	std	Y+4, r30	; 0x04
    34ae:	05 c0       	rjmp	.+10     	; 0x34ba <_ZN9QueueListIP17TaskManagerRecordE4pushES1_+0x52>
  else
    // make the new node the tail of the list.
    t->next = tail;
    34b0:	d7 01       	movw	r26, r14
    34b2:	13 96       	adiw	r26, 0x03	; 3
    34b4:	fc 93       	st	X, r31
    34b6:	ee 93       	st	-X, r30
    34b8:	12 97       	sbiw	r26, 0x02	; 2
  
  // increase the items.
  size++;
    34ba:	8a 81       	ldd	r24, Y+2	; 0x02
    34bc:	9b 81       	ldd	r25, Y+3	; 0x03
    34be:	01 96       	adiw	r24, 0x01	; 1
    34c0:	9b 83       	std	Y+3, r25	; 0x03
    34c2:	8a 83       	std	Y+2, r24	; 0x02
}
    34c4:	df 91       	pop	r29
    34c6:	cf 91       	pop	r28
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	ff 90       	pop	r15
    34ce:	ef 90       	pop	r14
    34d0:	08 95       	ret

000034d2 <_ZN11TaskManager7addTaskEP29TaskManagerMemoryConfiguratorP20TaskManagerSchedulerP8Runnable>:

	addTask( memConf , taskManagerScheduler , runnable );
}

void TaskManager::addTask( TaskManagerMemoryConfigurator* taskManagerMemoryConfigurator , TaskManagerScheduler* taskManagerScheduler , Runnable* runnable )
{
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	8c 01       	movw	r16, r24
    34e8:	7b 01       	movw	r14, r22
    34ea:	6a 01       	movw	r12, r20
    34ec:	59 01       	movw	r10, r18
	TaskManagerRecord* record = new TaskManagerRecord( taskManagerMemoryConfigurator , taskManagerScheduler , runnable );
    34ee:	88 e0       	ldi	r24, 0x08	; 8
    34f0:	90 e0       	ldi	r25, 0x00	; 0
    34f2:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    34f6:	ec 01       	movw	r28, r24
    34f8:	b7 01       	movw	r22, r14
    34fa:	a6 01       	movw	r20, r12
    34fc:	95 01       	movw	r18, r10
    34fe:	0e 94 a2 1c 	call	0x3944	; 0x3944 <_ZN17TaskManagerRecordC1EP29TaskManagerMemoryConfiguratorP20TaskManagerSchedulerP8Runnable>

	if( !tasksQueueA->isEmpty() )
    3502:	f8 01       	movw	r30, r16
    3504:	84 81       	ldd	r24, Z+4	; 0x04
    3506:	95 81       	ldd	r25, Z+5	; 0x05
    3508:	fc 01       	movw	r30, r24
    350a:	24 81       	ldd	r18, Z+4	; 0x04
    350c:	35 81       	ldd	r19, Z+5	; 0x05
    350e:	21 15       	cp	r18, r1
    3510:	31 05       	cpc	r19, r1
    3512:	19 f4       	brne	.+6      	; 0x351a <_ZN11TaskManager7addTaskEP29TaskManagerMemoryConfiguratorP20TaskManagerSchedulerP8Runnable+0x48>
		tasksQueueA->push( record );
	else
		tasksQueueB->push( record );
    3514:	f8 01       	movw	r30, r16
    3516:	86 81       	ldd	r24, Z+6	; 0x06
    3518:	97 81       	ldd	r25, Z+7	; 0x07
    351a:	be 01       	movw	r22, r28
    351c:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZN9QueueListIP17TaskManagerRecordE4pushES1_>
}
    3520:	df 91       	pop	r29
    3522:	cf 91       	pop	r28
    3524:	1f 91       	pop	r17
    3526:	0f 91       	pop	r16
    3528:	ff 90       	pop	r15
    352a:	ef 90       	pop	r14
    352c:	df 90       	pop	r13
    352e:	cf 90       	pop	r12
    3530:	bf 90       	pop	r11
    3532:	af 90       	pop	r10
    3534:	08 95       	ret

00003536 <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable>:
	memConfLeaveSchedulerFreeRunnable = new TaskManagerMemoryConfigurator( false , true , false );
	memConfLeaveSchedulerLeaveRunnable = new TaskManagerMemoryConfigurator( false , false , false );
}

void TaskManager::addTask( bool _canTaskManagerFreeScheduler , bool _canTaskManagerFreeRunnable , TaskManagerScheduler* taskManagerScheduler , Runnable* runnable )
{
    3536:	0f 93       	push	r16
    3538:	1f 93       	push	r17
    353a:	fc 01       	movw	r30, r24
	TaskManagerMemoryConfigurator* memConf;

	if( _canTaskManagerFreeScheduler && _canTaskManagerFreeRunnable )
    353c:	66 23       	and	r22, r22
    353e:	41 f0       	breq	.+16     	; 0x3550 <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x1a>
    3540:	44 23       	and	r20, r20
    3542:	19 f0       	breq	.+6      	; 0x354a <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x14>
		memConf = memConfFreeSchedulerFreeRunnable;
    3544:	60 85       	ldd	r22, Z+8	; 0x08
    3546:	71 85       	ldd	r23, Z+9	; 0x09
    3548:	0a c0       	rjmp	.+20     	; 0x355e <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x28>
	else
	if( _canTaskManagerFreeScheduler && !_canTaskManagerFreeRunnable )
		memConf = memConfFreeSchedulerLeaveRunnable;
    354a:	62 85       	ldd	r22, Z+10	; 0x0a
    354c:	73 85       	ldd	r23, Z+11	; 0x0b
    354e:	07 c0       	rjmp	.+14     	; 0x355e <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x28>
	else
	if( !_canTaskManagerFreeScheduler && _canTaskManagerFreeRunnable )
    3550:	44 23       	and	r20, r20
    3552:	19 f0       	breq	.+6      	; 0x355a <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x24>
		memConf = memConfLeaveSchedulerFreeRunnable;
    3554:	64 85       	ldd	r22, Z+12	; 0x0c
    3556:	75 85       	ldd	r23, Z+13	; 0x0d
    3558:	02 c0       	rjmp	.+4      	; 0x355e <_ZN11TaskManager7addTaskEbbP20TaskManagerSchedulerP8Runnable+0x28>
	else
		memConf = memConfLeaveSchedulerLeaveRunnable;
    355a:	66 85       	ldd	r22, Z+14	; 0x0e
    355c:	77 85       	ldd	r23, Z+15	; 0x0f

	addTask( memConf , taskManagerScheduler , runnable );
    355e:	cf 01       	movw	r24, r30
    3560:	a9 01       	movw	r20, r18
    3562:	98 01       	movw	r18, r16
    3564:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <_ZN11TaskManager7addTaskEP29TaskManagerMemoryConfiguratorP20TaskManagerSchedulerP8Runnable>
}
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	08 95       	ret

0000356e <_ZN9QueueListIP17TaskManagerRecordE3popEv>:

// pop an item from the queue.
template<typename T>
T QueueList<T>::pop () {
    356e:	ef 92       	push	r14
    3570:	ff 92       	push	r15
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	cf 93       	push	r28
    3578:	df 93       	push	r29
    357a:	ec 01       	movw	r28, r24
	while( !tasksQueueA->isEmpty() ) delete( tasksQueueA->pop() );
	while( !tasksQueueB->isEmpty() ) delete( tasksQueueA->pop() );

	delete( tasksQueueA );
	delete( tasksQueueB );
}
    357c:	ec 81       	ldd	r30, Y+4	; 0x04
    357e:	fd 81       	ldd	r31, Y+5	; 0x05
  // check if the queue is empty.
  if (isEmpty ())
    3580:	30 97       	sbiw	r30, 0x00	; 0
    3582:	31 f4       	brne	.+12     	; 0x3590 <_ZN9QueueListIP17TaskManagerRecordE3popEv+0x22>
    exit ("QUEUE: can't pop item from queue: queue is empty.");
    3584:	88 81       	ld	r24, Y
    3586:	99 81       	ldd	r25, Y+1	; 0x01
    3588:	6c e7       	ldi	r22, 0x7C	; 124
    358a:	72 e0       	ldi	r23, 0x02	; 2
    358c:	0e 94 b9 19 	call	0x3372	; 0x3372 <_ZNK9QueueListIP17TaskManagerRecordE4exitEPKc.isra.3>

  // get the item of the head node.
  const T item = head->item;
    3590:	e0 80       	ld	r14, Z
    3592:	f1 80       	ldd	r15, Z+1	; 0x01

  // remove only the head node.
  link t = head->next; free (head); head = t;
    3594:	02 81       	ldd	r16, Z+2	; 0x02
    3596:	13 81       	ldd	r17, Z+3	; 0x03
    3598:	cf 01       	movw	r24, r30
    359a:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>
    359e:	1d 83       	std	Y+5, r17	; 0x05
    35a0:	0c 83       	std	Y+4, r16	; 0x04

  // decrease the items.
  size--;
    35a2:	2a 81       	ldd	r18, Y+2	; 0x02
    35a4:	3b 81       	ldd	r19, Y+3	; 0x03
    35a6:	21 50       	subi	r18, 0x01	; 1
    35a8:	30 40       	sbci	r19, 0x00	; 0
    35aa:	3b 83       	std	Y+3, r19	; 0x03
    35ac:	2a 83       	std	Y+2, r18	; 0x02

  // return the item.
  return item;
}
    35ae:	c7 01       	movw	r24, r14
    35b0:	df 91       	pop	r29
    35b2:	cf 91       	pop	r28
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	08 95       	ret

000035be <_ZN11TaskManagerD1Ev>:
	}

	return executedTasksCount;
}

TaskManager::~TaskManager()
    35be:	ef 92       	push	r14
    35c0:	ff 92       	push	r15
    35c2:	0f 93       	push	r16
    35c4:	1f 93       	push	r17
    35c6:	cf 93       	push	r28
    35c8:	df 93       	push	r29
    35ca:	7c 01       	movw	r14, r24
    35cc:	84 e7       	ldi	r24, 0x74	; 116
    35ce:	94 e0       	ldi	r25, 0x04	; 4
    35d0:	d7 01       	movw	r26, r14
    35d2:	11 96       	adiw	r26, 0x01	; 1
    35d4:	9c 93       	st	X, r25
    35d6:	8e 93       	st	-X, r24
{
	delete( memConfFreeSchedulerFreeRunnable );
    35d8:	18 96       	adiw	r26, 0x08	; 8
    35da:	8d 91       	ld	r24, X+
    35dc:	9c 91       	ld	r25, X
    35de:	19 97       	sbiw	r26, 0x09	; 9
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	39 f0       	breq	.+14     	; 0x35f2 <_ZN11TaskManagerD1Ev+0x34>
    35e4:	dc 01       	movw	r26, r24
    35e6:	ed 91       	ld	r30, X+
    35e8:	fc 91       	ld	r31, X
    35ea:	02 80       	ldd	r0, Z+2	; 0x02
    35ec:	f3 81       	ldd	r31, Z+3	; 0x03
    35ee:	e0 2d       	mov	r30, r0
    35f0:	09 95       	icall
	delete( memConfFreeSchedulerLeaveRunnable );
    35f2:	f7 01       	movw	r30, r14
    35f4:	82 85       	ldd	r24, Z+10	; 0x0a
    35f6:	93 85       	ldd	r25, Z+11	; 0x0b
    35f8:	00 97       	sbiw	r24, 0x00	; 0
    35fa:	39 f0       	breq	.+14     	; 0x360a <_ZN11TaskManagerD1Ev+0x4c>
    35fc:	dc 01       	movw	r26, r24
    35fe:	ed 91       	ld	r30, X+
    3600:	fc 91       	ld	r31, X
    3602:	02 80       	ldd	r0, Z+2	; 0x02
    3604:	f3 81       	ldd	r31, Z+3	; 0x03
    3606:	e0 2d       	mov	r30, r0
    3608:	09 95       	icall
	delete( memConfLeaveSchedulerFreeRunnable );
    360a:	f7 01       	movw	r30, r14
    360c:	84 85       	ldd	r24, Z+12	; 0x0c
    360e:	95 85       	ldd	r25, Z+13	; 0x0d
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	39 f0       	breq	.+14     	; 0x3622 <_ZN11TaskManagerD1Ev+0x64>
    3614:	dc 01       	movw	r26, r24
    3616:	ed 91       	ld	r30, X+
    3618:	fc 91       	ld	r31, X
    361a:	02 80       	ldd	r0, Z+2	; 0x02
    361c:	f3 81       	ldd	r31, Z+3	; 0x03
    361e:	e0 2d       	mov	r30, r0
    3620:	09 95       	icall
	delete( memConfLeaveSchedulerLeaveRunnable );
    3622:	f7 01       	movw	r30, r14
    3624:	86 85       	ldd	r24, Z+14	; 0x0e
    3626:	97 85       	ldd	r25, Z+15	; 0x0f
    3628:	02 c0       	rjmp	.+4      	; 0x362e <_ZN11TaskManagerD1Ev+0x70>

	while( !tasksQueueA->isEmpty() ) delete( tasksQueueA->pop() );
    362a:	0e 94 b7 1a 	call	0x356e	; 0x356e <_ZN9QueueListIP17TaskManagerRecordE3popEv>
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	39 f0       	breq	.+14     	; 0x3640 <_ZN11TaskManagerD1Ev+0x82>
    3632:	dc 01       	movw	r26, r24
    3634:	ed 91       	ld	r30, X+
    3636:	fc 91       	ld	r31, X
    3638:	02 80       	ldd	r0, Z+2	; 0x02
    363a:	f3 81       	ldd	r31, Z+3	; 0x03
    363c:	e0 2d       	mov	r30, r0
    363e:	09 95       	icall
    3640:	f7 01       	movw	r30, r14
    3642:	84 81       	ldd	r24, Z+4	; 0x04
    3644:	95 81       	ldd	r25, Z+5	; 0x05
    3646:	dc 01       	movw	r26, r24
    3648:	14 96       	adiw	r26, 0x04	; 4
    364a:	2d 91       	ld	r18, X+
    364c:	3c 91       	ld	r19, X
    364e:	15 97       	sbiw	r26, 0x05	; 5
    3650:	21 15       	cp	r18, r1
    3652:	31 05       	cpc	r19, r1
    3654:	51 f7       	brne	.-44     	; 0x362a <_ZN11TaskManagerD1Ev+0x6c>
    3656:	0c c0       	rjmp	.+24     	; 0x3670 <_ZN11TaskManagerD1Ev+0xb2>
	while( !tasksQueueB->isEmpty() ) delete( tasksQueueA->pop() );
    3658:	ce 01       	movw	r24, r28
    365a:	0e 94 b7 1a 	call	0x356e	; 0x356e <_ZN9QueueListIP17TaskManagerRecordE3popEv>
    365e:	00 97       	sbiw	r24, 0x00	; 0
    3660:	39 f0       	breq	.+14     	; 0x3670 <_ZN11TaskManagerD1Ev+0xb2>
    3662:	dc 01       	movw	r26, r24
    3664:	ed 91       	ld	r30, X+
    3666:	fc 91       	ld	r31, X
    3668:	02 80       	ldd	r0, Z+2	; 0x02
    366a:	f3 81       	ldd	r31, Z+3	; 0x03
    366c:	e0 2d       	mov	r30, r0
    366e:	09 95       	icall

	delete( tasksQueueA );
	delete( tasksQueueB );
}
    3670:	d7 01       	movw	r26, r14
    3672:	16 96       	adiw	r26, 0x06	; 6
    3674:	ed 91       	ld	r30, X+
    3676:	fc 91       	ld	r31, X
    3678:	17 97       	sbiw	r26, 0x07	; 7
	delete( memConfFreeSchedulerLeaveRunnable );
	delete( memConfLeaveSchedulerFreeRunnable );
	delete( memConfLeaveSchedulerLeaveRunnable );

	while( !tasksQueueA->isEmpty() ) delete( tasksQueueA->pop() );
	while( !tasksQueueB->isEmpty() ) delete( tasksQueueA->pop() );
    367a:	84 81       	ldd	r24, Z+4	; 0x04
    367c:	95 81       	ldd	r25, Z+5	; 0x05
    367e:	14 96       	adiw	r26, 0x04	; 4
    3680:	cd 91       	ld	r28, X+
    3682:	dc 91       	ld	r29, X
    3684:	15 97       	sbiw	r26, 0x05	; 5
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	39 f7       	brne	.-50     	; 0x3658 <_ZN11TaskManagerD1Ev+0x9a>

	delete( tasksQueueA );
    368a:	20 97       	sbiw	r28, 0x00	; 0
    368c:	c1 f0       	breq	.+48     	; 0x36be <_ZN11TaskManagerD1Ev+0x100>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    368e:	0c 81       	ldd	r16, Y+4	; 0x04
    3690:	1d 81       	ldd	r17, Y+5	; 0x05
    3692:	09 c0       	rjmp	.+18     	; 0x36a6 <_ZN11TaskManagerD1Ev+0xe8>
    t = head->next; free (head);
    3694:	8c 81       	ldd	r24, Y+4	; 0x04
    3696:	9d 81       	ldd	r25, Y+5	; 0x05
    3698:	fc 01       	movw	r30, r24
    369a:	02 81       	ldd	r16, Z+2	; 0x02
    369c:	13 81       	ldd	r17, Z+3	; 0x03
    369e:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    36a2:	1d 83       	std	Y+5, r17	; 0x05
    36a4:	0c 83       	std	Y+4, r16	; 0x04
    36a6:	01 15       	cp	r16, r1
    36a8:	11 05       	cpc	r17, r1
    36aa:	a1 f7       	brne	.-24     	; 0x3694 <_ZN11TaskManagerD1Ev+0xd6>
    t = head->next; free (head);
  }

  size = 0;       // set the size of queue to zero.
    36ac:	1b 82       	std	Y+3, r1	; 0x03
    36ae:	1a 82       	std	Y+2, r1	; 0x02
  tail = NULL;    // set the tail of the list to point nowhere.
    36b0:	1f 82       	std	Y+7, r1	; 0x07
    36b2:	1e 82       	std	Y+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    36b4:	19 82       	std	Y+1, r1	; 0x01
    36b6:	18 82       	st	Y, r1
    36b8:	ce 01       	movw	r24, r28
    36ba:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
	delete( tasksQueueB );
    36be:	d7 01       	movw	r26, r14
    36c0:	16 96       	adiw	r26, 0x06	; 6
    36c2:	cd 91       	ld	r28, X+
    36c4:	dc 91       	ld	r29, X
    36c6:	17 97       	sbiw	r26, 0x07	; 7
    36c8:	20 97       	sbiw	r28, 0x00	; 0
    36ca:	c1 f0       	breq	.+48     	; 0x36fc <_ZN11TaskManagerD1Ev+0x13e>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    36cc:	0c 81       	ldd	r16, Y+4	; 0x04
    36ce:	1d 81       	ldd	r17, Y+5	; 0x05
    36d0:	09 c0       	rjmp	.+18     	; 0x36e4 <_ZN11TaskManagerD1Ev+0x126>
    t = head->next; free (head);
    36d2:	8c 81       	ldd	r24, Y+4	; 0x04
    36d4:	9d 81       	ldd	r25, Y+5	; 0x05
    36d6:	fc 01       	movw	r30, r24
    36d8:	02 81       	ldd	r16, Z+2	; 0x02
    36da:	13 81       	ldd	r17, Z+3	; 0x03
    36dc:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    36e0:	1d 83       	std	Y+5, r17	; 0x05
    36e2:	0c 83       	std	Y+4, r16	; 0x04
    36e4:	01 15       	cp	r16, r1
    36e6:	11 05       	cpc	r17, r1
    36e8:	a1 f7       	brne	.-24     	; 0x36d2 <_ZN11TaskManagerD1Ev+0x114>
    t = head->next; free (head);
  }

  size = 0;       // set the size of queue to zero.
    36ea:	1b 82       	std	Y+3, r1	; 0x03
    36ec:	1a 82       	std	Y+2, r1	; 0x02
  tail = NULL;    // set the tail of the list to point nowhere.
    36ee:	1f 82       	std	Y+7, r1	; 0x07
    36f0:	1e 82       	std	Y+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    36f2:	19 82       	std	Y+1, r1	; 0x01
    36f4:	18 82       	st	Y, r1
    36f6:	ce 01       	movw	r24, r28
    36f8:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
}
    36fc:	df 91       	pop	r29
    36fe:	cf 91       	pop	r28
    3700:	1f 91       	pop	r17
    3702:	0f 91       	pop	r16
    3704:	ff 90       	pop	r15
    3706:	ef 90       	pop	r14
    3708:	08 95       	ret

0000370a <_ZN11TaskManagerD0Ev>:
	}

	return executedTasksCount;
}

TaskManager::~TaskManager()
    370a:	cf 93       	push	r28
    370c:	df 93       	push	r29
    370e:	ec 01       	movw	r28, r24
	while( !tasksQueueA->isEmpty() ) delete( tasksQueueA->pop() );
	while( !tasksQueueB->isEmpty() ) delete( tasksQueueA->pop() );

	delete( tasksQueueA );
	delete( tasksQueueB );
}
    3710:	0e 94 df 1a 	call	0x35be	; 0x35be <_ZN11TaskManagerD1Ev>
    3714:	ce 01       	movw	r24, r28
    3716:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	08 95       	ret

00003720 <_ZN11TaskManager17executeTasksQueueEv>:
	else
		executeTasksQueue();
}

int TaskManager::executeTasksQueue()
{
    3720:	cf 92       	push	r12
    3722:	df 92       	push	r13
    3724:	ef 92       	push	r14
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	fc 01       	movw	r30, r24
	int executedTasksCount = 0;

	QueueList<TaskManagerRecord*>* fromQueue;
	QueueList<TaskManagerRecord*>* toQueue;

	if( !tasksQueueA->isEmpty() )
    3732:	04 81       	ldd	r16, Z+4	; 0x04
    3734:	15 81       	ldd	r17, Z+5	; 0x05
    3736:	d8 01       	movw	r26, r16
    3738:	14 96       	adiw	r26, 0x04	; 4
    373a:	8d 91       	ld	r24, X+
    373c:	9c 91       	ld	r25, X
    373e:	15 97       	sbiw	r26, 0x05	; 5
    3740:	36 81       	ldd	r19, Z+6	; 0x06
    3742:	27 81       	ldd	r18, Z+7	; 0x07
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	21 f0       	breq	.+8      	; 0x3750 <_ZN11TaskManager17executeTasksQueueEv+0x30>
	{
		fromQueue = tasksQueueA;
		toQueue = tasksQueueB;
    3748:	79 01       	movw	r14, r18
	}
	else
	{
		fromQueue = tasksQueueB;
    374a:	cc 24       	eor	r12, r12
    374c:	dd 24       	eor	r13, r13
    374e:	3a c0       	rjmp	.+116    	; 0x37c4 <_ZN11TaskManager17executeTasksQueueEv+0xa4>
		toQueue = tasksQueueA;
    3750:	f0 2e       	mov	r15, r16
    3752:	e1 2e       	mov	r14, r17
		fromQueue = tasksQueueA;
		toQueue = tasksQueueB;
	}
	else
	{
		fromQueue = tasksQueueB;
    3754:	03 2f       	mov	r16, r19
    3756:	12 2f       	mov	r17, r18
    3758:	f8 cf       	rjmp	.-16     	; 0x374a <_ZN11TaskManager17executeTasksQueueEv+0x2a>
		toQueue = tasksQueueA;
	}

	while( !fromQueue->isEmpty() )
	{
		TaskManagerRecord* taskManagerTaskRecord = fromQueue->pop();
    375a:	c8 01       	movw	r24, r16
    375c:	0e 94 b7 1a 	call	0x356e	; 0x356e <_ZN9QueueListIP17TaskManagerRecordE3popEv>
    3760:	ec 01       	movw	r28, r24

		if( taskManagerTaskRecord->taskManagerScheduler->canExecute() )
    3762:	8c 81       	ldd	r24, Y+4	; 0x04
    3764:	9d 81       	ldd	r25, Y+5	; 0x05
    3766:	dc 01       	movw	r26, r24
    3768:	ed 91       	ld	r30, X+
    376a:	fc 91       	ld	r31, X
    376c:	01 90       	ld	r0, Z+
    376e:	f0 81       	ld	r31, Z
    3770:	e0 2d       	mov	r30, r0
    3772:	09 95       	icall
    3774:	88 23       	and	r24, r24
    3776:	61 f0       	breq	.+24     	; 0x3790 <_ZN11TaskManager17executeTasksQueueEv+0x70>
		{
			taskManagerTaskRecord->runnable->run();
    3778:	8e 81       	ldd	r24, Y+6	; 0x06
    377a:	9f 81       	ldd	r25, Y+7	; 0x07
    377c:	dc 01       	movw	r26, r24
    377e:	ed 91       	ld	r30, X+
    3780:	fc 91       	ld	r31, X
    3782:	01 90       	ld	r0, Z+
    3784:	f0 81       	ld	r31, Z
    3786:	e0 2d       	mov	r30, r0
    3788:	09 95       	icall
			executedTasksCount++;
    378a:	08 94       	sec
    378c:	c1 1c       	adc	r12, r1
    378e:	d1 1c       	adc	r13, r1
		}

		if( taskManagerTaskRecord->taskManagerScheduler->canRemoveFromTaskManager() )
    3790:	8c 81       	ldd	r24, Y+4	; 0x04
    3792:	9d 81       	ldd	r25, Y+5	; 0x05
    3794:	dc 01       	movw	r26, r24
    3796:	ed 91       	ld	r30, X+
    3798:	fc 91       	ld	r31, X
    379a:	02 80       	ldd	r0, Z+2	; 0x02
    379c:	f3 81       	ldd	r31, Z+3	; 0x03
    379e:	e0 2d       	mov	r30, r0
    37a0:	09 95       	icall
    37a2:	88 23       	and	r24, r24
    37a4:	51 f0       	breq	.+20     	; 0x37ba <_ZN11TaskManager17executeTasksQueueEv+0x9a>
			delete( taskManagerTaskRecord );
    37a6:	20 97       	sbiw	r28, 0x00	; 0
    37a8:	69 f0       	breq	.+26     	; 0x37c4 <_ZN11TaskManager17executeTasksQueueEv+0xa4>
    37aa:	e8 81       	ld	r30, Y
    37ac:	f9 81       	ldd	r31, Y+1	; 0x01
    37ae:	02 80       	ldd	r0, Z+2	; 0x02
    37b0:	f3 81       	ldd	r31, Z+3	; 0x03
    37b2:	e0 2d       	mov	r30, r0
    37b4:	ce 01       	movw	r24, r28
    37b6:	09 95       	icall
    37b8:	05 c0       	rjmp	.+10     	; 0x37c4 <_ZN11TaskManager17executeTasksQueueEv+0xa4>
		else
			toQueue->push( taskManagerTaskRecord );
    37ba:	8f 2d       	mov	r24, r15
    37bc:	9e 2d       	mov	r25, r14
    37be:	be 01       	movw	r22, r28
    37c0:	0e 94 34 1a 	call	0x3468	; 0x3468 <_ZN9QueueListIP17TaskManagerRecordE4pushES1_>
	{
		fromQueue = tasksQueueB;
		toQueue = tasksQueueA;
	}

	while( !fromQueue->isEmpty() )
    37c4:	f8 01       	movw	r30, r16
    37c6:	84 81       	ldd	r24, Z+4	; 0x04
    37c8:	95 81       	ldd	r25, Z+5	; 0x05
    37ca:	00 97       	sbiw	r24, 0x00	; 0
    37cc:	31 f6       	brne	.-116    	; 0x375a <_ZN11TaskManager17executeTasksQueueEv+0x3a>
		else
			toQueue->push( taskManagerTaskRecord );
	}

	return executedTasksCount;
}
    37ce:	c6 01       	movw	r24, r12
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	1f 91       	pop	r17
    37d6:	0f 91       	pop	r16
    37d8:	ff 90       	pop	r15
    37da:	ef 90       	pop	r14
    37dc:	df 90       	pop	r13
    37de:	cf 90       	pop	r12
    37e0:	08 95       	ret

000037e2 <_ZN11TaskManager7executeEv>:
	else
		tasksQueueB->push( record );
}

void TaskManager::execute()
{
    37e2:	cf 92       	push	r12
    37e4:	df 92       	push	r13
    37e6:	ef 92       	push	r14
    37e8:	ff 92       	push	r15
    37ea:	0f 93       	push	r16
    37ec:	1f 93       	push	r17
    37ee:	cf 93       	push	r28
    37f0:	df 93       	push	r29
    37f2:	ec 01       	movw	r28, r24
	if( taskManagerStatistics != NULL )
    37f4:	8a 81       	ldd	r24, Y+2	; 0x02
    37f6:	9b 81       	ldd	r25, Y+3	; 0x03
    37f8:	00 97       	sbiw	r24, 0x00	; 0
    37fa:	81 f1       	breq	.+96     	; 0x385c <_ZN11TaskManager7executeEv+0x7a>
	{
		taskManagerStatistics->beforeTaskQueue();
    37fc:	dc 01       	movw	r26, r24
    37fe:	ed 91       	ld	r30, X+
    3800:	fc 91       	ld	r31, X
    3802:	01 90       	ld	r0, Z+
    3804:	f0 81       	ld	r31, Z
    3806:	e0 2d       	mov	r30, r0
    3808:	09 95       	icall

		int executedTasksCountInThisIteration = executeTasksQueue();
    380a:	ce 01       	movw	r24, r28
    380c:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN11TaskManager17executeTasksQueueEv>
	while( !tasksQueueA->isEmpty() ) delete( tasksQueueA->pop() );
	while( !tasksQueueB->isEmpty() ) delete( tasksQueueA->pop() );

	delete( tasksQueueA );
	delete( tasksQueueB );
}
    3810:	ec 81       	ldd	r30, Y+4	; 0x04
    3812:	fd 81       	ldd	r31, Y+5	; 0x05
    3814:	ae 81       	ldd	r26, Y+6	; 0x06
    3816:	bf 81       	ldd	r27, Y+7	; 0x07
	{
		taskManagerStatistics->beforeTaskQueue();

		int executedTasksCountInThisIteration = executeTasksQueue();

		unsigned long checkedTasksCountInThisIteration = tasksQueueA->count() + tasksQueueB->count();
    3818:	42 81       	ldd	r20, Z+2	; 0x02
    381a:	53 81       	ldd	r21, Z+3	; 0x03
    381c:	12 96       	adiw	r26, 0x02	; 2
    381e:	2d 91       	ld	r18, X+
    3820:	3c 91       	ld	r19, X
    3822:	13 97       	sbiw	r26, 0x03	; 3
    3824:	42 0f       	add	r20, r18
    3826:	53 1f       	adc	r21, r19
    3828:	66 27       	eor	r22, r22
    382a:	57 fd       	sbrc	r21, 7
    382c:	60 95       	com	r22
    382e:	76 2f       	mov	r23, r22
		taskManagerStatistics->afterTaskQueue( checkedTasksCountInThisIteration, executedTasksCountInThisIteration , checkedTasksCountInThisIteration-executedTasksCountInThisIteration );
    3830:	aa 81       	ldd	r26, Y+2	; 0x02
    3832:	bb 81       	ldd	r27, Y+3	; 0x03
    3834:	8c 01       	movw	r16, r24
    3836:	22 27       	eor	r18, r18
    3838:	17 fd       	sbrc	r17, 7
    383a:	20 95       	com	r18
    383c:	32 2f       	mov	r19, r18
    383e:	ed 91       	ld	r30, X+
    3840:	fc 91       	ld	r31, X
    3842:	11 97       	sbiw	r26, 0x01	; 1
    3844:	6a 01       	movw	r12, r20
    3846:	7b 01       	movw	r14, r22
    3848:	c0 1a       	sub	r12, r16
    384a:	d1 0a       	sbc	r13, r17
    384c:	e2 0a       	sbc	r14, r18
    384e:	f3 0a       	sbc	r15, r19
    3850:	02 80       	ldd	r0, Z+2	; 0x02
    3852:	f3 81       	ldd	r31, Z+3	; 0x03
    3854:	e0 2d       	mov	r30, r0
    3856:	cd 01       	movw	r24, r26
    3858:	09 95       	icall
    385a:	03 c0       	rjmp	.+6      	; 0x3862 <_ZN11TaskManager7executeEv+0x80>
	}
	else
		executeTasksQueue();
    385c:	ce 01       	movw	r24, r28
    385e:	0e 94 90 1b 	call	0x3720	; 0x3720 <_ZN11TaskManager17executeTasksQueueEv>
}
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	ff 90       	pop	r15
    386c:	ef 90       	pop	r14
    386e:	df 90       	pop	r13
    3870:	cf 90       	pop	r12
    3872:	08 95       	ret

00003874 <_ZN29TaskManagerMemoryConfiguratorD1Ev>:
bool TaskManagerMemoryConfigurator::canTaskManagerFreeMemoryConfigurator()
{
	return _canTaskManagerFreeMemoryConfigurator;
}

TaskManagerMemoryConfigurator::~TaskManagerMemoryConfigurator() {}
    3874:	2c e7       	ldi	r18, 0x7C	; 124
    3876:	34 e0       	ldi	r19, 0x04	; 4
    3878:	fc 01       	movw	r30, r24
    387a:	31 83       	std	Z+1, r19	; 0x01
    387c:	20 83       	st	Z, r18
    387e:	08 95       	ret

00003880 <_ZN29TaskManagerMemoryConfiguratorD0Ev>:
    3880:	2c e7       	ldi	r18, 0x7C	; 124
    3882:	34 e0       	ldi	r19, 0x04	; 4
    3884:	fc 01       	movw	r30, r24
    3886:	31 83       	std	Z+1, r19	; 0x01
    3888:	20 83       	st	Z, r18
    388a:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    388e:	08 95       	ret

00003890 <_ZN29TaskManagerMemoryConfiguratorC1Ebbb>:
 *      Author: root
 */

#include "TaskManagerMemoryConfigurator.h"

TaskManagerMemoryConfigurator::TaskManagerMemoryConfigurator( bool _canTaskManagerFreeScheduler , bool _canTaskManagerFreeRunnable , bool _canTaskManagerFreeMemoryConfigurator )
    3890:	fc 01       	movw	r30, r24
    3892:	8c e7       	ldi	r24, 0x7C	; 124
    3894:	94 e0       	ldi	r25, 0x04	; 4
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	80 83       	st	Z, r24
{
	this->_canTaskManagerFreeScheduler = _canTaskManagerFreeScheduler;
    389a:	62 83       	std	Z+2, r22	; 0x02
	this->_canTaskManagerFreeRunnable = _canTaskManagerFreeRunnable;
    389c:	43 83       	std	Z+3, r20	; 0x03
	this->_canTaskManagerFreeMemoryConfigurator = _canTaskManagerFreeMemoryConfigurator;
    389e:	24 83       	std	Z+4, r18	; 0x04
}
    38a0:	08 95       	ret

000038a2 <_ZN29TaskManagerMemoryConfigurator27canTaskManagerFreeSchedulerEv>:

bool TaskManagerMemoryConfigurator::canTaskManagerFreeScheduler()
{
	return _canTaskManagerFreeScheduler;
}
    38a2:	fc 01       	movw	r30, r24
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	08 95       	ret

000038a8 <_ZN29TaskManagerMemoryConfigurator26canTaskManagerFreeRunnableEv>:

bool TaskManagerMemoryConfigurator::canTaskManagerFreeRunnable()
{
	return _canTaskManagerFreeRunnable;
}
    38a8:	fc 01       	movw	r30, r24
    38aa:	83 81       	ldd	r24, Z+3	; 0x03
    38ac:	08 95       	ret

000038ae <_ZN29TaskManagerMemoryConfigurator36canTaskManagerFreeMemoryConfiguratorEv>:

bool TaskManagerMemoryConfigurator::canTaskManagerFreeMemoryConfigurator()
{
	return _canTaskManagerFreeMemoryConfigurator;
}
    38ae:	fc 01       	movw	r30, r24
    38b0:	84 81       	ldd	r24, Z+4	; 0x04
    38b2:	08 95       	ret

000038b4 <_ZN17TaskManagerRecordD1Ev>:
	taskManagerMemoryConfigurator = _taskManagerMemoryConfigurator;
	taskManagerScheduler = _taskManagerScheduler;
	runnable = _runnable;
}

TaskManagerRecord::~TaskManagerRecord()
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	ec 01       	movw	r28, r24
    38ba:	84 e8       	ldi	r24, 0x84	; 132
    38bc:	94 e0       	ldi	r25, 0x04	; 4
    38be:	99 83       	std	Y+1, r25	; 0x01
    38c0:	88 83       	st	Y, r24
{
	if( taskManagerMemoryConfigurator->canTaskManagerFreeRunnable() ) delete( runnable );
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	0e 94 54 1c 	call	0x38a8	; 0x38a8 <_ZN29TaskManagerMemoryConfigurator26canTaskManagerFreeRunnableEv>
    38ca:	88 23       	and	r24, r24
    38cc:	59 f0       	breq	.+22     	; 0x38e4 <_ZN17TaskManagerRecordD1Ev+0x30>
    38ce:	8e 81       	ldd	r24, Y+6	; 0x06
    38d0:	9f 81       	ldd	r25, Y+7	; 0x07
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	39 f0       	breq	.+14     	; 0x38e4 <_ZN17TaskManagerRecordD1Ev+0x30>
    38d6:	dc 01       	movw	r26, r24
    38d8:	ed 91       	ld	r30, X+
    38da:	fc 91       	ld	r31, X
    38dc:	04 80       	ldd	r0, Z+4	; 0x04
    38de:	f5 81       	ldd	r31, Z+5	; 0x05
    38e0:	e0 2d       	mov	r30, r0
    38e2:	09 95       	icall
	if( taskManagerMemoryConfigurator->canTaskManagerFreeScheduler() ) delete( taskManagerScheduler );
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	9b 81       	ldd	r25, Y+3	; 0x03
    38e8:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <_ZN29TaskManagerMemoryConfigurator27canTaskManagerFreeSchedulerEv>
    38ec:	88 23       	and	r24, r24
    38ee:	59 f0       	breq	.+22     	; 0x3906 <_ZN17TaskManagerRecordD1Ev+0x52>
    38f0:	8c 81       	ldd	r24, Y+4	; 0x04
    38f2:	9d 81       	ldd	r25, Y+5	; 0x05
    38f4:	00 97       	sbiw	r24, 0x00	; 0
    38f6:	39 f0       	breq	.+14     	; 0x3906 <_ZN17TaskManagerRecordD1Ev+0x52>
    38f8:	dc 01       	movw	r26, r24
    38fa:	ed 91       	ld	r30, X+
    38fc:	fc 91       	ld	r31, X
    38fe:	06 80       	ldd	r0, Z+6	; 0x06
    3900:	f7 81       	ldd	r31, Z+7	; 0x07
    3902:	e0 2d       	mov	r30, r0
    3904:	09 95       	icall

	// to zawsze na koncu
	if( taskManagerMemoryConfigurator->canTaskManagerFreeMemoryConfigurator() ) delete( taskManagerMemoryConfigurator );
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	9b 81       	ldd	r25, Y+3	; 0x03
    390a:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_ZN29TaskManagerMemoryConfigurator36canTaskManagerFreeMemoryConfiguratorEv>
    390e:	88 23       	and	r24, r24
    3910:	59 f0       	breq	.+22     	; 0x3928 <_ZN17TaskManagerRecordD1Ev+0x74>
    3912:	8a 81       	ldd	r24, Y+2	; 0x02
    3914:	9b 81       	ldd	r25, Y+3	; 0x03
    3916:	00 97       	sbiw	r24, 0x00	; 0
    3918:	39 f0       	breq	.+14     	; 0x3928 <_ZN17TaskManagerRecordD1Ev+0x74>
    391a:	dc 01       	movw	r26, r24
    391c:	ed 91       	ld	r30, X+
    391e:	fc 91       	ld	r31, X
    3920:	02 80       	ldd	r0, Z+2	; 0x02
    3922:	f3 81       	ldd	r31, Z+3	; 0x03
    3924:	e0 2d       	mov	r30, r0
    3926:	09 95       	icall
}
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	08 95       	ret

0000392e <_ZN17TaskManagerRecordD0Ev>:
	taskManagerMemoryConfigurator = _taskManagerMemoryConfigurator;
	taskManagerScheduler = _taskManagerScheduler;
	runnable = _runnable;
}

TaskManagerRecord::~TaskManagerRecord()
    392e:	cf 93       	push	r28
    3930:	df 93       	push	r29
    3932:	ec 01       	movw	r28, r24
	if( taskManagerMemoryConfigurator->canTaskManagerFreeRunnable() ) delete( runnable );
	if( taskManagerMemoryConfigurator->canTaskManagerFreeScheduler() ) delete( taskManagerScheduler );

	// to zawsze na koncu
	if( taskManagerMemoryConfigurator->canTaskManagerFreeMemoryConfigurator() ) delete( taskManagerMemoryConfigurator );
}
    3934:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZN17TaskManagerRecordD1Ev>
    3938:	ce 01       	movw	r24, r28
    393a:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <_ZN17TaskManagerRecordC1EP29TaskManagerMemoryConfiguratorP20TaskManagerSchedulerP8Runnable>:
 *      Author: root
 */

#include "TaskManagerRecord.h"

TaskManagerRecord::TaskManagerRecord( TaskManagerMemoryConfigurator* _taskManagerMemoryConfigurator , TaskManagerScheduler* _taskManagerScheduler , Runnable* _runnable )
    3944:	fc 01       	movw	r30, r24
    3946:	84 e8       	ldi	r24, 0x84	; 132
    3948:	94 e0       	ldi	r25, 0x04	; 4
    394a:	91 83       	std	Z+1, r25	; 0x01
    394c:	80 83       	st	Z, r24
{
	taskManagerMemoryConfigurator = _taskManagerMemoryConfigurator;
    394e:	73 83       	std	Z+3, r23	; 0x03
    3950:	62 83       	std	Z+2, r22	; 0x02
	taskManagerScheduler = _taskManagerScheduler;
    3952:	55 83       	std	Z+5, r21	; 0x05
    3954:	44 83       	std	Z+4, r20	; 0x04
	runnable = _runnable;
    3956:	37 83       	std	Z+7, r19	; 0x07
    3958:	26 83       	std	Z+6, r18	; 0x06
}
    395a:	08 95       	ret

0000395c <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv>:

bool TaskManagerSchedulerTimeIntervals::canRemoveFromTaskManager()
{
	//return !isCyclic && wasExecuted;
	return wasWholeQueueExecuted;
}
    395c:	fc 01       	movw	r30, r24
    395e:	84 85       	ldd	r24, Z+12	; 0x0c
    3960:	08 95       	ret

00003962 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev>:

TaskManagerSchedulerTimeIntervals::~TaskManagerSchedulerTimeIntervals()
    3962:	ef 92       	push	r14
    3964:	ff 92       	push	r15
    3966:	0f 93       	push	r16
    3968:	1f 93       	push	r17
    396a:	cf 93       	push	r28
    396c:	df 93       	push	r29
    396e:	7c 01       	movw	r14, r24
    3970:	8c e8       	ldi	r24, 0x8C	; 140
    3972:	94 e0       	ldi	r25, 0x04	; 4
    3974:	f7 01       	movw	r30, r14
    3976:	91 83       	std	Z+1, r25	; 0x01
    3978:	80 83       	st	Z, r24
{
	//while( !queueB->isEmpty() ) delete( queueB->pop() );
	delete( queueB );
    397a:	c4 81       	ldd	r28, Z+4	; 0x04
    397c:	d5 81       	ldd	r29, Z+5	; 0x05
    397e:	20 97       	sbiw	r28, 0x00	; 0
    3980:	c1 f0       	breq	.+48     	; 0x39b2 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x50>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    3982:	0c 81       	ldd	r16, Y+4	; 0x04
    3984:	1d 81       	ldd	r17, Y+5	; 0x05
    3986:	09 c0       	rjmp	.+18     	; 0x399a <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x38>
    t = head->next; free (head);
    3988:	8c 81       	ldd	r24, Y+4	; 0x04
    398a:	9d 81       	ldd	r25, Y+5	; 0x05
    398c:	fc 01       	movw	r30, r24
    398e:	04 81       	ldd	r16, Z+4	; 0x04
    3990:	15 81       	ldd	r17, Z+5	; 0x05
    3992:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    3996:	1d 83       	std	Y+5, r17	; 0x05
    3998:	0c 83       	std	Y+4, r16	; 0x04
    399a:	01 15       	cp	r16, r1
    399c:	11 05       	cpc	r17, r1
    399e:	a1 f7       	brne	.-24     	; 0x3988 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x26>
    t = head->next; free (head);
  }

  size = 0;       // set the size of queue to zero.
    39a0:	1b 82       	std	Y+3, r1	; 0x03
    39a2:	1a 82       	std	Y+2, r1	; 0x02
  tail = NULL;    // set the tail of the list to point nowhere.
    39a4:	1f 82       	std	Y+7, r1	; 0x07
    39a6:	1e 82       	std	Y+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    39a8:	19 82       	std	Y+1, r1	; 0x01
    39aa:	18 82       	st	Y, r1
    39ac:	ce 01       	movw	r24, r28
    39ae:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>

	if( shouldIFreeQueue )
    39b2:	f7 01       	movw	r30, r14
    39b4:	87 81       	ldd	r24, Z+7	; 0x07
    39b6:	88 23       	and	r24, r24
    39b8:	e1 f0       	breq	.+56     	; 0x39f2 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x90>
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
    39ba:	c2 81       	ldd	r28, Z+2	; 0x02
    39bc:	d3 81       	ldd	r29, Z+3	; 0x03
    39be:	20 97       	sbiw	r28, 0x00	; 0
    39c0:	c1 f0       	breq	.+48     	; 0x39f2 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x90>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    39c2:	0c 81       	ldd	r16, Y+4	; 0x04
    39c4:	1d 81       	ldd	r17, Y+5	; 0x05
    39c6:	09 c0       	rjmp	.+18     	; 0x39da <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x78>
    t = head->next; free (head);
    39c8:	8c 81       	ldd	r24, Y+4	; 0x04
    39ca:	9d 81       	ldd	r25, Y+5	; 0x05
    39cc:	fc 01       	movw	r30, r24
    39ce:	04 81       	ldd	r16, Z+4	; 0x04
    39d0:	15 81       	ldd	r17, Z+5	; 0x05
    39d2:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>

// clear the queue (destructor).
template<typename T>
QueueList<T>::~QueueList () {
  // deallocate memory space of each node in the list.
  for (link t = head; t != NULL; head = t) {
    39d6:	1d 83       	std	Y+5, r17	; 0x05
    39d8:	0c 83       	std	Y+4, r16	; 0x04
    39da:	01 15       	cp	r16, r1
    39dc:	11 05       	cpc	r17, r1
    39de:	a1 f7       	brne	.-24     	; 0x39c8 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev+0x66>
    t = head->next; free (head);
  }

  size = 0;       // set the size of queue to zero.
    39e0:	1b 82       	std	Y+3, r1	; 0x03
    39e2:	1a 82       	std	Y+2, r1	; 0x02
  tail = NULL;    // set the tail of the list to point nowhere.
    39e4:	1f 82       	std	Y+7, r1	; 0x07
    39e6:	1e 82       	std	Y+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    39e8:	19 82       	std	Y+1, r1	; 0x01
    39ea:	18 82       	st	Y, r1
    39ec:	ce 01       	movw	r24, r28
    39ee:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
{
	//return !isCyclic && wasExecuted;
	return wasWholeQueueExecuted;
}

TaskManagerSchedulerTimeIntervals::~TaskManagerSchedulerTimeIntervals()
    39f2:	c7 01       	movw	r24, r14
    39f4:	0e 94 63 20 	call	0x40c6	; 0x40c6 <_ZN20TaskManagerSchedulerD1Ev>
	if( shouldIFreeQueue )
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
	}
}
    39f8:	df 91       	pop	r29
    39fa:	cf 91       	pop	r28
    39fc:	1f 91       	pop	r17
    39fe:	0f 91       	pop	r16
    3a00:	ff 90       	pop	r15
    3a02:	ef 90       	pop	r14
    3a04:	08 95       	ret

00003a06 <_ZN33TaskManagerSchedulerTimeIntervalsD0Ev>:
{
	//return !isCyclic && wasExecuted;
	return wasWholeQueueExecuted;
}

TaskManagerSchedulerTimeIntervals::~TaskManagerSchedulerTimeIntervals()
    3a06:	cf 93       	push	r28
    3a08:	df 93       	push	r29
    3a0a:	ec 01       	movw	r28, r24
	if( shouldIFreeQueue )
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
	}
}
    3a0c:	0e 94 b1 1c 	call	0x3962	; 0x3962 <_ZN33TaskManagerSchedulerTimeIntervalsD1Ev>
    3a10:	ce 01       	movw	r24, r28
    3a12:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	08 95       	ret

00003a1c <_ZNK9QueueListImE4exitEPKc.isra.2>:

// exit report method in case of error.
template<typename T>
void QueueList<T>::exit (const char * m) const {
  // print the message if there is a printer.
  if (printer)
    3a1c:	00 97       	sbiw	r24, 0x00	; 0
    3a1e:	11 f0       	breq	.+4      	; 0x3a24 <_ZNK9QueueListImE4exitEPKc.isra.2+0x8>
    printer->println (m);
    3a20:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>

// led blinking method in case of error.
template<typename T>
void QueueList<T>::blink () const {
  // set led pin as output.
  pinMode (ledPin, OUTPUT);
    3a24:	8d e0       	ldi	r24, 0x0D	; 13
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	0e 94 2c 09 	call	0x1258	; 0x1258 <pinMode>

  // continue looping until hardware reset.
  while (true) {
    digitalWrite (ledPin, HIGH); // sets the LED on.
    3a2c:	8d e0       	ldi	r24, 0x0D	; 13
    3a2e:	61 e0       	ldi	r22, 0x01	; 1
    3a30:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    3a34:	6a ef       	ldi	r22, 0xFA	; 250
    3a36:	70 e0       	ldi	r23, 0x00	; 0
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
    digitalWrite (ledPin, LOW);  // sets the LED off.
    3a40:	8d e0       	ldi	r24, 0x0D	; 13
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	0e 94 4d 09 	call	0x129a	; 0x129a <digitalWrite>
    delay (250);                 // pauses 1/4 of second.
    3a48:	6a ef       	ldi	r22, 0xFA	; 250
    3a4a:	70 e0       	ldi	r23, 0x00	; 0
    3a4c:	80 e0       	ldi	r24, 0x00	; 0
    3a4e:	90 e0       	ldi	r25, 0x00	; 0
    3a50:	0e 94 8e 08 	call	0x111c	; 0x111c <delay>
    3a54:	eb cf       	rjmp	.-42     	; 0x3a2c <_ZNK9QueueListImE4exitEPKc.isra.2+0x10>

00003a56 <_ZN33TaskManagerSchedulerTimeIntervalsC1EP9QueueListImEbb>:
 *      Author: root
 */

#include "TaskManagerSchedulerTimeIntervals.h"

TaskManagerSchedulerTimeIntervals::TaskManagerSchedulerTimeIntervals( QueueList<unsigned long>* _timeIntervalsInMs , bool _isCyclic , bool _shouldIFreeQueue )
    3a56:	ef 92       	push	r14
    3a58:	ff 92       	push	r15
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	cf 93       	push	r28
    3a60:	df 93       	push	r29
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <_ZN33TaskManagerSchedulerTimeIntervalsC1EP9QueueListImEbb+0xe>
    3a64:	cd b7       	in	r28, 0x3d	; 61
    3a66:	de b7       	in	r29, 0x3e	; 62
    3a68:	7c 01       	movw	r14, r24
    3a6a:	8b 01       	movw	r16, r22
    3a6c:	2a 83       	std	Y+2, r18	; 0x02
    3a6e:	49 83       	std	Y+1, r20	; 0x01
    3a70:	0e 94 71 20 	call	0x40e2	; 0x40e2 <_ZN20TaskManagerSchedulerC1Ev>
    3a74:	8c e8       	ldi	r24, 0x8C	; 140
    3a76:	94 e0       	ldi	r25, 0x04	; 4
    3a78:	d7 01       	movw	r26, r14
    3a7a:	11 96       	adiw	r26, 0x01	; 1
    3a7c:	9c 93       	st	X, r25
    3a7e:	8e 93       	st	-X, r24
{
	queueA = _timeIntervalsInMs;
    3a80:	13 96       	adiw	r26, 0x03	; 3
    3a82:	1c 93       	st	X, r17
    3a84:	0e 93       	st	-X, r16
    3a86:	12 97       	sbiw	r26, 0x02	; 2
	isCyclic = _isCyclic;
    3a88:	49 81       	ldd	r20, Y+1	; 0x01
    3a8a:	16 96       	adiw	r26, 0x06	; 6
    3a8c:	4c 93       	st	X, r20
    3a8e:	16 97       	sbiw	r26, 0x06	; 6
	shouldIFreeQueue = _shouldIFreeQueue;
    3a90:	2a 81       	ldd	r18, Y+2	; 0x02
    3a92:	17 96       	adiw	r26, 0x07	; 7
    3a94:	2c 93       	st	X, r18

	queueB = new QueueList<unsigned long>();
    3a96:	88 e0       	ldi	r24, 0x08	; 8
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 02 08 	call	0x1004	; 0x1004 <_Znwj>
    3a9e:	fc 01       	movw	r30, r24
};

// init the queue (constructor).
template<typename T>
QueueList<T>::QueueList () {
  size = 0;       // set the size of queue to zero.
    3aa0:	13 82       	std	Z+3, r1	; 0x03
    3aa2:	12 82       	std	Z+2, r1	; 0x02
  head = NULL;    // set the head of the list to point nowhere.
    3aa4:	15 82       	std	Z+5, r1	; 0x05
    3aa6:	14 82       	std	Z+4, r1	; 0x04
  tail = NULL;    // set the tail of the list to point nowhere.
    3aa8:	17 82       	std	Z+7, r1	; 0x07
    3aaa:	16 82       	std	Z+6, r1	; 0x06
  printer = NULL; // set the printer of queue to point nowhere.
    3aac:	11 82       	std	Z+1, r1	; 0x01
    3aae:	10 82       	st	Z, r1
    3ab0:	d7 01       	movw	r26, r14
    3ab2:	15 96       	adiw	r26, 0x05	; 5
    3ab4:	9c 93       	st	X, r25
    3ab6:	8e 93       	st	-X, r24
    3ab8:	14 97       	sbiw	r26, 0x04	; 4

	wasWholeQueueExecuted = false;
    3aba:	1c 96       	adiw	r26, 0x0c	; 12
    3abc:	1c 92       	st	X, r1
    3abe:	1c 97       	sbiw	r26, 0x0c	; 12
	lastExecutionTime = 0;
    3ac0:	f7 01       	movw	r30, r14
    3ac2:	10 86       	std	Z+8, r1	; 0x08
    3ac4:	11 86       	std	Z+9, r1	; 0x09
    3ac6:	12 86       	std	Z+10, r1	; 0x0a
    3ac8:	13 86       	std	Z+11, r1	; 0x0b
}
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	df 91       	pop	r29
    3ad0:	cf 91       	pop	r28
    3ad2:	1f 91       	pop	r17
    3ad4:	0f 91       	pop	r16
    3ad6:	ff 90       	pop	r15
    3ad8:	ef 90       	pop	r14
    3ada:	08 95       	ret

00003adc <_ZN9QueueListImE3popEv>:
  size++;
}

// pop an item from the queue.
template<typename T>
T QueueList<T>::pop () {
    3adc:	cf 92       	push	r12
    3ade:	df 92       	push	r13
    3ae0:	ef 92       	push	r14
    3ae2:	ff 92       	push	r15
    3ae4:	0f 93       	push	r16
    3ae6:	1f 93       	push	r17
    3ae8:	cf 93       	push	r28
    3aea:	df 93       	push	r29
    3aec:	00 d0       	rcall	.+0      	; 0x3aee <_ZN9QueueListImE3popEv+0x12>
    3aee:	cd b7       	in	r28, 0x3d	; 61
    3af0:	de b7       	in	r29, 0x3e	; 62
    3af2:	6c 01       	movw	r12, r24
	if( shouldIFreeQueue )
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
	}
}
    3af4:	dc 01       	movw	r26, r24
    3af6:	14 96       	adiw	r26, 0x04	; 4
    3af8:	ed 91       	ld	r30, X+
    3afa:	fc 91       	ld	r31, X
    3afc:	15 97       	sbiw	r26, 0x05	; 5
  // check if the queue is empty.
  if (isEmpty ())
    3afe:	30 97       	sbiw	r30, 0x00	; 0
    3b00:	31 f4       	brne	.+12     	; 0x3b0e <_ZN9QueueListImE3popEv+0x32>
    exit ("QUEUE: can't pop item from queue: queue is empty.");
    3b02:	8d 91       	ld	r24, X+
    3b04:	9c 91       	ld	r25, X
    3b06:	6e ea       	ldi	r22, 0xAE	; 174
    3b08:	72 e0       	ldi	r23, 0x02	; 2
    3b0a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZNK9QueueListImE4exitEPKc.isra.2>

  // get the item of the head node.
  const T item = head->item;
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	f2 80       	ldd	r15, Z+2	; 0x02
    3b14:	e3 80       	ldd	r14, Z+3	; 0x03

  // remove only the head node.
  link t = head->next; free (head); head = t;
    3b16:	04 81       	ldd	r16, Z+4	; 0x04
    3b18:	15 81       	ldd	r17, Z+5	; 0x05
    3b1a:	cf 01       	movw	r24, r30
    3b1c:	69 83       	std	Y+1, r22	; 0x01
    3b1e:	7a 83       	std	Y+2, r23	; 0x02
    3b20:	0e 94 a8 23 	call	0x4750	; 0x4750 <free>
    3b24:	f6 01       	movw	r30, r12
    3b26:	15 83       	std	Z+5, r17	; 0x05
    3b28:	04 83       	std	Z+4, r16	; 0x04

  // decrease the items.
  size--;
    3b2a:	82 81       	ldd	r24, Z+2	; 0x02
    3b2c:	93 81       	ldd	r25, Z+3	; 0x03
    3b2e:	01 97       	sbiw	r24, 0x01	; 1
    3b30:	93 83       	std	Z+3, r25	; 0x03
    3b32:	82 83       	std	Z+2, r24	; 0x02

  // return the item.
  return item;
}
    3b34:	69 81       	ldd	r22, Y+1	; 0x01
    3b36:	7a 81       	ldd	r23, Y+2	; 0x02
    3b38:	8f 2d       	mov	r24, r15
    3b3a:	9e 2d       	mov	r25, r14
    3b3c:	0f 90       	pop	r0
    3b3e:	0f 90       	pop	r0
    3b40:	df 91       	pop	r29
    3b42:	cf 91       	pop	r28
    3b44:	1f 91       	pop	r17
    3b46:	0f 91       	pop	r16
    3b48:	ff 90       	pop	r15
    3b4a:	ef 90       	pop	r14
    3b4c:	df 90       	pop	r13
    3b4e:	cf 90       	pop	r12
    3b50:	08 95       	ret

00003b52 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv>:
{
	isCyclic = _isCyclic;
}

bool TaskManagerSchedulerTimeIntervals::canExecute()
{
    3b52:	cf 92       	push	r12
    3b54:	df 92       	push	r13
    3b56:	ef 92       	push	r14
    3b58:	ff 92       	push	r15
    3b5a:	0f 93       	push	r16
    3b5c:	1f 93       	push	r17
    3b5e:	cf 93       	push	r28
    3b60:	df 93       	push	r29
    3b62:	ec 01       	movw	r28, r24
	unsigned long currentMillis = millis();
    3b64:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    3b68:	ab 01       	movw	r20, r22
    3b6a:	bc 01       	movw	r22, r24

	if( currentMillis - lastExecutionTime > queueA->peek() )
    3b6c:	88 85       	ldd	r24, Y+8	; 0x08
    3b6e:	99 85       	ldd	r25, Y+9	; 0x09
    3b70:	aa 85       	ldd	r26, Y+10	; 0x0a
    3b72:	bb 85       	ldd	r27, Y+11	; 0x0b
    3b74:	ea 81       	ldd	r30, Y+2	; 0x02
    3b76:	fb 81       	ldd	r31, Y+3	; 0x03
	if( shouldIFreeQueue )
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
	}
}
    3b78:	e4 80       	ldd	r14, Z+4	; 0x04
    3b7a:	f5 80       	ldd	r15, Z+5	; 0x05

// get an item from the queue.
template<typename T>
T QueueList<T>::peek () const {
  // check if the queue is empty.
  if (isEmpty ())
    3b7c:	e1 14       	cp	r14, r1
    3b7e:	f1 04       	cpc	r15, r1
    3b80:	31 f4       	brne	.+12     	; 0x3b8e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x3c>
    exit ("QUEUE: can't peek item from queue: queue is empty.");
    3b82:	80 81       	ld	r24, Z
    3b84:	91 81       	ldd	r25, Z+1	; 0x01
    3b86:	61 e1       	ldi	r22, 0x11	; 17
    3b88:	73 e0       	ldi	r23, 0x03	; 3
    3b8a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <_ZNK9QueueListImE4exitEPKc.isra.2>

bool TaskManagerSchedulerTimeIntervals::canExecute()
{
	unsigned long currentMillis = millis();

	if( currentMillis - lastExecutionTime > queueA->peek() )
    3b8e:	8a 01       	movw	r16, r20
    3b90:	9b 01       	movw	r18, r22
    3b92:	08 1b       	sub	r16, r24
    3b94:	19 0b       	sbc	r17, r25
    3b96:	2a 0b       	sbc	r18, r26
    3b98:	3b 0b       	sbc	r19, r27
    3b9a:	d7 01       	movw	r26, r14
    3b9c:	cd 90       	ld	r12, X+
    3b9e:	dd 90       	ld	r13, X+
    3ba0:	ed 90       	ld	r14, X+
    3ba2:	fc 90       	ld	r15, X
    3ba4:	13 97       	sbiw	r26, 0x03	; 3
    3ba6:	c0 16       	cp	r12, r16
    3ba8:	d1 06       	cpc	r13, r17
    3baa:	e2 06       	cpc	r14, r18
    3bac:	f3 06       	cpc	r15, r19
    3bae:	60 f5       	brcc	.+88     	; 0x3c08 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xb6>
	{
		lastExecutionTime = currentMillis;
    3bb0:	48 87       	std	Y+8, r20	; 0x08
    3bb2:	59 87       	std	Y+9, r21	; 0x09
    3bb4:	6a 87       	std	Y+10, r22	; 0x0a
    3bb6:	7b 87       	std	Y+11, r23	; 0x0b

		queueB->push( queueA->pop() );
    3bb8:	0c 81       	ldd	r16, Y+4	; 0x04
    3bba:	1d 81       	ldd	r17, Y+5	; 0x05
    3bbc:	cf 01       	movw	r24, r30
    3bbe:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <_ZN9QueueListImE3popEv>
    3bc2:	ab 01       	movw	r20, r22
    3bc4:	bc 01       	movw	r22, r24
    3bc6:	c8 01       	movw	r24, r16
    3bc8:	0e 94 14 01 	call	0x228	; 0x228 <_ZN9QueueListImE4pushEm>
	if( shouldIFreeQueue )
	{
		//while( !queueA->isEmpty() ) delete( queueA->pop() );
		delete( queueA );
	}
}
    3bcc:	ea 81       	ldd	r30, Y+2	; 0x02
    3bce:	fb 81       	ldd	r31, Y+3	; 0x03
	{
		lastExecutionTime = currentMillis;

		queueB->push( queueA->pop() );

		if( queueA->isEmpty() )
    3bd0:	84 81       	ldd	r24, Z+4	; 0x04
    3bd2:	95 81       	ldd	r25, Z+5	; 0x05
    3bd4:	00 97       	sbiw	r24, 0x00	; 0
    3bd6:	d1 f4       	brne	.+52     	; 0x3c0c <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xba>
    3bd8:	09 c0       	rjmp	.+18     	; 0x3bec <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x9a>
	    {
			while( !queueB->isEmpty() ) queueA->push( queueB->pop() );
    3bda:	0a 81       	ldd	r16, Y+2	; 0x02
    3bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    3bde:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <_ZN9QueueListImE3popEv>
    3be2:	ab 01       	movw	r20, r22
    3be4:	bc 01       	movw	r22, r24
    3be6:	c8 01       	movw	r24, r16
    3be8:	0e 94 14 01 	call	0x228	; 0x228 <_ZN9QueueListImE4pushEm>
    3bec:	8c 81       	ldd	r24, Y+4	; 0x04
    3bee:	9d 81       	ldd	r25, Y+5	; 0x05
    3bf0:	fc 01       	movw	r30, r24
    3bf2:	24 81       	ldd	r18, Z+4	; 0x04
    3bf4:	35 81       	ldd	r19, Z+5	; 0x05
    3bf6:	21 15       	cp	r18, r1
    3bf8:	31 05       	cpc	r19, r1
    3bfa:	79 f7       	brne	.-34     	; 0x3bda <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x88>

			if( !isCyclic ) wasWholeQueueExecuted = true;
    3bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    3bfe:	88 23       	and	r24, r24
    3c00:	29 f4       	brne	.+10     	; 0x3c0c <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xba>
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	8c 87       	std	Y+12, r24	; 0x0c
    3c06:	03 c0       	rjmp	.+6      	; 0x3c0e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xbc>
	    }

		return true;
	}
	else
		return false;
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	01 c0       	rjmp	.+2      	; 0x3c0e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xbc>

		if( queueA->isEmpty() )
	    {
			while( !queueB->isEmpty() ) queueA->push( queueB->pop() );

			if( !isCyclic ) wasWholeQueueExecuted = true;
    3c0c:	81 e0       	ldi	r24, 0x01	; 1

		return true;
	}
	else
		return false;
}
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	0f 91       	pop	r16
    3c16:	ff 90       	pop	r15
    3c18:	ef 90       	pop	r14
    3c1a:	df 90       	pop	r13
    3c1c:	cf 90       	pop	r12
    3c1e:	08 95       	ret

00003c20 <_ZN26TaskManagerStatisticsBasicD1Ev>:
	notExecutedTasksSum = 0;

	testStartTime = millis();
}

TaskManagerStatisticsBasic::~TaskManagerStatisticsBasic()
    3c20:	28 e9       	ldi	r18, 0x98	; 152
    3c22:	34 e0       	ldi	r19, 0x04	; 4
    3c24:	fc 01       	movw	r30, r24
    3c26:	31 83       	std	Z+1, r19	; 0x01
    3c28:	20 83       	st	Z, r18
    3c2a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <_ZN21TaskManagerStatisticsD1Ev>
{
	//delete( p );
}
    3c2e:	08 95       	ret

00003c30 <_ZN26TaskManagerStatisticsBasicD0Ev>:
	notExecutedTasksSum = 0;

	testStartTime = millis();
}

TaskManagerStatisticsBasic::~TaskManagerStatisticsBasic()
    3c30:	cf 93       	push	r28
    3c32:	df 93       	push	r29
    3c34:	ec 01       	movw	r28, r24
    3c36:	88 e9       	ldi	r24, 0x98	; 152
    3c38:	94 e0       	ldi	r25, 0x04	; 4
    3c3a:	99 83       	std	Y+1, r25	; 0x01
    3c3c:	88 83       	st	Y, r24
    3c3e:	ce 01       	movw	r24, r28
    3c40:	0e 94 79 20 	call	0x40f2	; 0x40f2 <_ZN21TaskManagerStatisticsD1Ev>
{
	//delete( p );
}
    3c44:	ce 01       	movw	r24, r28
    3c46:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    3c4a:	df 91       	pop	r29
    3c4c:	cf 91       	pop	r28
    3c4e:	08 95       	ret

00003c50 <_ZN26TaskManagerStatisticsBasic15beforeTaskQueueEv>:

	resetStatistics();
}

void TaskManagerStatisticsBasic::beforeTaskQueue()
{
    3c50:	cf 93       	push	r28
    3c52:	df 93       	push	r29
    3c54:	ec 01       	movw	r28, r24
	executionOfMainLoopStartTime = millis();
    3c56:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	8c 87       	std	Y+12, r24	; 0x0c
    3c60:	9d 87       	std	Y+13, r25	; 0x0d
    3c62:	ae 87       	std	Y+14, r26	; 0x0e
    3c64:	bf 87       	std	Y+15, r27	; 0x0f
}
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	08 95       	ret

00003c6c <_ZN26TaskManagerStatisticsBasic15resetStatisticsEv>:
	p->ps->printHorizontalLine();
	*/
}

void TaskManagerStatisticsBasic::resetStatistics()
{
    3c6c:	cf 93       	push	r28
    3c6e:	df 93       	push	r29
    3c70:	ec 01       	movw	r28, r24

	executionOfMainLoopStartTime = 0;
    3c72:	1c 86       	std	Y+12, r1	; 0x0c
    3c74:	1d 86       	std	Y+13, r1	; 0x0d
    3c76:	1e 86       	std	Y+14, r1	; 0x0e
    3c78:	1f 86       	std	Y+15, r1	; 0x0f
	timeSum = 0;
    3c7a:	18 a2       	std	Y+32, r1	; 0x20
    3c7c:	19 a2       	std	Y+33, r1	; 0x21
    3c7e:	1a a2       	std	Y+34, r1	; 0x22
    3c80:	1b a2       	std	Y+35, r1	; 0x23

	checkedTasksSum = 0;
    3c82:	1c 8a       	std	Y+20, r1	; 0x14
    3c84:	1d 8a       	std	Y+21, r1	; 0x15
    3c86:	1e 8a       	std	Y+22, r1	; 0x16
    3c88:	1f 8a       	std	Y+23, r1	; 0x17
	executedTasksSum = 0;
    3c8a:	18 8e       	std	Y+24, r1	; 0x18
    3c8c:	19 8e       	std	Y+25, r1	; 0x19
    3c8e:	1a 8e       	std	Y+26, r1	; 0x1a
    3c90:	1b 8e       	std	Y+27, r1	; 0x1b
	notExecutedTasksSum = 0;
    3c92:	1c 8e       	std	Y+28, r1	; 0x1c
    3c94:	1d 8e       	std	Y+29, r1	; 0x1d
    3c96:	1e 8e       	std	Y+30, r1	; 0x1e
    3c98:	1f 8e       	std	Y+31, r1	; 0x1f

	testStartTime = millis();
    3c9a:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    3c9e:	dc 01       	movw	r26, r24
    3ca0:	cb 01       	movw	r24, r22
    3ca2:	88 87       	std	Y+8, r24	; 0x08
    3ca4:	99 87       	std	Y+9, r25	; 0x09
    3ca6:	aa 87       	std	Y+10, r26	; 0x0a
    3ca8:	bb 87       	std	Y+11, r27	; 0x0b
}
    3caa:	df 91       	pop	r29
    3cac:	cf 91       	pop	r28
    3cae:	08 95       	ret

00003cb0 <_ZN26TaskManagerStatisticsBasicC1ER5Printm>:
#include "Streaming.h"
#include "MemoryFree.h"

const char TaskManagerStatisticsBasic::prefix[] = "TM STAT:";

TaskManagerStatisticsBasic::TaskManagerStatisticsBasic( Print& _p , unsigned long _statisticsCreationIntervalInMs ) : p(_p)
    3cb0:	cf 92       	push	r12
    3cb2:	df 92       	push	r13
    3cb4:	ef 92       	push	r14
    3cb6:	ff 92       	push	r15
    3cb8:	0f 93       	push	r16
    3cba:	1f 93       	push	r17
    3cbc:	cf 93       	push	r28
    3cbe:	df 93       	push	r29
    3cc0:	ec 01       	movw	r28, r24
    3cc2:	8b 01       	movw	r16, r22
    3cc4:	69 01       	movw	r12, r18
    3cc6:	7a 01       	movw	r14, r20
    3cc8:	0e 94 87 20 	call	0x410e	; 0x410e <_ZN21TaskManagerStatisticsC1Ev>
    3ccc:	88 e9       	ldi	r24, 0x98	; 152
    3cce:	94 e0       	ldi	r25, 0x04	; 4
    3cd0:	99 83       	std	Y+1, r25	; 0x01
    3cd2:	88 83       	st	Y, r24
    3cd4:	1b 83       	std	Y+3, r17	; 0x03
    3cd6:	0a 83       	std	Y+2, r16	; 0x02
{
	statisticsCreationIntervalInMs = _statisticsCreationIntervalInMs;
    3cd8:	cc 82       	std	Y+4, r12	; 0x04
    3cda:	dd 82       	std	Y+5, r13	; 0x05
    3cdc:	ee 82       	std	Y+6, r14	; 0x06
    3cde:	ff 82       	std	Y+7, r15	; 0x07

	//char aprefix[] = { 'T' , 'M' , ' ' , 'S' , 'T' , 'A' , 'T' , ':' };

	//prefix = a;

	resetStatistics();
    3ce0:	ce 01       	movw	r24, r28
    3ce2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_ZN26TaskManagerStatisticsBasic15resetStatisticsEv>
}
    3ce6:	df 91       	pop	r29
    3ce8:	cf 91       	pop	r28
    3cea:	1f 91       	pop	r17
    3cec:	0f 91       	pop	r16
    3cee:	ff 90       	pop	r15
    3cf0:	ef 90       	pop	r14
    3cf2:	df 90       	pop	r13
    3cf4:	cf 90       	pop	r12
    3cf6:	08 95       	ret

00003cf8 <_ZlsImER5PrintS1_T_>:

#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
    3cf8:	cf 93       	push	r28
    3cfa:	df 93       	push	r29
    3cfc:	d8 2f       	mov	r29, r24
    3cfe:	c9 2f       	mov	r28, r25
{ stream.print(arg); return stream; }
    3d00:	2a e0       	ldi	r18, 0x0A	; 10
    3d02:	30 e0       	ldi	r19, 0x00	; 0
    3d04:	0e 94 c5 06 	call	0xd8a	; 0xd8a <_ZN5Print5printEmi>
    3d08:	8d 2f       	mov	r24, r29
    3d0a:	9c 2f       	mov	r25, r28
    3d0c:	df 91       	pop	r29
    3d0e:	cf 91       	pop	r28
    3d10:	08 95       	ret

00003d12 <_ZN26TaskManagerStatisticsBasic15printStatisticsEm>:
		resetStatistics();
	}
}

void TaskManagerStatisticsBasic::printStatistics( unsigned long howManyTasksWereCheckedInThisIteration )
{
    3d12:	4f 92       	push	r4
    3d14:	5f 92       	push	r5
    3d16:	6f 92       	push	r6
    3d18:	7f 92       	push	r7
    3d1a:	8f 92       	push	r8
    3d1c:	9f 92       	push	r9
    3d1e:	af 92       	push	r10
    3d20:	bf 92       	push	r11
    3d22:	cf 92       	push	r12
    3d24:	df 92       	push	r13
    3d26:	ef 92       	push	r14
    3d28:	ff 92       	push	r15
    3d2a:	0f 93       	push	r16
    3d2c:	1f 93       	push	r17
    3d2e:	cf 93       	push	r28
    3d30:	df 93       	push	r29
    3d32:	8c 01       	movw	r16, r24
    3d34:	2a 01       	movw	r4, r20
    3d36:	3b 01       	movw	r6, r22
	//char prefix[] = { 'T' , 'M' , ' ' , 'S' , 'T' , 'A' , 'T' , ':' };

	p << prefix << hl;
    3d38:	fc 01       	movw	r30, r24
    3d3a:	c2 81       	ldd	r28, Z+2	; 0x02
    3d3c:	d3 81       	ldd	r29, Z+3	; 0x03
    3d3e:	20 ea       	ldi	r18, 0xA0	; 160
    3d40:	a2 2e       	mov	r10, r18
    3d42:	24 e0       	ldi	r18, 0x04	; 4
    3d44:	b2 2e       	mov	r11, r18
    3d46:	ce 01       	movw	r24, r28
    3d48:	b5 01       	movw	r22, r10
    3d4a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
// ART:

enum _ArthurCodes { hl };

inline Print &operator <<(Print &obj, _ArthurCodes arg)
{ obj.println( "---------------------" ); return obj; }
    3d4e:	34 e4       	ldi	r19, 0x44	; 68
    3d50:	83 2e       	mov	r8, r19
    3d52:	33 e0       	ldi	r19, 0x03	; 3
    3d54:	93 2e       	mov	r9, r19
    3d56:	ce 01       	movw	r24, r28
    3d58:	b4 01       	movw	r22, r8
    3d5a:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>
	p << prefix << "freeRamMemory()=" << freeRamMemory() << " B" << endl;
    3d5e:	f8 01       	movw	r30, r16
    3d60:	c2 81       	ldd	r28, Z+2	; 0x02
    3d62:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3d64:	ce 01       	movw	r24, r28
    3d66:	b5 01       	movw	r22, r10
    3d68:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3d6c:	ce 01       	movw	r24, r28
    3d6e:	6a e5       	ldi	r22, 0x5A	; 90
    3d70:	73 e0       	ldi	r23, 0x03	; 3
    3d72:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3d76:	0e 94 e7 03 	call	0x7ce	; 0x7ce <freeRamMemory>
    3d7a:	bc 01       	movw	r22, r24
    3d7c:	ce 01       	movw	r24, r28
    3d7e:	4a e0       	ldi	r20, 0x0A	; 10
    3d80:	50 e0       	ldi	r21, 0x00	; 0
    3d82:	0e 94 15 07 	call	0xe2a	; 0xe2a <_ZN5Print5printEii>
    3d86:	ce 01       	movw	r24, r28
    3d88:	6b e6       	ldi	r22, 0x6B	; 107
    3d8a:	73 e0       	ldi	r23, 0x03	; 3
    3d8c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3d90:	ce 01       	movw	r24, r28
    3d92:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	p << prefix << "millis()=" << millis() << endl;
    3d96:	f8 01       	movw	r30, r16
    3d98:	c2 81       	ldd	r28, Z+2	; 0x02
    3d9a:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3d9c:	ce 01       	movw	r24, r28
    3d9e:	b5 01       	movw	r22, r10
    3da0:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3da4:	ce 01       	movw	r24, r28
    3da6:	6e e6       	ldi	r22, 0x6E	; 110
    3da8:	73 e0       	ldi	r23, 0x03	; 3
    3daa:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3dae:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    3db2:	ab 01       	movw	r20, r22
    3db4:	bc 01       	movw	r22, r24
    3db6:	ce 01       	movw	r24, r28
    3db8:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3dbc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

	p << prefix << "statisticsCreationIntervalInMs=" << statisticsCreationIntervalInMs << endl;
    3dc0:	f8 01       	movw	r30, r16
    3dc2:	c2 81       	ldd	r28, Z+2	; 0x02
    3dc4:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3dc6:	ce 01       	movw	r24, r28
    3dc8:	b5 01       	movw	r22, r10
    3dca:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3dce:	ce 01       	movw	r24, r28
    3dd0:	68 e7       	ldi	r22, 0x78	; 120
    3dd2:	73 e0       	ldi	r23, 0x03	; 3
    3dd4:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3dd8:	f8 01       	movw	r30, r16
    3dda:	44 81       	ldd	r20, Z+4	; 0x04
    3ddc:	55 81       	ldd	r21, Z+5	; 0x05
    3dde:	66 81       	ldd	r22, Z+6	; 0x06
    3de0:	77 81       	ldd	r23, Z+7	; 0x07
    3de2:	ce 01       	movw	r24, r28
    3de4:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3de8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

	p << prefix << "timeSum" << timeSum << endl;
    3dec:	f8 01       	movw	r30, r16
    3dee:	c2 81       	ldd	r28, Z+2	; 0x02
    3df0:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3df2:	ce 01       	movw	r24, r28
    3df4:	b5 01       	movw	r22, r10
    3df6:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3dfa:	ce 01       	movw	r24, r28
    3dfc:	68 e9       	ldi	r22, 0x98	; 152
    3dfe:	73 e0       	ldi	r23, 0x03	; 3
    3e00:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3e04:	f8 01       	movw	r30, r16
    3e06:	40 a1       	ldd	r20, Z+32	; 0x20
    3e08:	51 a1       	ldd	r21, Z+33	; 0x21
    3e0a:	62 a1       	ldd	r22, Z+34	; 0x22
    3e0c:	73 a1       	ldd	r23, Z+35	; 0x23
    3e0e:	ce 01       	movw	r24, r28
    3e10:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3e14:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	p << prefix << "mainLoopExecutionsCount=" << mainLoopExecutionsCount << endl;
    3e18:	f8 01       	movw	r30, r16
    3e1a:	c2 81       	ldd	r28, Z+2	; 0x02
    3e1c:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3e1e:	ce 01       	movw	r24, r28
    3e20:	b5 01       	movw	r22, r10
    3e22:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3e26:	ce 01       	movw	r24, r28
    3e28:	60 ea       	ldi	r22, 0xA0	; 160
    3e2a:	73 e0       	ldi	r23, 0x03	; 3
    3e2c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3e30:	f8 01       	movw	r30, r16
    3e32:	40 89       	ldd	r20, Z+16	; 0x10
    3e34:	51 89       	ldd	r21, Z+17	; 0x11
    3e36:	62 89       	ldd	r22, Z+18	; 0x12
    3e38:	73 89       	ldd	r23, Z+19	; 0x13
    3e3a:	ce 01       	movw	r24, r28
    3e3c:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3e40:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

	float f1 = timeSum;
    3e44:	f8 01       	movw	r30, r16
    3e46:	60 a1       	ldd	r22, Z+32	; 0x20
    3e48:	71 a1       	ldd	r23, Z+33	; 0x21
    3e4a:	82 a1       	ldd	r24, Z+34	; 0x22
    3e4c:	93 a1       	ldd	r25, Z+35	; 0x23
    3e4e:	0e 94 8f 21 	call	0x431e	; 0x431e <__floatunsisf>
    3e52:	6b 01       	movw	r12, r22
    3e54:	7c 01       	movw	r14, r24
	float f2 = mainLoopExecutionsCount;
    3e56:	f8 01       	movw	r30, r16
    3e58:	60 89       	ldd	r22, Z+16	; 0x10
    3e5a:	71 89       	ldd	r23, Z+17	; 0x11
    3e5c:	82 89       	ldd	r24, Z+18	; 0x12
    3e5e:	93 89       	ldd	r25, Z+19	; 0x13
    3e60:	0e 94 8f 21 	call	0x431e	; 0x431e <__floatunsisf>
    3e64:	9b 01       	movw	r18, r22
    3e66:	ac 01       	movw	r20, r24
	float f = f1/f2;
    3e68:	c7 01       	movw	r24, r14
    3e6a:	b6 01       	movw	r22, r12
    3e6c:	0e 94 f6 20 	call	0x41ec	; 0x41ec <__divsf3>
    3e70:	f6 2e       	mov	r15, r22
    3e72:	c7 2e       	mov	r12, r23
    3e74:	e8 2e       	mov	r14, r24
    3e76:	d9 2e       	mov	r13, r25
	p << prefix << "timeSum/mainLoopExecutionsCount=" << f << endl;
    3e78:	f8 01       	movw	r30, r16
    3e7a:	c2 81       	ldd	r28, Z+2	; 0x02
    3e7c:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3e7e:	ce 01       	movw	r24, r28
    3e80:	b5 01       	movw	r22, r10
    3e82:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3e86:	ce 01       	movw	r24, r28
    3e88:	69 eb       	ldi	r22, 0xB9	; 185
    3e8a:	73 e0       	ldi	r23, 0x03	; 3
    3e8c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3e90:	ce 01       	movw	r24, r28
    3e92:	4f 2d       	mov	r20, r15
    3e94:	5c 2d       	mov	r21, r12
    3e96:	6e 2d       	mov	r22, r14
    3e98:	7d 2d       	mov	r23, r13
    3e9a:	22 e0       	ldi	r18, 0x02	; 2
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <_ZN5Print5printEdi>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

	p << prefix << "checkedTasksSum=" << checkedTasksSum << endl;
    3ea8:	f8 01       	movw	r30, r16
    3eaa:	c2 81       	ldd	r28, Z+2	; 0x02
    3eac:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3eae:	ce 01       	movw	r24, r28
    3eb0:	b5 01       	movw	r22, r10
    3eb2:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3eb6:	ce 01       	movw	r24, r28
    3eb8:	6a ed       	ldi	r22, 0xDA	; 218
    3eba:	73 e0       	ldi	r23, 0x03	; 3
    3ebc:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3ec0:	f8 01       	movw	r30, r16
    3ec2:	44 89       	ldd	r20, Z+20	; 0x14
    3ec4:	55 89       	ldd	r21, Z+21	; 0x15
    3ec6:	66 89       	ldd	r22, Z+22	; 0x16
    3ec8:	77 89       	ldd	r23, Z+23	; 0x17
    3eca:	ce 01       	movw	r24, r28
    3ecc:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3ed0:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	p << prefix << "executedTasksSum=" << executedTasksSum << endl;
    3ed4:	f8 01       	movw	r30, r16
    3ed6:	c2 81       	ldd	r28, Z+2	; 0x02
    3ed8:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3eda:	ce 01       	movw	r24, r28
    3edc:	b5 01       	movw	r22, r10
    3ede:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3ee2:	ce 01       	movw	r24, r28
    3ee4:	6b ee       	ldi	r22, 0xEB	; 235
    3ee6:	73 e0       	ldi	r23, 0x03	; 3
    3ee8:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3eec:	f8 01       	movw	r30, r16
    3eee:	40 8d       	ldd	r20, Z+24	; 0x18
    3ef0:	51 8d       	ldd	r21, Z+25	; 0x19
    3ef2:	62 8d       	ldd	r22, Z+26	; 0x1a
    3ef4:	73 8d       	ldd	r23, Z+27	; 0x1b
    3ef6:	ce 01       	movw	r24, r28
    3ef8:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3efc:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	p << prefix << "notExecutedTasksSum=" << notExecutedTasksSum << endl;
    3f00:	f8 01       	movw	r30, r16
    3f02:	c2 81       	ldd	r28, Z+2	; 0x02
    3f04:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3f06:	ce 01       	movw	r24, r28
    3f08:	b5 01       	movw	r22, r10
    3f0a:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3f0e:	ce 01       	movw	r24, r28
    3f10:	6d ef       	ldi	r22, 0xFD	; 253
    3f12:	73 e0       	ldi	r23, 0x03	; 3
    3f14:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3f18:	f8 01       	movw	r30, r16
    3f1a:	44 8d       	ldd	r20, Z+28	; 0x1c
    3f1c:	55 8d       	ldd	r21, Z+29	; 0x1d
    3f1e:	66 8d       	ldd	r22, Z+30	; 0x1e
    3f20:	77 8d       	ldd	r23, Z+31	; 0x1f
    3f22:	ce 01       	movw	r24, r28
    3f24:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3f28:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>
	p << prefix << "tasks queued in task manager=" << howManyTasksWereCheckedInThisIteration << endl;
    3f2c:	f8 01       	movw	r30, r16
    3f2e:	c2 81       	ldd	r28, Z+2	; 0x02
    3f30:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3f32:	ce 01       	movw	r24, r28
    3f34:	b5 01       	movw	r22, r10
    3f36:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3f3a:	ce 01       	movw	r24, r28
    3f3c:	62 e1       	ldi	r22, 0x12	; 18
    3f3e:	74 e0       	ldi	r23, 0x04	; 4
    3f40:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
    3f44:	ce 01       	movw	r24, r28
    3f46:	b3 01       	movw	r22, r6
    3f48:	a2 01       	movw	r20, r4
    3f4a:	0e 94 7c 1e 	call	0x3cf8	; 0x3cf8 <_ZlsImER5PrintS1_T_>
//   Serial << "Hello!" << endl;

enum _EndLineCode { endl };

inline Print &operator <<(Print &obj, _EndLineCode arg) 
{ obj.println(); return obj; }
    3f4e:	0e 94 2f 06 	call	0xc5e	; 0xc5e <_ZN5Print7printlnEv>

	p << prefix << hl;
    3f52:	f8 01       	movw	r30, r16
    3f54:	c2 81       	ldd	r28, Z+2	; 0x02
    3f56:	d3 81       	ldd	r29, Z+3	; 0x03
#define STREAMING_LIBRARY_VERSION 4

// Generic template
template<class T> 
inline Print &operator <<(Print &stream, T arg) 
{ stream.print(arg); return stream; }
    3f58:	ce 01       	movw	r24, r28
    3f5a:	b5 01       	movw	r22, r10
    3f5c:	0e 94 16 06 	call	0xc2c	; 0xc2c <_ZN5Print5printEPKc>
// ART:

enum _ArthurCodes { hl };

inline Print &operator <<(Print &obj, _ArthurCodes arg)
{ obj.println( "---------------------" ); return obj; }
    3f60:	ce 01       	movw	r24, r28
    3f62:	b4 01       	movw	r22, r8
    3f64:	0e 94 43 06 	call	0xc86	; 0xc86 <_ZN5Print7printlnEPKc>
	p->p( "notExecutedTasksSum=" ); Serial.println( notExecutedTasksSum );
	p->p( "tasks queued in task manager=" ); Serial.println( howManyTasksWereCheckedInThisIteration );

	p->ps->printHorizontalLine();
	*/
}
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	1f 91       	pop	r17
    3f6e:	0f 91       	pop	r16
    3f70:	ff 90       	pop	r15
    3f72:	ef 90       	pop	r14
    3f74:	df 90       	pop	r13
    3f76:	cf 90       	pop	r12
    3f78:	bf 90       	pop	r11
    3f7a:	af 90       	pop	r10
    3f7c:	9f 90       	pop	r9
    3f7e:	8f 90       	pop	r8
    3f80:	7f 90       	pop	r7
    3f82:	6f 90       	pop	r6
    3f84:	5f 90       	pop	r5
    3f86:	4f 90       	pop	r4
    3f88:	08 95       	ret

00003f8a <_ZN26TaskManagerStatisticsBasic14afterTaskQueueEmmm>:
{
	executionOfMainLoopStartTime = millis();
}

void TaskManagerStatisticsBasic::afterTaskQueue( unsigned long howManyTasksWereCheckedInThisIteration , unsigned long howManyTasksWereExecutedInThisIteration , unsigned long howManyTasksWereNotExecutedInThisIteration )
{
    3f8a:	2f 92       	push	r2
    3f8c:	3f 92       	push	r3
    3f8e:	4f 92       	push	r4
    3f90:	5f 92       	push	r5
    3f92:	6f 92       	push	r6
    3f94:	7f 92       	push	r7
    3f96:	8f 92       	push	r8
    3f98:	9f 92       	push	r9
    3f9a:	af 92       	push	r10
    3f9c:	bf 92       	push	r11
    3f9e:	cf 92       	push	r12
    3fa0:	df 92       	push	r13
    3fa2:	ef 92       	push	r14
    3fa4:	ff 92       	push	r15
    3fa6:	0f 93       	push	r16
    3fa8:	1f 93       	push	r17
    3faa:	cf 93       	push	r28
    3fac:	df 93       	push	r29
    3fae:	00 d0       	rcall	.+0      	; 0x3fb0 <_ZN26TaskManagerStatisticsBasic14afterTaskQueueEmmm+0x26>
    3fb0:	cd b7       	in	r28, 0x3d	; 61
    3fb2:	de b7       	in	r29, 0x3e	; 62
    3fb4:	1c 01       	movw	r2, r24
    3fb6:	2a 01       	movw	r4, r20
    3fb8:	3b 01       	movw	r6, r22
    3fba:	46 01       	movw	r8, r12
    3fbc:	57 01       	movw	r10, r14
	timeSum += millis() - executionOfMainLoopStartTime;
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	c0 a0       	ldd	r12, Z+32	; 0x20
    3fc2:	d1 a0       	ldd	r13, Z+33	; 0x21
    3fc4:	e2 a0       	ldd	r14, Z+34	; 0x22
    3fc6:	f3 a0       	ldd	r15, Z+35	; 0x23
    3fc8:	29 83       	std	Y+1, r18	; 0x01
    3fca:	3a 83       	std	Y+2, r19	; 0x02
    3fcc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    3fd0:	ab 01       	movw	r20, r22
    3fd2:	bc 01       	movw	r22, r24
    3fd4:	f1 01       	movw	r30, r2
    3fd6:	84 85       	ldd	r24, Z+12	; 0x0c
    3fd8:	95 85       	ldd	r25, Z+13	; 0x0d
    3fda:	a6 85       	ldd	r26, Z+14	; 0x0e
    3fdc:	b7 85       	ldd	r27, Z+15	; 0x0f
    3fde:	c8 1a       	sub	r12, r24
    3fe0:	d9 0a       	sbc	r13, r25
    3fe2:	ea 0a       	sbc	r14, r26
    3fe4:	fb 0a       	sbc	r15, r27
    3fe6:	c4 0e       	add	r12, r20
    3fe8:	d5 1e       	adc	r13, r21
    3fea:	e6 1e       	adc	r14, r22
    3fec:	f7 1e       	adc	r15, r23
    3fee:	c0 a2       	std	Z+32, r12	; 0x20
    3ff0:	d1 a2       	std	Z+33, r13	; 0x21
    3ff2:	e2 a2       	std	Z+34, r14	; 0x22
    3ff4:	f3 a2       	std	Z+35, r15	; 0x23

	mainLoopExecutionsCount++;
    3ff6:	80 89       	ldd	r24, Z+16	; 0x10
    3ff8:	91 89       	ldd	r25, Z+17	; 0x11
    3ffa:	a2 89       	ldd	r26, Z+18	; 0x12
    3ffc:	b3 89       	ldd	r27, Z+19	; 0x13
    3ffe:	01 96       	adiw	r24, 0x01	; 1
    4000:	a1 1d       	adc	r26, r1
    4002:	b1 1d       	adc	r27, r1
    4004:	80 8b       	std	Z+16, r24	; 0x10
    4006:	91 8b       	std	Z+17, r25	; 0x11
    4008:	a2 8b       	std	Z+18, r26	; 0x12
    400a:	b3 8b       	std	Z+19, r27	; 0x13

	checkedTasksSum += howManyTasksWereCheckedInThisIteration;
    400c:	84 89       	ldd	r24, Z+20	; 0x14
    400e:	95 89       	ldd	r25, Z+21	; 0x15
    4010:	a6 89       	ldd	r26, Z+22	; 0x16
    4012:	b7 89       	ldd	r27, Z+23	; 0x17
    4014:	84 0d       	add	r24, r4
    4016:	95 1d       	adc	r25, r5
    4018:	a6 1d       	adc	r26, r6
    401a:	b7 1d       	adc	r27, r7
    401c:	84 8b       	std	Z+20, r24	; 0x14
    401e:	95 8b       	std	Z+21, r25	; 0x15
    4020:	a6 8b       	std	Z+22, r26	; 0x16
    4022:	b7 8b       	std	Z+23, r27	; 0x17
	executedTasksSum += howManyTasksWereExecutedInThisIteration;
    4024:	80 8d       	ldd	r24, Z+24	; 0x18
    4026:	91 8d       	ldd	r25, Z+25	; 0x19
    4028:	a2 8d       	ldd	r26, Z+26	; 0x1a
    402a:	b3 8d       	ldd	r27, Z+27	; 0x1b
    402c:	29 81       	ldd	r18, Y+1	; 0x01
    402e:	3a 81       	ldd	r19, Y+2	; 0x02
    4030:	80 0f       	add	r24, r16
    4032:	91 1f       	adc	r25, r17
    4034:	a2 1f       	adc	r26, r18
    4036:	b3 1f       	adc	r27, r19
    4038:	80 8f       	std	Z+24, r24	; 0x18
    403a:	91 8f       	std	Z+25, r25	; 0x19
    403c:	a2 8f       	std	Z+26, r26	; 0x1a
    403e:	b3 8f       	std	Z+27, r27	; 0x1b
	notExecutedTasksSum += howManyTasksWereNotExecutedInThisIteration;
    4040:	84 8d       	ldd	r24, Z+28	; 0x1c
    4042:	95 8d       	ldd	r25, Z+29	; 0x1d
    4044:	a6 8d       	ldd	r26, Z+30	; 0x1e
    4046:	b7 8d       	ldd	r27, Z+31	; 0x1f
    4048:	88 0d       	add	r24, r8
    404a:	99 1d       	adc	r25, r9
    404c:	aa 1d       	adc	r26, r10
    404e:	bb 1d       	adc	r27, r11
    4050:	84 8f       	std	Z+28, r24	; 0x1c
    4052:	95 8f       	std	Z+29, r25	; 0x1d
    4054:	a6 8f       	std	Z+30, r26	; 0x1e
    4056:	b7 8f       	std	Z+31, r27	; 0x1f

	if( millis() - testStartTime > statisticsCreationIntervalInMs )
    4058:	0e 94 52 08 	call	0x10a4	; 0x10a4 <millis>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	f1 01       	movw	r30, r2
    4062:	40 85       	ldd	r20, Z+8	; 0x08
    4064:	51 85       	ldd	r21, Z+9	; 0x09
    4066:	62 85       	ldd	r22, Z+10	; 0x0a
    4068:	73 85       	ldd	r23, Z+11	; 0x0b
    406a:	84 1b       	sub	r24, r20
    406c:	95 0b       	sbc	r25, r21
    406e:	a6 0b       	sbc	r26, r22
    4070:	b7 0b       	sbc	r27, r23
    4072:	44 81       	ldd	r20, Z+4	; 0x04
    4074:	55 81       	ldd	r21, Z+5	; 0x05
    4076:	66 81       	ldd	r22, Z+6	; 0x06
    4078:	77 81       	ldd	r23, Z+7	; 0x07
    407a:	48 17       	cp	r20, r24
    407c:	59 07       	cpc	r21, r25
    407e:	6a 07       	cpc	r22, r26
    4080:	7b 07       	cpc	r23, r27
    4082:	40 f4       	brcc	.+16     	; 0x4094 <_ZN26TaskManagerStatisticsBasic14afterTaskQueueEmmm+0x10a>
	{
		printStatistics( howManyTasksWereCheckedInThisIteration );
    4084:	c1 01       	movw	r24, r2
    4086:	b3 01       	movw	r22, r6
    4088:	a2 01       	movw	r20, r4
    408a:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <_ZN26TaskManagerStatisticsBasic15printStatisticsEm>
		resetStatistics();
    408e:	c1 01       	movw	r24, r2
    4090:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <_ZN26TaskManagerStatisticsBasic15resetStatisticsEv>
	}
}
    4094:	0f 90       	pop	r0
    4096:	0f 90       	pop	r0
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	ff 90       	pop	r15
    40a2:	ef 90       	pop	r14
    40a4:	df 90       	pop	r13
    40a6:	cf 90       	pop	r12
    40a8:	bf 90       	pop	r11
    40aa:	af 90       	pop	r10
    40ac:	9f 90       	pop	r9
    40ae:	8f 90       	pop	r8
    40b0:	7f 90       	pop	r7
    40b2:	6f 90       	pop	r6
    40b4:	5f 90       	pop	r5
    40b6:	4f 90       	pop	r4
    40b8:	3f 90       	pop	r3
    40ba:	2f 90       	pop	r2
    40bc:	08 95       	ret

000040be <_ZN20TaskManagerScheduler10canExecuteEv>:
TaskManagerScheduler::TaskManagerScheduler() {}

bool TaskManagerScheduler::canExecute()
{
	return true;
}
    40be:	81 e0       	ldi	r24, 0x01	; 1
    40c0:	08 95       	ret

000040c2 <_ZN20TaskManagerScheduler24canRemoveFromTaskManagerEv>:

bool TaskManagerScheduler::canRemoveFromTaskManager()
{
	return true;
}
    40c2:	81 e0       	ldi	r24, 0x01	; 1
    40c4:	08 95       	ret

000040c6 <_ZN20TaskManagerSchedulerD1Ev>:

TaskManagerScheduler::~TaskManagerScheduler() {}
    40c6:	2d ea       	ldi	r18, 0xAD	; 173
    40c8:	34 e0       	ldi	r19, 0x04	; 4
    40ca:	fc 01       	movw	r30, r24
    40cc:	31 83       	std	Z+1, r19	; 0x01
    40ce:	20 83       	st	Z, r18
    40d0:	08 95       	ret

000040d2 <_ZN20TaskManagerSchedulerD0Ev>:
    40d2:	2d ea       	ldi	r18, 0xAD	; 173
    40d4:	34 e0       	ldi	r19, 0x04	; 4
    40d6:	fc 01       	movw	r30, r24
    40d8:	31 83       	std	Z+1, r19	; 0x01
    40da:	20 83       	st	Z, r18
    40dc:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    40e0:	08 95       	ret

000040e2 <_ZN20TaskManagerSchedulerC1Ev>:
 *      Author: root
 */

#include "TaskManagerScheduler.h"

TaskManagerScheduler::TaskManagerScheduler() {}
    40e2:	2d ea       	ldi	r18, 0xAD	; 173
    40e4:	34 e0       	ldi	r19, 0x04	; 4
    40e6:	fc 01       	movw	r30, r24
    40e8:	31 83       	std	Z+1, r19	; 0x01
    40ea:	20 83       	st	Z, r18
    40ec:	08 95       	ret

000040ee <_ZN21TaskManagerStatistics15beforeTaskQueueEv>:

TaskManagerStatistics::TaskManagerStatistics() {}

void TaskManagerStatistics::beforeTaskQueue()
{
}
    40ee:	08 95       	ret

000040f0 <_ZN21TaskManagerStatistics14afterTaskQueueEmmm>:

void TaskManagerStatistics::afterTaskQueue( unsigned long howManyTasksWereCheckedInThisIteration , unsigned long howManyTasksWereExecutedInThisIteration , unsigned long howManyTasksWereNotExecutedInThisIteration )
{
}
    40f0:	08 95       	ret

000040f2 <_ZN21TaskManagerStatisticsD1Ev>:

TaskManagerStatistics::~TaskManagerStatistics() {}
    40f2:	29 eb       	ldi	r18, 0xB9	; 185
    40f4:	34 e0       	ldi	r19, 0x04	; 4
    40f6:	fc 01       	movw	r30, r24
    40f8:	31 83       	std	Z+1, r19	; 0x01
    40fa:	20 83       	st	Z, r18
    40fc:	08 95       	ret

000040fe <_ZN21TaskManagerStatisticsD0Ev>:
    40fe:	29 eb       	ldi	r18, 0xB9	; 185
    4100:	34 e0       	ldi	r19, 0x04	; 4
    4102:	fc 01       	movw	r30, r24
    4104:	31 83       	std	Z+1, r19	; 0x01
    4106:	20 83       	st	Z, r18
    4108:	0e 94 05 08 	call	0x100a	; 0x100a <_ZdlPv>
    410c:	08 95       	ret

0000410e <_ZN21TaskManagerStatisticsC1Ev>:
 *      Author: root
 */

#include "TaskManagerStatistics.h"

TaskManagerStatistics::TaskManagerStatistics() {}
    410e:	29 eb       	ldi	r18, 0xB9	; 185
    4110:	34 e0       	ldi	r19, 0x04	; 4
    4112:	fc 01       	movw	r30, r24
    4114:	31 83       	std	Z+1, r19	; 0x01
    4116:	20 83       	st	Z, r18
    4118:	08 95       	ret

0000411a <__subsf3>:
    411a:	50 58       	subi	r21, 0x80	; 128

0000411c <__addsf3>:
    411c:	bb 27       	eor	r27, r27
    411e:	aa 27       	eor	r26, r26
    4120:	0e d0       	rcall	.+28     	; 0x413e <__addsf3x>
    4122:	75 c1       	rjmp	.+746    	; 0x440e <__fp_round>
    4124:	66 d1       	rcall	.+716    	; 0x43f2 <__fp_pscA>
    4126:	30 f0       	brcs	.+12     	; 0x4134 <__addsf3+0x18>
    4128:	6b d1       	rcall	.+726    	; 0x4400 <__fp_pscB>
    412a:	20 f0       	brcs	.+8      	; 0x4134 <__addsf3+0x18>
    412c:	31 f4       	brne	.+12     	; 0x413a <__addsf3+0x1e>
    412e:	9f 3f       	cpi	r25, 0xFF	; 255
    4130:	11 f4       	brne	.+4      	; 0x4136 <__addsf3+0x1a>
    4132:	1e f4       	brtc	.+6      	; 0x413a <__addsf3+0x1e>
    4134:	5b c1       	rjmp	.+694    	; 0x43ec <__fp_nan>
    4136:	0e f4       	brtc	.+2      	; 0x413a <__addsf3+0x1e>
    4138:	e0 95       	com	r30
    413a:	e7 fb       	bst	r30, 7
    413c:	51 c1       	rjmp	.+674    	; 0x43e0 <__fp_inf>

0000413e <__addsf3x>:
    413e:	e9 2f       	mov	r30, r25
    4140:	77 d1       	rcall	.+750    	; 0x4430 <__fp_split3>
    4142:	80 f3       	brcs	.-32     	; 0x4124 <__addsf3+0x8>
    4144:	ba 17       	cp	r27, r26
    4146:	62 07       	cpc	r22, r18
    4148:	73 07       	cpc	r23, r19
    414a:	84 07       	cpc	r24, r20
    414c:	95 07       	cpc	r25, r21
    414e:	18 f0       	brcs	.+6      	; 0x4156 <__addsf3x+0x18>
    4150:	71 f4       	brne	.+28     	; 0x416e <__addsf3x+0x30>
    4152:	9e f5       	brtc	.+102    	; 0x41ba <__addsf3x+0x7c>
    4154:	8f c1       	rjmp	.+798    	; 0x4474 <__fp_zero>
    4156:	0e f4       	brtc	.+2      	; 0x415a <__addsf3x+0x1c>
    4158:	e0 95       	com	r30
    415a:	0b 2e       	mov	r0, r27
    415c:	ba 2f       	mov	r27, r26
    415e:	a0 2d       	mov	r26, r0
    4160:	0b 01       	movw	r0, r22
    4162:	b9 01       	movw	r22, r18
    4164:	90 01       	movw	r18, r0
    4166:	0c 01       	movw	r0, r24
    4168:	ca 01       	movw	r24, r20
    416a:	a0 01       	movw	r20, r0
    416c:	11 24       	eor	r1, r1
    416e:	ff 27       	eor	r31, r31
    4170:	59 1b       	sub	r21, r25
    4172:	99 f0       	breq	.+38     	; 0x419a <__addsf3x+0x5c>
    4174:	59 3f       	cpi	r21, 0xF9	; 249
    4176:	50 f4       	brcc	.+20     	; 0x418c <__addsf3x+0x4e>
    4178:	50 3e       	cpi	r21, 0xE0	; 224
    417a:	68 f1       	brcs	.+90     	; 0x41d6 <__addsf3x+0x98>
    417c:	1a 16       	cp	r1, r26
    417e:	f0 40       	sbci	r31, 0x00	; 0
    4180:	a2 2f       	mov	r26, r18
    4182:	23 2f       	mov	r18, r19
    4184:	34 2f       	mov	r19, r20
    4186:	44 27       	eor	r20, r20
    4188:	58 5f       	subi	r21, 0xF8	; 248
    418a:	f3 cf       	rjmp	.-26     	; 0x4172 <__addsf3x+0x34>
    418c:	46 95       	lsr	r20
    418e:	37 95       	ror	r19
    4190:	27 95       	ror	r18
    4192:	a7 95       	ror	r26
    4194:	f0 40       	sbci	r31, 0x00	; 0
    4196:	53 95       	inc	r21
    4198:	c9 f7       	brne	.-14     	; 0x418c <__addsf3x+0x4e>
    419a:	7e f4       	brtc	.+30     	; 0x41ba <__addsf3x+0x7c>
    419c:	1f 16       	cp	r1, r31
    419e:	ba 0b       	sbc	r27, r26
    41a0:	62 0b       	sbc	r22, r18
    41a2:	73 0b       	sbc	r23, r19
    41a4:	84 0b       	sbc	r24, r20
    41a6:	ba f0       	brmi	.+46     	; 0x41d6 <__addsf3x+0x98>
    41a8:	91 50       	subi	r25, 0x01	; 1
    41aa:	a1 f0       	breq	.+40     	; 0x41d4 <__addsf3x+0x96>
    41ac:	ff 0f       	add	r31, r31
    41ae:	bb 1f       	adc	r27, r27
    41b0:	66 1f       	adc	r22, r22
    41b2:	77 1f       	adc	r23, r23
    41b4:	88 1f       	adc	r24, r24
    41b6:	c2 f7       	brpl	.-16     	; 0x41a8 <__addsf3x+0x6a>
    41b8:	0e c0       	rjmp	.+28     	; 0x41d6 <__addsf3x+0x98>
    41ba:	ba 0f       	add	r27, r26
    41bc:	62 1f       	adc	r22, r18
    41be:	73 1f       	adc	r23, r19
    41c0:	84 1f       	adc	r24, r20
    41c2:	48 f4       	brcc	.+18     	; 0x41d6 <__addsf3x+0x98>
    41c4:	87 95       	ror	r24
    41c6:	77 95       	ror	r23
    41c8:	67 95       	ror	r22
    41ca:	b7 95       	ror	r27
    41cc:	f7 95       	ror	r31
    41ce:	9e 3f       	cpi	r25, 0xFE	; 254
    41d0:	08 f0       	brcs	.+2      	; 0x41d4 <__addsf3x+0x96>
    41d2:	b3 cf       	rjmp	.-154    	; 0x413a <__addsf3+0x1e>
    41d4:	93 95       	inc	r25
    41d6:	88 0f       	add	r24, r24
    41d8:	08 f0       	brcs	.+2      	; 0x41dc <__addsf3x+0x9e>
    41da:	99 27       	eor	r25, r25
    41dc:	ee 0f       	add	r30, r30
    41de:	97 95       	ror	r25
    41e0:	87 95       	ror	r24
    41e2:	08 95       	ret

000041e4 <__cmpsf2>:
    41e4:	d9 d0       	rcall	.+434    	; 0x4398 <__fp_cmp>
    41e6:	08 f4       	brcc	.+2      	; 0x41ea <__cmpsf2+0x6>
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	08 95       	ret

000041ec <__divsf3>:
    41ec:	0c d0       	rcall	.+24     	; 0x4206 <__divsf3x>
    41ee:	0f c1       	rjmp	.+542    	; 0x440e <__fp_round>
    41f0:	07 d1       	rcall	.+526    	; 0x4400 <__fp_pscB>
    41f2:	40 f0       	brcs	.+16     	; 0x4204 <__divsf3+0x18>
    41f4:	fe d0       	rcall	.+508    	; 0x43f2 <__fp_pscA>
    41f6:	30 f0       	brcs	.+12     	; 0x4204 <__divsf3+0x18>
    41f8:	21 f4       	brne	.+8      	; 0x4202 <__divsf3+0x16>
    41fa:	5f 3f       	cpi	r21, 0xFF	; 255
    41fc:	19 f0       	breq	.+6      	; 0x4204 <__divsf3+0x18>
    41fe:	f0 c0       	rjmp	.+480    	; 0x43e0 <__fp_inf>
    4200:	51 11       	cpse	r21, r1
    4202:	39 c1       	rjmp	.+626    	; 0x4476 <__fp_szero>
    4204:	f3 c0       	rjmp	.+486    	; 0x43ec <__fp_nan>

00004206 <__divsf3x>:
    4206:	14 d1       	rcall	.+552    	; 0x4430 <__fp_split3>
    4208:	98 f3       	brcs	.-26     	; 0x41f0 <__divsf3+0x4>

0000420a <__divsf3_pse>:
    420a:	99 23       	and	r25, r25
    420c:	c9 f3       	breq	.-14     	; 0x4200 <__divsf3+0x14>
    420e:	55 23       	and	r21, r21
    4210:	b1 f3       	breq	.-20     	; 0x41fe <__divsf3+0x12>
    4212:	95 1b       	sub	r25, r21
    4214:	55 0b       	sbc	r21, r21
    4216:	bb 27       	eor	r27, r27
    4218:	aa 27       	eor	r26, r26
    421a:	62 17       	cp	r22, r18
    421c:	73 07       	cpc	r23, r19
    421e:	84 07       	cpc	r24, r20
    4220:	38 f0       	brcs	.+14     	; 0x4230 <__divsf3_pse+0x26>
    4222:	9f 5f       	subi	r25, 0xFF	; 255
    4224:	5f 4f       	sbci	r21, 0xFF	; 255
    4226:	22 0f       	add	r18, r18
    4228:	33 1f       	adc	r19, r19
    422a:	44 1f       	adc	r20, r20
    422c:	aa 1f       	adc	r26, r26
    422e:	a9 f3       	breq	.-22     	; 0x421a <__divsf3_pse+0x10>
    4230:	33 d0       	rcall	.+102    	; 0x4298 <__divsf3_pse+0x8e>
    4232:	0e 2e       	mov	r0, r30
    4234:	3a f0       	brmi	.+14     	; 0x4244 <__divsf3_pse+0x3a>
    4236:	e0 e8       	ldi	r30, 0x80	; 128
    4238:	30 d0       	rcall	.+96     	; 0x429a <__divsf3_pse+0x90>
    423a:	91 50       	subi	r25, 0x01	; 1
    423c:	50 40       	sbci	r21, 0x00	; 0
    423e:	e6 95       	lsr	r30
    4240:	00 1c       	adc	r0, r0
    4242:	ca f7       	brpl	.-14     	; 0x4236 <__divsf3_pse+0x2c>
    4244:	29 d0       	rcall	.+82     	; 0x4298 <__divsf3_pse+0x8e>
    4246:	fe 2f       	mov	r31, r30
    4248:	27 d0       	rcall	.+78     	; 0x4298 <__divsf3_pse+0x8e>
    424a:	66 0f       	add	r22, r22
    424c:	77 1f       	adc	r23, r23
    424e:	88 1f       	adc	r24, r24
    4250:	bb 1f       	adc	r27, r27
    4252:	26 17       	cp	r18, r22
    4254:	37 07       	cpc	r19, r23
    4256:	48 07       	cpc	r20, r24
    4258:	ab 07       	cpc	r26, r27
    425a:	b0 e8       	ldi	r27, 0x80	; 128
    425c:	09 f0       	breq	.+2      	; 0x4260 <__divsf3_pse+0x56>
    425e:	bb 0b       	sbc	r27, r27
    4260:	80 2d       	mov	r24, r0
    4262:	bf 01       	movw	r22, r30
    4264:	ff 27       	eor	r31, r31
    4266:	93 58       	subi	r25, 0x83	; 131
    4268:	5f 4f       	sbci	r21, 0xFF	; 255
    426a:	2a f0       	brmi	.+10     	; 0x4276 <__divsf3_pse+0x6c>
    426c:	9e 3f       	cpi	r25, 0xFE	; 254
    426e:	51 05       	cpc	r21, r1
    4270:	68 f0       	brcs	.+26     	; 0x428c <__divsf3_pse+0x82>
    4272:	b6 c0       	rjmp	.+364    	; 0x43e0 <__fp_inf>
    4274:	00 c1       	rjmp	.+512    	; 0x4476 <__fp_szero>
    4276:	5f 3f       	cpi	r21, 0xFF	; 255
    4278:	ec f3       	brlt	.-6      	; 0x4274 <__divsf3_pse+0x6a>
    427a:	98 3e       	cpi	r25, 0xE8	; 232
    427c:	dc f3       	brlt	.-10     	; 0x4274 <__divsf3_pse+0x6a>
    427e:	86 95       	lsr	r24
    4280:	77 95       	ror	r23
    4282:	67 95       	ror	r22
    4284:	b7 95       	ror	r27
    4286:	f7 95       	ror	r31
    4288:	9f 5f       	subi	r25, 0xFF	; 255
    428a:	c9 f7       	brne	.-14     	; 0x427e <__divsf3_pse+0x74>
    428c:	88 0f       	add	r24, r24
    428e:	91 1d       	adc	r25, r1
    4290:	96 95       	lsr	r25
    4292:	87 95       	ror	r24
    4294:	97 f9       	bld	r25, 7
    4296:	08 95       	ret
    4298:	e1 e0       	ldi	r30, 0x01	; 1
    429a:	66 0f       	add	r22, r22
    429c:	77 1f       	adc	r23, r23
    429e:	88 1f       	adc	r24, r24
    42a0:	bb 1f       	adc	r27, r27
    42a2:	62 17       	cp	r22, r18
    42a4:	73 07       	cpc	r23, r19
    42a6:	84 07       	cpc	r24, r20
    42a8:	ba 07       	cpc	r27, r26
    42aa:	20 f0       	brcs	.+8      	; 0x42b4 <__divsf3_pse+0xaa>
    42ac:	62 1b       	sub	r22, r18
    42ae:	73 0b       	sbc	r23, r19
    42b0:	84 0b       	sbc	r24, r20
    42b2:	ba 0b       	sbc	r27, r26
    42b4:	ee 1f       	adc	r30, r30
    42b6:	88 f7       	brcc	.-30     	; 0x429a <__divsf3_pse+0x90>
    42b8:	e0 95       	com	r30
    42ba:	08 95       	ret

000042bc <__fixsfsi>:
    42bc:	04 d0       	rcall	.+8      	; 0x42c6 <__fixunssfsi>
    42be:	68 94       	set
    42c0:	b1 11       	cpse	r27, r1
    42c2:	d9 c0       	rjmp	.+434    	; 0x4476 <__fp_szero>
    42c4:	08 95       	ret

000042c6 <__fixunssfsi>:
    42c6:	bc d0       	rcall	.+376    	; 0x4440 <__fp_splitA>
    42c8:	88 f0       	brcs	.+34     	; 0x42ec <__fixunssfsi+0x26>
    42ca:	9f 57       	subi	r25, 0x7F	; 127
    42cc:	90 f0       	brcs	.+36     	; 0x42f2 <__fixunssfsi+0x2c>
    42ce:	b9 2f       	mov	r27, r25
    42d0:	99 27       	eor	r25, r25
    42d2:	b7 51       	subi	r27, 0x17	; 23
    42d4:	a0 f0       	brcs	.+40     	; 0x42fe <__fixunssfsi+0x38>
    42d6:	d1 f0       	breq	.+52     	; 0x430c <__fixunssfsi+0x46>
    42d8:	66 0f       	add	r22, r22
    42da:	77 1f       	adc	r23, r23
    42dc:	88 1f       	adc	r24, r24
    42de:	99 1f       	adc	r25, r25
    42e0:	1a f0       	brmi	.+6      	; 0x42e8 <__fixunssfsi+0x22>
    42e2:	ba 95       	dec	r27
    42e4:	c9 f7       	brne	.-14     	; 0x42d8 <__fixunssfsi+0x12>
    42e6:	12 c0       	rjmp	.+36     	; 0x430c <__fixunssfsi+0x46>
    42e8:	b1 30       	cpi	r27, 0x01	; 1
    42ea:	81 f0       	breq	.+32     	; 0x430c <__fixunssfsi+0x46>
    42ec:	c3 d0       	rcall	.+390    	; 0x4474 <__fp_zero>
    42ee:	b1 e0       	ldi	r27, 0x01	; 1
    42f0:	08 95       	ret
    42f2:	c0 c0       	rjmp	.+384    	; 0x4474 <__fp_zero>
    42f4:	67 2f       	mov	r22, r23
    42f6:	78 2f       	mov	r23, r24
    42f8:	88 27       	eor	r24, r24
    42fa:	b8 5f       	subi	r27, 0xF8	; 248
    42fc:	39 f0       	breq	.+14     	; 0x430c <__fixunssfsi+0x46>
    42fe:	b9 3f       	cpi	r27, 0xF9	; 249
    4300:	cc f3       	brlt	.-14     	; 0x42f4 <__fixunssfsi+0x2e>
    4302:	86 95       	lsr	r24
    4304:	77 95       	ror	r23
    4306:	67 95       	ror	r22
    4308:	b3 95       	inc	r27
    430a:	d9 f7       	brne	.-10     	; 0x4302 <__fixunssfsi+0x3c>
    430c:	3e f4       	brtc	.+14     	; 0x431c <__fixunssfsi+0x56>
    430e:	90 95       	com	r25
    4310:	80 95       	com	r24
    4312:	70 95       	com	r23
    4314:	61 95       	neg	r22
    4316:	7f 4f       	sbci	r23, 0xFF	; 255
    4318:	8f 4f       	sbci	r24, 0xFF	; 255
    431a:	9f 4f       	sbci	r25, 0xFF	; 255
    431c:	08 95       	ret

0000431e <__floatunsisf>:
    431e:	e8 94       	clt
    4320:	09 c0       	rjmp	.+18     	; 0x4334 <__floatsisf+0x12>

00004322 <__floatsisf>:
    4322:	97 fb       	bst	r25, 7
    4324:	3e f4       	brtc	.+14     	; 0x4334 <__floatsisf+0x12>
    4326:	90 95       	com	r25
    4328:	80 95       	com	r24
    432a:	70 95       	com	r23
    432c:	61 95       	neg	r22
    432e:	7f 4f       	sbci	r23, 0xFF	; 255
    4330:	8f 4f       	sbci	r24, 0xFF	; 255
    4332:	9f 4f       	sbci	r25, 0xFF	; 255
    4334:	99 23       	and	r25, r25
    4336:	a9 f0       	breq	.+42     	; 0x4362 <__floatsisf+0x40>
    4338:	f9 2f       	mov	r31, r25
    433a:	96 e9       	ldi	r25, 0x96	; 150
    433c:	bb 27       	eor	r27, r27
    433e:	93 95       	inc	r25
    4340:	f6 95       	lsr	r31
    4342:	87 95       	ror	r24
    4344:	77 95       	ror	r23
    4346:	67 95       	ror	r22
    4348:	b7 95       	ror	r27
    434a:	f1 11       	cpse	r31, r1
    434c:	f8 cf       	rjmp	.-16     	; 0x433e <__floatsisf+0x1c>
    434e:	fa f4       	brpl	.+62     	; 0x438e <__floatsisf+0x6c>
    4350:	bb 0f       	add	r27, r27
    4352:	11 f4       	brne	.+4      	; 0x4358 <__floatsisf+0x36>
    4354:	60 ff       	sbrs	r22, 0
    4356:	1b c0       	rjmp	.+54     	; 0x438e <__floatsisf+0x6c>
    4358:	6f 5f       	subi	r22, 0xFF	; 255
    435a:	7f 4f       	sbci	r23, 0xFF	; 255
    435c:	8f 4f       	sbci	r24, 0xFF	; 255
    435e:	9f 4f       	sbci	r25, 0xFF	; 255
    4360:	16 c0       	rjmp	.+44     	; 0x438e <__floatsisf+0x6c>
    4362:	88 23       	and	r24, r24
    4364:	11 f0       	breq	.+4      	; 0x436a <__floatsisf+0x48>
    4366:	96 e9       	ldi	r25, 0x96	; 150
    4368:	11 c0       	rjmp	.+34     	; 0x438c <__floatsisf+0x6a>
    436a:	77 23       	and	r23, r23
    436c:	21 f0       	breq	.+8      	; 0x4376 <__floatsisf+0x54>
    436e:	9e e8       	ldi	r25, 0x8E	; 142
    4370:	87 2f       	mov	r24, r23
    4372:	76 2f       	mov	r23, r22
    4374:	05 c0       	rjmp	.+10     	; 0x4380 <__floatsisf+0x5e>
    4376:	66 23       	and	r22, r22
    4378:	71 f0       	breq	.+28     	; 0x4396 <__floatsisf+0x74>
    437a:	96 e8       	ldi	r25, 0x86	; 134
    437c:	86 2f       	mov	r24, r22
    437e:	70 e0       	ldi	r23, 0x00	; 0
    4380:	60 e0       	ldi	r22, 0x00	; 0
    4382:	2a f0       	brmi	.+10     	; 0x438e <__floatsisf+0x6c>
    4384:	9a 95       	dec	r25
    4386:	66 0f       	add	r22, r22
    4388:	77 1f       	adc	r23, r23
    438a:	88 1f       	adc	r24, r24
    438c:	da f7       	brpl	.-10     	; 0x4384 <__floatsisf+0x62>
    438e:	88 0f       	add	r24, r24
    4390:	96 95       	lsr	r25
    4392:	87 95       	ror	r24
    4394:	97 f9       	bld	r25, 7
    4396:	08 95       	ret

00004398 <__fp_cmp>:
    4398:	99 0f       	add	r25, r25
    439a:	00 08       	sbc	r0, r0
    439c:	55 0f       	add	r21, r21
    439e:	aa 0b       	sbc	r26, r26
    43a0:	e0 e8       	ldi	r30, 0x80	; 128
    43a2:	fe ef       	ldi	r31, 0xFE	; 254
    43a4:	16 16       	cp	r1, r22
    43a6:	17 06       	cpc	r1, r23
    43a8:	e8 07       	cpc	r30, r24
    43aa:	f9 07       	cpc	r31, r25
    43ac:	c0 f0       	brcs	.+48     	; 0x43de <__fp_cmp+0x46>
    43ae:	12 16       	cp	r1, r18
    43b0:	13 06       	cpc	r1, r19
    43b2:	e4 07       	cpc	r30, r20
    43b4:	f5 07       	cpc	r31, r21
    43b6:	98 f0       	brcs	.+38     	; 0x43de <__fp_cmp+0x46>
    43b8:	62 1b       	sub	r22, r18
    43ba:	73 0b       	sbc	r23, r19
    43bc:	84 0b       	sbc	r24, r20
    43be:	95 0b       	sbc	r25, r21
    43c0:	39 f4       	brne	.+14     	; 0x43d0 <__fp_cmp+0x38>
    43c2:	0a 26       	eor	r0, r26
    43c4:	61 f0       	breq	.+24     	; 0x43de <__fp_cmp+0x46>
    43c6:	23 2b       	or	r18, r19
    43c8:	24 2b       	or	r18, r20
    43ca:	25 2b       	or	r18, r21
    43cc:	21 f4       	brne	.+8      	; 0x43d6 <__fp_cmp+0x3e>
    43ce:	08 95       	ret
    43d0:	0a 26       	eor	r0, r26
    43d2:	09 f4       	brne	.+2      	; 0x43d6 <__fp_cmp+0x3e>
    43d4:	a1 40       	sbci	r26, 0x01	; 1
    43d6:	a6 95       	lsr	r26
    43d8:	8f ef       	ldi	r24, 0xFF	; 255
    43da:	81 1d       	adc	r24, r1
    43dc:	81 1d       	adc	r24, r1
    43de:	08 95       	ret

000043e0 <__fp_inf>:
    43e0:	97 f9       	bld	r25, 7
    43e2:	9f 67       	ori	r25, 0x7F	; 127
    43e4:	80 e8       	ldi	r24, 0x80	; 128
    43e6:	70 e0       	ldi	r23, 0x00	; 0
    43e8:	60 e0       	ldi	r22, 0x00	; 0
    43ea:	08 95       	ret

000043ec <__fp_nan>:
    43ec:	9f ef       	ldi	r25, 0xFF	; 255
    43ee:	80 ec       	ldi	r24, 0xC0	; 192
    43f0:	08 95       	ret

000043f2 <__fp_pscA>:
    43f2:	00 24       	eor	r0, r0
    43f4:	0a 94       	dec	r0
    43f6:	16 16       	cp	r1, r22
    43f8:	17 06       	cpc	r1, r23
    43fa:	18 06       	cpc	r1, r24
    43fc:	09 06       	cpc	r0, r25
    43fe:	08 95       	ret

00004400 <__fp_pscB>:
    4400:	00 24       	eor	r0, r0
    4402:	0a 94       	dec	r0
    4404:	12 16       	cp	r1, r18
    4406:	13 06       	cpc	r1, r19
    4408:	14 06       	cpc	r1, r20
    440a:	05 06       	cpc	r0, r21
    440c:	08 95       	ret

0000440e <__fp_round>:
    440e:	09 2e       	mov	r0, r25
    4410:	03 94       	inc	r0
    4412:	00 0c       	add	r0, r0
    4414:	11 f4       	brne	.+4      	; 0x441a <__fp_round+0xc>
    4416:	88 23       	and	r24, r24
    4418:	52 f0       	brmi	.+20     	; 0x442e <__fp_round+0x20>
    441a:	bb 0f       	add	r27, r27
    441c:	40 f4       	brcc	.+16     	; 0x442e <__fp_round+0x20>
    441e:	bf 2b       	or	r27, r31
    4420:	11 f4       	brne	.+4      	; 0x4426 <__fp_round+0x18>
    4422:	60 ff       	sbrs	r22, 0
    4424:	04 c0       	rjmp	.+8      	; 0x442e <__fp_round+0x20>
    4426:	6f 5f       	subi	r22, 0xFF	; 255
    4428:	7f 4f       	sbci	r23, 0xFF	; 255
    442a:	8f 4f       	sbci	r24, 0xFF	; 255
    442c:	9f 4f       	sbci	r25, 0xFF	; 255
    442e:	08 95       	ret

00004430 <__fp_split3>:
    4430:	57 fd       	sbrc	r21, 7
    4432:	90 58       	subi	r25, 0x80	; 128
    4434:	44 0f       	add	r20, r20
    4436:	55 1f       	adc	r21, r21
    4438:	59 f0       	breq	.+22     	; 0x4450 <__fp_splitA+0x10>
    443a:	5f 3f       	cpi	r21, 0xFF	; 255
    443c:	71 f0       	breq	.+28     	; 0x445a <__fp_splitA+0x1a>
    443e:	47 95       	ror	r20

00004440 <__fp_splitA>:
    4440:	88 0f       	add	r24, r24
    4442:	97 fb       	bst	r25, 7
    4444:	99 1f       	adc	r25, r25
    4446:	61 f0       	breq	.+24     	; 0x4460 <__fp_splitA+0x20>
    4448:	9f 3f       	cpi	r25, 0xFF	; 255
    444a:	79 f0       	breq	.+30     	; 0x446a <__fp_splitA+0x2a>
    444c:	87 95       	ror	r24
    444e:	08 95       	ret
    4450:	12 16       	cp	r1, r18
    4452:	13 06       	cpc	r1, r19
    4454:	14 06       	cpc	r1, r20
    4456:	55 1f       	adc	r21, r21
    4458:	f2 cf       	rjmp	.-28     	; 0x443e <__fp_split3+0xe>
    445a:	46 95       	lsr	r20
    445c:	f1 df       	rcall	.-30     	; 0x4440 <__fp_splitA>
    445e:	08 c0       	rjmp	.+16     	; 0x4470 <__fp_splitA+0x30>
    4460:	16 16       	cp	r1, r22
    4462:	17 06       	cpc	r1, r23
    4464:	18 06       	cpc	r1, r24
    4466:	99 1f       	adc	r25, r25
    4468:	f1 cf       	rjmp	.-30     	; 0x444c <__fp_splitA+0xc>
    446a:	86 95       	lsr	r24
    446c:	71 05       	cpc	r23, r1
    446e:	61 05       	cpc	r22, r1
    4470:	08 94       	sec
    4472:	08 95       	ret

00004474 <__fp_zero>:
    4474:	e8 94       	clt

00004476 <__fp_szero>:
    4476:	bb 27       	eor	r27, r27
    4478:	66 27       	eor	r22, r22
    447a:	77 27       	eor	r23, r23
    447c:	cb 01       	movw	r24, r22
    447e:	97 f9       	bld	r25, 7
    4480:	08 95       	ret

00004482 <__mulsf3>:
    4482:	0b d0       	rcall	.+22     	; 0x449a <__mulsf3x>
    4484:	c4 cf       	rjmp	.-120    	; 0x440e <__fp_round>
    4486:	b5 df       	rcall	.-150    	; 0x43f2 <__fp_pscA>
    4488:	28 f0       	brcs	.+10     	; 0x4494 <__mulsf3+0x12>
    448a:	ba df       	rcall	.-140    	; 0x4400 <__fp_pscB>
    448c:	18 f0       	brcs	.+6      	; 0x4494 <__mulsf3+0x12>
    448e:	95 23       	and	r25, r21
    4490:	09 f0       	breq	.+2      	; 0x4494 <__mulsf3+0x12>
    4492:	a6 cf       	rjmp	.-180    	; 0x43e0 <__fp_inf>
    4494:	ab cf       	rjmp	.-170    	; 0x43ec <__fp_nan>
    4496:	11 24       	eor	r1, r1
    4498:	ee cf       	rjmp	.-36     	; 0x4476 <__fp_szero>

0000449a <__mulsf3x>:
    449a:	ca df       	rcall	.-108    	; 0x4430 <__fp_split3>
    449c:	a0 f3       	brcs	.-24     	; 0x4486 <__mulsf3+0x4>

0000449e <__mulsf3_pse>:
    449e:	95 9f       	mul	r25, r21
    44a0:	d1 f3       	breq	.-12     	; 0x4496 <__mulsf3+0x14>
    44a2:	95 0f       	add	r25, r21
    44a4:	50 e0       	ldi	r21, 0x00	; 0
    44a6:	55 1f       	adc	r21, r21
    44a8:	62 9f       	mul	r22, r18
    44aa:	f0 01       	movw	r30, r0
    44ac:	72 9f       	mul	r23, r18
    44ae:	bb 27       	eor	r27, r27
    44b0:	f0 0d       	add	r31, r0
    44b2:	b1 1d       	adc	r27, r1
    44b4:	63 9f       	mul	r22, r19
    44b6:	aa 27       	eor	r26, r26
    44b8:	f0 0d       	add	r31, r0
    44ba:	b1 1d       	adc	r27, r1
    44bc:	aa 1f       	adc	r26, r26
    44be:	64 9f       	mul	r22, r20
    44c0:	66 27       	eor	r22, r22
    44c2:	b0 0d       	add	r27, r0
    44c4:	a1 1d       	adc	r26, r1
    44c6:	66 1f       	adc	r22, r22
    44c8:	82 9f       	mul	r24, r18
    44ca:	22 27       	eor	r18, r18
    44cc:	b0 0d       	add	r27, r0
    44ce:	a1 1d       	adc	r26, r1
    44d0:	62 1f       	adc	r22, r18
    44d2:	73 9f       	mul	r23, r19
    44d4:	b0 0d       	add	r27, r0
    44d6:	a1 1d       	adc	r26, r1
    44d8:	62 1f       	adc	r22, r18
    44da:	83 9f       	mul	r24, r19
    44dc:	a0 0d       	add	r26, r0
    44de:	61 1d       	adc	r22, r1
    44e0:	22 1f       	adc	r18, r18
    44e2:	74 9f       	mul	r23, r20
    44e4:	33 27       	eor	r19, r19
    44e6:	a0 0d       	add	r26, r0
    44e8:	61 1d       	adc	r22, r1
    44ea:	23 1f       	adc	r18, r19
    44ec:	84 9f       	mul	r24, r20
    44ee:	60 0d       	add	r22, r0
    44f0:	21 1d       	adc	r18, r1
    44f2:	82 2f       	mov	r24, r18
    44f4:	76 2f       	mov	r23, r22
    44f6:	6a 2f       	mov	r22, r26
    44f8:	11 24       	eor	r1, r1
    44fa:	9f 57       	subi	r25, 0x7F	; 127
    44fc:	50 40       	sbci	r21, 0x00	; 0
    44fe:	8a f0       	brmi	.+34     	; 0x4522 <__mulsf3_pse+0x84>
    4500:	e1 f0       	breq	.+56     	; 0x453a <__mulsf3_pse+0x9c>
    4502:	88 23       	and	r24, r24
    4504:	4a f0       	brmi	.+18     	; 0x4518 <__mulsf3_pse+0x7a>
    4506:	ee 0f       	add	r30, r30
    4508:	ff 1f       	adc	r31, r31
    450a:	bb 1f       	adc	r27, r27
    450c:	66 1f       	adc	r22, r22
    450e:	77 1f       	adc	r23, r23
    4510:	88 1f       	adc	r24, r24
    4512:	91 50       	subi	r25, 0x01	; 1
    4514:	50 40       	sbci	r21, 0x00	; 0
    4516:	a9 f7       	brne	.-22     	; 0x4502 <__mulsf3_pse+0x64>
    4518:	9e 3f       	cpi	r25, 0xFE	; 254
    451a:	51 05       	cpc	r21, r1
    451c:	70 f0       	brcs	.+28     	; 0x453a <__mulsf3_pse+0x9c>
    451e:	60 cf       	rjmp	.-320    	; 0x43e0 <__fp_inf>
    4520:	aa cf       	rjmp	.-172    	; 0x4476 <__fp_szero>
    4522:	5f 3f       	cpi	r21, 0xFF	; 255
    4524:	ec f3       	brlt	.-6      	; 0x4520 <__mulsf3_pse+0x82>
    4526:	98 3e       	cpi	r25, 0xE8	; 232
    4528:	dc f3       	brlt	.-10     	; 0x4520 <__mulsf3_pse+0x82>
    452a:	86 95       	lsr	r24
    452c:	77 95       	ror	r23
    452e:	67 95       	ror	r22
    4530:	b7 95       	ror	r27
    4532:	f7 95       	ror	r31
    4534:	e7 95       	ror	r30
    4536:	9f 5f       	subi	r25, 0xFF	; 255
    4538:	c1 f7       	brne	.-16     	; 0x452a <__mulsf3_pse+0x8c>
    453a:	fe 2b       	or	r31, r30
    453c:	88 0f       	add	r24, r24
    453e:	91 1d       	adc	r25, r1
    4540:	96 95       	lsr	r25
    4542:	87 95       	ror	r24
    4544:	97 f9       	bld	r25, 7
    4546:	08 95       	ret

00004548 <__mulsi3>:
    4548:	62 9f       	mul	r22, r18
    454a:	d0 01       	movw	r26, r0
    454c:	73 9f       	mul	r23, r19
    454e:	f0 01       	movw	r30, r0
    4550:	82 9f       	mul	r24, r18
    4552:	e0 0d       	add	r30, r0
    4554:	f1 1d       	adc	r31, r1
    4556:	64 9f       	mul	r22, r20
    4558:	e0 0d       	add	r30, r0
    455a:	f1 1d       	adc	r31, r1
    455c:	92 9f       	mul	r25, r18
    455e:	f0 0d       	add	r31, r0
    4560:	83 9f       	mul	r24, r19
    4562:	f0 0d       	add	r31, r0
    4564:	74 9f       	mul	r23, r20
    4566:	f0 0d       	add	r31, r0
    4568:	65 9f       	mul	r22, r21
    456a:	f0 0d       	add	r31, r0
    456c:	99 27       	eor	r25, r25
    456e:	72 9f       	mul	r23, r18
    4570:	b0 0d       	add	r27, r0
    4572:	e1 1d       	adc	r30, r1
    4574:	f9 1f       	adc	r31, r25
    4576:	63 9f       	mul	r22, r19
    4578:	b0 0d       	add	r27, r0
    457a:	e1 1d       	adc	r30, r1
    457c:	f9 1f       	adc	r31, r25
    457e:	bd 01       	movw	r22, r26
    4580:	cf 01       	movw	r24, r30
    4582:	11 24       	eor	r1, r1
    4584:	08 95       	ret

00004586 <__divmodhi4>:
    4586:	97 fb       	bst	r25, 7
    4588:	09 2e       	mov	r0, r25
    458a:	07 26       	eor	r0, r23
    458c:	0a d0       	rcall	.+20     	; 0x45a2 <__divmodhi4_neg1>
    458e:	77 fd       	sbrc	r23, 7
    4590:	04 d0       	rcall	.+8      	; 0x459a <__divmodhi4_neg2>
    4592:	2e d0       	rcall	.+92     	; 0x45f0 <__udivmodhi4>
    4594:	06 d0       	rcall	.+12     	; 0x45a2 <__divmodhi4_neg1>
    4596:	00 20       	and	r0, r0
    4598:	1a f4       	brpl	.+6      	; 0x45a0 <__divmodhi4_exit>

0000459a <__divmodhi4_neg2>:
    459a:	70 95       	com	r23
    459c:	61 95       	neg	r22
    459e:	7f 4f       	sbci	r23, 0xFF	; 255

000045a0 <__divmodhi4_exit>:
    45a0:	08 95       	ret

000045a2 <__divmodhi4_neg1>:
    45a2:	f6 f7       	brtc	.-4      	; 0x45a0 <__divmodhi4_exit>
    45a4:	90 95       	com	r25
    45a6:	81 95       	neg	r24
    45a8:	9f 4f       	sbci	r25, 0xFF	; 255
    45aa:	08 95       	ret

000045ac <__udivmodsi4>:
    45ac:	a1 e2       	ldi	r26, 0x21	; 33
    45ae:	1a 2e       	mov	r1, r26
    45b0:	aa 1b       	sub	r26, r26
    45b2:	bb 1b       	sub	r27, r27
    45b4:	fd 01       	movw	r30, r26
    45b6:	0d c0       	rjmp	.+26     	; 0x45d2 <__udivmodsi4_ep>

000045b8 <__udivmodsi4_loop>:
    45b8:	aa 1f       	adc	r26, r26
    45ba:	bb 1f       	adc	r27, r27
    45bc:	ee 1f       	adc	r30, r30
    45be:	ff 1f       	adc	r31, r31
    45c0:	a2 17       	cp	r26, r18
    45c2:	b3 07       	cpc	r27, r19
    45c4:	e4 07       	cpc	r30, r20
    45c6:	f5 07       	cpc	r31, r21
    45c8:	20 f0       	brcs	.+8      	; 0x45d2 <__udivmodsi4_ep>
    45ca:	a2 1b       	sub	r26, r18
    45cc:	b3 0b       	sbc	r27, r19
    45ce:	e4 0b       	sbc	r30, r20
    45d0:	f5 0b       	sbc	r31, r21

000045d2 <__udivmodsi4_ep>:
    45d2:	66 1f       	adc	r22, r22
    45d4:	77 1f       	adc	r23, r23
    45d6:	88 1f       	adc	r24, r24
    45d8:	99 1f       	adc	r25, r25
    45da:	1a 94       	dec	r1
    45dc:	69 f7       	brne	.-38     	; 0x45b8 <__udivmodsi4_loop>
    45de:	60 95       	com	r22
    45e0:	70 95       	com	r23
    45e2:	80 95       	com	r24
    45e4:	90 95       	com	r25
    45e6:	9b 01       	movw	r18, r22
    45e8:	ac 01       	movw	r20, r24
    45ea:	bd 01       	movw	r22, r26
    45ec:	cf 01       	movw	r24, r30
    45ee:	08 95       	ret

000045f0 <__udivmodhi4>:
    45f0:	aa 1b       	sub	r26, r26
    45f2:	bb 1b       	sub	r27, r27
    45f4:	51 e1       	ldi	r21, 0x11	; 17
    45f6:	07 c0       	rjmp	.+14     	; 0x4606 <__udivmodhi4_ep>

000045f8 <__udivmodhi4_loop>:
    45f8:	aa 1f       	adc	r26, r26
    45fa:	bb 1f       	adc	r27, r27
    45fc:	a6 17       	cp	r26, r22
    45fe:	b7 07       	cpc	r27, r23
    4600:	10 f0       	brcs	.+4      	; 0x4606 <__udivmodhi4_ep>
    4602:	a6 1b       	sub	r26, r22
    4604:	b7 0b       	sbc	r27, r23

00004606 <__udivmodhi4_ep>:
    4606:	88 1f       	adc	r24, r24
    4608:	99 1f       	adc	r25, r25
    460a:	5a 95       	dec	r21
    460c:	a9 f7       	brne	.-22     	; 0x45f8 <__udivmodhi4_loop>
    460e:	80 95       	com	r24
    4610:	90 95       	com	r25
    4612:	bc 01       	movw	r22, r24
    4614:	cd 01       	movw	r24, r26
    4616:	08 95       	ret

00004618 <__tablejump2__>:
    4618:	ee 0f       	add	r30, r30
    461a:	ff 1f       	adc	r31, r31

0000461c <__tablejump__>:
    461c:	05 90       	lpm	r0, Z+
    461e:	f4 91       	lpm	r31, Z
    4620:	e0 2d       	mov	r30, r0
    4622:	09 94       	ijmp

00004624 <malloc>:
    4624:	cf 93       	push	r28
    4626:	df 93       	push	r29
    4628:	ac 01       	movw	r20, r24
    462a:	82 30       	cpi	r24, 0x02	; 2
    462c:	91 05       	cpc	r25, r1
    462e:	10 f4       	brcc	.+4      	; 0x4634 <malloc+0x10>
    4630:	42 e0       	ldi	r20, 0x02	; 2
    4632:	50 e0       	ldi	r21, 0x00	; 0
    4634:	e0 91 c8 07 	lds	r30, 0x07C8
    4638:	f0 91 c9 07 	lds	r31, 0x07C9
    463c:	20 e0       	ldi	r18, 0x00	; 0
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	a0 e0       	ldi	r26, 0x00	; 0
    4642:	b0 e0       	ldi	r27, 0x00	; 0
    4644:	24 c0       	rjmp	.+72     	; 0x468e <malloc+0x6a>
    4646:	80 81       	ld	r24, Z
    4648:	91 81       	ldd	r25, Z+1	; 0x01
    464a:	84 17       	cp	r24, r20
    464c:	95 07       	cpc	r25, r21
    464e:	d0 f0       	brcs	.+52     	; 0x4684 <malloc+0x60>
    4650:	84 17       	cp	r24, r20
    4652:	95 07       	cpc	r25, r21
    4654:	71 f4       	brne	.+28     	; 0x4672 <malloc+0x4e>
    4656:	82 81       	ldd	r24, Z+2	; 0x02
    4658:	93 81       	ldd	r25, Z+3	; 0x03
    465a:	10 97       	sbiw	r26, 0x00	; 0
    465c:	29 f0       	breq	.+10     	; 0x4668 <malloc+0x44>
    465e:	13 96       	adiw	r26, 0x03	; 3
    4660:	9c 93       	st	X, r25
    4662:	8e 93       	st	-X, r24
    4664:	12 97       	sbiw	r26, 0x02	; 2
    4666:	2c c0       	rjmp	.+88     	; 0x46c0 <malloc+0x9c>
    4668:	90 93 c9 07 	sts	0x07C9, r25
    466c:	80 93 c8 07 	sts	0x07C8, r24
    4670:	27 c0       	rjmp	.+78     	; 0x46c0 <malloc+0x9c>
    4672:	21 15       	cp	r18, r1
    4674:	31 05       	cpc	r19, r1
    4676:	19 f0       	breq	.+6      	; 0x467e <malloc+0x5a>
    4678:	82 17       	cp	r24, r18
    467a:	93 07       	cpc	r25, r19
    467c:	18 f4       	brcc	.+6      	; 0x4684 <malloc+0x60>
    467e:	9c 01       	movw	r18, r24
    4680:	bd 01       	movw	r22, r26
    4682:	ef 01       	movw	r28, r30
    4684:	92 81       	ldd	r25, Z+2	; 0x02
    4686:	83 81       	ldd	r24, Z+3	; 0x03
    4688:	df 01       	movw	r26, r30
    468a:	e9 2f       	mov	r30, r25
    468c:	f8 2f       	mov	r31, r24
    468e:	30 97       	sbiw	r30, 0x00	; 0
    4690:	d1 f6       	brne	.-76     	; 0x4646 <malloc+0x22>
    4692:	21 15       	cp	r18, r1
    4694:	31 05       	cpc	r19, r1
    4696:	f9 f0       	breq	.+62     	; 0x46d6 <malloc+0xb2>
    4698:	c9 01       	movw	r24, r18
    469a:	84 1b       	sub	r24, r20
    469c:	95 0b       	sbc	r25, r21
    469e:	84 30       	cpi	r24, 0x04	; 4
    46a0:	91 05       	cpc	r25, r1
    46a2:	80 f4       	brcc	.+32     	; 0x46c4 <malloc+0xa0>
    46a4:	8a 81       	ldd	r24, Y+2	; 0x02
    46a6:	9b 81       	ldd	r25, Y+3	; 0x03
    46a8:	61 15       	cp	r22, r1
    46aa:	71 05       	cpc	r23, r1
    46ac:	21 f0       	breq	.+8      	; 0x46b6 <malloc+0x92>
    46ae:	fb 01       	movw	r30, r22
    46b0:	93 83       	std	Z+3, r25	; 0x03
    46b2:	82 83       	std	Z+2, r24	; 0x02
    46b4:	04 c0       	rjmp	.+8      	; 0x46be <malloc+0x9a>
    46b6:	90 93 c9 07 	sts	0x07C9, r25
    46ba:	80 93 c8 07 	sts	0x07C8, r24
    46be:	fe 01       	movw	r30, r28
    46c0:	32 96       	adiw	r30, 0x02	; 2
    46c2:	42 c0       	rjmp	.+132    	; 0x4748 <malloc+0x124>
    46c4:	fe 01       	movw	r30, r28
    46c6:	e8 0f       	add	r30, r24
    46c8:	f9 1f       	adc	r31, r25
    46ca:	41 93       	st	Z+, r20
    46cc:	51 93       	st	Z+, r21
    46ce:	02 97       	sbiw	r24, 0x02	; 2
    46d0:	99 83       	std	Y+1, r25	; 0x01
    46d2:	88 83       	st	Y, r24
    46d4:	39 c0       	rjmp	.+114    	; 0x4748 <malloc+0x124>
    46d6:	80 91 c6 07 	lds	r24, 0x07C6
    46da:	90 91 c7 07 	lds	r25, 0x07C7
    46de:	00 97       	sbiw	r24, 0x00	; 0
    46e0:	41 f4       	brne	.+16     	; 0x46f2 <malloc+0xce>
    46e2:	80 91 32 04 	lds	r24, 0x0432
    46e6:	90 91 33 04 	lds	r25, 0x0433
    46ea:	90 93 c7 07 	sts	0x07C7, r25
    46ee:	80 93 c6 07 	sts	0x07C6, r24
    46f2:	20 91 30 04 	lds	r18, 0x0430
    46f6:	30 91 31 04 	lds	r19, 0x0431
    46fa:	21 15       	cp	r18, r1
    46fc:	31 05       	cpc	r19, r1
    46fe:	41 f4       	brne	.+16     	; 0x4710 <malloc+0xec>
    4700:	2d b7       	in	r18, 0x3d	; 61
    4702:	3e b7       	in	r19, 0x3e	; 62
    4704:	80 91 34 04 	lds	r24, 0x0434
    4708:	90 91 35 04 	lds	r25, 0x0435
    470c:	28 1b       	sub	r18, r24
    470e:	39 0b       	sbc	r19, r25
    4710:	e0 91 c6 07 	lds	r30, 0x07C6
    4714:	f0 91 c7 07 	lds	r31, 0x07C7
    4718:	e2 17       	cp	r30, r18
    471a:	f3 07       	cpc	r31, r19
    471c:	98 f4       	brcc	.+38     	; 0x4744 <malloc+0x120>
    471e:	2e 1b       	sub	r18, r30
    4720:	3f 0b       	sbc	r19, r31
    4722:	24 17       	cp	r18, r20
    4724:	35 07       	cpc	r19, r21
    4726:	70 f0       	brcs	.+28     	; 0x4744 <malloc+0x120>
    4728:	ca 01       	movw	r24, r20
    472a:	02 96       	adiw	r24, 0x02	; 2
    472c:	28 17       	cp	r18, r24
    472e:	39 07       	cpc	r19, r25
    4730:	48 f0       	brcs	.+18     	; 0x4744 <malloc+0x120>
    4732:	8e 0f       	add	r24, r30
    4734:	9f 1f       	adc	r25, r31
    4736:	90 93 c7 07 	sts	0x07C7, r25
    473a:	80 93 c6 07 	sts	0x07C6, r24
    473e:	41 93       	st	Z+, r20
    4740:	51 93       	st	Z+, r21
    4742:	02 c0       	rjmp	.+4      	; 0x4748 <malloc+0x124>
    4744:	e0 e0       	ldi	r30, 0x00	; 0
    4746:	f0 e0       	ldi	r31, 0x00	; 0
    4748:	cf 01       	movw	r24, r30
    474a:	df 91       	pop	r29
    474c:	cf 91       	pop	r28
    474e:	08 95       	ret

00004750 <free>:
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	cf 93       	push	r28
    4756:	df 93       	push	r29
    4758:	9c 01       	movw	r18, r24
    475a:	00 97       	sbiw	r24, 0x00	; 0
    475c:	09 f4       	brne	.+2      	; 0x4760 <free+0x10>
    475e:	8c c0       	rjmp	.+280    	; 0x4878 <free+0x128>
    4760:	dc 01       	movw	r26, r24
    4762:	12 97       	sbiw	r26, 0x02	; 2
    4764:	13 96       	adiw	r26, 0x03	; 3
    4766:	1c 92       	st	X, r1
    4768:	1e 92       	st	-X, r1
    476a:	12 97       	sbiw	r26, 0x02	; 2
    476c:	60 91 c8 07 	lds	r22, 0x07C8
    4770:	70 91 c9 07 	lds	r23, 0x07C9
    4774:	61 15       	cp	r22, r1
    4776:	71 05       	cpc	r23, r1
    4778:	89 f4       	brne	.+34     	; 0x479c <free+0x4c>
    477a:	8d 91       	ld	r24, X+
    477c:	9c 91       	ld	r25, X
    477e:	11 97       	sbiw	r26, 0x01	; 1
    4780:	82 0f       	add	r24, r18
    4782:	93 1f       	adc	r25, r19
    4784:	20 91 c6 07 	lds	r18, 0x07C6
    4788:	30 91 c7 07 	lds	r19, 0x07C7
    478c:	28 17       	cp	r18, r24
    478e:	39 07       	cpc	r19, r25
    4790:	69 f5       	brne	.+90     	; 0x47ec <free+0x9c>
    4792:	b0 93 c7 07 	sts	0x07C7, r27
    4796:	a0 93 c6 07 	sts	0x07C6, r26
    479a:	6e c0       	rjmp	.+220    	; 0x4878 <free+0x128>
    479c:	fb 01       	movw	r30, r22
    479e:	40 e0       	ldi	r20, 0x00	; 0
    47a0:	50 e0       	ldi	r21, 0x00	; 0
    47a2:	01 c0       	rjmp	.+2      	; 0x47a6 <free+0x56>
    47a4:	fc 01       	movw	r30, r24
    47a6:	ea 17       	cp	r30, r26
    47a8:	fb 07       	cpc	r31, r27
    47aa:	30 f4       	brcc	.+12     	; 0x47b8 <free+0x68>
    47ac:	82 81       	ldd	r24, Z+2	; 0x02
    47ae:	93 81       	ldd	r25, Z+3	; 0x03
    47b0:	af 01       	movw	r20, r30
    47b2:	00 97       	sbiw	r24, 0x00	; 0
    47b4:	b9 f7       	brne	.-18     	; 0x47a4 <free+0x54>
    47b6:	1f c0       	rjmp	.+62     	; 0x47f6 <free+0xa6>
    47b8:	e9 01       	movw	r28, r18
    47ba:	22 97       	sbiw	r28, 0x02	; 2
    47bc:	fb 83       	std	Y+3, r31	; 0x03
    47be:	ea 83       	std	Y+2, r30	; 0x02
    47c0:	08 81       	ld	r16, Y
    47c2:	19 81       	ldd	r17, Y+1	; 0x01
    47c4:	c9 01       	movw	r24, r18
    47c6:	80 0f       	add	r24, r16
    47c8:	91 1f       	adc	r25, r17
    47ca:	8e 17       	cp	r24, r30
    47cc:	9f 07       	cpc	r25, r31
    47ce:	59 f4       	brne	.+22     	; 0x47e6 <free+0x96>
    47d0:	80 81       	ld	r24, Z
    47d2:	91 81       	ldd	r25, Z+1	; 0x01
    47d4:	80 0f       	add	r24, r16
    47d6:	91 1f       	adc	r25, r17
    47d8:	02 96       	adiw	r24, 0x02	; 2
    47da:	99 83       	std	Y+1, r25	; 0x01
    47dc:	88 83       	st	Y, r24
    47de:	82 81       	ldd	r24, Z+2	; 0x02
    47e0:	93 81       	ldd	r25, Z+3	; 0x03
    47e2:	9b 83       	std	Y+3, r25	; 0x03
    47e4:	8a 83       	std	Y+2, r24	; 0x02
    47e6:	41 15       	cp	r20, r1
    47e8:	51 05       	cpc	r21, r1
    47ea:	29 f4       	brne	.+10     	; 0x47f6 <free+0xa6>
    47ec:	b0 93 c9 07 	sts	0x07C9, r27
    47f0:	a0 93 c8 07 	sts	0x07C8, r26
    47f4:	41 c0       	rjmp	.+130    	; 0x4878 <free+0x128>
    47f6:	fa 01       	movw	r30, r20
    47f8:	b3 83       	std	Z+3, r27	; 0x03
    47fa:	a2 83       	std	Z+2, r26	; 0x02
    47fc:	c1 91       	ld	r28, Z+
    47fe:	d1 91       	ld	r29, Z+
    4800:	ec 0f       	add	r30, r28
    4802:	fd 1f       	adc	r31, r29
    4804:	ae 17       	cp	r26, r30
    4806:	bf 07       	cpc	r27, r31
    4808:	81 f4       	brne	.+32     	; 0x482a <free+0xda>
    480a:	f9 01       	movw	r30, r18
    480c:	92 91       	ld	r25, -Z
    480e:	82 91       	ld	r24, -Z
    4810:	8c 0f       	add	r24, r28
    4812:	9d 1f       	adc	r25, r29
    4814:	02 96       	adiw	r24, 0x02	; 2
    4816:	da 01       	movw	r26, r20
    4818:	11 96       	adiw	r26, 0x01	; 1
    481a:	9c 93       	st	X, r25
    481c:	8e 93       	st	-X, r24
    481e:	82 81       	ldd	r24, Z+2	; 0x02
    4820:	93 81       	ldd	r25, Z+3	; 0x03
    4822:	13 96       	adiw	r26, 0x03	; 3
    4824:	9c 93       	st	X, r25
    4826:	8e 93       	st	-X, r24
    4828:	12 97       	sbiw	r26, 0x02	; 2
    482a:	e0 e0       	ldi	r30, 0x00	; 0
    482c:	f0 e0       	ldi	r31, 0x00	; 0
    482e:	02 c0       	rjmp	.+4      	; 0x4834 <free+0xe4>
    4830:	fb 01       	movw	r30, r22
    4832:	bc 01       	movw	r22, r24
    4834:	db 01       	movw	r26, r22
    4836:	12 96       	adiw	r26, 0x02	; 2
    4838:	8d 91       	ld	r24, X+
    483a:	9c 91       	ld	r25, X
    483c:	13 97       	sbiw	r26, 0x03	; 3
    483e:	00 97       	sbiw	r24, 0x00	; 0
    4840:	b9 f7       	brne	.-18     	; 0x4830 <free+0xe0>
    4842:	cb 01       	movw	r24, r22
    4844:	02 96       	adiw	r24, 0x02	; 2
    4846:	2d 91       	ld	r18, X+
    4848:	3c 91       	ld	r19, X
    484a:	11 97       	sbiw	r26, 0x01	; 1
    484c:	82 0f       	add	r24, r18
    484e:	93 1f       	adc	r25, r19
    4850:	20 91 c6 07 	lds	r18, 0x07C6
    4854:	30 91 c7 07 	lds	r19, 0x07C7
    4858:	28 17       	cp	r18, r24
    485a:	39 07       	cpc	r19, r25
    485c:	69 f4       	brne	.+26     	; 0x4878 <free+0x128>
    485e:	30 97       	sbiw	r30, 0x00	; 0
    4860:	29 f4       	brne	.+10     	; 0x486c <free+0x11c>
    4862:	10 92 c9 07 	sts	0x07C9, r1
    4866:	10 92 c8 07 	sts	0x07C8, r1
    486a:	02 c0       	rjmp	.+4      	; 0x4870 <free+0x120>
    486c:	13 82       	std	Z+3, r1	; 0x03
    486e:	12 82       	std	Z+2, r1	; 0x02
    4870:	70 93 c7 07 	sts	0x07C7, r23
    4874:	60 93 c6 07 	sts	0x07C6, r22
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	08 95       	ret

00004882 <_exit>:
    4882:	f8 94       	cli

00004884 <__stop_program>:
    4884:	ff cf       	rjmp	.-2      	; 0x4884 <__stop_program>
