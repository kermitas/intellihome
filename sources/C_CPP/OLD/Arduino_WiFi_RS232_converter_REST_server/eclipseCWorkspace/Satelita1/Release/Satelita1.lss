
Satelita1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000dd6  00800200  000099cc  00009a60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000099cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000997  00800fd6  00800fd6  0000a836  2**0
                  ALLOC
  3 .stab         00024444  00000000  00000000  0000a838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000376d6  00000000  00000000  0002ec7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 0c 	jmp	0x19ec	; 0x19ec <__dtors_end>
       4:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
       8:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
       c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      10:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      14:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      18:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      1c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      20:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      24:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      28:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      2c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      30:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      34:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      38:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      3c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      40:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      44:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      48:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      4c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      50:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      54:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      58:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      5c:	0c 94 63 46 	jmp	0x8cc6	; 0x8cc6 <__vector_23>
      60:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      64:	0c 94 91 41 	jmp	0x8322	; 0x8322 <__vector_25>
      68:	0c 94 65 42 	jmp	0x84ca	; 0x84ca <__vector_26>
      6c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      70:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      74:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      78:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      7c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      80:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      84:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      88:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      8c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      90:	0c 94 be 41 	jmp	0x837c	; 0x837c <__vector_36>
      94:	0c 94 b0 42 	jmp	0x8560	; 0x8560 <__vector_37>
      98:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      9c:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      a0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      a4:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      a8:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      ac:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      b0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      b4:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      b8:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      bc:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      c0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      c4:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      c8:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      cc:	0c 94 eb 41 	jmp	0x83d6	; 0x83d6 <__vector_51>
      d0:	0c 94 fb 42 	jmp	0x85f6	; 0x85f6 <__vector_52>
      d4:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>
      d8:	0c 94 18 42 	jmp	0x8430	; 0x8430 <__vector_54>
      dc:	0c 94 46 43 	jmp	0x868c	; 0x868c <__vector_55>
      e0:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__bad_interrupt>

000000e4 <_ZZN17HeartBeatRunnableC1EP18PinHighLowRunnablebS1_bE3__c>:
      e4:	48 65 61 72 74 42 65 61 74 52 75 6e 6e 61 62 6c     HeartBeatRunnabl
      f4:	65 00                                               e.

000000f6 <_ZZN17HeartBeatRunnable8setLedOnEbE12functionName>:
      f6:	73 65 74 4c 65 64 4f 6e 00                          setLedOn.

000000ff <_ZZN17HeartBeatRunnable8setLedOnEbE3__c>:
      ff:	73 65 74 74 69 6e 67 20 6c 65 64 20 66 72 6f 6d     setting led from
     10f:	20 25 75 20 74 6f 20 25 75 00                        %u to %u.

00000119 <_ZZN17HeartBeatRunnable11setBuzzerOnEbE12functionName>:
     119:	73 65 74 42 75 7a 7a 65 72 4f 6e 00                 setBuzzerOn.

00000125 <_ZZN17HeartBeatRunnable11setBuzzerOnEbE3__c>:
     125:	73 65 74 74 69 6e 67 20 62 75 7a 7a 65 72 20 66     setting buzzer f
     135:	72 6f 6d 20 25 75 20 74 6f 20 25 75 00              rom %u to %u.

00000142 <_ZZN17HeartBeatRunnable3runEvE12functionName>:
     142:	72 75 6e 00                                         run.

00000146 <_ZZN17HeartBeatRunnable3runEvE3__c>:
     146:	69 73 4c 65 64 4f 6e 20 3d 20 25 75 2c 20 69 73     isLedOn = %u, is
     156:	42 75 7a 7a 65 72 4f 6e 20 3d 20 25 75 00           BuzzerOn = %u.

00000164 <_ZZN15RS232ToWiFiTaskC1EPP18ServiceDescriptionhbP12PageRendererS4_PKcS6_S1_PbPhhP9AnyBufferIhhEPchP6StreamE3__c>:
     164:	52 53 32 33 32 54 6f 57 69 46 69 54 61 73 6b 00     RS232ToWiFiTask.

00000174 <_ZZN15RS232ToWiFiTask3runEvE12functionName>:
     174:	72 75 6e 00                                         run.

00000178 <_ZZN15RS232ToWiFiTask3runEvE3__c_0>:
     178:	52 53 32 33 32 3c 2d 3e 57 69 46 69 20 63 6f 6e     RS232<->WiFi con
     188:	6e 65 63 74 69 6f 6e 20 77 69 6c 6c 20 62 65 20     nection will be 
     198:	61 6c 73 6f 20 70 72 6f 63 65 73 73 65 64 20 69     also processed i
     1a8:	6e 20 74 68 65 20 66 75 74 75 72 65 00              n the future.

000001b5 <_ZZN15RS232ToWiFiTask3runEvE3__c>:
     1b5:	61 6c 6c 20 6f 70 65 72 61 74 69 6f 6e 73 20 66     all operations f
     1c5:	69 6e 69 73 68 65 64 20 6f 6e 20 52 53 32 33 32     inished on RS232
     1d5:	3c 2d 3e 57 69 46 69 00                             <->WiFi.

000001dd <_ZZN16ResetRestServiceC1EhPKcE3__c>:
     1dd:	52 65 73 65 74 52 65 73 74 53 65 72 76 69 63 65     ResetRestService
	...

000001ee <_ZZN16ResetRestService15setBooleanValueEbE12functionName>:
     1ee:	73 65 74 42 6f 6f 6c 65 61 6e 56 61 6c 75 65 00     setBooleanValue.

000001fe <_ZZN16ResetRestService15setBooleanValueEbE3__c>:
     1fe:	52 45 53 45 54 54 49 4e 47 20 44 45 56 49 43 45     RESETTING DEVICE
     20e:	21 00                                               !.

00000210 <_ZZ5setupE12functionName>:
     210:	73 65 74 75 70 00                                   setup.

00000216 <_ZZ5setupE3__c>:
     216:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 00           =============.

00000224 <_ZZ5setupE3__c_0>:
     224:	53 54 41 52 54 20 28 63 75 72 72 65 6e 74 20 64     START (current d
     234:	65 62 75 67 20 6c 65 76 65 6c 20 3d 20 25 75 29     ebug level = %u)
	...

00000245 <_ZZ5setupE3__c_1>:
     245:	65 6e 74 65 72 69 6e 67 20 75 73 65 72 53 65 74     entering userSet
     255:	75 70 28 29 2e 2e 2e 00                             up()....

0000025d <_ZZ5setupE3__c_2>:
     25d:	6c 65 61 76 69 6e 67 20 75 73 65 72 53 65 74 75     leaving userSetu
     26d:	70 28 29 2e 2e 2e 00                                p()....

00000274 <_ZZ20addTaskToTaskManagerP17TaskManagerRecordPKcE12functionName>:
     274:	61 64 64 54 61 73 6b 54 6f 54 61 73 6b 4d 61 6e     addTaskToTaskMan
     284:	61 67 65 72 00                                      ager.

00000289 <_ZZ20addTaskToTaskManagerP17TaskManagerRecordPKcE3__c>:
     289:	61 64 64 69 6e 67 20 74 61 73 6b 20 27 25 73 27     adding task '%s'
     299:	20 74 6f 20 74 61 73 6b 4d 61 6e 61 67 65 72 2c      to taskManager,
     2a9:	20 74 61 73 6b 20 70 74 72 2a 20 3d 20 25 75 00      task ptr* = %u.

000002b9 <_ZZ20addTaskToTaskManagerP17TaskManagerRecordPKcE3__c_0>:
     2b9:	61 64 64 54 61 73 6b 54 6f 54 61 73 6b 4d 61 6e     addTaskToTaskMan
     2c9:	61 67 65 72 28 29 3a 63 6f 75 6c 64 20 6e 6f 74     ager():could not
     2d9:	20 61 64 64 20 74 61 6b 73 21 21 20 70 74 72 2a      add taks!! ptr*
     2e9:	3d 25 75 00                                         =%u.

000002ed <_ZZ11printReportvE12functionName>:
     2ed:	70 72 69 6e 74 52 65 70 6f 72 74 00                 printReport.

000002f9 <_ZZ11printReportvE3__c>:
     2f9:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

00000307 <_ZZ11printReportvE3__c_0>:
     307:	66 72 65 65 52 61 6d 4d 65 6d 6f 72 79 28 29 20     freeRamMemory() 
     317:	3d 20 25 69 20 42 2c 20 75 73 65 64 20 52 41 4d     = %i B, used RAM
     327:	20 3d 20 25 69 20 42 00                              = %i B.

0000032f <_ZZ11printReportvE3__c_1>:
     32f:	6d 69 6c 6c 69 73 28 29 20 3d 20 25 75 00           millis() = %u.

0000033d <_ZZ11printReportvE3__c_2>:
     33d:	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 00           -------------.

0000034b <_ZZ9hardResetvE12functionName>:
     34b:	68 61 72 64 52 65 73 65 74 00                       hardReset.

00000355 <_ZZ9hardResetvE3__c>:
     355:	68 61 72 64 52 65 73 65 74 28 29 3a 20 48 41 52     hardReset(): HAR
     365:	44 20 52 45 53 45 54 2e 2e 2e 00                    D RESET....

00000370 <_ZL9className>:
     370:	53 61 74 65 6c 69 74 61 31 00                       Satelita1.

0000037a <_ZL14sampleTaskText>:
     37a:	73 61 6d 70 6c 65 20 74 61 73 6b 20 3a 29 00        sample task :).

00000389 <_ZZN9AnyBufferIhhEC1EPhhE3__c>:
     389:	41 6e 79 42 75 66 66 65 72 00                       AnyBuffer.

00000393 <_ZZN13AnyRingBufferIhEC1EP19AnyRingBufferRecordIhEhE3__c>:
     393:	41 6e 79 52 69 6e 67 42 75 66 66 65 72 00           AnyRingBuffer.

000003a1 <_ZZN22StreamHFA11xRS232WiFi3C1EP13AnyRingBufferIhES2_P24StreamHFA11xRS232WiFiCRCE3__c>:
     3a1:	53 74 72 65 61 6d 48 46 41 31 31 78 52 53 32 33     StreamHFA11xRS23
     3b1:	32 57 69 46 69 33 00                                2WiFi3.

000003b8 <_ZZN13AnyRingBufferIhE4readEvE12functionName>:
     3b8:	72 65 61 64 00                                      read.

000003bd <_ZZN13AnyRingBufferIhE4readEvE3__c>:
     3bd:	72 65 73 75 6c 74 20 3d 20 25 63 20 28 25 75 29     result = %c (%u)
	...

000003ce <_ZZN13AnyRingBufferIhE4readEvE3__c_0>:
     3ce:	63 6f 75 6c 64 20 6e 6f 74 20 72 65 61 64 2c 20     could not read, 
     3de:	72 65 74 75 72 6e 69 6e 67 20 30 00                 returning 0.

000003ea <_ZZN13AnyRingBufferIhE19validateRecordsListEvE12functionName>:
     3ea:	76 61 6c 69 64 61 74 65 52 65 63 6f 72 64 73 4c     validateRecordsL
     3fa:	69 73 74 00                                         ist.

000003fe <_ZZN13AnyRingBufferIhE19validateRecordsListEvE3__c>:
     3fe:	72 65 61 64 50 6f 73 69 74 69 6f 6e 20 28 25 75     readPosition (%u
     40e:	29 20 3d 3d 20 77 72 69 74 65 50 6f 73 69 74 69     ) == writePositi
     41e:	6f 6e 20 28 25 75 29 2c 20 73 65 74 74 69 6e 67     on (%u), setting
     42e:	20 62 6f 74 68 20 74 6f 20 30 00                     both to 0.

00000439 <_ZZN13AnyRingBufferIhE19validateRecordsListEvE3__c_0>:
     439:	72 65 61 64 50 6f 73 69 74 69 6f 6e 20 28 25 75     readPosition (%u
     449:	29 20 3e 3d 20 73 69 7a 65 4f 66 53 69 6e 67 6c     ) >= sizeOfSingl
     459:	65 41 72 72 61 79 20 28 25 75 29 2c 20 6d 6f 76     eArray (%u), mov
     469:	65 2d 66 69 72 73 74 2d 72 65 63 6f 72 64 2d 74     e-first-record-t
     479:	6f 2d 65 6e 64 00                                   o-end.

0000047f <_ZZN13AnyRingBufferIhE4peekEvE12functionName>:
     47f:	70 65 65 6b 00                                      peek.

00000484 <_ZZN13AnyRingBufferIhE4peekEvE3__c>:
     484:	72 65 73 75 6c 74 20 3d 20 25 63 20 28 25 75 29     result = %c (%u)
	...

00000495 <_ZZN13AnyRingBufferIhE4peekEvE3__c_0>:
     495:	63 6f 75 6c 64 20 6e 6f 74 20 70 65 65 6b 2c 20     could not peek, 
     4a5:	72 65 74 75 72 6e 69 6e 67 20 30 00                 returning 0.

000004b1 <_ZZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEbE12functionName>:
     4b1:	64 69 73 63 61 72 64 41 6e 79 57 61 69 74 69 6e     discardAnyWaitin
     4c1:	67 44 61 74 61 49 6e 55 6e 64 65 72 6c 79 69 6e     gDataInUnderlyin
     4d1:	67 53 74 72 65 61 6d 00                             gStream.

000004d9 <_ZZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEbE3__c>:
     4d9:	69 6e 69 74 69 61 6c 6c 79 20 64 69 73 63 61 72     initially discar
     4e9:	64 65 64 20 25 75 20 62 79 74 65 73 00              ded %u bytes.

000004f6 <_ZZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEbE3__c_0>:
     4f6:	66 6f 72 20 73 65 72 69 61 6c 20 6e 75 6d 62 65     for serial numbe
     506:	72 20 25 75 20 64 69 73 63 61 72 64 65 64 20 25     r %u discarded %
     516:	75 20 62 79 74 65 73 00                             u bytes.

0000051e <_ZZN22StreamHFA11xRS232WiFi315doFullReadCycleEvE12functionName>:
     51e:	64 6f 46 75 6c 6c 52 65 61 64 43 79 63 6c 65 00     doFullReadCycle.

0000052e <_ZZN22StreamHFA11xRS232WiFi315doFullReadCycleEvE3__c>:
     52e:	73 65 6e 64 69 6e 67 20 52 45 43 56 20 61 67 61     sending RECV aga
     53e:	69 6e 2c 20 72 65 74 72 79 20 25 75 20 2f 20 25     in, retry %u / %
     54e:	75 00                                               u.

00000550 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE12functionName>:
     550:	73 65 6e 64 52 45 43 56 41 6e 64 52 65 61 64 52     sendRECVAndReadR
     560:	45 43 56 41 43 4b 00                                ECVACK.

00000567 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c>:
     567:	61 31 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 20     a1 available=%u 
     577:	2c 20 66 72 65 65 53 70 61 63 65 3d 25 75 2c 20     , freeSpace=%u, 
     587:	73 6e 3d 25 75 00                                   sn=%u.

0000058d <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_0>:
     58d:	61 32 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 00     a2 available=%u.

0000059d <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_1>:
     59d:	63 6f 75 6c 64 20 6e 6f 74 20 73 65 6e 64 20 36     could not send 6
     5ad:	20 62 79 74 65 73 20 6f 66 20 52 45 43 56 20 63      bytes of RECV c
     5bd:	6f 6d 6d 61 6e 64 00                                ommand.

000005c4 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_2>:
     5c4:	61 33 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 00     a3 available=%u.

000005d4 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_3>:
     5d4:	63 6f 75 6c 64 20 6e 6f 74 20 73 65 6e 64 20 63     could not send c
     5e4:	72 63 00                                            rc.

000005e7 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_4>:
     5e7:	61 35 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 00     a5 available=%u.

000005f7 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_5>:
     5f7:	69 6e 63 6f 6d 6d 69 6e 67 20 63 6f 6d 6d 61 6e     incomming comman
     607:	64 20 6e 75 6d 62 65 72 20 28 25 75 29 20 6e 6f     d number (%u) no
     617:	74 20 6d 61 74 63 68 20 32 00                       t match 2.

00000621 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_6>:
     621:	69 6e 63 6f 6d 6d 69 6e 67 20 73 65 72 69 61 6c     incomming serial
     631:	20 6e 75 6d 62 65 72 20 28 25 75 29 20 6e 6f 74      number (%u) not
     641:	20 6d 61 74 63 68 20 25 75 00                        match %u.

0000064b <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_7>:
     64b:	69 6e 63 6f 6d 6d 69 6e 67 20 66 69 72 73 74 20     incomming first 
     65b:	72 65 73 65 72 76 65 64 20 62 79 74 65 20 28 25     reserved byte (%
     66b:	75 29 20 6e 6f 74 20 6d 61 74 63 68 20 30 00        u) not match 0.

0000067a <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_8>:
     67a:	69 6e 63 6f 6d 6d 69 6e 67 20 73 65 63 6f 6e 64     incomming second
     68a:	20 72 65 73 65 72 76 65 64 20 62 79 74 65 20 28      reserved byte (
     69a:	25 75 29 20 6e 6f 74 20 6d 61 74 63 68 20 30 00     %u) not match 0.

000006aa <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_9>:
     6aa:	69 6e 63 6f 6d 6d 69 6e 67 20 64 61 74 61 20 73     incomming data s
     6ba:	69 7a 65 20 28 25 75 29 20 69 73 20 67 72 65 61     ize (%u) is grea
     6ca:	74 65 72 20 74 68 61 6e 20 72 65 71 75 65 73 74     ter than request
     6da:	65 64 20 25 75 00                                   ed %u.

000006e0 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_10>:
     6e0:	72 65 71 75 65 73 74 65 64 20 25 75 20 62 79 74     requested %u byt
     6f0:	65 73 20 61 6e 64 20 72 65 63 65 69 76 65 64 20     es and received 
     700:	25 75 20 62 79 74 65 73 00                          %u bytes.

00000709 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_11>:
     709:	73 74 61 72 74 20 72 65 61 64 69 6e 67 20 62 65     start reading be
     719:	63 61 75 73 65 20 63 72 63 53 74 72 65 61 6d 2d     cause crcStream-
     729:	3e 61 76 61 69 6c 61 62 6c 65 28 29 20 3d 20 25     >available() = %
     739:	75 00                                               u.

0000073b <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_12>:
     73b:	74 6f 52 65 61 64 20 3d 20 25 75 2c 20 62 79 74     toRead = %u, byt
     74b:	65 73 52 65 61 64 46 72 6f 6d 53 74 72 65 61 6d     esReadFromStream
     75b:	41 6e 64 57 72 6f 74 65 54 6f 42 75 66 66 65 72     AndWroteToBuffer
     76b:	20 3d 20 25 75 2c 20 72 65 61 64 42 79 74 65 73      = %u, readBytes
     77b:	43 6f 75 6e 74 20 3d 20 25 75 20 2c 20 69 6e 63     Count = %u , inc
     78b:	6f 6d 6d 69 6e 67 44 61 74 61 53 69 7a 65 20 3d     ommingDataSize =
     79b:	20 25 75 00                                          %u.

0000079f <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_13>:
     79f:	77 61 69 74 69 6e 67 20 66 6f 72 20 61 76 61 69     waiting for avai
     7af:	6c 61 62 6c 65 20 64 61 74 61 20 77 68 69 6c 65     lable data while
     7bf:	20 72 65 61 64 69 6e 67 2c 20 72 65 61 64 42 79      reading, readBy
     7cf:	74 65 73 43 6f 75 6e 74 20 3d 20 25 75 20 2c 20     tesCount = %u , 
     7df:	69 6e 63 6f 6d 6d 69 6e 67 44 61 74 61 53 69 7a     incommingDataSiz
     7ef:	65 20 3d 20 25 75 00                                e = %u.

000007f6 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_14>:
     7f6:	61 31 30 20 61 76 61 69 6c 61 62 6c 65 3d 25 75     a10 available=%u
	...

00000807 <_ZZN13AnyRingBufferIhE24getRecordContainingIndexEjE12functionName>:
     807:	67 65 74 52 65 63 6f 72 64 43 6f 6e 74 61 69 6e     getRecordContain
     817:	69 6e 67 49 6e 64 65 78 00                          ingIndex.

00000820 <_ZZN13AnyRingBufferIhE24getRecordContainingIndexEjE3__c>:
     820:	72 65 63 6f 72 64 20 63 6f 6e 74 61 69 6e 69 6e     record containin
     830:	67 20 61 72 72 61 79 20 74 68 61 74 20 69 6e 64     g array that ind
     840:	65 78 20 73 74 61 72 74 20 66 72 6f 6d 20 25 75     ex start from %u
     850:	20 63 6f 6e 74 61 69 6e 73 20 61 73 6b 65 64 20      contains asked 
     860:	67 6c 6f 62 61 6c 20 69 6e 64 65 78 20 25 75 00     global index %u.

00000870 <_ZZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEvE3__c_15>:
     870:	63 72 63 20 73 75 6d 20 6e 6f 74 20 6d 61 74 63     crc sum not matc
     880:	68 21 20 21 20 21 20 21 00                          h! ! ! !.

00000889 <_ZZN22StreamHFA11xRS232WiFi315doFullSendCycleEvE12functionName>:
     889:	64 6f 46 75 6c 6c 53 65 6e 64 43 79 63 6c 65 00     doFullSendCycle.

00000899 <_ZZN22StreamHFA11xRS232WiFi315doFullSendCycleEvE3__c>:
     899:	73 65 6e 64 69 6e 67 20 53 45 4e 44 20 61 67 61     sending SEND aga
     8a9:	69 6e 20 77 69 74 68 20 25 75 20 42 20 6f 66 20     in with %u B of 
     8b9:	64 61 74 61 2c 20 72 65 74 72 79 20 25 75 20 2f     data, retry %u /
     8c9:	20 25 75 00                                          %u.

000008cd <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE12functionName>:
     8cd:	73 65 6e 64 53 45 4e 44 41 6e 64 52 65 61 64 53     sendSENDAndReadS
     8dd:	45 4e 44 41 43 4b 00                                ENDACK.

000008e4 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c>:
     8e4:	62 31 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 20     b1 available=%u 
     8f4:	2c 20 77 61 69 74 69 6e 67 54 6f 53 65 6e 64 44     , waitingToSendD
     904:	61 74 61 43 6f 75 6e 74 3d 25 75 2c 20 73 6e 3d     ataCount=%u, sn=
     914:	25 75 00                                            %u.

00000917 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_0>:
     917:	62 32 20 61 76 61 69 6c 61 62 6c 65 3d 25 75 00     b2 available=%u.

00000927 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_1>:
     927:	63 6f 75 6c 64 20 6e 6f 74 20 73 65 6e 64 20 36     could not send 6
     937:	20 62 79 74 65 73 20 6f 66 20 53 45 4e 44 20 63      bytes of SEND c
     947:	6f 6d 6d 61 6e 64 00                                ommand.

0000094e <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_2>:
     94e:	63 6f 75 6c 64 20 6e 6f 74 20 73 65 6e 64 20 25     could not send %
     95e:	75 20 62 79 74 65 73 20 6f 66 20 64 61 74 61 20     u bytes of data 
     96e:	69 6e 73 69 64 65 20 53 45 4e 44 20 63 6f 6d 6d     inside SEND comm
     97e:	61 6e 64 00                                         and.

00000982 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_3>:
     982:	63 6f 75 6c 64 20 6e 6f 74 20 73 65 6e 64 20 63     could not send c
     992:	72 63 00                                            rc.

00000995 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_4>:
     995:	69 6e 63 6f 6d 6d 69 6e 67 20 63 6f 6d 6d 61 6e     incomming comman
     9a5:	64 20 6e 75 6d 62 65 72 20 28 25 75 29 20 6e 6f     d number (%u) no
     9b5:	74 20 6d 61 74 63 68 20 31 00                       t match 1.

000009bf <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_5>:
     9bf:	69 6e 63 6f 6d 6d 69 6e 67 20 73 65 72 69 61 6c     incomming serial
     9cf:	20 6e 75 6d 62 65 72 20 28 25 75 29 20 6e 6f 74      number (%u) not
     9df:	20 6d 61 74 63 68 20 25 75 00                        match %u.

000009e9 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_6>:
     9e9:	69 6e 63 6f 6d 6d 69 6e 67 20 66 69 72 73 74 20     incomming first 
     9f9:	72 65 73 65 72 76 65 64 20 62 79 74 65 20 28 25     reserved byte (%
     a09:	75 29 20 6e 6f 74 20 6d 61 74 63 68 20 30 00        u) not match 0.

00000a18 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_7>:
     a18:	69 6e 63 6f 6d 6d 69 6e 67 20 73 65 63 6f 6e 64     incomming second
     a28:	20 72 65 73 65 72 76 65 64 20 62 79 74 65 20 28      reserved byte (
     a38:	25 75 29 20 6e 6f 74 20 6d 61 74 63 68 20 30 00     %u) not match 0.

00000a48 <_ZZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEvE3__c_8>:
     a48:	61 63 6b 49 6e 66 6f 20 45 52 52 20 3a 28 28 28     ackInfo ERR :(((
	...

00000a59 <_ZZN24StreamHFA11xRS232WiFiCRCC1EP6StreamE3__c>:
     a59:	53 74 72 65 61 6d 48 46 41 31 31 78 52 53 32 33     StreamHFA11xRS23
     a69:	32 57 69 46 69 43 52 43 00                          2WiFiCRC.

00000a72 <_ZZN18HFA11xRS232WiFiCRCC1EvE3__c>:
     a72:	48 46 41 31 31 78 52 53 32 33 32 57 69 46 69 43     HFA11xRS232WiFiC
     a82:	52 43 00                                            RC.

00000a85 <_ZZN18HFA11xRS232WiFiCRC9getCRCSumEvE12functionName>:
     a85:	67 65 74 43 52 43 53 75 6d 00                       getCRCSum.

00000a8f <_ZZN18HFA11xRS232WiFiCRC9getCRCSumEvE3__c>:
     a8f:	63 61 6c 63 75 6c 61 74 65 64 20 63 72 63 53 75     calculated crcSu
     a9f:	6d 20 3d 20 25 75 20 2c 20 6c 6f 63 61 6c 43 52     m = %u , localCR
     aaf:	43 63 6f 75 6e 74 65 72 20 3d 20 25 6c 75 00        Ccounter = %lu.

00000abe <_ZZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6StreamE12functionName>:
     abe:	77 72 69 74 65 43 52 43 42 79 74 65 73 54 6f 53     writeCRCBytesToS
     ace:	74 72 65 61 6d 00                                   tream.

00000ad4 <_ZZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6StreamE3__c>:
     ad4:	77 72 69 74 69 6e 67 20 74 6f 20 73 74 72 65 61     writing to strea
     ae4:	6d 20 63 72 63 20 68 69 67 68 42 79 74 65 20 3d     m crc highByte =
     af4:	20 25 75 2c 20 6c 6f 77 42 79 74 65 20 3d 20 25      %u, lowByte = %
     b04:	75 20 28 69 6e 20 6f 72 64 65 72 3a 20 66 69 72     u (in order: fir
     b14:	73 74 20 4c 4f 57 20 25 75 2c 20 74 68 65 6e 20     st LOW %u, then 
     b24:	48 49 47 48 20 62 79 74 65 20 25 75 29 00           HIGH byte %u).

00000b32 <_ZZN10RestServerC1EPP18ServiceDescriptionhP12PageRendererS4_PKcS6_S1_bPbPhhP9AnyBufferIhhEPchE3__c>:
     b32:	52 65 73 74 53 65 72 76 65 72 00                    RestServer.

00000b3d <_ZZN10RestServer13processStreamEP6StreamE12functionName>:
     b3d:	70 72 6f 63 65 73 73 53 74 72 65 61 6d 00           processStream.

00000b4b <_ZZN10RestServer13processStreamEP6StreamE3__c>:
     b4b:	62 65 67 69 6e 6e 69 6e 67 20 77 6f 72 6b 2c 20     beginning work, 
     b5b:	65 78 65 63 75 74 69 6e 67 20 27 25 73 27 20 73     executing '%s' s
     b6b:	75 62 2d 74 61 73 6b 00                             ub-task.

00000b73 <_ZZN10RestServer13processStreamEP6StreamE3__c_0>:
     b73:	74 69 6d 65 6f 75 74 20 77 68 69 6c 65 20 70 72     timeout while pr
     b83:	6f 63 65 73 73 69 6e 67 20 74 68 69 73 20 72 65     ocessing this re
     b93:	71 75 65 73 74 00                                   quest.

00000b99 <_ZZN10RestServer13processStreamEP6StreamE3__c_1>:
     b99:	68 74 74 70 20 72 65 71 75 65 73 74 20 6d 61 78     http request max
     ba9:	20 62 79 74 65 73 20 72 65 61 63 68 65 64 20 77      bytes reached w
     bb9:	68 69 6c 65 20 70 72 6f 63 65 73 73 69 6e 67 20     hile processing 
     bc9:	74 68 69 73 20 72 65 71 75 65 73 74 00              this request.

00000bd6 <_ZZN10RestServer13processStreamEP6StreamE3__c_2>:
     bd6:	66 69 6e 69 73 68 69 6e 67 20 77 6f 72 6b 2c 20     finishing work, 
     be6:	61 6c 72 65 61 64 79 20 65 78 65 63 75 74 65 64     already executed
     bf6:	20 27 25 73 27 20 73 75 62 2d 74 61 73 6b 20 61      '%s' sub-task a
     c06:	73 6b 65 64 20 74 6f 20 72 65 73 65 74 20 69 6e     sked to reset in
     c16:	74 65 72 6e 61 6c 20 73 74 61 74 65 20 28 66 75     ternal state (fu
     c26:	74 75 72 65 20 65 78 65 63 75 74 69 6f 6e 20 77     ture execution w
     c36:	69 6c 6c 20 73 74 61 72 74 20 73 74 61 74 65 20     ill start state 
     c46:	6d 61 63 68 69 6e 65 20 66 72 6f 6d 20 62 65 67     machine from beg
     c56:	69 6e 6e 69 6e 67 29 00                             inning).

00000c5e <_ZZN10RestServer13processStreamEP6StreamE3__c_3>:
     c5e:	66 69 6e 69 73 68 69 6e 67 20 77 6f 72 6b 2c 20     finishing work, 
     c6e:	63 68 61 6e 67 69 6e 67 20 61 6c 72 65 61 64 79     changing already
     c7e:	20 65 78 65 63 75 74 65 64 20 27 25 73 27 20 73      executed '%s' s
     c8e:	75 62 2d 74 61 73 6b 20 74 6f 20 27 25 73 27 00     ub-task to '%s'.

00000c9e <_ZZN10RestServer13processStreamEP6StreamE3__c_4>:
     c9e:	73 74 61 72 74 20 74 69 6d 65 20 63 6f 75 6e 74     start time count
     cae:	65 72 00                                            er.

00000cb1 <_ZZN10RestServer13processStreamEP6StreamE3__c_5>:
     cb1:	64 75 72 69 6e 67 20 6e 65 78 74 20 65 78 65 63     during next exec
     cc1:	75 74 69 6f 6e 20 74 68 65 72 65 20 77 69 6c 6c     ution there will
     cd1:	20 62 65 20 63 6f 6e 74 69 6e 75 61 74 69 6f 6e      be continuation
     ce1:	20 6f 66 20 63 75 72 72 65 6e 74 20 73 75 62 2d      of current sub-
     cf1:	74 61 73 6b 20 28 27 25 73 27 29 00                 task ('%s').

00000cfd <_ZZN10RestServer13processStreamEP6StreamE3__c_6>:
     cfd:	74 69 6d 65 6f 75 74 20 77 68 69 6c 65 20 70 72     timeout while pr
     d0d:	6f 63 65 73 73 69 6e 67 20 74 68 69 73 20 72 65     ocessing this re
     d1d:	71 75 65 73 74 00                                   quest.

00000d23 <_ZZN10RestServer13processStreamEP6StreamE3__c_7>:
     d23:	68 74 74 70 20 72 65 71 75 65 73 74 20 6d 61 78     http request max
     d33:	20 62 79 74 65 73 20 72 65 61 63 68 65 64 20 77      bytes reached w
     d43:	68 69 6c 65 20 70 72 6f 63 65 73 73 69 6e 67 20     hile processing 
     d53:	74 68 69 73 20 72 65 71 75 65 73 74 00              this request.

00000d60 <_ZZN10RestServer13processStreamEP6StreamE3__c_8>:
     d60:	66 69 6e 69 73 68 69 6e 67 20 77 6f 72 6b 2c 20     finishing work, 
     d70:	61 6c 72 65 61 64 79 20 65 78 65 63 75 74 65 64     already executed
     d80:	20 27 25 73 27 20 73 75 62 2d 74 61 73 6b 20 61      '%s' sub-task a
     d90:	73 6b 65 64 20 74 6f 20 72 65 73 65 74 20 69 6e     sked to reset in
     da0:	74 65 72 6e 61 6c 20 73 74 61 74 65 20 28 66 75     ternal state (fu
     db0:	74 75 72 65 20 65 78 65 63 75 74 69 6f 6e 20 77     ture execution w
     dc0:	69 6c 6c 20 73 74 61 72 74 20 73 74 61 74 65 20     ill start state 
     dd0:	6d 61 63 68 69 6e 65 20 66 72 6f 6d 20 62 65 67     machine from beg
     de0:	69 6e 6e 69 6e 67 29 00                             inning).

00000de8 <_ZZN10RestServer13processStreamEP6StreamE3__c_9>:
     de8:	66 69 6e 69 73 68 69 6e 67 20 77 6f 72 6b 2c 20     finishing work, 
     df8:	63 68 61 6e 67 69 6e 67 20 61 6c 72 65 61 64 79     changing already
     e08:	20 65 78 65 63 75 74 65 64 20 27 25 73 27 20 73      executed '%s' s
     e18:	75 62 2d 74 61 73 6b 20 74 6f 20 27 25 73 27 00     ub-task to '%s'.

00000e28 <_ZZN10RestServer13processStreamEP6StreamE3__c_10>:
     e28:	73 74 61 72 74 20 74 69 6d 65 20 63 6f 75 6e 74     start time count
     e38:	65 72 00                                            er.

00000e3b <_ZZN10RestServer13processStreamEP6StreamE3__c_11>:
     e3b:	64 75 72 69 6e 67 20 6e 65 78 74 20 65 78 65 63     during next exec
     e4b:	75 74 69 6f 6e 20 74 68 65 72 65 20 77 69 6c 6c     ution there will
     e5b:	20 62 65 20 63 6f 6e 74 69 6e 75 61 74 69 6f 6e      be continuation
     e6b:	20 6f 66 20 63 75 72 72 65 6e 74 20 73 75 62 2d      of current sub-
     e7b:	74 61 73 6b 20 28 27 25 73 27 29 00                 task ('%s').

00000e87 <_ZZN19SendResponseSubTaskC1EP17RestServerSubTaskP12PageRendererS3_bP9AnyBufferIhhEE3__c>:
     e87:	53 65 6e 64 52 65 73 70 6f 6e 73 65 53 75 62 54     SendResponseSubT
     e97:	61 73 6b 00                                         ask.

00000e9b <_ZZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionhE12functionName>:
     e9b:	73 65 74 57 6f 72 6b 00                             setWork.

00000ea3 <_ZZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionhE3__c>:
     ea3:	69 73 47 45 54 48 74 74 70 4d 65 74 68 6f 64 20     isGETHttpMethod 
     eb3:	3d 20 25 75 2c 20 73 65 6e 64 52 65 73 70 6f 6e     = %u, sendRespon
     ec3:	73 65 49 6e 4a 53 4f 4e 20 3d 20 25 75 2c 20 73     seInJSON = %u, s
     ed3:	65 6e 64 52 65 73 70 6f 6e 73 65 41 73 53 65 72     endResponseAsSer
     ee3:	76 69 63 65 4d 65 74 61 44 65 73 63 72 69 70 74     viceMetaDescript
     ef3:	69 6f 6e 20 3d 20 25 75 2c 20 73 65 6c 65 63 74     ion = %u, select
     f03:	65 64 53 65 72 76 69 63 65 73 43 6f 75 6e 74 20     edServicesCount 
     f13:	3d 20 25 75 00                                      = %u.

00000f18 <_ZZN19SendResponseSubTask14executeSubTaskEP6StreamE12functionName>:
     f18:	65 78 65 63 75 74 65 53 75 62 54 61 73 6b 00        executeSubTask.

00000f27 <_ZZN19SendResponseSubTask14executeSubTaskEP6StreamE3__c>:
     f27:	73 65 6e 64 69 6e 67 20 72 65 73 70 6f 6e 73 65     sending response
     f37:	2c 20 69 6e 20 74 68 69 73 20 65 78 65 63 75 74     , in this execut
     f47:	69 6f 6e 20 67 65 6e 65 72 61 74 69 6e 67 20 72     ion generating r
     f57:	65 73 70 6f 6e 73 65 20 66 6f 72 20 72 65 73 74     esponse for rest
     f67:	20 73 65 72 76 69 63 65 20 75 6e 64 65 72 20 69      service under i
     f77:	6e 64 65 78 20 25 75 20 27 25 73 27 20 28 6f 66     ndex %u '%s' (of
     f87:	20 61 6c 6c 20 25 75 29 00                           all %u).

00000f90 <_ZZN29SkipBytesUntilSequenceSubTaskC1EP17RestServerSubTaskE3__c>:
     f90:	53 6b 69 70 42 79 74 65 73 55 6e 74 69 6c 53 65     SkipBytesUntilSe
     fa0:	71 75 65 6e 63 65 53 75 62 54 61 73 6b 00           quenceSubTask.

00000fae <_ZZN28DeterminateHttpMethodSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP19ReadHttpPathSubTaskE3__c>:
     fae:	44 65 74 65 72 6d 69 6e 61 74 65 48 74 74 70 4d     DeterminateHttpM
     fbe:	65 74 68 6f 64 53 75 62 54 61 73 6b 00              ethodSubTask.

00000fcb <_ZZN28ReadHttpParameterNameSubTaskC1EP17RestServerSubTaskjjPP18ServiceDescriptionhPbP29ReadHttpParameterValueSubTaskE3__c>:
     fcb:	52 65 61 64 48 74 74 70 50 61 72 61 6d 65 74 65     ReadHttpParamete
     fdb:	72 4e 61 6d 65 53 75 62 54 61 73 6b 00              rNameSubTask.

00000fe8 <_ZZN28ReadHttpParameterNameSubTask14executeSubTaskEP6StreamE12functionName>:
     fe8:	65 78 65 63 75 74 65 53 75 62 54 61 73 6b 00        executeSubTask.

00000ff7 <_ZZN28ReadHttpParameterNameSubTask14executeSubTaskEP6StreamE3__c>:
     ff7:	73 65 72 76 69 63 65 20 27 25 73 27 20 6e 6f 74     service '%s' not
    1007:	20 6d 61 74 63 68 69 6e 67 20 69 6e 63 6f 6d 6d      matching incomm
    1017:	69 6e 67 20 68 74 74 70 20 70 61 72 61 6d 65 74     ing http paramet
    1027:	65 72 20 6e 61 6d 65 2c 20 73 65 74 74 69 6e 67     er name, setting
    1037:	20 61 73 20 75 6e 73 65 6c 65 63 74 65 64 00         as unselected.

00001046 <_ZZN29ReadHttpParameterValueSubTaskC1EP17RestServerSubTaskjPhhE3__c>:
    1046:	52 65 61 64 48 74 74 70 50 61 72 61 6d 65 74 65     ReadHttpParamete
    1056:	72 56 61 6c 75 65 53 75 62 54 61 73 6b 00           rValueSubTask.

00001064 <_ZZN29ReadHttpParameterValueSubTask23parseReadParameterValueEvE12functionName>:
    1064:	70 61 72 73 65 52 65 61 64 50 61 72 61 6d 65 74     parseReadParamet
    1074:	65 72 56 61 6c 75 65 00                             erValue.

0000107c <_ZZN29ReadHttpParameterValueSubTask23parseReadParameterValueEvE3__c>:
    107c:	66 6f 72 20 72 65 73 74 20 73 65 72 76 69 63 65     for rest service
    108c:	20 27 25 73 27 20 69 6e 63 6f 6d 6d 69 6e 67 20      '%s' incomming 
    109c:	76 61 6c 75 65 20 3d 20 27 25 73 27 00              value = '%s'.

000010a9 <_ZZN29ReadHttpParameterValueSubTask23parseReadParameterValueEvE3__c_0>:
    10a9:	75 6e 73 75 70 70 6f 72 74 65 64 20 72 65 73 74     unsupported rest
    10b9:	20 73 65 72 76 69 63 65 20 74 79 70 65 2c 20 74      service type, t
    10c9:	72 79 65 64 20 74 6f 20 73 65 74 20 66 6f 72 20     ryed to set for 
    10d9:	73 65 72 76 69 63 65 20 27 25 73 27 20 69 6e 63     service '%s' inc
    10e9:	6f 6d 6d 69 6e 67 20 76 61 6c 75 65 20 3d 20 27     omming value = '
    10f9:	25 73 27 00                                         %s'.

000010fd <_ZZN19ReadHttpPathSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP28ReadHttpParameterNameSubTaskP19SendResponseSubTaskPP18ServiceDescriptionhS9_bPchE3__c>:
    10fd:	52 65 61 64 48 74 74 70 50 61 74 68 53 75 62 54     ReadHttpPathSubT
    110d:	61 73 6b 00                                         ask.

00001111 <_ZZN19ReadHttpPathSubTask14executeSubTaskEP6StreamE12functionName>:
    1111:	65 78 65 63 75 74 65 53 75 62 54 61 73 6b 00        executeSubTask.

00001120 <_ZZN19ReadHttpPathSubTask14executeSubTaskEP6StreamE3__c>:
    1120:	73 74 72 65 61 6d 52 65 61 64 55 6e 74 69 6c 52     streamReadUntilR
    1130:	65 73 75 6c 74 20 3d 20 2d 31 00                    esult = -1.

0000113b <_ZZN19ReadHttpPathSubTask14executeSubTaskEP6StreamE3__c_0>:
    113b:	73 74 72 65 61 6d 52 65 61 64 55 6e 74 69 6c 52     streamReadUntilR
    114b:	65 73 75 6c 74 20 3d 20 27 25 63 27 00              esult = '%c'.

00001158 <_ZZN19ReadHttpPathSubTask14executeSubTaskEP6StreamE3__c_1>:
    1158:	61 64 64 69 6e 67 20 61 6c 6c 20 73 65 72 76 69     adding all servi
    1168:	63 65 73 20 62 65 63 61 75 73 65 20 74 68 65 72     ces because ther
    1178:	65 20 77 65 72 65 20 6e 6f 20 73 65 6c 65 63 74     e were no select
    1188:	65 64 20 73 65 72 76 69 63 65 73 00                 ed services.

00001194 <_ZZN19ReadHttpPathSubTask14executeSubTaskEP6StreamE3__c_2>:
    1194:	63 6f 64 65 20 73 68 6f 75 6c 64 20 6e 6f 74 20     code should not 
    11a4:	6e 65 76 65 72 20 72 65 61 63 68 20 74 68 69 73     never reach this
    11b4:	20 70 6c 61 63 65 2c 20 73 74 72 65 61 6d 52 65      place, streamRe
    11c4:	61 64 55 6e 74 69 6c 52 65 73 75 6c 74 3d 27 25     adUntilResult='%
    11d4:	73 27 00                                            s'.

000011d7 <_ZZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_E12functionName>:
    11d7:	65 78 65 63 75 74 65 53 75 62 54 61 73 6b 00        executeSubTask.

000011e6 <_ZZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_E3__c>:
    11e6:	69 73 53 74 72 69 6e 67 53 74 61 72 74 73 57 69     isStringStartsWi
    11f6:	74 68 28 29 3a 73 74 72 20 3d 20 27 25 73 27 2c     th():str = '%s',
    1206:	20 73 74 61 72 74 73 57 69 74 68 20 3d 20 27 25      startsWith = '%
    1216:	73 27 2c 20 72 65 73 75 6c 74 20 3d 20 00           s', result = .

00001224 <_ZZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_E3__c_0>:
    1224:	66 61 6c 73 65 00                                   false.

0000122a <_ZZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_E3__c_1>:
    122a:	74 72 75 65 00                                      true.

0000122f <_ZZN19ReadHttpPathSubTask14compareStringsEPcS0_E12functionName>:
    122f:	63 6f 6d 70 61 72 65 53 74 72 69 6e 67 73 00        compareStrings.

0000123e <_ZZN19ReadHttpPathSubTask14compareStringsEPcS0_E3__c>:
    123e:	69 73 53 74 72 69 6e 67 53 74 61 72 74 73 57 69     isStringStartsWi
    124e:	74 68 28 29 3a 73 74 72 31 20 3d 20 27 25 73 27     th():str1 = '%s'
    125e:	2c 20 73 74 72 32 20 3d 20 27 25 73 27 2c 20 72     , str2 = '%s', r
    126e:	65 73 75 6c 74 20 3d 20 00                          esult = .

00001277 <_ZZN19ReadHttpPathSubTask14compareStringsEPcS0_E3__c_0>:
    1277:	66 61 6c 73 65 00                                   false.

0000127d <_ZZN19ReadHttpPathSubTask14compareStringsEPcS0_E3__c_1>:
    127d:	74 72 75 65 00                                      true.

00001282 <_ZN12DebugPrinter24debugLevelPrefixForERRORE>:
    1282:	45 3a 00                                            E:.

00001285 <_ZN12DebugPrinter26debugLevelPrefixForWARNINGE>:
    1285:	57 3a 00                                            W:.

00001288 <_ZN12DebugPrinter23debugLevelPrefixForINFOE>:
    1288:	49 3a 00                                            I:.

0000128b <_ZN12DebugPrinter22debugLevelPrefixForALLE>:
    128b:	41 3a 00                                            A:.

0000128e <_ZN12DebugPrinter7newLineE>:
    128e:	0d 0a 00                                            ...

00001291 <_ZN12DebugPrinter19functionNamePostfixE>:
    1291:	28 29 3a 00                                         ():.

00001295 <_ZN12DebugPrinter30classNameAndFunctionNameSpacerE>:
    1295:	3a 3a 00                                            ::.

00001298 <_ZZN18PinHighLowRunnableC1EhbE3__c>:
    1298:	50 69 6e 48 69 67 68 4c 6f 77 52 75 6e 6e 61 62     PinHighLowRunnab
    12a8:	6c 65 00                                            le.

000012ab <_ZZN18PinHighLowRunnable3runEvE12functionName>:
    12ab:	73 65 6e 64 52 65 63 65 69 76 65 44 61 74 61 52     sendReceiveDataR
    12bb:	65 71 75 65 73 74 00                                equest.

000012c2 <_ZZN18PinHighLowRunnable3runEvE3__c>:
    12c2:	63 68 61 6e 67 69 6e 67 20 73 74 61 74 65 20 6f     changing state o
    12d2:	66 20 70 69 6e 20 25 75 20 66 72 6f 6d 20 25 75     f pin %u from %u
    12e2:	20 74 6f 20 25 75 00                                 to %u.

000012e9 <_ZZN18PinHighLowRunnable6setPinEhE12functionName>:
    12e9:	73 65 74 50 69 6e 00                                setPin.

000012f0 <_ZZN18PinHighLowRunnable6setPinEhE3__c>:
    12f0:	74 68 69 73 20 66 75 6e 63 74 69 6f 6e 20 69 73     this function is
    1300:	20 6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64      not implemented
    1310:	20 79 65 74 21 20 63 6f 75 6c 64 20 6e 6f 74 20      yet! could not 
    1320:	73 65 74 20 63 75 72 72 65 6e 74 20 70 69 6e 20     set current pin 
    1330:	28 25 75 29 20 74 6f 20 6e 65 77 20 70 69 6e 20     (%u) to new pin 
    1340:	25 75 00                                            %u.

00001343 <_ZZN20StreamReadHttpMethodC1EvE3__c>:
    1343:	53 74 72 65 61 6d 52 65 61 64 48 74 74 70 4d 65     StreamReadHttpMe
    1353:	74 68 6f 64 00                                      thod.

00001358 <_ZZN20StreamReadHttpMethod4readEvE12functionName>:
    1358:	72 65 61 64 00                                      read.

0000135d <_ZZN20StreamReadHttpMethod4readEvE3__c>:
    135d:	72 65 74 75 72 6e 69 6e 67 20 68 74 74 70 4d 65     returning httpMe
    136d:	74 68 6f 64 3d 25 69 00                             thod=%i.

00001375 <_ZZN15StreamSkipBytesC1EvE3__c>:
    1375:	53 74 72 65 61 6d 53 6b 69 70 42 79 74 65 73 00     StreamSkipBytes.

00001385 <_ZZN15StreamSkipBytes4readEvE12functionName>:
    1385:	72 65 61 64 00                                      read.

0000138a <_ZZN15StreamSkipBytes4readEvE3__c>:
    138a:	6d 61 69 6e 53 74 72 65 61 6d 2d 3e 61 76 61 69     mainStream->avai
    139a:	6c 61 62 6c 65 28 29 3d 3d 30 2c 20 72 65 74 75     lable()==0, retu
    13aa:	72 6e 69 6e 67 20 30 20 28 74 68 65 72 65 20 77     rning 0 (there w
    13ba:	65 72 65 20 72 65 61 64 20 61 6e 64 20 6e 6f 77     ere read and now
    13ca:	20 74 68 65 72 65 20 69 73 20 6e 6f 20 64 61 74      there is no dat
    13da:	61 20 69 6e 20 74 68 65 20 73 74 72 65 61 6d 29     a in the stream)
	...

000013eb <_ZZN15StreamSkipBytes4readEvE3__c_0>:
    13eb:	70 65 65 6b 42 79 74 65 20 3d 20 25 63 20 28 25     peekByte = %c (%
    13fb:	75 29 2c 20 61 6c 72 65 61 64 79 4d 61 74 63 68     u), alreadyMatch
    140b:	65 64 42 79 74 65 73 43 6f 75 6e 74 20 3d 20 25     edBytesCount = %
    141b:	75 00                                               u.

0000141d <_ZZN15StreamSkipBytes4readEvE3__c_1>:
    141d:	70 65 65 6b 42 79 74 65 20 3d 3d 20 2d 31 2c 20     peekByte == -1, 
    142d:	72 65 74 75 72 6e 69 6e 67 20 30 20 28 74 68 65     returning 0 (the
    143d:	72 65 20 77 65 72 65 20 72 65 61 64 20 61 6e 64     re were read and
    144d:	20 6e 6f 77 20 74 68 65 72 65 20 69 73 20 6e 6f      now there is no
    145d:	20 64 61 74 61 20 69 6e 20 74 68 65 20 73 74 72      data in the str
    146d:	65 61 6d 29 00                                      eam).

00001472 <_ZZN15StreamSkipBytes4readEvE3__c_2>:
    1472:	72 65 74 75 72 6e 69 6e 67 20 31 00                 returning 1.

0000147e <_ZZN18SampleTaskRunnableC1EPKctE3__c>:
    147e:	53 61 6d 70 6c 65 54 61 73 6b 52 75 6e 6e 61 62     SampleTaskRunnab
    148e:	6c 65 00                                            le.

00001491 <_ZZN18SampleTaskRunnable3runEvE12functionName>:
    1491:	72 75 6e 00                                         run.

00001495 <_ZZN11TaskManagerC1EjPPK17TaskManagerRecordE3__c>:
    1495:	54 61 73 6b 4d 61 6e 61 67 65 72 00                 TaskManager.

000014a1 <_ZZN11TaskManager3addEP17TaskManagerRecordE12functionName>:
    14a1:	61 64 64 00                                         add.

000014a5 <_ZZN11TaskManager3addEP17TaskManagerRecordE3__c>:
    14a5:	63 61 6e 6e 6f 74 20 61 64 64 20 74 61 73 6b 20     cannot add task 
    14b5:	62 65 63 61 75 73 65 20 74 61 73 6b 4d 61 6e 61     because taskMana
    14c5:	67 65 72 52 65 63 6f 72 64 20 6f 72 20 74 61 73     gerRecord or tas
    14d5:	6b 4d 61 6e 61 67 65 72 52 65 63 6f 72 64 2d 3e     kManagerRecord->
    14e5:	72 75 6e 6e 61 62 6c 65 20 69 73 20 4e 55 4c 4c     runnable is NULL
	...

000014f6 <_ZZN11TaskManager3addEP17TaskManagerRecordE3__c_0>:
    14f6:	63 61 6e 6e 6f 74 20 61 64 64 20 74 61 73 6b 2c     cannot add task,
    1506:	20 61 72 72 61 79 20 69 73 20 66 75 6c 6c 2c 20      array is full, 
    1516:	63 75 72 72 65 6e 74 20 74 61 73 6b 73 20 63 6f     current tasks co
    1526:	75 6e 74 20 20 25 75 2c 20 74 61 73 6b 4d 61 6e     unt  %u, taskMan
    1536:	61 67 65 72 52 65 63 6f 72 64 2a 20 3d 20 25 75     agerRecord* = %u
	...

00001547 <_ZZN11TaskManager3addEP17TaskManagerRecordE3__c_1>:
    1547:	61 64 64 69 6e 67 20 74 61 73 6b 20 75 6e 64 65     adding task unde
    1557:	72 20 69 6e 64 65 78 20 25 75 2c 20 74 61 73 6b     r index %u, task
    1567:	4d 61 6e 61 67 65 72 52 65 63 6f 72 64 2a 20 3d     ManagerRecord* =
    1577:	20 25 75 00                                          %u.

0000157b <_ZZN11TaskManager15removeByPointerEP17TaskManagerRecordE12functionName>:
    157b:	72 65 6d 6f 76 65 42 79 50 6f 69 6e 74 65 72 00     removeByPointer.

0000158b <_ZZN11TaskManager15removeByPointerEP17TaskManagerRecordE3__c>:
    158b:	72 65 6d 6f 76 69 6e 67 20 70 74 72 2a 20 3d 20     removing ptr* = 
    159b:	25 75 2c 20 69 6e 20 74 61 73 6b 73 41 72 72 61     %u, in tasksArra
    15ab:	79 20 69 6e 64 65 78 20 3d 20 25 75 00              y index = %u.

000015b8 <_ZZN11TaskManager15removeByPointerEP17TaskManagerRecordE3__c_0>:
    15b8:	63 6f 75 6c 64 20 6e 6f 74 20 66 69 6e 64 20 70     could not find p
    15c8:	74 72 2a 20 3d 20 25 75 20 69 6e 20 74 61 73 6b     tr* = %u in task
    15d8:	73 41 72 72 61 79 00                                sArray.

000015df <_ZZN11TaskManager13removeByIndexEjE12functionName>:
    15df:	72 65 6d 6f 76 65 42 79 49 6e 64 65 78 00           removeByIndex.

000015ed <_ZZN11TaskManager13removeByIndexEjE3__c>:
    15ed:	72 65 6d 6f 76 69 6e 67 20 69 6e 64 65 78 20 3d     removing index =
    15fd:	20 25 75 2c 20 74 61 73 6b 73 41 72 72 61 79 5b      %u, tasksArray[
    160d:	25 75 5d 20 3d 20 25 75 00                          %u] = %u.

00001616 <_ZZN11TaskManager13removeByIndexEjE3__c_0>:
    1616:	69 6e 76 61 6c 69 64 20 69 6e 64 65 78 20 3d 20     invalid index = 
    1626:	25 75 2c 20 6d 61 78 54 61 73 6b 73 43 6f 75 6e     %u, maxTasksCoun
    1636:	74 20 3d 20 00                                      t = .

0000163b <_ZZN11TaskManager7executeEvE12functionName>:
    163b:	65 78 65 63 75 74 65 00                             execute.

00001643 <_ZZN11TaskManager7executeEvE3__c>:
    1643:	65 78 65 63 75 74 69 6e 67 20 74 61 73 6b 20 75     executing task u
    1653:	6e 64 65 72 20 69 6e 64 65 78 20 25 75 2c 20 74     nder index %u, t
    1663:	61 73 6b 4d 61 6e 61 67 65 72 52 65 63 6f 72 64     askManagerRecord
    1673:	2a 20 3d 20 25 75 2c 20 63 75 72 72 65 6e 74 54     * = %u, currentT
    1683:	61 73 6b 73 43 6f 75 6e 74 20 3d 20 25 75 00        asksCount = %u.

00001692 <_ZZN11TaskManager7executeEvE3__c_0>:
    1692:	74 61 73 6b 20 75 6e 64 65 72 20 69 6e 64 65 78     task under index
    16a2:	20 25 75 20 77 61 6e 74 65 64 20 74 6f 20 62 65      %u wanted to be
    16b2:	20 72 65 6d 6f 76 65 64 20 66 72 6f 6d 20 54 61      removed from Ta
    16c2:	73 6b 4d 61 6e 61 67 65 72 20 28 70 74 72 2a 3d     skManager (ptr*=
    16d2:	25 75 29 2c 20 77 69 6c 6c 20 62 65 20 72 65 6d     %u), will be rem
    16e2:	6f 76 65 64 00                                      oved.

000016e7 <_ZZN11TaskManager7executeEvE3__c_1>:
    16e7:	74 61 73 6b 20 75 6e 64 65 72 20 69 6e 64 65 78     task under index
    16f7:	20 25 75 20 77 61 73 20 72 65 6d 6f 76 65 64 2c      %u was removed,
    1707:	20 63 75 72 72 65 6e 74 54 61 73 6b 73 43 6f 75      currentTasksCou
    1717:	6e 74 20 77 61 73 20 64 65 63 72 65 61 73 65 64     nt was decreased
    1727:	20 74 6f 20 25 75 00                                 to %u.

0000172e <_ZZN11TaskManager7executeEvE3__c_2>:
    172e:	63 61 6e 6e 6f 74 20 65 78 65 63 75 74 65 20 74     cannot execute t
    173e:	61 73 6b 20 77 69 74 68 20 69 6e 64 65 78 20 25     ask with index %
    174e:	64 20 69 6e 20 74 61 73 6b 73 41 72 72 61 79 2c     d in tasksArray,
    175e:	20 74 61 73 6b 20 69 73 20 6e 75 6c 6c 00            task is null.

0000176c <_ZZN11TaskManager15printTasksArrayEvE12functionName>:
    176c:	70 72 69 6e 74 54 61 73 6b 73 41 72 72 61 79 00     printTasksArray.

0000177c <_ZZN11TaskManager15printTasksArrayEvE3__c>:
	...

0000177d <_ZZN11TaskManager15printTasksArrayEvE3__c_0>:
    177d:	5b 25 75 5d 3d 25 75 00                             [%u]=%u.

00001785 <_ZZN11TaskManager15printTasksArrayEvE3__c_1>:
	...

00001786 <_ZZN11TaskManager18recompactTaskArrayEvE12functionName>:
    1786:	72 65 63 6f 6d 70 61 63 74 54 61 73 6b 41 72 72     recompactTaskArr
    1796:	61 79 00                                            ay.

00001799 <_ZZN11TaskManager18recompactTaskArrayEvE3__c>:
    1799:	72 65 63 6f 6d 70 61 63 74 69 6e 67 20 74 61 73     recompacting tas
    17a9:	6b 41 72 72 61 79 00                                kArray.

000017b0 <_ZZN11TaskManager18recompactTaskArrayEvE3__c_0>:
    17b0:	6f 6c 64 20 74 61 73 6b 41 72 72 61 79 3a 00        old taskArray:.

000017bf <_ZZN11TaskManager18recompactTaskArrayEvE3__c_1>:
    17bf:	6e 65 77 20 74 61 73 6b 41 72 72 61 79 3a 00        new taskArray:.

000017ce <_ZZN11TaskManager18recompactTaskArrayEvE3__c_2>:
    17ce:	70 72 65 76 69 6f 75 73 20 74 61 73 6b 73 20 63     previous tasks c
    17de:	6f 75 6e 74 3d 25 75 2c 20 6e 65 77 20 74 61 73     ount=%u, new tas
    17ee:	6b 73 20 63 6f 75 6e 64 3d 25 75 00                 ks cound=%u.

000017fa <_ZZN33TaskManagerSchedulerTimeIntervalsC1EPmhbE3__c>:
    17fa:	54 61 73 6b 4d 61 6e 61 67 65 72 53 63 68 65 64     TaskManagerSched
    180a:	75 6c 65 72 54 69 6d 65 49 6e 74 65 72 76 61 6c     ulerTimeInterval
    181a:	73 00                                               s.

0000181c <_ZZN33TaskManagerSchedulerTimeIntervals10canExecuteEvE12functionName>:
    181c:	63 61 6e 45 78 65 63 75 74 65 00                    canExecute.

00001827 <_ZZN33TaskManagerSchedulerTimeIntervals10canExecuteEvE3__c>:
    1827:	72 65 74 75 72 6e 69 6e 67 20 54 52 55 45 2c 00     returning TRUE,.

00001837 <_ZZN33TaskManagerSchedulerTimeIntervals10canExecuteEvE3__c_0>:
    1837:	77 69 6c 6c 20 6e 6f 74 20 62 65 20 65 78 65 63     will not be exec
    1847:	75 74 65 64 20 61 67 61 69 6e 2c 20 77 69 6c 6c     uted again, will
    1857:	20 72 65 71 75 65 73 74 20 74 6f 20 62 65 20 72      request to be r
    1867:	65 6d 6f 76 65 64 20 66 72 6f 6d 20 54 61 73 6b     emoved from Task
    1877:	4d 61 6e 61 67 65 72 00                             Manager.

0000187f <_ZZN33TaskManagerSchedulerTimeIntervals10canExecuteEvE3__c_1>:
    187f:	20 77 69 6c 6c 20 62 65 20 65 78 65 63 75 74 65      will be execute
    188f:	64 20 61 67 61 69 6e 20 69 6e 20 25 75 6d 73 00     d again in %ums.

0000189f <_ZZN33TaskManagerSchedulerTimeIntervals10canExecuteEvE3__c_2>:
	...

000018a0 <_ZZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEvE12functionName>:
    18a0:	63 61 6e 52 65 6d 6f 76 65 46 72 6f 6d 54 61 73     canRemoveFromTas
    18b0:	6b 4d 61 6e 61 67 65 72 00                          kManager.

000018b9 <_ZZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEvE3__c>:
    18b9:	72 65 74 75 72 6e 69 6e 67 20 25 75 00              returning %u.

000018c6 <digital_pin_to_timer_PGM>:
    18c6:	00 00 09 0a 02 08 0b 0c 0d 07 06 03 04 01 00 00     ................
	...
    18f2:	11 10 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

0000190c <digital_pin_to_bit_mask_PGM>:
    190c:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
    191c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
    192c:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
    193c:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
    194c:	04 08 10 20 40 80                                   ... @.

00001952 <digital_pin_to_port_PGM>:
    1952:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
    1962:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
    1972:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
    1982:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
    1992:	0b 0b 0b 0b 0b 0b                                   ......

00001998 <port_to_input_PGM>:
    1998:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
    19a8:	00 01 00 00 03 01 06 01 09 01                       ..........

000019b2 <port_to_output_PGM>:
    19b2:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
    19c2:	02 01 00 00 05 01 08 01 0b 01                       ..........

000019cc <port_to_mode_PGM>:
    19cc:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
    19dc:	01 01 00 00 04 01 07 01 0a 01                       ..........

000019e6 <__ctors_start>:
    19e6:	8b 15       	cp	r24, r11
    19e8:	15 44       	sbci	r17, 0x45	; 69

000019ea <__ctors_end>:
    19ea:	90 15       	cp	r25, r0

000019ec <__dtors_end>:
    19ec:	11 24       	eor	r1, r1
    19ee:	1f be       	out	0x3f, r1	; 63
    19f0:	cf ef       	ldi	r28, 0xFF	; 255
    19f2:	d1 e2       	ldi	r29, 0x21	; 33
    19f4:	de bf       	out	0x3e, r29	; 62
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	00 e0       	ldi	r16, 0x00	; 0
    19fa:	0c bf       	out	0x3c, r16	; 60

000019fc <__do_copy_data>:
    19fc:	1f e0       	ldi	r17, 0x0F	; 15
    19fe:	a0 e0       	ldi	r26, 0x00	; 0
    1a00:	b2 e0       	ldi	r27, 0x02	; 2
    1a02:	ec ec       	ldi	r30, 0xCC	; 204
    1a04:	f9 e9       	ldi	r31, 0x99	; 153
    1a06:	00 e0       	ldi	r16, 0x00	; 0
    1a08:	0b bf       	out	0x3b, r16	; 59
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <__do_copy_data+0x14>
    1a0c:	07 90       	elpm	r0, Z+
    1a0e:	0d 92       	st	X+, r0
    1a10:	a6 3d       	cpi	r26, 0xD6	; 214
    1a12:	b1 07       	cpc	r27, r17
    1a14:	d9 f7       	brne	.-10     	; 0x1a0c <__do_copy_data+0x10>

00001a16 <__do_clear_bss>:
    1a16:	19 e1       	ldi	r17, 0x19	; 25
    1a18:	a6 ed       	ldi	r26, 0xD6	; 214
    1a1a:	bf e0       	ldi	r27, 0x0F	; 15
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <.do_clear_bss_start>

00001a1e <.do_clear_bss_loop>:
    1a1e:	1d 92       	st	X+, r1

00001a20 <.do_clear_bss_start>:
    1a20:	ad 36       	cpi	r26, 0x6D	; 109
    1a22:	b1 07       	cpc	r27, r17
    1a24:	e1 f7       	brne	.-8      	; 0x1a1e <.do_clear_bss_loop>

00001a26 <__do_global_ctors>:
    1a26:	19 e1       	ldi	r17, 0x19	; 25
    1a28:	ca ee       	ldi	r28, 0xEA	; 234
    1a2a:	d9 e1       	ldi	r29, 0x19	; 25
    1a2c:	00 e0       	ldi	r16, 0x00	; 0
    1a2e:	06 c0       	rjmp	.+12     	; 0x1a3c <__do_global_ctors+0x16>
    1a30:	22 97       	sbiw	r28, 0x02	; 2
    1a32:	01 09       	sbc	r16, r1
    1a34:	fe 01       	movw	r30, r28
    1a36:	0b bf       	out	0x3b, r16	; 59
    1a38:	0e 94 b2 48 	call	0x9164	; 0x9164 <__tablejump_elpm__>
    1a3c:	c6 3e       	cpi	r28, 0xE6	; 230
    1a3e:	d1 07       	cpc	r29, r17
    1a40:	80 e0       	ldi	r24, 0x00	; 0
    1a42:	08 07       	cpc	r16, r24
    1a44:	a9 f7       	brne	.-22     	; 0x1a30 <__do_global_ctors+0xa>
    1a46:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <main>
    1a4a:	0c 94 d4 4c 	jmp	0x99a8	; 0x99a8 <__do_global_dtors>

00001a4e <__bad_interrupt>:
    1a4e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001a52 <_ZN31HeartBeatBuzzerOnOffRestService15getBooleanValueEv>:

// =================================================

bool HeartBeatBuzzerOnOffRestService::getBooleanValue()
{
	return heartBeatRunnable->isBuzzerOn;
    1a52:	dc 01       	movw	r26, r24
    1a54:	16 96       	adiw	r26, 0x06	; 6
    1a56:	ed 91       	ld	r30, X+
    1a58:	fc 91       	ld	r31, X
    1a5a:	17 97       	sbiw	r26, 0x07	; 7
}
    1a5c:	83 81       	ldd	r24, Z+3	; 0x03
    1a5e:	08 95       	ret

00001a60 <_ZN31HeartBeatBuzzerOnOffRestService15setBooleanValueEb>:

// =================================================

void HeartBeatBuzzerOnOffRestService::setBooleanValue( bool newValue )
{
	if( heartBeatRunnable->isBuzzerOn != newValue ) heartBeatRunnable->setBuzzerOn( newValue );
    1a60:	fc 01       	movw	r30, r24
    1a62:	86 81       	ldd	r24, Z+6	; 0x06
    1a64:	97 81       	ldd	r25, Z+7	; 0x07
    1a66:	fc 01       	movw	r30, r24
    1a68:	23 81       	ldd	r18, Z+3	; 0x03
    1a6a:	26 17       	cp	r18, r22
    1a6c:	11 f0       	breq	.+4      	; 0x1a72 <_ZN31HeartBeatBuzzerOnOffRestService15setBooleanValueEb+0x12>
    1a6e:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <_ZN17HeartBeatRunnable11setBuzzerOnEb>
    1a72:	08 95       	ret

00001a74 <_ZN31HeartBeatBuzzerOnOffRestService18writeValueToStreamEP6Stream>:

// =================================================

void HeartBeatBuzzerOnOffRestService::writeValueToStream( Stream* stream )
{
	stream->print( heartBeatRunnable->isBuzzerOn ? "on" : "off" );
    1a74:	dc 01       	movw	r26, r24
    1a76:	16 96       	adiw	r26, 0x06	; 6
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	17 97       	sbiw	r26, 0x07	; 7
    1a7e:	83 81       	ldd	r24, Z+3	; 0x03
    1a80:	88 23       	and	r24, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <_ZN31HeartBeatBuzzerOnOffRestService18writeValueToStreamEP6Stream+0x16>
    1a84:	20 e0       	ldi	r18, 0x00	; 0
    1a86:	32 e0       	ldi	r19, 0x02	; 2
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <_ZN31HeartBeatBuzzerOnOffRestService18writeValueToStreamEP6Stream+0x1a>
    1a8a:	23 e0       	ldi	r18, 0x03	; 3
    1a8c:	32 e0       	ldi	r19, 0x02	; 2
    1a8e:	cb 01       	movw	r24, r22
    1a90:	b9 01       	movw	r22, r18
    1a92:	0e 94 17 45 	call	0x8a2e	; 0x8a2e <_ZN5Print5printEPKc>
}
    1a96:	08 95       	ret

00001a98 <_ZN31HeartBeatBuzzerOnOffRestServiceC1EhPKcP17HeartBeatRunnable>:

#include "HeartBeatBuzzerOnOffRestService.h"

// =================================================

HeartBeatBuzzerOnOffRestService::HeartBeatBuzzerOnOffRestService( unsigned char _id , const char* _name , HeartBeatRunnable* _heartBeatRunnable ) : RestService( _id , _name , REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF ) //, p(_p)
    1a98:	0f 93       	push	r16
    1a9a:	1f 93       	push	r17
    1a9c:	cf 93       	push	r28
    1a9e:	df 93       	push	r29
    1aa0:	ec 01       	movw	r28, r24
    1aa2:	89 01       	movw	r16, r18
    1aa4:	24 e0       	ldi	r18, 0x04	; 4
    1aa6:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    1aaa:	8d ed       	ldi	r24, 0xDD	; 221
    1aac:	9d e0       	ldi	r25, 0x0D	; 13
    1aae:	99 83       	std	Y+1, r25	; 0x01
    1ab0:	88 83       	st	Y, r24
{
	heartBeatRunnable = _heartBeatRunnable;
    1ab2:	1f 83       	std	Y+7, r17	; 0x07
    1ab4:	0e 83       	std	Y+6, r16	; 0x06
}
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <_ZN28HeartBeatLedOnOffRestService15getBooleanValueEv>:

// =================================================

bool HeartBeatLedOnOffRestService::getBooleanValue()
{
	return heartBeatRunnable->isLedOn;
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	16 96       	adiw	r26, 0x06	; 6
    1ac4:	ed 91       	ld	r30, X+
    1ac6:	fc 91       	ld	r31, X
    1ac8:	17 97       	sbiw	r26, 0x07	; 7
}
    1aca:	82 81       	ldd	r24, Z+2	; 0x02
    1acc:	08 95       	ret

00001ace <_ZN28HeartBeatLedOnOffRestService15setBooleanValueEb>:

// =================================================

void HeartBeatLedOnOffRestService::setBooleanValue( bool newValue )
{
	if( heartBeatRunnable->isLedOn != newValue ) heartBeatRunnable->setLedOn( newValue );
    1ace:	fc 01       	movw	r30, r24
    1ad0:	86 81       	ldd	r24, Z+6	; 0x06
    1ad2:	97 81       	ldd	r25, Z+7	; 0x07
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	22 81       	ldd	r18, Z+2	; 0x02
    1ad8:	26 17       	cp	r18, r22
    1ada:	11 f0       	breq	.+4      	; 0x1ae0 <_ZN28HeartBeatLedOnOffRestService15setBooleanValueEb+0x12>
    1adc:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <_ZN17HeartBeatRunnable8setLedOnEb>
    1ae0:	08 95       	ret

00001ae2 <_ZN28HeartBeatLedOnOffRestService18writeValueToStreamEP6Stream>:

// =================================================

void HeartBeatLedOnOffRestService::writeValueToStream( Stream* stream )
{
	stream->print( heartBeatRunnable->isLedOn ? "on" : "off" );
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	16 96       	adiw	r26, 0x06	; 6
    1ae6:	ed 91       	ld	r30, X+
    1ae8:	fc 91       	ld	r31, X
    1aea:	17 97       	sbiw	r26, 0x07	; 7
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	88 23       	and	r24, r24
    1af0:	19 f0       	breq	.+6      	; 0x1af8 <_ZN28HeartBeatLedOnOffRestService18writeValueToStreamEP6Stream+0x16>
    1af2:	27 e0       	ldi	r18, 0x07	; 7
    1af4:	32 e0       	ldi	r19, 0x02	; 2
    1af6:	02 c0       	rjmp	.+4      	; 0x1afc <_ZN28HeartBeatLedOnOffRestService18writeValueToStreamEP6Stream+0x1a>
    1af8:	2a e0       	ldi	r18, 0x0A	; 10
    1afa:	32 e0       	ldi	r19, 0x02	; 2
    1afc:	cb 01       	movw	r24, r22
    1afe:	b9 01       	movw	r22, r18
    1b00:	0e 94 17 45 	call	0x8a2e	; 0x8a2e <_ZN5Print5printEPKc>
}
    1b04:	08 95       	ret

00001b06 <_ZN28HeartBeatLedOnOffRestServiceC1EhPKcP17HeartBeatRunnable>:

#include "HeartBeatLedOnOffRestService.h"

// =================================================

HeartBeatLedOnOffRestService::HeartBeatLedOnOffRestService( unsigned char _id , const char* _name , HeartBeatRunnable* _heartBeatRunnable ) : RestService( _id , _name , REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF ) //, p(_p)
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	ec 01       	movw	r28, r24
    1b10:	89 01       	movw	r16, r18
    1b12:	24 e0       	ldi	r18, 0x04	; 4
    1b14:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    1b18:	81 ef       	ldi	r24, 0xF1	; 241
    1b1a:	9d e0       	ldi	r25, 0x0D	; 13
    1b1c:	99 83       	std	Y+1, r25	; 0x01
    1b1e:	88 83       	st	Y, r24
{
	heartBeatRunnable = _heartBeatRunnable;
    1b20:	1f 83       	std	Y+7, r17	; 0x07
    1b22:	0e 83       	std	Y+6, r16	; 0x06
}
    1b24:	df 91       	pop	r29
    1b26:	cf 91       	pop	r28
    1b28:	1f 91       	pop	r17
    1b2a:	0f 91       	pop	r16
    1b2c:	08 95       	ret

00001b2e <_ZN17HeartBeatRunnable3runEv>:
}*/

// =================================================

void HeartBeatRunnable::run()
{
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "run";

	//all( p << "HeartBeatRunnable:run():isLedOn=" << isLedOn << ", isBuzzerOn=" << isBuzzerOn << endl; )
	aln( "isLedOn = %u, isBuzzerOn = %u" , isLedOn , isBuzzerOn )
    1b34:	8e 81       	ldd	r24, Y+6	; 0x06
    1b36:	8b 30       	cpi	r24, 0x0B	; 11
    1b38:	58 f5       	brcc	.+86     	; 0x1b90 <_ZN17HeartBeatRunnable3runEv+0x62>
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	04 96       	adiw	r24, 0x04	; 4
    1b3e:	6b e8       	ldi	r22, 0x8B	; 139
    1b40:	72 e1       	ldi	r23, 0x12	; 18
    1b42:	42 e4       	ldi	r20, 0x42	; 66
    1b44:	51 e0       	ldi	r21, 0x01	; 1
    1b46:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    1b4a:	00 d0       	rcall	.+0      	; 0x1b4c <_ZN17HeartBeatRunnable3runEv+0x1e>
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <_ZN17HeartBeatRunnable3runEv+0x20>
    1b4e:	ed b7       	in	r30, 0x3d	; 61
    1b50:	fe b7       	in	r31, 0x3e	; 62
    1b52:	31 96       	adiw	r30, 0x01	; 1
    1b54:	86 e4       	ldi	r24, 0x46	; 70
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	ad b7       	in	r26, 0x3d	; 61
    1b5a:	be b7       	in	r27, 0x3e	; 62
    1b5c:	12 96       	adiw	r26, 0x02	; 2
    1b5e:	9c 93       	st	X, r25
    1b60:	8e 93       	st	-X, r24
    1b62:	11 97       	sbiw	r26, 0x01	; 1
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	82 83       	std	Z+2, r24	; 0x02
    1b68:	13 82       	std	Z+3, r1	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	84 83       	std	Z+4, r24	; 0x04
    1b6e:	15 82       	std	Z+5, r1	; 0x05
    1b70:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	8e e8       	ldi	r24, 0x8E	; 142
    1b7e:	92 e1       	ldi	r25, 0x12	; 18
    1b80:	ed b7       	in	r30, 0x3d	; 61
    1b82:	fe b7       	in	r31, 0x3e	; 62
    1b84:	92 83       	std	Z+2, r25	; 0x02
    1b86:	81 83       	std	Z+1, r24	; 0x01
    1b88:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0

	if( ledRunnable != NULL )
    1b90:	8f 81       	ldd	r24, Y+7	; 0x07
    1b92:	98 85       	ldd	r25, Y+8	; 0x08
    1b94:	00 97       	sbiw	r24, 0x00	; 0
    1b96:	c1 f0       	breq	.+48     	; 0x1bc8 <_ZN17HeartBeatRunnable3runEv+0x9a>
	{
		if( isLedOn || digitalRead( ledRunnable->getPin() )  == HIGH ) ledRunnable->run();
    1b98:	2a 81       	ldd	r18, Y+2	; 0x02
    1b9a:	22 23       	and	r18, r18
    1b9c:	61 f4       	brne	.+24     	; 0x1bb6 <_ZN17HeartBeatRunnable3runEv+0x88>
    1b9e:	dc 01       	movw	r26, r24
    1ba0:	ed 91       	ld	r30, X+
    1ba2:	fc 91       	ld	r31, X
    1ba4:	02 80       	ldd	r0, Z+2	; 0x02
    1ba6:	f3 81       	ldd	r31, Z+3	; 0x03
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	19 95       	eicall
    1bac:	0e 94 40 48 	call	0x9080	; 0x9080 <digitalRead>
    1bb0:	81 30       	cpi	r24, 0x01	; 1
    1bb2:	91 05       	cpc	r25, r1
    1bb4:	49 f4       	brne	.+18     	; 0x1bc8 <_ZN17HeartBeatRunnable3runEv+0x9a>
    1bb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb8:	98 85       	ldd	r25, Y+8	; 0x08
    1bba:	dc 01       	movw	r26, r24
    1bbc:	ed 91       	ld	r30, X+
    1bbe:	fc 91       	ld	r31, X
    1bc0:	01 90       	ld	r0, Z+
    1bc2:	f0 81       	ld	r31, Z
    1bc4:	e0 2d       	mov	r30, r0
    1bc6:	19 95       	eicall
	}

	if( buzzerRunnable != NULL )
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	c1 f0       	breq	.+48     	; 0x1c00 <_ZN17HeartBeatRunnable3runEv+0xd2>
	{
		if( isBuzzerOn || digitalRead( buzzerRunnable->getPin() ) == HIGH ) buzzerRunnable->run();
    1bd0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bd2:	22 23       	and	r18, r18
    1bd4:	61 f4       	brne	.+24     	; 0x1bee <_ZN17HeartBeatRunnable3runEv+0xc0>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	ed 91       	ld	r30, X+
    1bda:	fc 91       	ld	r31, X
    1bdc:	02 80       	ldd	r0, Z+2	; 0x02
    1bde:	f3 81       	ldd	r31, Z+3	; 0x03
    1be0:	e0 2d       	mov	r30, r0
    1be2:	19 95       	eicall
    1be4:	0e 94 40 48 	call	0x9080	; 0x9080 <digitalRead>
    1be8:	81 30       	cpi	r24, 0x01	; 1
    1bea:	91 05       	cpc	r25, r1
    1bec:	49 f4       	brne	.+18     	; 0x1c00 <_ZN17HeartBeatRunnable3runEv+0xd2>
    1bee:	89 85       	ldd	r24, Y+9	; 0x09
    1bf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	ed 91       	ld	r30, X+
    1bf6:	fc 91       	ld	r31, X
    1bf8:	01 90       	ld	r0, Z+
    1bfa:	f0 81       	ld	r31, Z
    1bfc:	e0 2d       	mov	r30, r0
    1bfe:	19 95       	eicall
	}
}
    1c00:	df 91       	pop	r29
    1c02:	cf 91       	pop	r28
    1c04:	08 95       	ret

00001c06 <_ZN17HeartBeatRunnableC1EP18PinHighLowRunnablebS1_b>:

#include "HeartBeatRunnable.h"

// =================================================

HeartBeatRunnable::HeartBeatRunnable( PinHighLowRunnable* _ledRunnable , bool _isLedOn , PinHighLowRunnable* _buzzerRunnable , bool _isBuzzerOn ) : dp( PSTR( "HeartBeatRunnable" ) )
    1c06:	af 92       	push	r10
    1c08:	bf 92       	push	r11
    1c0a:	cf 92       	push	r12
    1c0c:	df 92       	push	r13
    1c0e:	ef 92       	push	r14
    1c10:	ff 92       	push	r15
    1c12:	0f 93       	push	r16
    1c14:	cf 93       	push	r28
    1c16:	df 93       	push	r29
    1c18:	0f 92       	push	r0
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	5c 01       	movw	r10, r24
    1c20:	6b 01       	movw	r12, r22
    1c22:	79 01       	movw	r14, r18
    1c24:	85 e0       	ldi	r24, 0x05	; 5
    1c26:	9e e0       	ldi	r25, 0x0E	; 14
    1c28:	f5 01       	movw	r30, r10
    1c2a:	91 83       	std	Z+1, r25	; 0x01
    1c2c:	80 83       	st	Z, r24
    1c2e:	c5 01       	movw	r24, r10
    1c30:	04 96       	adiw	r24, 0x04	; 4
    1c32:	64 ee       	ldi	r22, 0xE4	; 228
    1c34:	70 e0       	ldi	r23, 0x00	; 0
    1c36:	49 83       	std	Y+1, r20	; 0x01
    1c38:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	ledRunnable = _ledRunnable;
    1c3c:	f5 01       	movw	r30, r10
    1c3e:	d0 86       	std	Z+8, r13	; 0x08
    1c40:	c7 82       	std	Z+7, r12	; 0x07
	isLedOn = _isLedOn;
    1c42:	49 81       	ldd	r20, Y+1	; 0x01
    1c44:	42 83       	std	Z+2, r20	; 0x02
	buzzerRunnable = _buzzerRunnable;
    1c46:	f2 86       	std	Z+10, r15	; 0x0a
    1c48:	e1 86       	std	Z+9, r14	; 0x09
	isBuzzerOn = _isBuzzerOn;
    1c4a:	03 83       	std	Z+3, r16	; 0x03
}
    1c4c:	0f 90       	pop	r0
    1c4e:	df 91       	pop	r29
    1c50:	cf 91       	pop	r28
    1c52:	0f 91       	pop	r16
    1c54:	ff 90       	pop	r15
    1c56:	ef 90       	pop	r14
    1c58:	df 90       	pop	r13
    1c5a:	cf 90       	pop	r12
    1c5c:	bf 90       	pop	r11
    1c5e:	af 90       	pop	r10
    1c60:	08 95       	ret

00001c62 <_ZN17HeartBeatRunnable8setLedOnEb>:

// =================================================

void HeartBeatRunnable::setLedOn( bool on )
{
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	16 2f       	mov	r17, r22
	static const PROGMEM prog_char functionName[] = "setLedOn";

	//all( p << "HeartBeatRunnable:setLedOn():" << "setting led from " << isLedOn << " to " << on << endl; );
	aln( "setting led from %u to %u" , isLedOn , on )
    1c6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1c6e:	8b 30       	cpi	r24, 0x0B	; 11
    1c70:	50 f5       	brcc	.+84     	; 0x1cc6 <_ZN17HeartBeatRunnable8setLedOnEb+0x64>
    1c72:	ce 01       	movw	r24, r28
    1c74:	04 96       	adiw	r24, 0x04	; 4
    1c76:	6b e8       	ldi	r22, 0x8B	; 139
    1c78:	72 e1       	ldi	r23, 0x12	; 18
    1c7a:	46 ef       	ldi	r20, 0xF6	; 246
    1c7c:	50 e0       	ldi	r21, 0x00	; 0
    1c7e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <_ZN17HeartBeatRunnable8setLedOnEb+0x22>
    1c84:	00 d0       	rcall	.+0      	; 0x1c86 <_ZN17HeartBeatRunnable8setLedOnEb+0x24>
    1c86:	ed b7       	in	r30, 0x3d	; 61
    1c88:	fe b7       	in	r31, 0x3e	; 62
    1c8a:	31 96       	adiw	r30, 0x01	; 1
    1c8c:	8f ef       	ldi	r24, 0xFF	; 255
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	ad b7       	in	r26, 0x3d	; 61
    1c92:	be b7       	in	r27, 0x3e	; 62
    1c94:	12 96       	adiw	r26, 0x02	; 2
    1c96:	9c 93       	st	X, r25
    1c98:	8e 93       	st	-X, r24
    1c9a:	11 97       	sbiw	r26, 0x01	; 1
    1c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9e:	82 83       	std	Z+2, r24	; 0x02
    1ca0:	13 82       	std	Z+3, r1	; 0x03
    1ca2:	14 83       	std	Z+4, r17	; 0x04
    1ca4:	15 82       	std	Z+5, r1	; 0x05
    1ca6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	8e e8       	ldi	r24, 0x8E	; 142
    1cb4:	92 e1       	ldi	r25, 0x12	; 18
    1cb6:	ed b7       	in	r30, 0x3d	; 61
    1cb8:	fe b7       	in	r31, 0x3e	; 62
    1cba:	92 83       	std	Z+2, r25	; 0x02
    1cbc:	81 83       	std	Z+1, r24	; 0x01
    1cbe:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0

	isLedOn = on;
    1cc6:	1a 83       	std	Y+2, r17	; 0x02
}
    1cc8:	df 91       	pop	r29
    1cca:	cf 91       	pop	r28
    1ccc:	1f 91       	pop	r17
    1cce:	08 95       	ret

00001cd0 <_ZN17HeartBeatRunnable11setBuzzerOnEb>:
}*/

// =================================================

void HeartBeatRunnable::setBuzzerOn( bool on )
{
    1cd0:	1f 93       	push	r17
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	ec 01       	movw	r28, r24
    1cd8:	16 2f       	mov	r17, r22
	static const PROGMEM prog_char functionName[] = "setBuzzerOn";

	//all( p << "HeartBeatRunnable:setLedOn():" << "setting buzzer from " << isBuzzerOn << " to " << on << endl; );
	aln( "setting buzzer from %u to %u" , isBuzzerOn , on )
    1cda:	8e 81       	ldd	r24, Y+6	; 0x06
    1cdc:	8b 30       	cpi	r24, 0x0B	; 11
    1cde:	50 f5       	brcc	.+84     	; 0x1d34 <_ZN17HeartBeatRunnable11setBuzzerOnEb+0x64>
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	04 96       	adiw	r24, 0x04	; 4
    1ce4:	6b e8       	ldi	r22, 0x8B	; 139
    1ce6:	72 e1       	ldi	r23, 0x12	; 18
    1ce8:	49 e1       	ldi	r20, 0x19	; 25
    1cea:	51 e0       	ldi	r21, 0x01	; 1
    1cec:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    1cf0:	00 d0       	rcall	.+0      	; 0x1cf2 <_ZN17HeartBeatRunnable11setBuzzerOnEb+0x22>
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <_ZN17HeartBeatRunnable11setBuzzerOnEb+0x24>
    1cf4:	ed b7       	in	r30, 0x3d	; 61
    1cf6:	fe b7       	in	r31, 0x3e	; 62
    1cf8:	31 96       	adiw	r30, 0x01	; 1
    1cfa:	85 e2       	ldi	r24, 0x25	; 37
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	ad b7       	in	r26, 0x3d	; 61
    1d00:	be b7       	in	r27, 0x3e	; 62
    1d02:	12 96       	adiw	r26, 0x02	; 2
    1d04:	9c 93       	st	X, r25
    1d06:	8e 93       	st	-X, r24
    1d08:	11 97       	sbiw	r26, 0x01	; 1
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	82 83       	std	Z+2, r24	; 0x02
    1d0e:	13 82       	std	Z+3, r1	; 0x03
    1d10:	14 83       	std	Z+4, r17	; 0x04
    1d12:	15 82       	std	Z+5, r1	; 0x05
    1d14:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1d18:	0f 90       	pop	r0
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	8e e8       	ldi	r24, 0x8E	; 142
    1d22:	92 e1       	ldi	r25, 0x12	; 18
    1d24:	ed b7       	in	r30, 0x3d	; 61
    1d26:	fe b7       	in	r31, 0x3e	; 62
    1d28:	92 83       	std	Z+2, r25	; 0x02
    1d2a:	81 83       	std	Z+1, r24	; 0x01
    1d2c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1d30:	0f 90       	pop	r0
    1d32:	0f 90       	pop	r0

	isBuzzerOn = on;
    1d34:	1b 83       	std	Y+3, r17	; 0x03
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	08 95       	ret

00001d3e <_ZN25HeartBeatSpeedRestService11setIntValueEi>:
}

// =================================================

void HeartBeatSpeedRestService::setIntValue( int newValue )
{
    1d3e:	fc 01       	movw	r30, r24
	unsigned long newValueAsLong = newValue;

	heartBeatTimeIntervals[ indexInArray ] = newValueAsLong;
    1d40:	80 85       	ldd	r24, Z+8	; 0x08
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	88 0f       	add	r24, r24
    1d46:	99 1f       	adc	r25, r25
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	06 80       	ldd	r0, Z+6	; 0x06
    1d4e:	f7 81       	ldd	r31, Z+7	; 0x07
    1d50:	e0 2d       	mov	r30, r0
    1d52:	e8 0f       	add	r30, r24
    1d54:	f9 1f       	adc	r31, r25

// =================================================

void HeartBeatSpeedRestService::setIntValue( int newValue )
{
	unsigned long newValueAsLong = newValue;
    1d56:	cb 01       	movw	r24, r22
    1d58:	aa 27       	eor	r26, r26
    1d5a:	97 fd       	sbrc	r25, 7
    1d5c:	a0 95       	com	r26
    1d5e:	ba 2f       	mov	r27, r26
    1d60:	80 83       	st	Z, r24
    1d62:	91 83       	std	Z+1, r25	; 0x01
    1d64:	a2 83       	std	Z+2, r26	; 0x02
    1d66:	b3 83       	std	Z+3, r27	; 0x03

	heartBeatTimeIntervals[ indexInArray ] = newValueAsLong;
}
    1d68:	08 95       	ret

00001d6a <_ZN25HeartBeatSpeedRestService14getIntMinValueEv>:
// =================================================

int HeartBeatSpeedRestService::getIntMinValue()
{
	return 25;
}
    1d6a:	89 e1       	ldi	r24, 0x19	; 25
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	08 95       	ret

00001d70 <_ZN25HeartBeatSpeedRestService14getIntMaxValueEv>:
// =================================================

int HeartBeatSpeedRestService::getIntMaxValue()
{
	return 32767;
}
    1d70:	8f ef       	ldi	r24, 0xFF	; 255
    1d72:	9f e7       	ldi	r25, 0x7F	; 127
    1d74:	08 95       	ret

00001d76 <_ZN25HeartBeatSpeedRestService18writeValueToStreamEP6Stream>:
}

// =================================================

void HeartBeatSpeedRestService::writeValueToStream( Stream* stream )
{
    1d76:	0f 93       	push	r16
    1d78:	1f 93       	push	r17
    1d7a:	fc 01       	movw	r30, r24
	stream->print( heartBeatTimeIntervals[ indexInArray ] );
    1d7c:	80 85       	ldd	r24, Z+8	; 0x08
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	06 80       	ldd	r0, Z+6	; 0x06
    1d8a:	f7 81       	ldd	r31, Z+7	; 0x07
    1d8c:	e0 2d       	mov	r30, r0
    1d8e:	e8 0f       	add	r30, r24
    1d90:	f9 1f       	adc	r31, r25
    1d92:	00 81       	ld	r16, Z
    1d94:	11 81       	ldd	r17, Z+1	; 0x01
    1d96:	22 81       	ldd	r18, Z+2	; 0x02
    1d98:	33 81       	ldd	r19, Z+3	; 0x03
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	b9 01       	movw	r22, r18
    1d9e:	a8 01       	movw	r20, r16
    1da0:	2a e0       	ldi	r18, 0x0A	; 10
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <_ZN5Print5printEmi>
}
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	08 95       	ret

00001dae <_ZN25HeartBeatSpeedRestServiceC1EhPKcPmh>:

#include "HeartBeatSpeedRestService.h"

// =================================================

HeartBeatSpeedRestService::HeartBeatSpeedRestService( unsigned char _id , const char* _name , unsigned long* _heartBeatTimeIntervals , unsigned char _indexInArray ) : RestService( _id , _name , REST_SERVICE_TYPE_UPDATEABLE_INT ) //, p(_p)
    1dae:	ef 92       	push	r14
    1db0:	ff 92       	push	r15
    1db2:	0f 93       	push	r16
    1db4:	cf 93       	push	r28
    1db6:	df 93       	push	r29
    1db8:	ec 01       	movw	r28, r24
    1dba:	79 01       	movw	r14, r18
    1dbc:	26 e0       	ldi	r18, 0x06	; 6
    1dbe:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    1dc2:	8b e0       	ldi	r24, 0x0B	; 11
    1dc4:	9e e0       	ldi	r25, 0x0E	; 14
    1dc6:	99 83       	std	Y+1, r25	; 0x01
    1dc8:	88 83       	st	Y, r24
{
	heartBeatTimeIntervals = _heartBeatTimeIntervals;
    1dca:	ff 82       	std	Y+7, r15	; 0x07
    1dcc:	ee 82       	std	Y+6, r14	; 0x06
	indexInArray = _indexInArray;
    1dce:	08 87       	std	Y+8, r16	; 0x08
	//valueSetterHTMLGenerator = _valueSetterHTMLGenerator;
}
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	08 95       	ret

00001ddc <_ZN5Print5writeEPKc>:
    1ddc:	db 01       	movw	r26, r22
    1dde:	0d 90       	ld	r0, X+
    1de0:	00 20       	and	r0, r0
    1de2:	e9 f7       	brne	.-6      	; 0x1dde <_ZN5Print5writeEPKc+0x2>
    1de4:	ad 01       	movw	r20, r26
    1de6:	41 50       	subi	r20, 0x01	; 1
    1de8:	50 40       	sbci	r21, 0x00	; 0
    1dea:	46 1b       	sub	r20, r22
    1dec:	57 0b       	sbc	r21, r23
    1dee:	dc 01       	movw	r26, r24
    1df0:	ed 91       	ld	r30, X+
    1df2:	fc 91       	ld	r31, X
    1df4:	02 80       	ldd	r0, Z+2	; 0x02
    1df6:	f3 81       	ldd	r31, Z+3	; 0x03
    1df8:	e0 2d       	mov	r30, r0
    1dfa:	19 95       	eicall
    1dfc:	08 95       	ret

00001dfe <_ZN20LocalTimeRestService18writeValueToStreamEP6Stream>:
}

// =================================================

void LocalTimeRestService::writeValueToStream( Stream* stream )
{
    1dfe:	4f 92       	push	r4
    1e00:	5f 92       	push	r5
    1e02:	6f 92       	push	r6
    1e04:	7f 92       	push	r7
    1e06:	8f 92       	push	r8
    1e08:	9f 92       	push	r9
    1e0a:	af 92       	push	r10
    1e0c:	bf 92       	push	r11
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	cf 93       	push	r28
    1e18:	df 93       	push	r29
    1e1a:	d6 2f       	mov	r29, r22
    1e1c:	c7 2f       	mov	r28, r23
	if( printAsDdHhMmSs )
    1e1e:	fc 01       	movw	r30, r24
    1e20:	86 81       	ldd	r24, Z+6	; 0x06
    1e22:	88 23       	and	r24, r24
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <_ZN20LocalTimeRestService18writeValueToStreamEP6Stream+0x2a>
    1e26:	55 c0       	rjmp	.+170    	; 0x1ed2 <_ZN20LocalTimeRestService18writeValueToStreamEP6Stream+0xd4>
		static const unsigned long day = 86400000; // 86400000 milliseconds in a day
		static const unsigned long hour = 3600000; // 3600000 milliseconds in an hour
		static const unsigned long minute = 60000; // 60000 milliseconds in a minute
		static const unsigned long second =  1000; // 1000 milliseconds in a second

		unsigned long timeNow = millis();
    1e28:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>

		unsigned int days = timeNow / day ;                                //number of days
		unsigned int hours = (timeNow % day) / hour;                       //the remainder from days division (in milliseconds) divided by hours, this gives the full hours
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3c e5       	ldi	r19, 0x5C	; 92
    1e30:	46 e2       	ldi	r20, 0x26	; 38
    1e32:	55 e0       	ldi	r21, 0x05	; 5
    1e34:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>
    1e38:	49 01       	movw	r8, r18
    1e3a:	5a 01       	movw	r10, r20
		unsigned int minutes = ((timeNow % day) % hour) / minute ;         //and so on...
    1e3c:	20 e8       	ldi	r18, 0x80	; 128
    1e3e:	3e ee       	ldi	r19, 0xEE	; 238
    1e40:	46 e3       	ldi	r20, 0x36	; 54
    1e42:	50 e0       	ldi	r21, 0x00	; 0
    1e44:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>
    1e48:	29 01       	movw	r4, r18
    1e4a:	3a 01       	movw	r6, r20
    1e4c:	6b 01       	movw	r12, r22
    1e4e:	7c 01       	movw	r14, r24
		unsigned int seconds = (((timeNow % day) % hour) % minute) / second;

		stream->print( days , DEC );
    1e50:	8d 2f       	mov	r24, r29
    1e52:	9c 2f       	mov	r25, r28
    1e54:	b4 01       	movw	r22, r8
    1e56:	4a e0       	ldi	r20, 0x0A	; 10
    1e58:	50 e0       	ldi	r21, 0x00	; 0
    1e5a:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <_ZN5Print5printEji>

		stream->write( ":" );
    1e5e:	8d 2f       	mov	r24, r29
    1e60:	9c 2f       	mov	r25, r28
    1e62:	6e e0       	ldi	r22, 0x0E	; 14
    1e64:	72 e0       	ldi	r23, 0x02	; 2
    1e66:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

		stream->print( hours , DEC );
    1e6a:	8d 2f       	mov	r24, r29
    1e6c:	9c 2f       	mov	r25, r28
    1e6e:	b2 01       	movw	r22, r4
    1e70:	4a e0       	ldi	r20, 0x0A	; 10
    1e72:	50 e0       	ldi	r21, 0x00	; 0
    1e74:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <_ZN5Print5printEji>

		stream->write( ":" );
    1e78:	8d 2f       	mov	r24, r29
    1e7a:	9c 2f       	mov	r25, r28
    1e7c:	6e e0       	ldi	r22, 0x0E	; 14
    1e7e:	72 e0       	ldi	r23, 0x02	; 2
    1e80:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

		unsigned long timeNow = millis();

		unsigned int days = timeNow / day ;                                //number of days
		unsigned int hours = (timeNow % day) / hour;                       //the remainder from days division (in milliseconds) divided by hours, this gives the full hours
		unsigned int minutes = ((timeNow % day) % hour) / minute ;         //and so on...
    1e84:	c7 01       	movw	r24, r14
    1e86:	b6 01       	movw	r22, r12
    1e88:	20 e6       	ldi	r18, 0x60	; 96
    1e8a:	3a ee       	ldi	r19, 0xEA	; 234
    1e8c:	40 e0       	ldi	r20, 0x00	; 0
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>
    1e94:	6b 01       	movw	r12, r22
    1e96:	7c 01       	movw	r14, r24

		stream->print( hours , DEC );

		stream->write( ":" );

		stream->print( minutes , DEC );
    1e98:	8d 2f       	mov	r24, r29
    1e9a:	9c 2f       	mov	r25, r28
    1e9c:	b9 01       	movw	r22, r18
    1e9e:	4a e0       	ldi	r20, 0x0A	; 10
    1ea0:	50 e0       	ldi	r21, 0x00	; 0
    1ea2:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <_ZN5Print5printEji>

		stream->write( ":" );
    1ea6:	8d 2f       	mov	r24, r29
    1ea8:	9c 2f       	mov	r25, r28
    1eaa:	6e e0       	ldi	r22, 0x0E	; 14
    1eac:	72 e0       	ldi	r23, 0x02	; 2
    1eae:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
		unsigned long timeNow = millis();

		unsigned int days = timeNow / day ;                                //number of days
		unsigned int hours = (timeNow % day) / hour;                       //the remainder from days division (in milliseconds) divided by hours, this gives the full hours
		unsigned int minutes = ((timeNow % day) % hour) / minute ;         //and so on...
		unsigned int seconds = (((timeNow % day) % hour) % minute) / second;
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	28 ee       	ldi	r18, 0xE8	; 232
    1eb8:	33 e0       	ldi	r19, 0x03	; 3
    1eba:	40 e0       	ldi	r20, 0x00	; 0
    1ebc:	50 e0       	ldi	r21, 0x00	; 0
    1ebe:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>

		stream->print( minutes , DEC );

		stream->write( ":" );

		stream->print( seconds , DEC );
    1ec2:	8d 2f       	mov	r24, r29
    1ec4:	9c 2f       	mov	r25, r28
    1ec6:	b9 01       	movw	r22, r18
    1ec8:	4a e0       	ldi	r20, 0x0A	; 10
    1eca:	50 e0       	ldi	r21, 0x00	; 0
    1ecc:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <_ZN5Print5printEji>
    1ed0:	0a c0       	rjmp	.+20     	; 0x1ee6 <_ZN20LocalTimeRestService18writeValueToStreamEP6Stream+0xe8>
	}
	else
	{
		stream->print( millis() );
    1ed2:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    1ed6:	ab 01       	movw	r20, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	8d 2f       	mov	r24, r29
    1edc:	9c 2f       	mov	r25, r28
    1ede:	2a e0       	ldi	r18, 0x0A	; 10
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <_ZN5Print5printEmi>
	}
}
    1ee6:	df 91       	pop	r29
    1ee8:	cf 91       	pop	r28
    1eea:	ff 90       	pop	r15
    1eec:	ef 90       	pop	r14
    1eee:	df 90       	pop	r13
    1ef0:	cf 90       	pop	r12
    1ef2:	bf 90       	pop	r11
    1ef4:	af 90       	pop	r10
    1ef6:	9f 90       	pop	r9
    1ef8:	8f 90       	pop	r8
    1efa:	7f 90       	pop	r7
    1efc:	6f 90       	pop	r6
    1efe:	5f 90       	pop	r5
    1f00:	4f 90       	pop	r4
    1f02:	08 95       	ret

00001f04 <_ZN20LocalTimeRestServiceC1EhPKcb>:

#include "LocalTimeRestService.h"

// =================================================

LocalTimeRestService::LocalTimeRestService( unsigned char _id , const char* _name , bool _printAsDdHhMmSs ) : RestService( _id , _name , REST_SERVICE_TYPE_READ_ONLY )
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	ec 01       	movw	r28, r24
    1f0c:	12 2f       	mov	r17, r18
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    1f14:	8f e1       	ldi	r24, 0x1F	; 31
    1f16:	9e e0       	ldi	r25, 0x0E	; 14
    1f18:	99 83       	std	Y+1, r25	; 0x01
    1f1a:	88 83       	st	Y, r24
{
	printAsDdHhMmSs = _printAsDdHhMmSs;
    1f1c:	1e 83       	std	Y+6, r17	; 0x06
}
    1f1e:	df 91       	pop	r29
    1f20:	cf 91       	pop	r28
    1f22:	1f 91       	pop	r17
    1f24:	08 95       	ret

00001f26 <_ZN26PinGetterSetterRestService14getIntMinValueEv>:
// =================================================

int PinGetterSetterRestService::getIntMinValue()
{
	return minimalPinValue;
}
    1f26:	fc 01       	movw	r30, r24
    1f28:	80 85       	ldd	r24, Z+8	; 0x08
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	08 95       	ret

00001f2e <_ZN26PinGetterSetterRestService14getIntMaxValueEv>:
// =================================================

int PinGetterSetterRestService::getIntMaxValue()
{
	return maximalPinValue;
}
    1f2e:	fc 01       	movw	r30, r24
    1f30:	81 85       	ldd	r24, Z+9	; 0x09
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	08 95       	ret

00001f36 <_ZN26PinGetterSetterRestService18writeValueToStreamEP6Stream>:
}

// =================================================

void PinGetterSetterRestService::writeValueToStream( Stream* stream )
{
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	eb 01       	movw	r28, r22
	stream->print( pinGetterSetter->getPin() );
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	16 96       	adiw	r26, 0x06	; 6
    1f40:	8d 91       	ld	r24, X+
    1f42:	9c 91       	ld	r25, X
    1f44:	17 97       	sbiw	r26, 0x07	; 7
    1f46:	dc 01       	movw	r26, r24
    1f48:	ed 91       	ld	r30, X+
    1f4a:	fc 91       	ld	r31, X
    1f4c:	01 90       	ld	r0, Z+
    1f4e:	f0 81       	ld	r31, Z
    1f50:	e0 2d       	mov	r30, r0
    1f52:	19 95       	eicall
    1f54:	68 2f       	mov	r22, r24
    1f56:	ce 01       	movw	r24, r28
    1f58:	4a e0       	ldi	r20, 0x0A	; 10
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <_ZN5Print5printEhi>
}
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	08 95       	ret

00001f66 <_ZN26PinGetterSetterRestServiceC1EhPKcP15PinGetterSetterhh>:

#include "PinGetterSetterRestService.h"

// =================================================

PinGetterSetterRestService::PinGetterSetterRestService( unsigned char _id , const char* _name , PinGetterSetter* _pinGetterSetter , unsigned char _minimalPinValue , unsigned char _maximalPinValue ) : RestService( _id , _name , REST_SERVICE_TYPE_UPDATEABLE_INT )
    1f66:	cf 92       	push	r12
    1f68:	df 92       	push	r13
    1f6a:	ef 92       	push	r14
    1f6c:	0f 93       	push	r16
    1f6e:	cf 93       	push	r28
    1f70:	df 93       	push	r29
    1f72:	ec 01       	movw	r28, r24
    1f74:	69 01       	movw	r12, r18
    1f76:	26 e0       	ldi	r18, 0x06	; 6
    1f78:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    1f7c:	83 e3       	ldi	r24, 0x33	; 51
    1f7e:	9e e0       	ldi	r25, 0x0E	; 14
    1f80:	99 83       	std	Y+1, r25	; 0x01
    1f82:	88 83       	st	Y, r24
{
	pinGetterSetter = _pinGetterSetter;
    1f84:	df 82       	std	Y+7, r13	; 0x07
    1f86:	ce 82       	std	Y+6, r12	; 0x06
	minimalPinValue = _minimalPinValue;
    1f88:	08 87       	std	Y+8, r16	; 0x08
	maximalPinValue = _maximalPinValue;
    1f8a:	e9 86       	std	Y+9, r14	; 0x09
}
    1f8c:	df 91       	pop	r29
    1f8e:	cf 91       	pop	r28
    1f90:	0f 91       	pop	r16
    1f92:	ef 90       	pop	r14
    1f94:	df 90       	pop	r13
    1f96:	cf 90       	pop	r12
    1f98:	08 95       	ret

00001f9a <_ZN15RS232ToWiFiTask3runEv>:
}

// =================================================

void RS232ToWiFiTask::run()
{
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	ec 01       	movw	r28, r24
	//static const unsigned int timeoutInSeconds = 10; // todo to ma byc jako parametr przekazany do konstruktora

	//if( streamReadBytesCounting.getReadBytesCount() < readBytesCountLimit )
	//{
		//if( restServer.processStream( streamHFA11xRS232WiFiPtr ) )
		if( restServer.processStream( stream ) )
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	e3 50       	subi	r30, 0x03	; 3
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	05 96       	adiw	r24, 0x05	; 5
    1fac:	0e 94 a5 25 	call	0x4b4a	; 0x4b4a <_ZN10RestServer13processStreamEP6Stream>
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	88 23       	and	r24, r24
    1fb4:	79 f0       	breq	.+30     	; 0x1fd4 <_ZN15RS232ToWiFiTask3runEv+0x3a>
		{
			//info( p << prefix << "all operations finished on RS232<->WiFi" << endl; )
			aln( "all operations finished on RS232<->WiFi" )
    1fb6:	9b 30       	cpi	r25, 0x0B	; 11
    1fb8:	58 f5       	brcc	.+86     	; 0x2010 <_ZN15RS232ToWiFiTask3runEv+0x76>
    1fba:	ce 01       	movw	r24, r28
    1fbc:	02 96       	adiw	r24, 0x02	; 2
    1fbe:	6b e8       	ldi	r22, 0x8B	; 139
    1fc0:	72 e1       	ldi	r23, 0x12	; 18
    1fc2:	44 e7       	ldi	r20, 0x74	; 116
    1fc4:	51 e0       	ldi	r21, 0x01	; 1
    1fc6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    1fca:	0f 92       	push	r0
    1fcc:	0f 92       	push	r0
    1fce:	85 eb       	ldi	r24, 0xB5	; 181
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	0e c0       	rjmp	.+28     	; 0x1ff0 <_ZN15RS232ToWiFiTask3runEv+0x56>
			//streamReadBytesCounting.setStreamAndResetInternalState( streamReadBytesCounting.mainStream );
		}
		else
		{
			//info( p << prefix << "RS232<->WiFi connection will be also processed in the future" << endl; )
			aln( "RS232<->WiFi connection will be also processed in the future" )
    1fd4:	9b 30       	cpi	r25, 0x0B	; 11
    1fd6:	e0 f4       	brcc	.+56     	; 0x2010 <_ZN15RS232ToWiFiTask3runEv+0x76>
    1fd8:	ce 01       	movw	r24, r28
    1fda:	02 96       	adiw	r24, 0x02	; 2
    1fdc:	6b e8       	ldi	r22, 0x8B	; 139
    1fde:	72 e1       	ldi	r23, 0x12	; 18
    1fe0:	44 e7       	ldi	r20, 0x74	; 116
    1fe2:	51 e0       	ldi	r21, 0x01	; 1
    1fe4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    1fe8:	0f 92       	push	r0
    1fea:	0f 92       	push	r0
    1fec:	88 e7       	ldi	r24, 0x78	; 120
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	ed b7       	in	r30, 0x3d	; 61
    1ff2:	fe b7       	in	r31, 0x3e	; 62
    1ff4:	92 83       	std	Z+2, r25	; 0x02
    1ff6:	81 83       	std	Z+1, r24	; 0x01
    1ff8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    1ffc:	8e e8       	ldi	r24, 0x8E	; 142
    1ffe:	92 e1       	ldi	r25, 0x12	; 18
    2000:	ed b7       	in	r30, 0x3d	; 61
    2002:	fe b7       	in	r31, 0x3e	; 62
    2004:	92 83       	std	Z+2, r25	; 0x02
    2006:	81 83       	std	Z+1, r24	; 0x01
    2008:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
	//{
	//	warning( p << prefix << "maximum read bytes count reached!" << endl; )
	//	streamReadBytesCounting.setStreamAndResetInternalState( streamReadBytesCounting.mainStream );
	//}
	//}
}
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	08 95       	ret

00002016 <_ZN15RS232ToWiFiTaskC1EPP18ServiceDescriptionhbP12PageRendererS4_PKcS6_S1_PbPhhP9AnyBufferIhhEPchP6Stream>:

#include "RS232ToWiFiTask.h"

// =================================================

RS232ToWiFiTask::RS232ToWiFiTask( ServiceDescription** serviceDescrptions , unsigned char serviceDescrptionsCount , bool _blockToServeIncommingConnectionToTheEnd , PageRenderer* htmlPageRenderer , PageRenderer* jsonPageRenderer , const char* jsonActivatorURLPrefix , const char* metadescriptionActivatorURLPrefix , ServiceDescription* readHttpPathSubTaskArrayForSelectdServices , bool* readHttpParameterNameSubTaskArrayForMatchServiceNames , unsigned char* readHttpParameterValueSubTaskArrayForValueBytes , unsigned char readHttpParameterValueSubTaskArrayForValueBytesSize , AnyBuffer< byte , byte >* sendResponseSubTaskChunkedStreamBuffer , char* _buffer , unsigned char _bufferSize , Stream* _stream )
    2016:	2f 92       	push	r2
    2018:	3f 92       	push	r3
    201a:	4f 92       	push	r4
    201c:	5f 92       	push	r5
    201e:	7f 92       	push	r7
    2020:	8f 92       	push	r8
    2022:	9f 92       	push	r9
    2024:	af 92       	push	r10
    2026:	bf 92       	push	r11
    2028:	cf 92       	push	r12
    202a:	df 92       	push	r13
    202c:	ef 92       	push	r14
    202e:	ff 92       	push	r15
    2030:	0f 93       	push	r16
    2032:	1f 93       	push	r17
    2034:	cf 93       	push	r28
    2036:	df 93       	push	r29
    2038:	00 d0       	rcall	.+0      	; 0x203a <_ZN15RS232ToWiFiTaskC1EPP18ServiceDescriptionhbP12PageRendererS4_PKcS6_S1_PbPhhP9AnyBufferIhhEPchP6Stream+0x24>
    203a:	cd b7       	in	r28, 0x3d	; 61
    203c:	de b7       	in	r29, 0x3e	; 62
    203e:	2c 01       	movw	r4, r24
    2040:	7a 83       	std	Y+2, r23	; 0x02
    2042:	69 83       	std	Y+1, r22	; 0x01
    2044:	72 2e       	mov	r7, r18
    2046:	18 01       	movw	r2, r16
    2048:	87 01       	movw	r16, r14
    204a:	76 01       	movw	r14, r12
    204c:	65 01       	movw	r12, r10
    204e:	54 01       	movw	r10, r8
	: dp( PSTR( "RS232ToWiFiTask" ) ) ,
	  restServer( serviceDescrptions , serviceDescrptionsCount , htmlPageRenderer , jsonPageRenderer , jsonActivatorURLPrefix , metadescriptionActivatorURLPrefix , readHttpPathSubTaskArrayForSelectdServices , _blockToServeIncommingConnectionToTheEnd , readHttpParameterNameSubTaskArrayForMatchServiceNames , readHttpParameterValueSubTaskArrayForValueBytes , readHttpParameterValueSubTaskArrayForValueBytesSize , sendResponseSubTaskChunkedStreamBuffer , _buffer , _bufferSize )
    2050:	27 e4       	ldi	r18, 0x47	; 71
    2052:	3e e0       	ldi	r19, 0x0E	; 14
    2054:	dc 01       	movw	r26, r24
    2056:	2d 93       	st	X+, r18
    2058:	3d 93       	st	X+, r19
    205a:	cd 01       	movw	r24, r26
    205c:	64 e6       	ldi	r22, 0x64	; 100
    205e:	71 e0       	ldi	r23, 0x01	; 1
    2060:	4b 83       	std	Y+3, r20	; 0x03
    2062:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    2066:	ed b7       	in	r30, 0x3d	; 61
    2068:	fe b7       	in	r31, 0x3e	; 62
    206a:	3a 97       	sbiw	r30, 0x0a	; 10
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	fe bf       	out	0x3e, r31	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	ed bf       	out	0x3d, r30	; 61
    2076:	31 96       	adiw	r30, 0x01	; 1
    2078:	88 8d       	ldd	r24, Y+24	; 0x18
    207a:	99 8d       	ldd	r25, Y+25	; 0x19
    207c:	ad b7       	in	r26, 0x3d	; 61
    207e:	be b7       	in	r27, 0x3e	; 62
    2080:	12 96       	adiw	r26, 0x02	; 2
    2082:	9c 93       	st	X, r25
    2084:	8e 93       	st	-X, r24
    2086:	11 97       	sbiw	r26, 0x01	; 1
    2088:	8a 8d       	ldd	r24, Y+26	; 0x1a
    208a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    208c:	93 83       	std	Z+3, r25	; 0x03
    208e:	82 83       	std	Z+2, r24	; 0x02
    2090:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2092:	84 83       	std	Z+4, r24	; 0x04
    2094:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2096:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2098:	96 83       	std	Z+6, r25	; 0x06
    209a:	85 83       	std	Z+5, r24	; 0x05
    209c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    209e:	98 a1       	ldd	r25, Y+32	; 0x20
    20a0:	90 87       	std	Z+8, r25	; 0x08
    20a2:	87 83       	std	Z+7, r24	; 0x07
    20a4:	89 a1       	ldd	r24, Y+33	; 0x21
    20a6:	81 87       	std	Z+9, r24	; 0x09
    20a8:	c2 01       	movw	r24, r4
    20aa:	05 96       	adiw	r24, 0x05	; 5
    20ac:	69 81       	ldd	r22, Y+1	; 0x01
    20ae:	7a 81       	ldd	r23, Y+2	; 0x02
    20b0:	4b 81       	ldd	r20, Y+3	; 0x03
    20b2:	91 01       	movw	r18, r2
    20b4:	87 2c       	mov	r8, r7
    20b6:	0e 94 ae 24 	call	0x495c	; 0x495c <_ZN10RestServerC1EPP18ServiceDescriptionhP12PageRendererS4_PKcS6_S1_bPbPhhP9AnyBufferIhhEPch>
	  //streamHFA11xRS232WiFi( _incommingByteBufferForStreamHFA11xRS232WiFi , _outgoingByteBufferForStreamHFA11xRS232WiFi , 2 , 2 )
{
	//streamReadBytesCountingPtr = &streamReadBytesCounting;
	//streamHFA11xRS232WiFiPtr = &streamHFA11xRS232WiFi;
	stream = _stream;
    20ba:	f2 01       	movw	r30, r4
    20bc:	e3 50       	subi	r30, 0x03	; 3
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	8a a1       	ldd	r24, Y+34	; 0x22
    20c2:	9b a1       	ldd	r25, Y+35	; 0x23
    20c4:	91 83       	std	Z+1, r25	; 0x01
    20c6:	80 83       	st	Z, r24
    20c8:	ed b7       	in	r30, 0x3d	; 61
    20ca:	fe b7       	in	r31, 0x3e	; 62
    20cc:	3a 96       	adiw	r30, 0x0a	; 10
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	fe bf       	out	0x3e, r31	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	ed bf       	out	0x3d, r30	; 61
}
    20d8:	0f 90       	pop	r0
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	5f 90       	pop	r5
    20fa:	4f 90       	pop	r4
    20fc:	3f 90       	pop	r3
    20fe:	2f 90       	pop	r2
    2100:	08 95       	ret

00002102 <_ZN16ResetRestService15setBooleanValueEb>:
void ResetRestService::setBooleanValue( bool newValue )
{
	static const PROGMEM prog_char functionName[] = "setBooleanValue";

	//warning( p << "ResetRestService:setBooleanValue():" << "RESETTING DEVICE!" << endl; )
	wln( "RESETTING DEVICE!" )
    2102:	fc 01       	movw	r30, r24
    2104:	20 85       	ldd	r18, Z+8	; 0x08
    2106:	2f 31       	cpi	r18, 0x1F	; 31
    2108:	d8 f4       	brcc	.+54     	; 0x2140 <_ZN16ResetRestService15setBooleanValueEb+0x3e>
    210a:	06 96       	adiw	r24, 0x06	; 6
    210c:	65 e8       	ldi	r22, 0x85	; 133
    210e:	72 e1       	ldi	r23, 0x12	; 18
    2110:	4e ee       	ldi	r20, 0xEE	; 238
    2112:	51 e0       	ldi	r21, 0x01	; 1
    2114:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2118:	0f 92       	push	r0
    211a:	0f 92       	push	r0
    211c:	8e ef       	ldi	r24, 0xFE	; 254
    211e:	91 e0       	ldi	r25, 0x01	; 1
    2120:	ed b7       	in	r30, 0x3d	; 61
    2122:	fe b7       	in	r31, 0x3e	; 62
    2124:	92 83       	std	Z+2, r25	; 0x02
    2126:	81 83       	std	Z+1, r24	; 0x01
    2128:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    212c:	8e e8       	ldi	r24, 0x8E	; 142
    212e:	92 e1       	ldi	r25, 0x12	; 18
    2130:	ed b7       	in	r30, 0x3d	; 61
    2132:	fe b7       	in	r31, 0x3e	; 62
    2134:	92 83       	std	Z+2, r25	; 0x02
    2136:	81 83       	std	Z+1, r24	; 0x01
    2138:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	08 95       	ret

00002142 <_ZN16ResetRestServiceC1EhPKc>:

#include "ResetRestService.h"

// =================================================

ResetRestService::ResetRestService( unsigned char _id , const char* _name ) : dp( PSTR( "ResetRestService" ) ) , RestService( _id , _name , REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONE_TIME_EXECUTION )
    2142:	cf 93       	push	r28
    2144:	df 93       	push	r29
    2146:	ec 01       	movw	r28, r24
    2148:	25 e0       	ldi	r18, 0x05	; 5
    214a:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    214e:	8d e4       	ldi	r24, 0x4D	; 77
    2150:	9e e0       	ldi	r25, 0x0E	; 14
    2152:	99 83       	std	Y+1, r25	; 0x01
    2154:	88 83       	st	Y, r24
    2156:	ce 01       	movw	r24, r28
    2158:	06 96       	adiw	r24, 0x06	; 6
    215a:	6d ed       	ldi	r22, 0xDD	; 221
    215c:	71 e0       	ldi	r23, 0x01	; 1
    215e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{

}
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <_ZN33ResponseGenerationTimeRestService18writeValueToStreamEP6Stream>:
}

// =================================================

void ResponseGenerationTimeRestService::writeValueToStream( Stream* stream )
{
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	eb 01       	movw	r28, r22
	stream->print( pageRendererTimeMeasurement->getTimePeriod() );
    216e:	fc 01       	movw	r30, r24
    2170:	86 81       	ldd	r24, Z+6	; 0x06
    2172:	97 81       	ldd	r25, Z+7	; 0x07
    2174:	0e 94 38 3b 	call	0x7670	; 0x7670 <_ZN15TimeMeasurement13getTimePeriodEv>
    2178:	ab 01       	movw	r20, r22
    217a:	bc 01       	movw	r22, r24
    217c:	ce 01       	movw	r24, r28
    217e:	2a e0       	ldi	r18, 0x0A	; 10
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <_ZN5Print5printEmi>
}
    2186:	df 91       	pop	r29
    2188:	cf 91       	pop	r28
    218a:	08 95       	ret

0000218c <_ZN33ResponseGenerationTimeRestServiceC1EhPKcP15TimeMeasurement>:

#include "ResponseGenerationTimeRestService.h"

// =================================================

ResponseGenerationTimeRestService::ResponseGenerationTimeRestService( unsigned char _id , const char* _name , TimeMeasurement* _pageRendererTimeMeasurement ) : RestService( _id , _name , REST_SERVICE_TYPE_READ_ONLY )
    218c:	0f 93       	push	r16
    218e:	1f 93       	push	r17
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	ec 01       	movw	r28, r24
    2196:	89 01       	movw	r16, r18
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    219e:	81 e6       	ldi	r24, 0x61	; 97
    21a0:	9e e0       	ldi	r25, 0x0E	; 14
    21a2:	99 83       	std	Y+1, r25	; 0x01
    21a4:	88 83       	st	Y, r24
{
	pageRendererTimeMeasurement = _pageRendererTimeMeasurement;
    21a6:	1f 83       	std	Y+7, r17	; 0x07
    21a8:	0e 83       	std	Y+6, r16	; 0x06
}
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	1f 91       	pop	r17
    21b0:	0f 91       	pop	r16
    21b2:	08 95       	ret

000021b4 <_ZL26redirectedOutPrintFunctioncP6__file>:
}

// =================================================

static int redirectedOutPrintFunction( char c , FILE *stream )
{
    21b4:	68 2f       	mov	r22, r24
	DEFAULT_OUTPUT.write(c) ;
    21b6:	8b e1       	ldi	r24, 0x1B	; 27
    21b8:	95 e1       	ldi	r25, 0x15	; 21
    21ba:	0e 94 30 41 	call	0x8260	; 0x8260 <_ZN14HardwareSerial5writeEh>
    //return 0; // <-- powinno tu byc ale zablokowalem, moze to cos przyspieszy??
}
    21be:	08 95       	ret

000021c0 <_Z41__static_initialization_and_destruction_0ii.constprop.1>:
    21c0:	8f 92       	push	r8
    21c2:	9f 92       	push	r9
    21c4:	af 92       	push	r10
    21c6:	bf 92       	push	r11
    21c8:	cf 92       	push	r12
    21ca:	df 92       	push	r13
    21cc:	ef 92       	push	r14
    21ce:	ff 92       	push	r15
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	91 05       	cpc	r25, r1
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <_Z41__static_initialization_and_destruction_0ii.constprop.1+0x20>
    21de:	59 c2       	rjmp	.+1202   	; 0x2692 <__stack+0x493>
	//static Print& p = DEFAULT_OUTPUT;

	// -------------------------------

	static const PROGMEM prog_char className[] = "Satelita1";
	DebugPrinter dp( className );
    21e0:	83 ea       	ldi	r24, 0xA3	; 163
    21e2:	94 e1       	ldi	r25, 0x14	; 20
    21e4:	60 e7       	ldi	r22, 0x70	; 112
    21e6:	73 e0       	ldi	r23, 0x03	; 3
    21e8:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>

	// -------------------------------

	static const TaskManagerRecord* tasksArray[ MAXIMUM_TASKS_IN_TASK_MANAGER_COUNT ];

	TaskManager taskManager( MAXIMUM_TASKS_IN_TASK_MANAGER_COUNT , tasksArray );
    21ec:	85 e9       	ldi	r24, 0x95	; 149
    21ee:	94 e1       	ldi	r25, 0x14	; 20
    21f0:	65 e0       	ldi	r22, 0x05	; 5
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	44 eb       	ldi	r20, 0xB4	; 180
    21f6:	54 e1       	ldi	r21, 0x14	; 20
    21f8:	0e 94 b1 3b 	call	0x7762	; 0x7762 <_ZN11TaskManagerC1EjPPK17TaskManagerRecord>

	// -------------------------------

	unsigned long timeIntervals[] = { 1000 , 2000 , 3000 };
	TaskManagerSchedulerTimeIntervals tmsti( timeIntervals , (sizeof(timeIntervals) / sizeof(unsigned long)) , true );
    21fc:	86 e8       	ldi	r24, 0x86	; 134
    21fe:	94 e1       	ldi	r25, 0x14	; 20
    2200:	69 ec       	ldi	r22, 0xC9	; 201
    2202:	7d e0       	ldi	r23, 0x0D	; 13
    2204:	43 e0       	ldi	r20, 0x03	; 3
    2206:	21 e0       	ldi	r18, 0x01	; 1
    2208:	0e 94 9e 40 	call	0x813c	; 0x813c <_ZN33TaskManagerSchedulerTimeIntervalsC1EPmhb>
	//char string1[] = { "sample task :)" };
	static const PROGMEM prog_char sampleTaskText[] = "sample task :)";
	SampleTaskRunnable runnable1( sampleTaskText , 0 );
    220c:	8d e7       	ldi	r24, 0x7D	; 125
    220e:	94 e1       	ldi	r25, 0x14	; 20
    2210:	6a e7       	ldi	r22, 0x7A	; 122
    2212:	73 e0       	ldi	r23, 0x03	; 3
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	0e 94 85 3b 	call	0x770a	; 0x770a <_ZN18SampleTaskRunnableC1EPKct>
	TaskManagerRecord sampleTaskManagerRecord( &tmsti , &runnable1 );
    221c:	89 e7       	ldi	r24, 0x79	; 121
    221e:	94 e1       	ldi	r25, 0x14	; 20
    2220:	66 e8       	ldi	r22, 0x86	; 134
    2222:	74 e1       	ldi	r23, 0x14	; 20
    2224:	4d e7       	ldi	r20, 0x7D	; 125
    2226:	54 e1       	ldi	r21, 0x14	; 20
    2228:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <_ZN17TaskManagerRecordC1EP20TaskManagerSchedulerP8Runnable>
	*/

	// -------------------------------

	unsigned long heartBeatLEDTimeIntervals[] = { 100 , 300 , 100 , 1500 };
	TaskManagerSchedulerTimeIntervals heartBearLEDTaskManagerScheduler( heartBeatLEDTimeIntervals , (sizeof(heartBeatLEDTimeIntervals) / sizeof(unsigned long)) , true );
    222c:	8a e6       	ldi	r24, 0x6A	; 106
    222e:	94 e1       	ldi	r25, 0x14	; 20
    2230:	69 eb       	ldi	r22, 0xB9	; 185
    2232:	7d e0       	ldi	r23, 0x0D	; 13
    2234:	44 e0       	ldi	r20, 0x04	; 4
    2236:	21 e0       	ldi	r18, 0x01	; 1
    2238:	0e 94 9e 40 	call	0x813c	; 0x813c <_ZN33TaskManagerSchedulerTimeIntervalsC1EPmhb>
	PinHighLowRunnable heartBeatLEDRunnable( HEART_BEAT_LED_PIN , false );
    223c:	80 e6       	ldi	r24, 0x60	; 96
    223e:	94 e1       	ldi	r25, 0x14	; 20
    2240:	6d e0       	ldi	r22, 0x0D	; 13
    2242:	40 e0       	ldi	r20, 0x00	; 0
    2244:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZN18PinHighLowRunnableC1Ehb>
	PinHighLowRunnable heartBeatBuzzerRunnable( HEART_BEAT_BUZZER_PIN , false );
    2248:	86 e5       	ldi	r24, 0x56	; 86
    224a:	94 e1       	ldi	r25, 0x14	; 20
    224c:	68 e0       	ldi	r22, 0x08	; 8
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <_ZN18PinHighLowRunnableC1Ehb>
	HeartBeatRunnable heartBeatRunnable( &heartBeatLEDRunnable , IS_HEART_BEAT_LED_INITIALLY_ON , &heartBeatBuzzerRunnable , IS_HEART_BEAT_BUZZER_INITIALLY_ON );
    2254:	8b e4       	ldi	r24, 0x4B	; 75
    2256:	94 e1       	ldi	r25, 0x14	; 20
    2258:	60 e6       	ldi	r22, 0x60	; 96
    225a:	74 e1       	ldi	r23, 0x14	; 20
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	26 e5       	ldi	r18, 0x56	; 86
    2260:	34 e1       	ldi	r19, 0x14	; 20
    2262:	00 e0       	ldi	r16, 0x00	; 0
    2264:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <_ZN17HeartBeatRunnableC1EP18PinHighLowRunnablebS1_b>

	TaskManagerRecord heartBeatLEDTaskManagerRecord( &heartBearLEDTaskManagerScheduler , &heartBeatRunnable );
    2268:	87 e4       	ldi	r24, 0x47	; 71
    226a:	94 e1       	ldi	r25, 0x14	; 20
    226c:	6a e6       	ldi	r22, 0x6A	; 106
    226e:	74 e1       	ldi	r23, 0x14	; 20
    2270:	4b e4       	ldi	r20, 0x4B	; 75
    2272:	54 e1       	ldi	r21, 0x14	; 20
    2274:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <_ZN17TaskManagerRecordC1EP20TaskManagerSchedulerP8Runnable>
	*/

	// -------------------------------

	//BasicHTMLRestServiceRenderer basicHTMLRestServiceRenderer( true );
	TableHTMLRestServiceRenderer hTMLRestServiceRenderer( HTML_FORMS_GET_OR_POST_METHOD );
    2278:	84 e4       	ldi	r24, 0x44	; 68
    227a:	94 e1       	ldi	r25, 0x14	; 20
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	0e 94 2e 2e 	call	0x5c5c	; 0x5c5c <_ZN28TableHTMLRestServiceRendererC1Eb>
	JsonRestServiceRenderer jsonRestServiceRenderer;
    2282:	82 e4       	ldi	r24, 0x42	; 66
    2284:	94 e1       	ldi	r25, 0x14	; 20
    2286:	0e 94 60 24 	call	0x48c0	; 0x48c0 <_ZN23JsonRestServiceRendererC1Ev>
	JsonMetadescriptionRestServiceRenderer jsonMetadescriptionRestServiceRenderer;
    228a:	80 e4       	ldi	r24, 0x40	; 64
    228c:	94 e1       	ldi	r25, 0x14	; 20
    228e:	0e 94 58 23 	call	0x46b0	; 0x46b0 <_ZN38JsonMetadescriptionRestServiceRendererC1Ev>
	TimeMeasurement pageRendererTimeMeasurement;

	// ----


	NameValueRestService hardwareVersionRestService( 0 , "hardware_version" , "ArduinoMega2650+EthernetShield" );
    2292:	84 e3       	ldi	r24, 0x34	; 52
    2294:	94 e1       	ldi	r25, 0x14	; 20
    2296:	60 e0       	ldi	r22, 0x00	; 0
    2298:	40 e1       	ldi	r20, 0x10	; 16
    229a:	52 e0       	ldi	r21, 0x02	; 2
    229c:	21 e2       	ldi	r18, 0x21	; 33
    229e:	32 e0       	ldi	r19, 0x02	; 2
    22a0:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN20NameValueRestServiceC1EhPKcS1_>
	ServiceDescription hardwareVersionServiceDescription = { &hardwareVersionRestService , &restServiceRenderers[0] };

	NameValueRestService softwareVersionRestService( 1 , "software_version" , "0.5" );
    22a4:	8c e2       	ldi	r24, 0x2C	; 44
    22a6:	94 e1       	ldi	r25, 0x14	; 20
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	40 e4       	ldi	r20, 0x40	; 64
    22ac:	52 e0       	ldi	r21, 0x02	; 2
    22ae:	21 e5       	ldi	r18, 0x51	; 81
    22b0:	32 e0       	ldi	r19, 0x02	; 2
    22b2:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN20NameValueRestServiceC1EhPKcS1_>
	ServiceDescription softwareVersionServiceDescription = { &softwareVersionRestService , &restServiceRenderers[0] };

	LocalTimeRestService localTimeInMsRestService( 2 , "local_time_ms" , false );
    22b6:	85 e2       	ldi	r24, 0x25	; 37
    22b8:	94 e1       	ldi	r25, 0x14	; 20
    22ba:	62 e0       	ldi	r22, 0x02	; 2
    22bc:	45 e5       	ldi	r20, 0x55	; 85
    22be:	52 e0       	ldi	r21, 0x02	; 2
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN20LocalTimeRestServiceC1EhPKcb>
	ServiceDescription localTimeInMsServiceDescription = { &localTimeInMsRestService , &restServiceRenderers[0] };

	LocalTimeRestService localTimeInDdHhMmSsRestService( 3 , "local_time_dd_hh_mm_ss" , true );
    22c6:	8e e1       	ldi	r24, 0x1E	; 30
    22c8:	94 e1       	ldi	r25, 0x14	; 20
    22ca:	63 e0       	ldi	r22, 0x03	; 3
    22cc:	43 e6       	ldi	r20, 0x63	; 99
    22ce:	52 e0       	ldi	r21, 0x02	; 2
    22d0:	21 e0       	ldi	r18, 0x01	; 1
    22d2:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <_ZN20LocalTimeRestServiceC1EhPKcb>
	ServiceDescription localTimeInDdHhMmSsServiceDescription = { &localTimeInDdHhMmSsRestService , &restServiceRenderers[0] };


	HeartBeatSpeedRestService heartBeatSpeedRestService( 4 , "heart_beat_speed" , heartBeatLEDTimeIntervals , 3 );
    22d6:	85 e1       	ldi	r24, 0x15	; 21
    22d8:	94 e1       	ldi	r25, 0x14	; 20
    22da:	64 e0       	ldi	r22, 0x04	; 4
    22dc:	4a e7       	ldi	r20, 0x7A	; 122
    22de:	52 e0       	ldi	r21, 0x02	; 2
    22e0:	29 eb       	ldi	r18, 0xB9	; 185
    22e2:	3d e0       	ldi	r19, 0x0D	; 13
    22e4:	03 e0       	ldi	r16, 0x03	; 3
    22e6:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <_ZN25HeartBeatSpeedRestServiceC1EhPKcPmh>
	ServiceDescription heartBeatSpeedServiceDescription = { &heartBeatSpeedRestService , &restServiceRenderers[0] };

	HeartBeatLedOnOffRestService heartBeatLedOnOffRestService( 5 , "heart_beat_led_on_off" , &heartBeatRunnable );
    22ea:	8d e0       	ldi	r24, 0x0D	; 13
    22ec:	94 e1       	ldi	r25, 0x14	; 20
    22ee:	65 e0       	ldi	r22, 0x05	; 5
    22f0:	4b e8       	ldi	r20, 0x8B	; 139
    22f2:	52 e0       	ldi	r21, 0x02	; 2
    22f4:	2b e4       	ldi	r18, 0x4B	; 75
    22f6:	34 e1       	ldi	r19, 0x14	; 20
    22f8:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <_ZN28HeartBeatLedOnOffRestServiceC1EhPKcP17HeartBeatRunnable>
	ServiceDescription heartBeatLedOnOffServiceDescription = { &heartBeatLedOnOffRestService , &restServiceRenderers[0] };

	HeartBeatBuzzerOnOffRestService heartBeatBuzzerOnOffRestService( 6 , "heart_beat_buzzer_on_off" , &heartBeatRunnable );
    22fc:	85 e0       	ldi	r24, 0x05	; 5
    22fe:	94 e1       	ldi	r25, 0x14	; 20
    2300:	66 e0       	ldi	r22, 0x06	; 6
    2302:	41 ea       	ldi	r20, 0xA1	; 161
    2304:	52 e0       	ldi	r21, 0x02	; 2
    2306:	2b e4       	ldi	r18, 0x4B	; 75
    2308:	34 e1       	ldi	r19, 0x14	; 20
    230a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <_ZN31HeartBeatBuzzerOnOffRestServiceC1EhPKcP17HeartBeatRunnable>
	//HeartBeatBuzzerOnOffRestService heartBeatBuzzerOnOffRestService( p , 6 , "hbbOnOff" , &heartBeatRunnable );
	ServiceDescription heartBeatBuzzerOnOffServiceDescription = { &heartBeatBuzzerOnOffRestService , &restServiceRenderers[0] };

	PinGetterSetterRestService heartBeatLedPinRestService( 7 , "heart_beat_led_pin" , &heartBeatLEDRunnable , 0 , 53 );
    230e:	8b ef       	ldi	r24, 0xFB	; 251
    2310:	93 e1       	ldi	r25, 0x13	; 19
    2312:	67 e0       	ldi	r22, 0x07	; 7
    2314:	4a eb       	ldi	r20, 0xBA	; 186
    2316:	52 e0       	ldi	r21, 0x02	; 2
    2318:	22 e6       	ldi	r18, 0x62	; 98
    231a:	34 e1       	ldi	r19, 0x14	; 20
    231c:	00 e0       	ldi	r16, 0x00	; 0
    231e:	e5 e3       	ldi	r30, 0x35	; 53
    2320:	ee 2e       	mov	r14, r30
    2322:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN26PinGetterSetterRestServiceC1EhPKcP15PinGetterSetterhh>
	ServiceDescription heartBeatLedPinServiceDescription = { &heartBeatLedPinRestService , &restServiceRenderers[0] };

	PinGetterSetterRestService heartBeatBuzzerPinRestService( 8 , "heart_beat_buzzer_pin" , &heartBeatBuzzerRunnable , 0 , 53 );
    2326:	81 ef       	ldi	r24, 0xF1	; 241
    2328:	93 e1       	ldi	r25, 0x13	; 19
    232a:	68 e0       	ldi	r22, 0x08	; 8
    232c:	4d ec       	ldi	r20, 0xCD	; 205
    232e:	52 e0       	ldi	r21, 0x02	; 2
    2330:	28 e5       	ldi	r18, 0x58	; 88
    2332:	34 e1       	ldi	r19, 0x14	; 20
    2334:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <_ZN26PinGetterSetterRestServiceC1EhPKcP15PinGetterSetterhh>
	ServiceDescription heartBeatBuzzerPinServiceDescription = { &heartBeatBuzzerPinRestService , &restServiceRenderers[0] };

	NameValueRestService isInBlockingModeRestService( 9 , "block_until_process_incomming_connection" , BLOCK_UNTIL_FINISH_PROCESSING_INCOMMING_REQUEST ? "true" : "false" );
    2338:	89 ee       	ldi	r24, 0xE9	; 233
    233a:	93 e1       	ldi	r25, 0x13	; 19
    233c:	69 e0       	ldi	r22, 0x09	; 9
    233e:	43 ee       	ldi	r20, 0xE3	; 227
    2340:	52 e0       	ldi	r21, 0x02	; 2
    2342:	2c e0       	ldi	r18, 0x0C	; 12
    2344:	33 e0       	ldi	r19, 0x03	; 3
    2346:	0e 94 81 24 	call	0x4902	; 0x4902 <_ZN20NameValueRestServiceC1EhPKcS1_>
	ServiceDescription isInBlockingModeServiceDescription = { &isInBlockingModeRestService , &restServiceRenderers[0] };

	// ---

	ResetRestService resetRestService( 253 , "reset" );
    234a:	80 ee       	ldi	r24, 0xE0	; 224
    234c:	93 e1       	ldi	r25, 0x13	; 19
    234e:	6d ef       	ldi	r22, 0xFD	; 253
    2350:	42 e1       	ldi	r20, 0x12	; 18
    2352:	53 e0       	ldi	r21, 0x03	; 3
    2354:	0e 94 a1 10 	call	0x2142	; 0x2142 <_ZN16ResetRestServiceC1EhPKc>
	ServiceDescription resetServiceDescription = { &resetRestService , &restServiceRenderers[0] };

	ResponseGenerationTimeRestService responseGenerationTimeRestService( 254 , "response_generation_time" , &pageRendererTimeMeasurement );
    2358:	88 ed       	ldi	r24, 0xD8	; 216
    235a:	93 e1       	ldi	r25, 0x13	; 19
    235c:	6e ef       	ldi	r22, 0xFE	; 254
    235e:	48 e1       	ldi	r20, 0x18	; 24
    2360:	53 e0       	ldi	r21, 0x03	; 3
    2362:	2c e3       	ldi	r18, 0x3C	; 60
    2364:	34 e1       	ldi	r19, 0x14	; 20
    2366:	0e 94 c6 10 	call	0x218c	; 0x218c <_ZN33ResponseGenerationTimeRestServiceC1EhPKcP15TimeMeasurement>
// klasami template jesli sa w oddzielnych plikach (.h i .cpp).

// =================================================

template< typename DataType , typename SizeType >
AnyBuffer<DataType,SizeType>::AnyBuffer( DataType* _array , SizeType _capacity ) : dp( PSTR( "AnyBuffer" ) )
    236a:	8b e8       	ldi	r24, 0x8B	; 139
    236c:	92 e1       	ldi	r25, 0x12	; 18
    236e:	69 e8       	ldi	r22, 0x89	; 137
    2370:	73 e0       	ldi	r23, 0x03	; 3
    2372:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
// =================================================

template< typename DataType , typename SizeType >
void AnyBuffer<DataType,SizeType>::init( DataType* _array , SizeType _capacity , SizeType _position , SizeType _limit )
{
	array = _array;
    2376:	e6 e8       	ldi	r30, 0x86	; 134
    2378:	f2 e1       	ldi	r31, 0x12	; 18
    237a:	8e e8       	ldi	r24, 0x8E	; 142
    237c:	92 e1       	ldi	r25, 0x12	; 18
    237e:	90 93 87 12 	sts	0x1287, r25
    2382:	80 93 86 12 	sts	0x1286, r24
	capacity = _capacity;
    2386:	80 ef       	ldi	r24, 0xF0	; 240
    2388:	82 83       	std	Z+2, r24	; 0x02
// =================================================

template< typename DataType , typename SizeType >
void AnyBuffer<DataType,SizeType>::setLimit( SizeType _limit )
{
	limit = _limit < 0 ? 0 : ( _limit > capacity ? capacity : _limit );
    238a:	84 83       	std	Z+4, r24	; 0x04
// =================================================

template< typename DataType , typename SizeType >
void AnyBuffer<DataType,SizeType>::setPosition( SizeType _position )
{
	position = _position > limit ? limit : ( _position < 0 ? 0 : _position );
    238c:	13 82       	std	Z+3, r1	; 0x03
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    238e:	8d e5       	ldi	r24, 0x5D	; 93
    2390:	92 e1       	ldi	r25, 0x12	; 18
    2392:	90 93 5a 12 	sts	0x125A, r25
    2396:	80 93 59 12 	sts	0x1259, r24
	next = _next;
    239a:	10 92 5c 12 	sts	0x125C, r1
    239e:	10 92 5b 12 	sts	0x125B, r1
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    23a2:	89 e4       	ldi	r24, 0x49	; 73
    23a4:	92 e1       	ldi	r25, 0x12	; 18
    23a6:	90 93 46 12 	sts	0x1246, r25
    23aa:	80 93 45 12 	sts	0x1245, r24
	next = _next;
    23ae:	89 e5       	ldi	r24, 0x59	; 89
    23b0:	92 e1       	ldi	r25, 0x12	; 18
    23b2:	90 93 48 12 	sts	0x1248, r25
    23b6:	80 93 47 12 	sts	0x1247, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    23ba:	85 e3       	ldi	r24, 0x35	; 53
    23bc:	92 e1       	ldi	r25, 0x12	; 18
    23be:	90 93 32 12 	sts	0x1232, r25
    23c2:	80 93 31 12 	sts	0x1231, r24
	next = _next;
    23c6:	85 e4       	ldi	r24, 0x45	; 69
    23c8:	92 e1       	ldi	r25, 0x12	; 18
    23ca:	90 93 34 12 	sts	0x1234, r25
    23ce:	80 93 33 12 	sts	0x1233, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    23d2:	81 e2       	ldi	r24, 0x21	; 33
    23d4:	92 e1       	ldi	r25, 0x12	; 18
    23d6:	90 93 1e 12 	sts	0x121E, r25
    23da:	80 93 1d 12 	sts	0x121D, r24
	next = _next;
    23de:	81 e3       	ldi	r24, 0x31	; 49
    23e0:	92 e1       	ldi	r25, 0x12	; 18
    23e2:	90 93 20 12 	sts	0x1220, r25
    23e6:	80 93 1f 12 	sts	0x121F, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    23ea:	8d e0       	ldi	r24, 0x0D	; 13
    23ec:	92 e1       	ldi	r25, 0x12	; 18
    23ee:	90 93 0a 12 	sts	0x120A, r25
    23f2:	80 93 09 12 	sts	0x1209, r24
	next = _next;
    23f6:	8d e1       	ldi	r24, 0x1D	; 29
    23f8:	92 e1       	ldi	r25, 0x12	; 18
    23fa:	90 93 0c 12 	sts	0x120C, r25
    23fe:	80 93 0b 12 	sts	0x120B, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    2402:	89 ef       	ldi	r24, 0xF9	; 249
    2404:	91 e1       	ldi	r25, 0x11	; 17
    2406:	90 93 f6 11 	sts	0x11F6, r25
    240a:	80 93 f5 11 	sts	0x11F5, r24
	next = _next;
    240e:	89 e0       	ldi	r24, 0x09	; 9
    2410:	92 e1       	ldi	r25, 0x12	; 18
    2412:	90 93 f8 11 	sts	0x11F8, r25
    2416:	80 93 f7 11 	sts	0x11F7, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    241a:	c1 ee       	ldi	r28, 0xE1	; 225
    241c:	d1 e1       	ldi	r29, 0x11	; 17
    241e:	85 ee       	ldi	r24, 0xE5	; 229
    2420:	91 e1       	ldi	r25, 0x11	; 17
    2422:	90 93 e2 11 	sts	0x11E2, r25
    2426:	80 93 e1 11 	sts	0x11E1, r24
	next = _next;
    242a:	85 ef       	ldi	r24, 0xF5	; 245
    242c:	91 e1       	ldi	r25, 0x11	; 17
    242e:	90 93 e4 11 	sts	0x11E4, r25
    2432:	80 93 e3 11 	sts	0x11E3, r24

// =================================================
// =================================================

template< typename DataType >
AnyRingBuffer<DataType>::AnyRingBuffer( AnyRingBufferRecord<DataType>* _head , byte _sizeOfSingleArray ) : dp( PSTR( "AnyRingBuffer" ) )//, DEBUG_LEVEL_ALL )
    2436:	85 ed       	ldi	r24, 0xD5	; 213
    2438:	91 e1       	ldi	r25, 0x11	; 17
    243a:	63 e9       	ldi	r22, 0x93	; 147
    243c:	73 e0       	ldi	r23, 0x03	; 3
    243e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	head = _head;
    2442:	d0 93 d9 11 	sts	0x11D9, r29
    2446:	c0 93 d8 11 	sts	0x11D8, r28
	sizeOfSingleArray = _sizeOfSingleArray;
    244a:	80 e1       	ldi	r24, 0x10	; 16
    244c:	80 93 dc 11 	sts	0x11DC, r24

	writePositionRecord = head;
    2450:	d0 93 db 11 	sts	0x11DB, r29
    2454:	c0 93 da 11 	sts	0x11DA, r28

	// ---

	capacity = sizeOfSingleArray;
    2458:	80 93 dd 11 	sts	0x11DD, r24

	_head = _head->next;
    245c:	e0 91 e3 11 	lds	r30, 0x11E3
    2460:	f0 91 e4 11 	lds	r31, 0x11E4
    2464:	08 c0       	rjmp	.+16     	; 0x2476 <__stack+0x277>
	while( _head != NULL )
	{
		capacity += sizeOfSingleArray;
    2466:	80 91 dd 11 	lds	r24, 0x11DD
    246a:	80 5f       	subi	r24, 0xF0	; 240
    246c:	80 93 dd 11 	sts	0x11DD, r24
		_head = _head->next;
    2470:	02 80       	ldd	r0, Z+2	; 0x02
    2472:	f3 81       	ldd	r31, Z+3	; 0x03
    2474:	e0 2d       	mov	r30, r0
	// ---

	capacity = sizeOfSingleArray;

	_head = _head->next;
	while( _head != NULL )
    2476:	30 97       	sbiw	r30, 0x00	; 0
    2478:	b1 f7       	brne	.-20     	; 0x2466 <__stack+0x267>
		_head = _head->next;
	}

	// ---

	readPosition = 0;
    247a:	10 92 de 11 	sts	0x11DE, r1
	writePosition = 0;
    247e:	10 92 e0 11 	sts	0x11E0, r1
    2482:	10 92 df 11 	sts	0x11DF, r1
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    2486:	85 ec       	ldi	r24, 0xC5	; 197
    2488:	91 e1       	ldi	r25, 0x11	; 17
    248a:	90 93 c2 11 	sts	0x11C2, r25
    248e:	80 93 c1 11 	sts	0x11C1, r24
	next = _next;
    2492:	10 92 c4 11 	sts	0x11C4, r1
    2496:	10 92 c3 11 	sts	0x11C3, r1
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    249a:	81 eb       	ldi	r24, 0xB1	; 177
    249c:	91 e1       	ldi	r25, 0x11	; 17
    249e:	90 93 ae 11 	sts	0x11AE, r25
    24a2:	80 93 ad 11 	sts	0x11AD, r24
	next = _next;
    24a6:	81 ec       	ldi	r24, 0xC1	; 193
    24a8:	91 e1       	ldi	r25, 0x11	; 17
    24aa:	90 93 b0 11 	sts	0x11B0, r25
    24ae:	80 93 af 11 	sts	0x11AF, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    24b2:	8d e9       	ldi	r24, 0x9D	; 157
    24b4:	91 e1       	ldi	r25, 0x11	; 17
    24b6:	90 93 9a 11 	sts	0x119A, r25
    24ba:	80 93 99 11 	sts	0x1199, r24
	next = _next;
    24be:	8d ea       	ldi	r24, 0xAD	; 173
    24c0:	91 e1       	ldi	r25, 0x11	; 17
    24c2:	90 93 9c 11 	sts	0x119C, r25
    24c6:	80 93 9b 11 	sts	0x119B, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    24ca:	89 e8       	ldi	r24, 0x89	; 137
    24cc:	91 e1       	ldi	r25, 0x11	; 17
    24ce:	90 93 86 11 	sts	0x1186, r25
    24d2:	80 93 85 11 	sts	0x1185, r24
	next = _next;
    24d6:	89 e9       	ldi	r24, 0x99	; 153
    24d8:	91 e1       	ldi	r25, 0x11	; 17
    24da:	90 93 88 11 	sts	0x1188, r25
    24de:	80 93 87 11 	sts	0x1187, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    24e2:	85 e7       	ldi	r24, 0x75	; 117
    24e4:	91 e1       	ldi	r25, 0x11	; 17
    24e6:	90 93 72 11 	sts	0x1172, r25
    24ea:	80 93 71 11 	sts	0x1171, r24
	next = _next;
    24ee:	85 e8       	ldi	r24, 0x85	; 133
    24f0:	91 e1       	ldi	r25, 0x11	; 17
    24f2:	90 93 74 11 	sts	0x1174, r25
    24f6:	80 93 73 11 	sts	0x1173, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    24fa:	81 e6       	ldi	r24, 0x61	; 97
    24fc:	91 e1       	ldi	r25, 0x11	; 17
    24fe:	90 93 5e 11 	sts	0x115E, r25
    2502:	80 93 5d 11 	sts	0x115D, r24
	next = _next;
    2506:	81 e7       	ldi	r24, 0x71	; 113
    2508:	91 e1       	ldi	r25, 0x11	; 17
    250a:	90 93 60 11 	sts	0x1160, r25
    250e:	80 93 5f 11 	sts	0x115F, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    2512:	8d e4       	ldi	r24, 0x4D	; 77
    2514:	91 e1       	ldi	r25, 0x11	; 17
    2516:	90 93 4a 11 	sts	0x114A, r25
    251a:	80 93 49 11 	sts	0x1149, r24
	next = _next;
    251e:	8d e5       	ldi	r24, 0x5D	; 93
    2520:	91 e1       	ldi	r25, 0x11	; 17
    2522:	90 93 4c 11 	sts	0x114C, r25
    2526:	80 93 4b 11 	sts	0x114B, r24
// =================================================

template< typename DataType>
AnyRingBufferRecord<DataType>::AnyRingBufferRecord(  DataType* _array , AnyRingBufferRecord<DataType>* _next )
{
	array = _array;
    252a:	c5 e3       	ldi	r28, 0x35	; 53
    252c:	d1 e1       	ldi	r29, 0x11	; 17
    252e:	89 e3       	ldi	r24, 0x39	; 57
    2530:	91 e1       	ldi	r25, 0x11	; 17
    2532:	90 93 36 11 	sts	0x1136, r25
    2536:	80 93 35 11 	sts	0x1135, r24
	next = _next;
    253a:	89 e4       	ldi	r24, 0x49	; 73
    253c:	91 e1       	ldi	r25, 0x11	; 17
    253e:	90 93 38 11 	sts	0x1138, r25
    2542:	80 93 37 11 	sts	0x1137, r24

// =================================================
// =================================================

template< typename DataType >
AnyRingBuffer<DataType>::AnyRingBuffer( AnyRingBufferRecord<DataType>* _head , byte _sizeOfSingleArray ) : dp( PSTR( "AnyRingBuffer" ) )//, DEBUG_LEVEL_ALL )
    2546:	89 e2       	ldi	r24, 0x29	; 41
    2548:	91 e1       	ldi	r25, 0x11	; 17
    254a:	63 e9       	ldi	r22, 0x93	; 147
    254c:	73 e0       	ldi	r23, 0x03	; 3
    254e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	head = _head;
    2552:	d0 93 2d 11 	sts	0x112D, r29
    2556:	c0 93 2c 11 	sts	0x112C, r28
	sizeOfSingleArray = _sizeOfSingleArray;
    255a:	80 e1       	ldi	r24, 0x10	; 16
    255c:	80 93 30 11 	sts	0x1130, r24

	writePositionRecord = head;
    2560:	d0 93 2f 11 	sts	0x112F, r29
    2564:	c0 93 2e 11 	sts	0x112E, r28

	// ---

	capacity = sizeOfSingleArray;
    2568:	80 93 31 11 	sts	0x1131, r24

	_head = _head->next;
    256c:	e0 91 37 11 	lds	r30, 0x1137
    2570:	f0 91 38 11 	lds	r31, 0x1138
    2574:	08 c0       	rjmp	.+16     	; 0x2586 <__stack+0x387>
	while( _head != NULL )
	{
		capacity += sizeOfSingleArray;
    2576:	80 91 31 11 	lds	r24, 0x1131
    257a:	80 5f       	subi	r24, 0xF0	; 240
    257c:	80 93 31 11 	sts	0x1131, r24
		_head = _head->next;
    2580:	02 80       	ldd	r0, Z+2	; 0x02
    2582:	f3 81       	ldd	r31, Z+3	; 0x03
    2584:	e0 2d       	mov	r30, r0
	// ---

	capacity = sizeOfSingleArray;

	_head = _head->next;
	while( _head != NULL )
    2586:	30 97       	sbiw	r30, 0x00	; 0
    2588:	b1 f7       	brne	.-20     	; 0x2576 <__stack+0x377>
		_head = _head->next;
	}

	// ---

	readPosition = 0;
    258a:	10 92 32 11 	sts	0x1132, r1
	writePosition = 0;
    258e:	10 92 34 11 	sts	0x1134, r1
    2592:	10 92 33 11 	sts	0x1133, r1

	//BasicHTMLPageRenderer basicHTMLPageRenderer;

	//bool blockToServeOlnyOneIncommingConnectionToTheEnd = false;

	TableHTMLPageRenderer tableHTMLPageRenderer( serviceDescrptions , (sizeof(serviceDescrptions) / sizeof(ServiceDescription*)) , &pageRendererTimeMeasurement );
    2596:	81 e2       	ldi	r24, 0x21	; 33
    2598:	91 e1       	ldi	r25, 0x11	; 17
    259a:	67 e6       	ldi	r22, 0x67	; 103
    259c:	7d e0       	ldi	r23, 0x0D	; 13
    259e:	4e e0       	ldi	r20, 0x0E	; 14
    25a0:	2c e3       	ldi	r18, 0x3C	; 60
    25a2:	34 e1       	ldi	r19, 0x14	; 20
    25a4:	0e 94 ea 2a 	call	0x55d4	; 0x55d4 <_ZN21TableHTMLPageRendererC1EPP18ServiceDescriptionhP15TimeMeasurement>
	JsonPageRenderer jsonPageRenderer( &pageRendererTimeMeasurement );
    25a8:	8d e1       	ldi	r24, 0x1D	; 29
    25aa:	91 e1       	ldi	r25, 0x11	; 17
    25ac:	6c e3       	ldi	r22, 0x3C	; 60
    25ae:	74 e1       	ldi	r23, 0x14	; 20
    25b0:	0e 94 19 24 	call	0x4832	; 0x4832 <_ZN16JsonPageRendererC1EP15TimeMeasurement>
	*/
	// -------------------------------

	//StreamHFA11xRS232WiFi streamHFA11xRS232WiFi( &incommingByteBufferForStreamHFA11xRS232WiFi , &outgoingByteBufferForStreamHFA11xRS232WiFi , &rwStateMachine );

	StreamHFA11xRS232WiFiCRC crcStream( &SERIAL_FOR_WIFI_CONNECTION );
    25b4:	88 ef       	ldi	r24, 0xF8	; 248
    25b6:	90 e1       	ldi	r25, 0x10	; 16
    25b8:	6e eb       	ldi	r22, 0xBE	; 190
    25ba:	74 e1       	ldi	r23, 0x14	; 20
    25bc:	0e 94 9e 21 	call	0x433c	; 0x433c <_ZN24StreamHFA11xRS232WiFiCRCC1EP6Stream>
	//StreamHFA11xRS232WiFi2 streamHFA11xRS232WiFi( &incommingByteBufferForStreamHFA11xRS232WiFi , &outgoingByteBufferForStreamHFA11xRS232WiFi , &crcStream );

	//StreamHFA11xRS232WiFi3 streamHFA11xRS232WiFiABC( &incommingARB , &outgoingARB , &crcStream );
	//StreamConsolePrinter streamHFA11xRS232WiFi( &streamHFA11xRS232WiFiABC );

	StreamHFA11xRS232WiFi3 streamHFA11xRS232WiFi( &incommingARB , &outgoingARB , &crcStream );
    25c0:	cd ed       	ldi	r28, 0xDD	; 221
    25c2:	d0 e1       	ldi	r29, 0x10	; 16
    25c4:	ce 01       	movw	r24, r28
    25c6:	65 ed       	ldi	r22, 0xD5	; 213
    25c8:	71 e1       	ldi	r23, 0x11	; 17
    25ca:	49 e2       	ldi	r20, 0x29	; 41
    25cc:	51 e1       	ldi	r21, 0x11	; 17
    25ce:	28 ef       	ldi	r18, 0xF8	; 248
    25d0:	30 e1       	ldi	r19, 0x10	; 16
    25d2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <_ZN22StreamHFA11xRS232WiFi3C1EP13AnyRingBufferIhES2_P24StreamHFA11xRS232WiFiCRC>

	// -------------------------------

	RS232ToWiFiTask rs232ToWiFiTask( serviceDescrptions , (sizeof(serviceDescrptions) / sizeof(ServiceDescription*)) , BLOCK_UNTIL_FINISH_PROCESSING_INCOMMING_REQUEST , &tableHTMLPageRenderer , &jsonPageRenderer , jsonActivatorURLPrefix , metadescriptionActivatorURLPrefix , &readHttpPathSubTaskArrayForSelectdServices1[ 0 ] , &readHttpParameterNameSubTaskArrayForMatchServiceNames1[0] , &readHttpParameterValueSubTaskArrayForValueBytes1[0] , readHttpParameterValueSubTaskArrayForValueBytesSize , &sendResponseSubTaskChunkedStreamBuffer , &buffer[0] , bufferSize , &streamHFA11xRS232WiFi );
    25d6:	8d b7       	in	r24, 0x3d	; 61
    25d8:	9e b7       	in	r25, 0x3e	; 62
    25da:	0c 97       	sbiw	r24, 0x0c	; 12
    25dc:	0f b6       	in	r0, 0x3f	; 63
    25de:	f8 94       	cli
    25e0:	9e bf       	out	0x3e, r25	; 62
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	8d bf       	out	0x3d, r24	; 61
    25e6:	ed b7       	in	r30, 0x3d	; 61
    25e8:	fe b7       	in	r31, 0x3e	; 62
    25ea:	31 96       	adiw	r30, 0x01	; 1
    25ec:	8c e9       	ldi	r24, 0x9C	; 156
    25ee:	93 e1       	ldi	r25, 0x13	; 19
    25f0:	ad b7       	in	r26, 0x3d	; 61
    25f2:	be b7       	in	r27, 0x3e	; 62
    25f4:	12 96       	adiw	r26, 0x02	; 2
    25f6:	9c 93       	st	X, r25
    25f8:	8e 93       	st	-X, r24
    25fa:	11 97       	sbiw	r26, 0x01	; 1
    25fc:	8e e7       	ldi	r24, 0x7E	; 126
    25fe:	93 e1       	ldi	r25, 0x13	; 19
    2600:	93 83       	std	Z+3, r25	; 0x03
    2602:	82 83       	std	Z+2, r24	; 0x02
    2604:	8e e1       	ldi	r24, 0x1E	; 30
    2606:	84 83       	std	Z+4, r24	; 0x04
    2608:	86 e8       	ldi	r24, 0x86	; 134
    260a:	92 e1       	ldi	r25, 0x12	; 18
    260c:	96 83       	std	Z+6, r25	; 0x06
    260e:	85 83       	std	Z+5, r24	; 0x05
    2610:	8d e6       	ldi	r24, 0x6D	; 109
    2612:	92 e1       	ldi	r25, 0x12	; 18
    2614:	90 87       	std	Z+8, r25	; 0x08
    2616:	87 83       	std	Z+7, r24	; 0x07
    2618:	89 e1       	ldi	r24, 0x19	; 25
    261a:	81 87       	std	Z+9, r24	; 0x09
    261c:	d3 87       	std	Z+11, r29	; 0x0b
    261e:	c2 87       	std	Z+10, r28	; 0x0a
    2620:	8e ed       	ldi	r24, 0xDE	; 222
    2622:	9f e0       	ldi	r25, 0x0F	; 15
    2624:	67 e6       	ldi	r22, 0x67	; 103
    2626:	7d e0       	ldi	r23, 0x0D	; 13
    2628:	4e e0       	ldi	r20, 0x0E	; 14
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	01 e2       	ldi	r16, 0x21	; 33
    262e:	11 e1       	ldi	r17, 0x11	; 17
    2630:	0f 2e       	mov	r0, r31
    2632:	fd e1       	ldi	r31, 0x1D	; 29
    2634:	ef 2e       	mov	r14, r31
    2636:	f1 e1       	ldi	r31, 0x11	; 17
    2638:	ff 2e       	mov	r15, r31
    263a:	f0 2d       	mov	r31, r0
    263c:	0f 2e       	mov	r0, r31
    263e:	f1 e3       	ldi	r31, 0x31	; 49
    2640:	cf 2e       	mov	r12, r31
    2642:	f3 e0       	ldi	r31, 0x03	; 3
    2644:	df 2e       	mov	r13, r31
    2646:	f0 2d       	mov	r31, r0
    2648:	0f 2e       	mov	r0, r31
    264a:	f3 e3       	ldi	r31, 0x33	; 51
    264c:	af 2e       	mov	r10, r31
    264e:	f3 e0       	ldi	r31, 0x03	; 3
    2650:	bf 2e       	mov	r11, r31
    2652:	f0 2d       	mov	r31, r0
    2654:	0f 2e       	mov	r0, r31
    2656:	f8 ea       	ldi	r31, 0xA8	; 168
    2658:	8f 2e       	mov	r8, r31
    265a:	f3 e1       	ldi	r31, 0x13	; 19
    265c:	9f 2e       	mov	r9, r31
    265e:	f0 2d       	mov	r31, r0
    2660:	0e 94 0b 10 	call	0x2016	; 0x2016 <_ZN15RS232ToWiFiTaskC1EPP18ServiceDescriptionhbP12PageRendererS4_PKcS6_S1_PbPhhP9AnyBufferIhhEPchP6Stream>
	BasicTaskManagerScheduler restTaskManagerScheduler( true , false );
    2664:	8d b7       	in	r24, 0x3d	; 61
    2666:	9e b7       	in	r25, 0x3e	; 62
    2668:	0c 96       	adiw	r24, 0x0c	; 12
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	9e bf       	out	0x3e, r25	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	8d bf       	out	0x3d, r24	; 61
    2674:	8a ed       	ldi	r24, 0xDA	; 218
    2676:	9f e0       	ldi	r25, 0x0F	; 15
    2678:	61 e0       	ldi	r22, 0x01	; 1
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	0e 94 56 3b 	call	0x76ac	; 0x76ac <_ZN25BasicTaskManagerSchedulerC1Ebb>
	TaskManagerRecord rs232ToWiFiTaskManagerRecord( &restTaskManagerScheduler , &rs232ToWiFiTask );
    2680:	86 ed       	ldi	r24, 0xD6	; 214
    2682:	9f e0       	ldi	r25, 0x0F	; 15
    2684:	6a ed       	ldi	r22, 0xDA	; 218
    2686:	7f e0       	ldi	r23, 0x0F	; 15
    2688:	4e ed       	ldi	r20, 0xDE	; 222
    268a:	5f e0       	ldi	r21, 0x0F	; 15
    268c:	0e 94 8c 3f 	call	0x7f18	; 0x7f18 <_ZN17TaskManagerRecordC1EP20TaskManagerSchedulerP8Runnable>
    2690:	06 c0       	rjmp	.+12     	; 0x269e <__stack+0x49f>
    2692:	00 97       	sbiw	r24, 0x00	; 0
    2694:	21 f4       	brne	.+8      	; 0x269e <__stack+0x49f>

	// -------------------------------

	static const TaskManagerRecord* tasksArray[ MAXIMUM_TASKS_IN_TASK_MANAGER_COUNT ];

	TaskManager taskManager( MAXIMUM_TASKS_IN_TASK_MANAGER_COUNT , tasksArray );
    2696:	85 e9       	ldi	r24, 0x95	; 149
    2698:	94 e1       	ldi	r25, 0x14	; 20
    269a:	0e 94 a3 3b 	call	0x7746	; 0x7746 <_ZN11TaskManagerD1Ev>
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	1f 91       	pop	r17
    26a4:	0f 91       	pop	r16
    26a6:	ff 90       	pop	r15
    26a8:	ef 90       	pop	r14
    26aa:	df 90       	pop	r13
    26ac:	cf 90       	pop	r12
    26ae:	bf 90       	pop	r11
    26b0:	af 90       	pop	r10
    26b2:	9f 90       	pop	r9
    26b4:	8f 90       	pop	r8
    26b6:	08 95       	ret

000026b8 <loop>:
	// ------------

	//all( p << satelita1prefix << "loop():executing taskManager.execute()..." << endl; )
	//aln( "loop():executing taskManager.execute()..." )

	taskManager.execute();
    26b8:	85 e9       	ldi	r24, 0x95	; 149
    26ba:	94 e1       	ldi	r25, 0x14	; 20
    26bc:	0e 94 3e 3e 	call	0x7c7c	; 0x7c7c <_ZN11TaskManager7executeEv>

	// ------------
}
    26c0:	08 95       	ret

000026c2 <_Z11printReportv>:
}

// =================================================

void printReport()
{
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
	static const PROGMEM prog_char functionName[] = "printReport";
	//static const char* prefix = "printReport():";

	wln( "-------------" )
    26c6:	80 91 a5 14 	lds	r24, 0x14A5
    26ca:	8f 31       	cpi	r24, 0x1F	; 31
    26cc:	f0 f4       	brcc	.+60     	; 0x270a <_Z11printReportv+0x48>
    26ce:	83 ea       	ldi	r24, 0xA3	; 163
    26d0:	94 e1       	ldi	r25, 0x14	; 20
    26d2:	65 e8       	ldi	r22, 0x85	; 133
    26d4:	72 e1       	ldi	r23, 0x12	; 18
    26d6:	4d ee       	ldi	r20, 0xED	; 237
    26d8:	52 e0       	ldi	r21, 0x02	; 2
    26da:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    26de:	0f 92       	push	r0
    26e0:	0f 92       	push	r0
    26e2:	89 ef       	ldi	r24, 0xF9	; 249
    26e4:	92 e0       	ldi	r25, 0x02	; 2
    26e6:	ad b7       	in	r26, 0x3d	; 61
    26e8:	be b7       	in	r27, 0x3e	; 62
    26ea:	12 96       	adiw	r26, 0x02	; 2
    26ec:	9c 93       	st	X, r25
    26ee:	8e 93       	st	-X, r24
    26f0:	11 97       	sbiw	r26, 0x01	; 1
    26f2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    26f6:	8e e8       	ldi	r24, 0x8E	; 142
    26f8:	92 e1       	ldi	r25, 0x12	; 18
    26fa:	ed b7       	in	r30, 0x3d	; 61
    26fc:	fe b7       	in	r31, 0x3e	; 62
    26fe:	92 83       	std	Z+2, r25	; 0x02
    2700:	81 83       	std	Z+1, r24	; 0x01
    2702:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0

	wln( "freeRamMemory() = %i B, used RAM = %i B" , freeRamMemory() , ( CURRENT_RAM_SIZE - freeRamMemory() ) )
    270a:	80 91 a5 14 	lds	r24, 0x14A5
    270e:	8f 31       	cpi	r24, 0x1F	; 31
    2710:	90 f5       	brcc	.+100    	; 0x2776 <_Z11printReportv+0xb4>
    2712:	83 ea       	ldi	r24, 0xA3	; 163
    2714:	94 e1       	ldi	r25, 0x14	; 20
    2716:	65 e8       	ldi	r22, 0x85	; 133
    2718:	72 e1       	ldi	r23, 0x12	; 18
    271a:	4d ee       	ldi	r20, 0xED	; 237
    271c:	52 e0       	ldi	r21, 0x02	; 2
    271e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2722:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <freeRamMemory>
    2726:	ec 01       	movw	r28, r24
    2728:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <freeRamMemory>
    272c:	00 d0       	rcall	.+0      	; 0x272e <_Z11printReportv+0x6c>
    272e:	00 d0       	rcall	.+0      	; 0x2730 <_Z11printReportv+0x6e>
    2730:	ed b7       	in	r30, 0x3d	; 61
    2732:	fe b7       	in	r31, 0x3e	; 62
    2734:	31 96       	adiw	r30, 0x01	; 1
    2736:	27 e0       	ldi	r18, 0x07	; 7
    2738:	33 e0       	ldi	r19, 0x03	; 3
    273a:	ad b7       	in	r26, 0x3d	; 61
    273c:	be b7       	in	r27, 0x3e	; 62
    273e:	12 96       	adiw	r26, 0x02	; 2
    2740:	3c 93       	st	X, r19
    2742:	2e 93       	st	-X, r18
    2744:	11 97       	sbiw	r26, 0x01	; 1
    2746:	d3 83       	std	Z+3, r29	; 0x03
    2748:	c2 83       	std	Z+2, r28	; 0x02
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e2       	ldi	r19, 0x20	; 32
    274e:	28 1b       	sub	r18, r24
    2750:	39 0b       	sbc	r19, r25
    2752:	35 83       	std	Z+5, r19	; 0x05
    2754:	24 83       	std	Z+4, r18	; 0x04
    2756:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    275a:	0f 90       	pop	r0
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	8e e8       	ldi	r24, 0x8E	; 142
    2764:	92 e1       	ldi	r25, 0x12	; 18
    2766:	ed b7       	in	r30, 0x3d	; 61
    2768:	fe b7       	in	r31, 0x3e	; 62
    276a:	92 83       	std	Z+2, r25	; 0x02
    276c:	81 83       	std	Z+1, r24	; 0x01
    276e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2772:	0f 90       	pop	r0
    2774:	0f 90       	pop	r0
	wln( "millis() = %u" , millis() )
    2776:	80 91 a5 14 	lds	r24, 0x14A5
    277a:	8f 31       	cpi	r24, 0x1F	; 31
    277c:	50 f5       	brcc	.+84     	; 0x27d2 <_Z11printReportv+0x110>
    277e:	83 ea       	ldi	r24, 0xA3	; 163
    2780:	94 e1       	ldi	r25, 0x14	; 20
    2782:	65 e8       	ldi	r22, 0x85	; 133
    2784:	72 e1       	ldi	r23, 0x12	; 18
    2786:	4d ee       	ldi	r20, 0xED	; 237
    2788:	52 e0       	ldi	r21, 0x02	; 2
    278a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    278e:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	00 d0       	rcall	.+0      	; 0x2798 <_Z11printReportv+0xd6>
    2798:	00 d0       	rcall	.+0      	; 0x279a <_Z11printReportv+0xd8>
    279a:	2f e2       	ldi	r18, 0x2F	; 47
    279c:	33 e0       	ldi	r19, 0x03	; 3
    279e:	ed b7       	in	r30, 0x3d	; 61
    27a0:	fe b7       	in	r31, 0x3e	; 62
    27a2:	32 83       	std	Z+2, r19	; 0x02
    27a4:	21 83       	std	Z+1, r18	; 0x01
    27a6:	83 83       	std	Z+3, r24	; 0x03
    27a8:	94 83       	std	Z+4, r25	; 0x04
    27aa:	a5 83       	std	Z+5, r26	; 0x05
    27ac:	b6 83       	std	Z+6, r27	; 0x06
    27ae:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	8e e8       	ldi	r24, 0x8E	; 142
    27bc:	92 e1       	ldi	r25, 0x12	; 18
    27be:	ad b7       	in	r26, 0x3d	; 61
    27c0:	be b7       	in	r27, 0x3e	; 62
    27c2:	12 96       	adiw	r26, 0x02	; 2
    27c4:	9c 93       	st	X, r25
    27c6:	8e 93       	st	-X, r24
    27c8:	11 97       	sbiw	r26, 0x01	; 1
    27ca:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0

	wln( "-------------" )
    27d2:	80 91 a5 14 	lds	r24, 0x14A5
    27d6:	8f 31       	cpi	r24, 0x1F	; 31
    27d8:	f0 f4       	brcc	.+60     	; 0x2816 <_Z11printReportv+0x154>
    27da:	83 ea       	ldi	r24, 0xA3	; 163
    27dc:	94 e1       	ldi	r25, 0x14	; 20
    27de:	65 e8       	ldi	r22, 0x85	; 133
    27e0:	72 e1       	ldi	r23, 0x12	; 18
    27e2:	4d ee       	ldi	r20, 0xED	; 237
    27e4:	52 e0       	ldi	r21, 0x02	; 2
    27e6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    27ea:	0f 92       	push	r0
    27ec:	0f 92       	push	r0
    27ee:	8d e3       	ldi	r24, 0x3D	; 61
    27f0:	93 e0       	ldi	r25, 0x03	; 3
    27f2:	ed b7       	in	r30, 0x3d	; 61
    27f4:	fe b7       	in	r31, 0x3e	; 62
    27f6:	92 83       	std	Z+2, r25	; 0x02
    27f8:	81 83       	std	Z+1, r24	; 0x01
    27fa:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    27fe:	8e e8       	ldi	r24, 0x8E	; 142
    2800:	92 e1       	ldi	r25, 0x12	; 18
    2802:	ad b7       	in	r26, 0x3d	; 61
    2804:	be b7       	in	r27, 0x3e	; 62
    2806:	12 96       	adiw	r26, 0x02	; 2
    2808:	9c 93       	st	X, r25
    280a:	8e 93       	st	-X, r24
    280c:	11 97       	sbiw	r26, 0x01	; 1
    280e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0

	warning( p << satelita1prefix << prefix << "millis()=" << millis() << endl; )
	warning( p << satelita1prefix << prefix << "sizeof(void*)=" << sizeof(void*) << endl; )
	warning( p << satelita1prefix << prefix << hl; )
	*/
}
    2816:	df 91       	pop	r29
    2818:	cf 91       	pop	r28
    281a:	08 95       	ret

0000281c <_Z9hardResetv>:
void hardReset()
{
	static const PROGMEM prog_char functionName[] = "hardReset";

	//error( p << satelita1prefix << "hardReset(): HARD RESET..." << endl; )
	eln( "hardReset(): HARD RESET..." )
    281c:	80 91 a5 14 	lds	r24, 0x14A5
    2820:	89 32       	cpi	r24, 0x29	; 41
    2822:	e0 f4       	brcc	.+56     	; 0x285c <_Z9hardResetv+0x40>
    2824:	83 ea       	ldi	r24, 0xA3	; 163
    2826:	94 e1       	ldi	r25, 0x14	; 20
    2828:	62 e8       	ldi	r22, 0x82	; 130
    282a:	72 e1       	ldi	r23, 0x12	; 18
    282c:	4b e4       	ldi	r20, 0x4B	; 75
    282e:	53 e0       	ldi	r21, 0x03	; 3
    2830:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2834:	0f 92       	push	r0
    2836:	0f 92       	push	r0
    2838:	85 e5       	ldi	r24, 0x55	; 85
    283a:	93 e0       	ldi	r25, 0x03	; 3
    283c:	ed b7       	in	r30, 0x3d	; 61
    283e:	fe b7       	in	r31, 0x3e	; 62
    2840:	92 83       	std	Z+2, r25	; 0x02
    2842:	81 83       	std	Z+1, r24	; 0x01
    2844:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2848:	8e e8       	ldi	r24, 0x8E	; 142
    284a:	92 e1       	ldi	r25, 0x12	; 18
    284c:	ed b7       	in	r30, 0x3d	; 61
    284e:	fe b7       	in	r31, 0x3e	; 62
    2850:	92 83       	std	Z+2, r25	; 0x02
    2852:	81 83       	std	Z+1, r24	; 0x01
    2854:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0

	delay( 2 * 1000 );
    285c:	60 ed       	ldi	r22, 0xD0	; 208
    285e:	77 e0       	ldi	r23, 0x07	; 7
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>

	// TODO jakis sposob na zresetowanie sie tutaj zawrzec, prawdopodobnie ten z wyslanie pradu na odpowiedni pin, ktory bedzie polaczony ze zlaczem reset na plytce
}
    2868:	08 95       	ret

0000286a <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc>:
}

// =================================================

void addTaskToTaskManager( TaskManagerRecord* ptr , const char* desrtiption )//, const char* desrtiption )
{
    286a:	0f 93       	push	r16
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	ec 01       	movw	r28, r24
    2874:	8b 01       	movw	r16, r22
	static const PROGMEM prog_char functionName[] = "addTaskToTaskManager";

	//info( p << satelita1prefix << "addTaskToTaskManager():" << "adding task '" << desrtiption << "' to taskManager, task ptr* = " << (int)ptr << ", executed from '" << prefix << "'" << endl; )
	iln( "adding task '%s' to taskManager, task ptr* = %u" , desrtiption , ptr )
    2876:	80 91 a5 14 	lds	r24, 0x14A5
    287a:	85 31       	cpi	r24, 0x15	; 21
    287c:	48 f5       	brcc	.+82     	; 0x28d0 <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0x66>
    287e:	83 ea       	ldi	r24, 0xA3	; 163
    2880:	94 e1       	ldi	r25, 0x14	; 20
    2882:	68 e8       	ldi	r22, 0x88	; 136
    2884:	72 e1       	ldi	r23, 0x12	; 18
    2886:	44 e7       	ldi	r20, 0x74	; 116
    2888:	52 e0       	ldi	r21, 0x02	; 2
    288a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    288e:	00 d0       	rcall	.+0      	; 0x2890 <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0x26>
    2890:	00 d0       	rcall	.+0      	; 0x2892 <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0x28>
    2892:	ed b7       	in	r30, 0x3d	; 61
    2894:	fe b7       	in	r31, 0x3e	; 62
    2896:	31 96       	adiw	r30, 0x01	; 1
    2898:	89 e8       	ldi	r24, 0x89	; 137
    289a:	92 e0       	ldi	r25, 0x02	; 2
    289c:	ad b7       	in	r26, 0x3d	; 61
    289e:	be b7       	in	r27, 0x3e	; 62
    28a0:	12 96       	adiw	r26, 0x02	; 2
    28a2:	9c 93       	st	X, r25
    28a4:	8e 93       	st	-X, r24
    28a6:	11 97       	sbiw	r26, 0x01	; 1
    28a8:	13 83       	std	Z+3, r17	; 0x03
    28aa:	02 83       	std	Z+2, r16	; 0x02
    28ac:	d5 83       	std	Z+5, r29	; 0x05
    28ae:	c4 83       	std	Z+4, r28	; 0x04
    28b0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	8e e8       	ldi	r24, 0x8E	; 142
    28be:	92 e1       	ldi	r25, 0x12	; 18
    28c0:	ed b7       	in	r30, 0x3d	; 61
    28c2:	fe b7       	in	r31, 0x3e	; 62
    28c4:	92 83       	std	Z+2, r25	; 0x02
    28c6:	81 83       	std	Z+1, r24	; 0x01
    28c8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    28cc:	0f 90       	pop	r0
    28ce:	0f 90       	pop	r0

	if( !taskManager.add( ptr ) )
    28d0:	85 e9       	ldi	r24, 0x95	; 149
    28d2:	94 e1       	ldi	r25, 0x14	; 20
    28d4:	be 01       	movw	r22, r28
    28d6:	0e 94 d2 3b 	call	0x77a4	; 0x77a4 <_ZN11TaskManager3addEP17TaskManagerRecord>
    28da:	88 23       	and	r24, r24
    28dc:	81 f5       	brne	.+96     	; 0x293e <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0xd4>
	{
		//error( p << satelita1prefix << "addTaskToTaskManager():could not add taks!! ptr*=" << (int)ptr << endl; )
		eln( "addTaskToTaskManager():could not add taks!! ptr*=%u" , ptr )
    28de:	80 91 a5 14 	lds	r24, 0x14A5
    28e2:	89 32       	cpi	r24, 0x29	; 41
    28e4:	20 f5       	brcc	.+72     	; 0x292e <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0xc4>
    28e6:	83 ea       	ldi	r24, 0xA3	; 163
    28e8:	94 e1       	ldi	r25, 0x14	; 20
    28ea:	62 e8       	ldi	r22, 0x82	; 130
    28ec:	72 e1       	ldi	r23, 0x12	; 18
    28ee:	44 e7       	ldi	r20, 0x74	; 116
    28f0:	52 e0       	ldi	r21, 0x02	; 2
    28f2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    28f6:	00 d0       	rcall	.+0      	; 0x28f8 <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc+0x8e>
    28f8:	0f 92       	push	r0
    28fa:	89 eb       	ldi	r24, 0xB9	; 185
    28fc:	92 e0       	ldi	r25, 0x02	; 2
    28fe:	ad b7       	in	r26, 0x3d	; 61
    2900:	be b7       	in	r27, 0x3e	; 62
    2902:	12 96       	adiw	r26, 0x02	; 2
    2904:	9c 93       	st	X, r25
    2906:	8e 93       	st	-X, r24
    2908:	11 97       	sbiw	r26, 0x01	; 1
    290a:	14 96       	adiw	r26, 0x04	; 4
    290c:	dc 93       	st	X, r29
    290e:	ce 93       	st	-X, r28
    2910:	13 97       	sbiw	r26, 0x03	; 3
    2912:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	8e e8       	ldi	r24, 0x8E	; 142
    291c:	92 e1       	ldi	r25, 0x12	; 18
    291e:	ed b7       	in	r30, 0x3d	; 61
    2920:	fe b7       	in	r31, 0x3e	; 62
    2922:	92 83       	std	Z+2, r25	; 0x02
    2924:	81 83       	std	Z+1, r24	; 0x01
    2926:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0

		delay( 10 * 1000 );
    292e:	60 e1       	ldi	r22, 0x10	; 16
    2930:	77 e2       	ldi	r23, 0x27	; 39
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>
		hardReset();
    293a:	0e 94 0e 14 	call	0x281c	; 0x281c <_Z9hardResetv>
	}
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	08 95       	ret

00002948 <_Z9userSetupv>:
	aln( "unsigned long %%i %i" , l );*/

	// ---------------

	{
		addTaskToTaskManager( &heartBeatLEDTaskManagerRecord , "heartBeatLED" );
    2948:	87 e4       	ldi	r24, 0x47	; 71
    294a:	94 e1       	ldi	r25, 0x14	; 20
    294c:	65 e3       	ldi	r22, 0x35	; 53
    294e:	73 e0       	ldi	r23, 0x03	; 3
    2950:	0e 94 35 14 	call	0x286a	; 0x286a <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc>
	}

	// ---------------

	{
		addTaskToTaskManager( &sampleTaskManagerRecord , "sampleTask" );
    2954:	89 e7       	ldi	r24, 0x79	; 121
    2956:	94 e1       	ldi	r25, 0x14	; 20
    2958:	62 e4       	ldi	r22, 0x42	; 66
    295a:	73 e0       	ldi	r23, 0x03	; 3
    295c:	0e 94 35 14 	call	0x286a	; 0x286a <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc>

	// ---------------

	{

		SERIAL_FOR_WIFI_CONNECTION.begin( SPEED_OF_SERIAL_FOR_WIFI_CONNECTION );
    2960:	8e eb       	ldi	r24, 0xBE	; 190
    2962:	94 e1       	ldi	r25, 0x14	; 20
    2964:	40 e0       	ldi	r20, 0x00	; 0
    2966:	52 ec       	ldi	r21, 0xC2	; 194
    2968:	61 e0       	ldi	r22, 0x01	; 1
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	0e 94 91 43 	call	0x8722	; 0x8722 <_ZN14HardwareSerial5beginEm>

		//setSerial1( SPEED_OF_SERIAL_FOR_WIFI_CONNECTION , 'o' , 8 , 2 );

		//streamHFA11xRS232WiFiABC.resetInternalState();
		streamHFA11xRS232WiFi.resetInternalState();
    2970:	8d ed       	ldi	r24, 0xDD	; 221
    2972:	90 e1       	ldi	r25, 0x10	; 16
    2974:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN22StreamHFA11xRS232WiFi318resetInternalStateEv>
			//addTaskToTaskManager( &rwStateMachineTaskManagerRecord , "RS232ToWiFi_state_machine" );
		}

		{
			//rs232ToWiFiTask.setStream( &streamHFA11xRS232WiFi );
			addTaskToTaskManager( &rs232ToWiFiTaskManagerRecord , "rs232ToWiFiTask" );
    2978:	86 ed       	ldi	r24, 0xD6	; 214
    297a:	9f e0       	ldi	r25, 0x0F	; 15
    297c:	6d e4       	ldi	r22, 0x4D	; 77
    297e:	73 e0       	ldi	r23, 0x03	; 3
    2980:	0e 94 35 14 	call	0x286a	; 0x286a <_Z20addTaskToTaskManagerP17TaskManagerRecordPKc>
			delay( 1000 );
		}
	}*/

	// ---------------
}
    2984:	08 95       	ret

00002986 <setup>:
{
	static const PROGMEM prog_char functionName[] = "setup";

	// ---------------------------------------------

	DEFAULT_OUTPUT.begin( SPEED_OF_SERIAL_FOR_CONSOLE_CONNECTION );
    2986:	8b e1       	ldi	r24, 0x1B	; 27
    2988:	95 e1       	ldi	r25, 0x15	; 21
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	52 ec       	ldi	r21, 0xC2	; 194
    298e:	61 e0       	ldi	r22, 0x01	; 1
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	0e 94 91 43 	call	0x8722	; 0x8722 <_ZN14HardwareSerial5beginEm>

	fdev_setup_stream( &redirectedOut , redirectedOutPrintFunction , NULL , _FDEV_SETUP_WRITE );
    2996:	8a ed       	ldi	r24, 0xDA	; 218
    2998:	90 e1       	ldi	r25, 0x10	; 16
    299a:	90 93 af 14 	sts	0x14AF, r25
    299e:	80 93 ae 14 	sts	0x14AE, r24
    29a2:	10 92 b1 14 	sts	0x14B1, r1
    29a6:	10 92 b0 14 	sts	0x14B0, r1
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	80 93 a9 14 	sts	0x14A9, r24
    29b0:	10 92 b3 14 	sts	0x14B3, r1
    29b4:	10 92 b2 14 	sts	0x14B2, r1

	stdout = &redirectedOut ;
    29b8:	86 ea       	ldi	r24, 0xA6	; 166
    29ba:	94 e1       	ldi	r25, 0x14	; 20
    29bc:	90 93 6a 19 	sts	0x196A, r25
    29c0:	80 93 69 19 	sts	0x1969, r24

	//static const char prefix[] = "setup():";

	// ---------------

	heartBeatBuzzerRunnable.run();
    29c4:	86 e5       	ldi	r24, 0x56	; 86
    29c6:	94 e1       	ldi	r25, 0x14	; 20
    29c8:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN18PinHighLowRunnable3runEv>
	delay( 2 );
    29cc:	62 e0       	ldi	r22, 0x02	; 2
    29ce:	70 e0       	ldi	r23, 0x00	; 0
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>
	heartBeatBuzzerRunnable.run();
    29d8:	86 e5       	ldi	r24, 0x56	; 86
    29da:	94 e1       	ldi	r25, 0x14	; 20
    29dc:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN18PinHighLowRunnable3runEv>

	// ---------------

	//info( p << satelita1prefix << prefix << hl; )
	iln( "=============" )
    29e0:	80 91 a5 14 	lds	r24, 0x14A5
    29e4:	85 31       	cpi	r24, 0x15	; 21
    29e6:	e0 f4       	brcc	.+56     	; 0x2a20 <setup+0x9a>
    29e8:	83 ea       	ldi	r24, 0xA3	; 163
    29ea:	94 e1       	ldi	r25, 0x14	; 20
    29ec:	68 e8       	ldi	r22, 0x88	; 136
    29ee:	72 e1       	ldi	r23, 0x12	; 18
    29f0:	40 e1       	ldi	r20, 0x10	; 16
    29f2:	52 e0       	ldi	r21, 0x02	; 2
    29f4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    29f8:	0f 92       	push	r0
    29fa:	0f 92       	push	r0
    29fc:	86 e1       	ldi	r24, 0x16	; 22
    29fe:	92 e0       	ldi	r25, 0x02	; 2
    2a00:	ed b7       	in	r30, 0x3d	; 61
    2a02:	fe b7       	in	r31, 0x3e	; 62
    2a04:	92 83       	std	Z+2, r25	; 0x02
    2a06:	81 83       	std	Z+1, r24	; 0x01
    2a08:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2a0c:	8e e8       	ldi	r24, 0x8E	; 142
    2a0e:	92 e1       	ldi	r25, 0x12	; 18
    2a10:	ed b7       	in	r30, 0x3d	; 61
    2a12:	fe b7       	in	r31, 0x3e	; 62
    2a14:	92 83       	std	Z+2, r25	; 0x02
    2a16:	81 83       	std	Z+1, r24	; 0x01
    2a18:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0

	//p << satelita1prefix << prefix << "START (current debug level = " << CURRENT_DEBUG_LEVEL << ")" << endl;
	iln( "START (current debug level = %u)" , CURRENT_DEBUG_LEVEL )
    2a20:	80 91 a5 14 	lds	r24, 0x14A5
    2a24:	85 31       	cpi	r24, 0x15	; 21
    2a26:	10 f5       	brcc	.+68     	; 0x2a6c <setup+0xe6>
    2a28:	83 ea       	ldi	r24, 0xA3	; 163
    2a2a:	94 e1       	ldi	r25, 0x14	; 20
    2a2c:	68 e8       	ldi	r22, 0x88	; 136
    2a2e:	72 e1       	ldi	r23, 0x12	; 18
    2a30:	40 e1       	ldi	r20, 0x10	; 16
    2a32:	52 e0       	ldi	r21, 0x02	; 2
    2a34:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <setup+0xb4>
    2a3a:	0f 92       	push	r0
    2a3c:	84 e2       	ldi	r24, 0x24	; 36
    2a3e:	92 e0       	ldi	r25, 0x02	; 2
    2a40:	ed b7       	in	r30, 0x3d	; 61
    2a42:	fe b7       	in	r31, 0x3e	; 62
    2a44:	92 83       	std	Z+2, r25	; 0x02
    2a46:	81 83       	std	Z+1, r24	; 0x01
    2a48:	84 e1       	ldi	r24, 0x14	; 20
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	94 83       	std	Z+4, r25	; 0x04
    2a4e:	83 83       	std	Z+3, r24	; 0x03
    2a50:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	8e e8       	ldi	r24, 0x8E	; 142
    2a5a:	92 e1       	ldi	r25, 0x12	; 18
    2a5c:	ed b7       	in	r30, 0x3d	; 61
    2a5e:	fe b7       	in	r31, 0x3e	; 62
    2a60:	92 83       	std	Z+2, r25	; 0x02
    2a62:	81 83       	std	Z+1, r24	; 0x01
    2a64:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0

	printReport();
    2a6c:	0e 94 61 13 	call	0x26c2	; 0x26c2 <_Z11printReportv>

	// ---------------

	//info( p << satelita1prefix << prefix << "entering userSetup()..." << endl; )
	iln( "entering userSetup()..." )
    2a70:	80 91 a5 14 	lds	r24, 0x14A5
    2a74:	85 31       	cpi	r24, 0x15	; 21
    2a76:	e0 f4       	brcc	.+56     	; 0x2ab0 <setup+0x12a>
    2a78:	83 ea       	ldi	r24, 0xA3	; 163
    2a7a:	94 e1       	ldi	r25, 0x14	; 20
    2a7c:	68 e8       	ldi	r22, 0x88	; 136
    2a7e:	72 e1       	ldi	r23, 0x12	; 18
    2a80:	40 e1       	ldi	r20, 0x10	; 16
    2a82:	52 e0       	ldi	r21, 0x02	; 2
    2a84:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2a88:	0f 92       	push	r0
    2a8a:	0f 92       	push	r0
    2a8c:	85 e4       	ldi	r24, 0x45	; 69
    2a8e:	92 e0       	ldi	r25, 0x02	; 2
    2a90:	ed b7       	in	r30, 0x3d	; 61
    2a92:	fe b7       	in	r31, 0x3e	; 62
    2a94:	92 83       	std	Z+2, r25	; 0x02
    2a96:	81 83       	std	Z+1, r24	; 0x01
    2a98:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2a9c:	8e e8       	ldi	r24, 0x8E	; 142
    2a9e:	92 e1       	ldi	r25, 0x12	; 18
    2aa0:	ed b7       	in	r30, 0x3d	; 61
    2aa2:	fe b7       	in	r31, 0x3e	; 62
    2aa4:	92 83       	std	Z+2, r25	; 0x02
    2aa6:	81 83       	std	Z+1, r24	; 0x01
    2aa8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2aac:	0f 90       	pop	r0
    2aae:	0f 90       	pop	r0

	userSetup();
    2ab0:	0e 94 a4 14 	call	0x2948	; 0x2948 <_Z9userSetupv>

	//info( p << satelita1prefix << prefix << "leaving userSetup()..." << endl; )
	iln( "leaving userSetup()..." )
    2ab4:	80 91 a5 14 	lds	r24, 0x14A5
    2ab8:	85 31       	cpi	r24, 0x15	; 21
    2aba:	e0 f4       	brcc	.+56     	; 0x2af4 <setup+0x16e>
    2abc:	83 ea       	ldi	r24, 0xA3	; 163
    2abe:	94 e1       	ldi	r25, 0x14	; 20
    2ac0:	68 e8       	ldi	r22, 0x88	; 136
    2ac2:	72 e1       	ldi	r23, 0x12	; 18
    2ac4:	40 e1       	ldi	r20, 0x10	; 16
    2ac6:	52 e0       	ldi	r21, 0x02	; 2
    2ac8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2acc:	0f 92       	push	r0
    2ace:	0f 92       	push	r0
    2ad0:	8d e5       	ldi	r24, 0x5D	; 93
    2ad2:	92 e0       	ldi	r25, 0x02	; 2
    2ad4:	ed b7       	in	r30, 0x3d	; 61
    2ad6:	fe b7       	in	r31, 0x3e	; 62
    2ad8:	92 83       	std	Z+2, r25	; 0x02
    2ada:	81 83       	std	Z+1, r24	; 0x01
    2adc:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2ae0:	8e e8       	ldi	r24, 0x8E	; 142
    2ae2:	92 e1       	ldi	r25, 0x12	; 18
    2ae4:	ed b7       	in	r30, 0x3d	; 61
    2ae6:	fe b7       	in	r31, 0x3e	; 62
    2ae8:	92 83       	std	Z+2, r25	; 0x02
    2aea:	81 83       	std	Z+1, r24	; 0x01
    2aec:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0

	// ---------------

	printReport();
    2af4:	0e 94 61 13 	call	0x26c2	; 0x26c2 <_Z11printReportv>

	// ---------------

	heartBeatBuzzerRunnable.run();
    2af8:	86 e5       	ldi	r24, 0x56	; 86
    2afa:	94 e1       	ldi	r25, 0x14	; 20
    2afc:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN18PinHighLowRunnable3runEv>
	delay( 2 );
    2b00:	62 e0       	ldi	r22, 0x02	; 2
    2b02:	70 e0       	ldi	r23, 0x00	; 0
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>
	heartBeatBuzzerRunnable.run();
    2b0c:	86 e5       	ldi	r24, 0x56	; 86
    2b0e:	94 e1       	ldi	r25, 0x14	; 20
    2b10:	0e 94 ca 35 	call	0x6b94	; 0x6b94 <_ZN18PinHighLowRunnable3runEv>

	// ---------------
}
    2b14:	08 95       	ret

00002b16 <_GLOBAL__sub_I_dp>:

static int redirectedOutPrintFunction( char c , FILE *stream )
{
	DEFAULT_OUTPUT.write(c) ;
    //return 0; // <-- powinno tu byc ale zablokowalem, moze to cos przyspieszy??
}
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_Z41__static_initialization_and_destruction_0ii.constprop.1>
    2b1e:	08 95       	ret

00002b20 <_GLOBAL__sub_D_dp>:
    2b20:	80 e0       	ldi	r24, 0x00	; 0
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <_Z41__static_initialization_and_destruction_0ii.constprop.1>
    2b28:	08 95       	ret

00002b2a <_ZN22StreamHFA11xRS232WiFi3C1EP13AnyRingBufferIhES2_P24StreamHFA11xRS232WiFiCRC>:

#include "StreamHFA11xRS232WiFi3.h"

// =================================================

StreamHFA11xRS232WiFi3::StreamHFA11xRS232WiFi3( AnyRingBuffer< byte >* _inputBuffer , AnyRingBuffer< byte >* _outputBuffer , StreamHFA11xRS232WiFiCRC* _crcStream )
    2b2a:	cf 92       	push	r12
    2b2c:	df 92       	push	r13
    2b2e:	ef 92       	push	r14
    2b30:	ff 92       	push	r15
    2b32:	0f 93       	push	r16
    2b34:	1f 93       	push	r17
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	ec 01       	movw	r28, r24
    2b3c:	6b 01       	movw	r12, r22
    2b3e:	7a 01       	movw	r14, r20
    2b40:	89 01       	movw	r16, r18
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2b42:	1b 82       	std	Y+3, r1	; 0x03
    2b44:	1a 82       	std	Y+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2b46:	88 ee       	ldi	r24, 0xE8	; 232
    2b48:	93 e0       	ldi	r25, 0x03	; 3
    2b4a:	a0 e0       	ldi	r26, 0x00	; 0
    2b4c:	b0 e0       	ldi	r27, 0x00	; 0
    2b4e:	8c 83       	std	Y+4, r24	; 0x04
    2b50:	9d 83       	std	Y+5, r25	; 0x05
    2b52:	ae 83       	std	Y+6, r26	; 0x06
    2b54:	bf 83       	std	Y+7, r27	; 0x07
	: dp( PSTR( "StreamHFA11xRS232WiFi3" ) )//, DEBUG_LEVEL_ALL )
    2b56:	85 e7       	ldi	r24, 0x75	; 117
    2b58:	9e e0       	ldi	r25, 0x0E	; 14
    2b5a:	99 83       	std	Y+1, r25	; 0x01
    2b5c:	88 83       	st	Y, r24
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0c 96       	adiw	r24, 0x0c	; 12
    2b62:	61 ea       	ldi	r22, 0xA1	; 161
    2b64:	73 e0       	ldi	r23, 0x03	; 3
    2b66:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	inputBuffer = _inputBuffer;
    2b6a:	d8 8a       	std	Y+16, r13	; 0x10
    2b6c:	cf 86       	std	Y+15, r12	; 0x0f
	outputBuffer = _outputBuffer;
    2b6e:	fa 8a       	std	Y+18, r15	; 0x12
    2b70:	e9 8a       	std	Y+17, r14	; 0x11
	crcStream = _crcStream;
    2b72:	1c 8b       	std	Y+20, r17	; 0x14
    2b74:	0b 8b       	std	Y+19, r16	; 0x13

	arr[0] = 0; // command
    2b76:	1d 8a       	std	Y+21, r1	; 0x15
	arr[1] = 0; // sn
    2b78:	1e 8a       	std	Y+22, r1	; 0x16
	arr[2] = 0; // reserved
    2b7a:	1f 8a       	std	Y+23, r1	; 0x17
	arr[3] = 0; // reserved
    2b7c:	18 8e       	std	Y+24, r1	; 0x18
	arr[4] = 0; // RECV: length to read, SEND: send data length
    2b7e:	19 8e       	std	Y+25, r1	; 0x19
	arr[5] = 0; // RECV: length to read, SEND: send data length
    2b80:	1a 8e       	std	Y+26, r1	; 0x1a
}
    2b82:	df 91       	pop	r29
    2b84:	cf 91       	pop	r28
    2b86:	1f 91       	pop	r17
    2b88:	0f 91       	pop	r16
    2b8a:	ff 90       	pop	r15
    2b8c:	ef 90       	pop	r14
    2b8e:	df 90       	pop	r13
    2b90:	cf 90       	pop	r12
    2b92:	08 95       	ret

00002b94 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb>:
}

// =================================================

void StreamHFA11xRS232WiFi3::discardAnyWaitingDataInUnderlyingStream( bool discardForAllSerialNumbers )
{
    2b94:	2f 92       	push	r2
    2b96:	3f 92       	push	r3
    2b98:	4f 92       	push	r4
    2b9a:	5f 92       	push	r5
    2b9c:	6f 92       	push	r6
    2b9e:	7f 92       	push	r7
    2ba0:	8f 92       	push	r8
    2ba2:	9f 92       	push	r9
    2ba4:	bf 92       	push	r11
    2ba6:	cf 92       	push	r12
    2ba8:	df 92       	push	r13
    2baa:	ef 92       	push	r14
    2bac:	ff 92       	push	r15
    2bae:	0f 93       	push	r16
    2bb0:	1f 93       	push	r17
    2bb2:	cf 93       	push	r28
    2bb4:	df 93       	push	r29
    2bb6:	ec 01       	movw	r28, r24
    2bb8:	f6 2e       	mov	r15, r22
	static const PROGMEM prog_char functionName[] = "discardAnyWaitingDataInUnderlyingStream";

	unsigned int discardedBytesCount = 0;
    2bba:	00 e0       	ldi	r16, 0x00	; 0
    2bbc:	10 e0       	ldi	r17, 0x00	; 0

	while( crcStream->underlyingStream->read() != -1 ) discardedBytesCount++; // discarding any data waiting in the stream
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x30>
    2bc0:	0f 5f       	subi	r16, 0xFF	; 255
    2bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    2bc4:	eb 89       	ldd	r30, Y+19	; 0x13
    2bc6:	fc 89       	ldd	r31, Y+20	; 0x14
    2bc8:	84 85       	ldd	r24, Z+12	; 0x0c
    2bca:	95 85       	ldd	r25, Z+13	; 0x0d
    2bcc:	dc 01       	movw	r26, r24
    2bce:	ed 91       	ld	r30, X+
    2bd0:	fc 91       	ld	r31, X
    2bd2:	06 80       	ldd	r0, Z+6	; 0x06
    2bd4:	f7 81       	ldd	r31, Z+7	; 0x07
    2bd6:	e0 2d       	mov	r30, r0
    2bd8:	19 95       	eicall
    2bda:	bf ef       	ldi	r27, 0xFF	; 255
    2bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    2bde:	9b 07       	cpc	r25, r27
    2be0:	79 f7       	brne	.-34     	; 0x2bc0 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x2c>

	aln( "initially discarded %u bytes" , discardedBytesCount )
    2be2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2be4:	8b 30       	cpi	r24, 0x0B	; 11
    2be6:	10 f5       	brcc	.+68     	; 0x2c2c <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x98>
    2be8:	ce 01       	movw	r24, r28
    2bea:	0c 96       	adiw	r24, 0x0c	; 12
    2bec:	6b e8       	ldi	r22, 0x8B	; 139
    2bee:	72 e1       	ldi	r23, 0x12	; 18
    2bf0:	41 eb       	ldi	r20, 0xB1	; 177
    2bf2:	54 e0       	ldi	r21, 0x04	; 4
    2bf4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x66>
    2bfa:	0f 92       	push	r0
    2bfc:	89 ed       	ldi	r24, 0xD9	; 217
    2bfe:	94 e0       	ldi	r25, 0x04	; 4
    2c00:	ed b7       	in	r30, 0x3d	; 61
    2c02:	fe b7       	in	r31, 0x3e	; 62
    2c04:	92 83       	std	Z+2, r25	; 0x02
    2c06:	81 83       	std	Z+1, r24	; 0x01
    2c08:	14 83       	std	Z+4, r17	; 0x04
    2c0a:	03 83       	std	Z+3, r16	; 0x03
    2c0c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	8e e8       	ldi	r24, 0x8E	; 142
    2c16:	92 e1       	ldi	r25, 0x12	; 18
    2c18:	ad b7       	in	r26, 0x3d	; 61
    2c1a:	be b7       	in	r27, 0x3e	; 62
    2c1c:	12 96       	adiw	r26, 0x02	; 2
    2c1e:	9c 93       	st	X, r25
    2c20:	8e 93       	st	-X, r24
    2c22:	11 97       	sbiw	r26, 0x01	; 1
    2c24:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2c28:	0f 90       	pop	r0
    2c2a:	0f 90       	pop	r0

	if( discardForAllSerialNumbers )
    2c2c:	ff 20       	and	r15, r15
    2c2e:	09 f4       	brne	.+2      	; 0x2c32 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x9e>
    2c30:	9a c0       	rjmp	.+308    	; 0x2d66 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1d2>
	{
		byte currentSeriaNumber = arr[1];
    2c32:	be 88       	ldd	r11, Y+22	; 0x16

		for( unsigned int i = 0; i < 256 ; i++ )
    2c34:	ee 24       	eor	r14, r14
    2c36:	ff 24       	eor	r15, r15
		{
			arr[0] = 2;
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	d8 2e       	mov	r13, r24
			arr[1] = i;
			arr[4] = 0;
			arr[5] = 3;
    2c3c:	93 e0       	ldi	r25, 0x03	; 3
    2c3e:	c9 2e       	mov	r12, r25

			crcStream->resetOutgoingState();
			crcStream->write( arr , 6 );
    2c40:	25 e1       	ldi	r18, 0x15	; 21
    2c42:	82 2e       	mov	r8, r18
    2c44:	91 2c       	mov	r9, r1
    2c46:	8c 0e       	add	r8, r28
    2c48:	9d 1e       	adc	r9, r29
			for( byte i = 0 ; i < 5 && crcStream->underlyingStream->available() < 8 ; i++ ) delay( 5 );

			discardedBytesCount = 0;
			while( crcStream->underlyingStream->read() != -1 ) discardedBytesCount++;

			iln( "for serial number %u discarded %u bytes" , i , discardedBytesCount )
    2c4a:	3c e0       	ldi	r19, 0x0C	; 12
    2c4c:	63 2e       	mov	r6, r19
    2c4e:	71 2c       	mov	r7, r1
    2c50:	6c 0e       	add	r6, r28
    2c52:	7d 1e       	adc	r7, r29
    2c54:	46 ef       	ldi	r20, 0xF6	; 246
    2c56:	44 2e       	mov	r4, r20
    2c58:	44 e0       	ldi	r20, 0x04	; 4
    2c5a:	54 2e       	mov	r5, r20
    2c5c:	5e e8       	ldi	r21, 0x8E	; 142
    2c5e:	25 2e       	mov	r2, r21
    2c60:	52 e1       	ldi	r21, 0x12	; 18
    2c62:	35 2e       	mov	r3, r21
	{
		byte currentSeriaNumber = arr[1];

		for( unsigned int i = 0; i < 256 ; i++ )
		{
			arr[0] = 2;
    2c64:	dd 8a       	std	Y+21, r13	; 0x15
			arr[1] = i;
    2c66:	ee 8a       	std	Y+22, r14	; 0x16
			arr[4] = 0;
    2c68:	19 8e       	std	Y+25, r1	; 0x19
			arr[5] = 3;
    2c6a:	ca 8e       	std	Y+26, r12	; 0x1a

			crcStream->resetOutgoingState();
    2c6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c70:	0e 94 ca 21 	call	0x4394	; 0x4394 <_ZN24StreamHFA11xRS232WiFiCRC18resetOutgoingStateEv>
			crcStream->write( arr , 6 );
    2c74:	8b 89       	ldd	r24, Y+19	; 0x13
    2c76:	9c 89       	ldd	r25, Y+20	; 0x14
    2c78:	dc 01       	movw	r26, r24
    2c7a:	ed 91       	ld	r30, X+
    2c7c:	fc 91       	ld	r31, X
    2c7e:	02 80       	ldd	r0, Z+2	; 0x02
    2c80:	f3 81       	ldd	r31, Z+3	; 0x03
    2c82:	e0 2d       	mov	r30, r0
    2c84:	b4 01       	movw	r22, r8
    2c86:	46 e0       	ldi	r20, 0x06	; 6
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	19 95       	eicall
			crcStream->writeCRC();
    2c8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c90:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN24StreamHFA11xRS232WiFiCRC8writeCRCEv>
			crcStream->flush();
    2c94:	8b 89       	ldd	r24, Y+19	; 0x13
    2c96:	9c 89       	ldd	r25, Y+20	; 0x14
    2c98:	dc 01       	movw	r26, r24
    2c9a:	ed 91       	ld	r30, X+
    2c9c:	fc 91       	ld	r31, X
    2c9e:	02 84       	ldd	r0, Z+10	; 0x0a
    2ca0:	f3 85       	ldd	r31, Z+11	; 0x0b
    2ca2:	e0 2d       	mov	r30, r0
    2ca4:	19 95       	eicall
    2ca6:	15 e0       	ldi	r17, 0x05	; 5

			//delay( 25 );

			for( byte i = 0 ; i < 5 && crcStream->underlyingStream->available() < 8 ; i++ ) delay( 5 );
    2ca8:	eb 89       	ldd	r30, Y+19	; 0x13
    2caa:	fc 89       	ldd	r31, Y+20	; 0x14
    2cac:	84 85       	ldd	r24, Z+12	; 0x0c
    2cae:	95 85       	ldd	r25, Z+13	; 0x0d
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	ed 91       	ld	r30, X+
    2cb4:	fc 91       	ld	r31, X
    2cb6:	04 80       	ldd	r0, Z+4	; 0x04
    2cb8:	f5 81       	ldd	r31, Z+5	; 0x05
    2cba:	e0 2d       	mov	r30, r0
    2cbc:	19 95       	eicall
    2cbe:	88 30       	cpi	r24, 0x08	; 8
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	0c f4       	brge	.+2      	; 0x2cc6 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x132>
    2cc4:	46 c0       	rjmp	.+140    	; 0x2d52 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1be>
			arr[5] = 3;

			crcStream->resetOutgoingState();
			crcStream->write( arr , 6 );
			crcStream->writeCRC();
			crcStream->flush();
    2cc6:	00 e0       	ldi	r16, 0x00	; 0
    2cc8:	10 e0       	ldi	r17, 0x00	; 0
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x13c>
			//delay( 25 );

			for( byte i = 0 ; i < 5 && crcStream->underlyingStream->available() < 8 ; i++ ) delay( 5 );

			discardedBytesCount = 0;
			while( crcStream->underlyingStream->read() != -1 ) discardedBytesCount++;
    2ccc:	0f 5f       	subi	r16, 0xFF	; 255
    2cce:	1f 4f       	sbci	r17, 0xFF	; 255
    2cd0:	eb 89       	ldd	r30, Y+19	; 0x13
    2cd2:	fc 89       	ldd	r31, Y+20	; 0x14
    2cd4:	84 85       	ldd	r24, Z+12	; 0x0c
    2cd6:	95 85       	ldd	r25, Z+13	; 0x0d
    2cd8:	dc 01       	movw	r26, r24
    2cda:	ed 91       	ld	r30, X+
    2cdc:	fc 91       	ld	r31, X
    2cde:	06 80       	ldd	r0, Z+6	; 0x06
    2ce0:	f7 81       	ldd	r31, Z+7	; 0x07
    2ce2:	e0 2d       	mov	r30, r0
    2ce4:	19 95       	eicall
    2ce6:	bf ef       	ldi	r27, 0xFF	; 255
    2ce8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cea:	9b 07       	cpc	r25, r27
    2cec:	79 f7       	brne	.-34     	; 0x2ccc <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x138>

			iln( "for serial number %u discarded %u bytes" , i , discardedBytesCount )
    2cee:	8e 85       	ldd	r24, Y+14	; 0x0e
    2cf0:	85 31       	cpi	r24, 0x15	; 21
    2cf2:	20 f5       	brcc	.+72     	; 0x2d3c <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1a8>
    2cf4:	c3 01       	movw	r24, r6
    2cf6:	68 e8       	ldi	r22, 0x88	; 136
    2cf8:	72 e1       	ldi	r23, 0x12	; 18
    2cfa:	41 eb       	ldi	r20, 0xB1	; 177
    2cfc:	54 e0       	ldi	r21, 0x04	; 4
    2cfe:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x170>
    2d04:	00 d0       	rcall	.+0      	; 0x2d06 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x172>
    2d06:	ed b7       	in	r30, 0x3d	; 61
    2d08:	fe b7       	in	r31, 0x3e	; 62
    2d0a:	31 96       	adiw	r30, 0x01	; 1
    2d0c:	ad b7       	in	r26, 0x3d	; 61
    2d0e:	be b7       	in	r27, 0x3e	; 62
    2d10:	12 96       	adiw	r26, 0x02	; 2
    2d12:	5c 92       	st	X, r5
    2d14:	4e 92       	st	-X, r4
    2d16:	11 97       	sbiw	r26, 0x01	; 1
    2d18:	f3 82       	std	Z+3, r15	; 0x03
    2d1a:	e2 82       	std	Z+2, r14	; 0x02
    2d1c:	15 83       	std	Z+5, r17	; 0x05
    2d1e:	04 83       	std	Z+4, r16	; 0x04
    2d20:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	0f 90       	pop	r0
    2d2a:	0f 90       	pop	r0
    2d2c:	ed b7       	in	r30, 0x3d	; 61
    2d2e:	fe b7       	in	r31, 0x3e	; 62
    2d30:	32 82       	std	Z+2, r3	; 0x02
    2d32:	21 82       	std	Z+1, r2	; 0x01
    2d34:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2d38:	0f 90       	pop	r0
    2d3a:	0f 90       	pop	r0

	if( discardForAllSerialNumbers )
	{
		byte currentSeriaNumber = arr[1];

		for( unsigned int i = 0; i < 256 ; i++ )
    2d3c:	08 94       	sec
    2d3e:	e1 1c       	adc	r14, r1
    2d40:	f1 1c       	adc	r15, r1
    2d42:	f0 e0       	ldi	r31, 0x00	; 0
    2d44:	ef 16       	cp	r14, r31
    2d46:	f1 e0       	ldi	r31, 0x01	; 1
    2d48:	ff 06       	cpc	r15, r31
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1ba>
    2d4c:	8b cf       	rjmp	.-234    	; 0x2c64 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0xd0>
			while( crcStream->underlyingStream->read() != -1 ) discardedBytesCount++;

			iln( "for serial number %u discarded %u bytes" , i , discardedBytesCount )
		}

		arr[1] = currentSeriaNumber;
    2d4e:	be 8a       	std	Y+22, r11	; 0x16
    2d50:	0a c0       	rjmp	.+20     	; 0x2d66 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1d2>
			crcStream->writeCRC();
			crcStream->flush();

			//delay( 25 );

			for( byte i = 0 ; i < 5 && crcStream->underlyingStream->available() < 8 ; i++ ) delay( 5 );
    2d52:	65 e0       	ldi	r22, 0x05	; 5
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>
    2d5e:	11 50       	subi	r17, 0x01	; 1
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x1d0>
    2d62:	b1 cf       	rjmp	.-158    	; 0x2cc6 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x132>
    2d64:	a1 cf       	rjmp	.-190    	; 0x2ca8 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb+0x114>
			iln( "for serial number %u discarded %u bytes" , i , discardedBytesCount )
		}

		arr[1] = currentSeriaNumber;
	}
}
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	1f 91       	pop	r17
    2d6c:	0f 91       	pop	r16
    2d6e:	ff 90       	pop	r15
    2d70:	ef 90       	pop	r14
    2d72:	df 90       	pop	r13
    2d74:	cf 90       	pop	r12
    2d76:	bf 90       	pop	r11
    2d78:	9f 90       	pop	r9
    2d7a:	8f 90       	pop	r8
    2d7c:	7f 90       	pop	r7
    2d7e:	6f 90       	pop	r6
    2d80:	5f 90       	pop	r5
    2d82:	4f 90       	pop	r4
    2d84:	3f 90       	pop	r3
    2d86:	2f 90       	pop	r2
    2d88:	08 95       	ret

00002d8a <_ZN22StreamHFA11xRS232WiFi318resetInternalStateEv>:
}

// =================================================

void StreamHFA11xRS232WiFi3::resetInternalState()
{
    2d8a:	cf 93       	push	r28
    2d8c:	df 93       	push	r29
    2d8e:	ec 01       	movw	r28, r24
	discardAnyWaitingDataInUnderlyingStream( true );
    2d90:	61 e0       	ldi	r22, 0x01	; 1
    2d92:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb>
	crcStream->resetInternalState();
    2d96:	8b 89       	ldd	r24, Y+19	; 0x13
    2d98:	9c 89       	ldd	r25, Y+20	; 0x14
    2d9a:	0e 94 91 21 	call	0x4322	; 0x4322 <_ZN24StreamHFA11xRS232WiFiCRC18resetInternalStateEv>
	inputBuffer->clear();
    2d9e:	ef 85       	ldd	r30, Y+15	; 0x0f
    2da0:	f8 89       	ldd	r31, Y+16	; 0x10
// =================================================

template< typename DataType >
void AnyRingBuffer<DataType>::clear()
{
	readPosition = 0;
    2da2:	11 86       	std	Z+9, r1	; 0x09
	writePosition = 0;
    2da4:	13 86       	std	Z+11, r1	; 0x0b
    2da6:	12 86       	std	Z+10, r1	; 0x0a
	writePositionRecord = head;
    2da8:	83 81       	ldd	r24, Z+3	; 0x03
    2daa:	94 81       	ldd	r25, Z+4	; 0x04
    2dac:	96 83       	std	Z+6, r25	; 0x06
    2dae:	85 83       	std	Z+5, r24	; 0x05
	outputBuffer->clear();
    2db0:	e9 89       	ldd	r30, Y+17	; 0x11
    2db2:	fa 89       	ldd	r31, Y+18	; 0x12
// =================================================

template< typename DataType >
void AnyRingBuffer<DataType>::clear()
{
	readPosition = 0;
    2db4:	11 86       	std	Z+9, r1	; 0x09
	writePosition = 0;
    2db6:	13 86       	std	Z+11, r1	; 0x0b
    2db8:	12 86       	std	Z+10, r1	; 0x0a
	writePositionRecord = head;
    2dba:	83 81       	ldd	r24, Z+3	; 0x03
    2dbc:	94 81       	ldd	r25, Z+4	; 0x04
    2dbe:	96 83       	std	Z+6, r25	; 0x06
    2dc0:	85 83       	std	Z+5, r24	; 0x05
}
    2dc2:	df 91       	pop	r29
    2dc4:	cf 91       	pop	r28
    2dc6:	08 95       	ret

00002dc8 <_ZN13AnyRingBufferIhE4peekEv>:
}

// =================================================

template< typename DataType >
DataType AnyRingBuffer<DataType>::peek()
    2dc8:	cf 93       	push	r28
// =================================================

template< typename DataType >
bool AnyRingBuffer<DataType>::canRead()
{
	return readPosition < writePosition;
    2dca:	dc 01       	movw	r26, r24
    2dcc:	19 96       	adiw	r26, 0x09	; 9
    2dce:	2c 91       	ld	r18, X
    2dd0:	19 97       	sbiw	r26, 0x09	; 9
    2dd2:	30 e0       	ldi	r19, 0x00	; 0
template< typename DataType >
DataType AnyRingBuffer<DataType>::peek()
{
	static const PROGMEM prog_char functionName[] = "peek";

	if( canRead() )
    2dd4:	1a 96       	adiw	r26, 0x0a	; 10
    2dd6:	4d 91       	ld	r20, X+
    2dd8:	5c 91       	ld	r21, X
    2dda:	1b 97       	sbiw	r26, 0x0b	; 11
    2ddc:	24 17       	cp	r18, r20
    2dde:	35 07       	cpc	r19, r21
    2de0:	c0 f5       	brcc	.+112    	; 0x2e52 <_ZN13AnyRingBufferIhE4peekEv+0x8a>
	{
		DataType result = head->array[ readPosition ];
    2de2:	13 96       	adiw	r26, 0x03	; 3
    2de4:	ed 91       	ld	r30, X+
    2de6:	fc 91       	ld	r31, X
    2de8:	14 97       	sbiw	r26, 0x04	; 4
    2dea:	01 90       	ld	r0, Z+
    2dec:	f0 81       	ld	r31, Z
    2dee:	e0 2d       	mov	r30, r0
    2df0:	e2 0f       	add	r30, r18
    2df2:	f3 1f       	adc	r31, r19
    2df4:	c0 81       	ld	r28, Z

		aln( "result = %c (%u)" , result , result )
    2df6:	12 96       	adiw	r26, 0x02	; 2
    2df8:	2c 91       	ld	r18, X
    2dfa:	12 97       	sbiw	r26, 0x02	; 2
    2dfc:	2b 30       	cpi	r18, 0x0B	; 11
    2dfe:	08 f0       	brcs	.+2      	; 0x2e02 <_ZN13AnyRingBufferIhE4peekEv+0x3a>
    2e00:	4b c0       	rjmp	.+150    	; 0x2e98 <_ZN13AnyRingBufferIhE4peekEv+0xd0>
    2e02:	6b e8       	ldi	r22, 0x8B	; 139
    2e04:	72 e1       	ldi	r23, 0x12	; 18
    2e06:	4f e7       	ldi	r20, 0x7F	; 127
    2e08:	54 e0       	ldi	r21, 0x04	; 4
    2e0a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2e0e:	00 d0       	rcall	.+0      	; 0x2e10 <_ZN13AnyRingBufferIhE4peekEv+0x48>
    2e10:	00 d0       	rcall	.+0      	; 0x2e12 <_ZN13AnyRingBufferIhE4peekEv+0x4a>
    2e12:	ed b7       	in	r30, 0x3d	; 61
    2e14:	fe b7       	in	r31, 0x3e	; 62
    2e16:	31 96       	adiw	r30, 0x01	; 1
    2e18:	84 e8       	ldi	r24, 0x84	; 132
    2e1a:	94 e0       	ldi	r25, 0x04	; 4
    2e1c:	ad b7       	in	r26, 0x3d	; 61
    2e1e:	be b7       	in	r27, 0x3e	; 62
    2e20:	12 96       	adiw	r26, 0x02	; 2
    2e22:	9c 93       	st	X, r25
    2e24:	8e 93       	st	-X, r24
    2e26:	11 97       	sbiw	r26, 0x01	; 1
    2e28:	c2 83       	std	Z+2, r28	; 0x02
    2e2a:	13 82       	std	Z+3, r1	; 0x03
    2e2c:	c4 83       	std	Z+4, r28	; 0x04
    2e2e:	15 82       	std	Z+5, r1	; 0x05
    2e30:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	8e e8       	ldi	r24, 0x8E	; 142
    2e3e:	92 e1       	ldi	r25, 0x12	; 18
    2e40:	ed b7       	in	r30, 0x3d	; 61
    2e42:	fe b7       	in	r31, 0x3e	; 62
    2e44:	92 83       	std	Z+2, r25	; 0x02
    2e46:	81 83       	std	Z+1, r24	; 0x01
    2e48:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2e4c:	0f 90       	pop	r0
    2e4e:	0f 90       	pop	r0
    2e50:	23 c0       	rjmp	.+70     	; 0x2e98 <_ZN13AnyRingBufferIhE4peekEv+0xd0>

		return result;
	}
	else
	{
		wln( "could not peek, returning 0" )
    2e52:	dc 01       	movw	r26, r24
    2e54:	12 96       	adiw	r26, 0x02	; 2
    2e56:	2c 91       	ld	r18, X
    2e58:	12 97       	sbiw	r26, 0x02	; 2
    2e5a:	2f 31       	cpi	r18, 0x1F	; 31
    2e5c:	e0 f4       	brcc	.+56     	; 0x2e96 <_ZN13AnyRingBufferIhE4peekEv+0xce>
    2e5e:	65 e8       	ldi	r22, 0x85	; 133
    2e60:	72 e1       	ldi	r23, 0x12	; 18
    2e62:	4f e7       	ldi	r20, 0x7F	; 127
    2e64:	54 e0       	ldi	r21, 0x04	; 4
    2e66:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2e6a:	0f 92       	push	r0
    2e6c:	0f 92       	push	r0
    2e6e:	85 e9       	ldi	r24, 0x95	; 149
    2e70:	94 e0       	ldi	r25, 0x04	; 4
    2e72:	ed b7       	in	r30, 0x3d	; 61
    2e74:	fe b7       	in	r31, 0x3e	; 62
    2e76:	92 83       	std	Z+2, r25	; 0x02
    2e78:	81 83       	std	Z+1, r24	; 0x01
    2e7a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2e7e:	8e e8       	ldi	r24, 0x8E	; 142
    2e80:	92 e1       	ldi	r25, 0x12	; 18
    2e82:	ad b7       	in	r26, 0x3d	; 61
    2e84:	be b7       	in	r27, 0x3e	; 62
    2e86:	12 96       	adiw	r26, 0x02	; 2
    2e88:	9c 93       	st	X, r25
    2e8a:	8e 93       	st	-X, r24
    2e8c:	11 97       	sbiw	r26, 0x01	; 1
    2e8e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    2e92:	0f 90       	pop	r0
    2e94:	0f 90       	pop	r0
		return 0;
    2e96:	c0 e0       	ldi	r28, 0x00	; 0
	}
}
    2e98:	8c 2f       	mov	r24, r28
    2e9a:	cf 91       	pop	r28
    2e9c:	08 95       	ret

00002e9e <_ZN13AnyRingBufferIhE5writeEP6Streamj>:
}

// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::write( Stream* fromStream , unsigned int howManyWriteFromStream )
    2e9e:	af 92       	push	r10
    2ea0:	bf 92       	push	r11
    2ea2:	cf 92       	push	r12
    2ea4:	df 92       	push	r13
    2ea6:	ef 92       	push	r14
    2ea8:	ff 92       	push	r15
    2eaa:	0f 93       	push	r16
    2eac:	1f 93       	push	r17
    2eae:	cf 93       	push	r28
    2eb0:	8c 01       	movw	r16, r24
    2eb2:	5b 01       	movw	r10, r22
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	1a 96       	adiw	r26, 0x0a	; 10
    2eb8:	ed 91       	ld	r30, X+
    2eba:	fc 91       	ld	r31, X
    2ebc:	1b 97       	sbiw	r26, 0x0b	; 11
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getFreeSpace()
{
	return capacity - getUsedSpace();
    2ebe:	18 96       	adiw	r26, 0x08	; 8
    2ec0:	2c 91       	ld	r18, X
    2ec2:	18 97       	sbiw	r26, 0x08	; 8
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    2ec6:	19 96       	adiw	r26, 0x09	; 9
    2ec8:	8c 91       	ld	r24, X
    2eca:	19 97       	sbiw	r26, 0x09	; 9
    2ecc:	bf 01       	movw	r22, r30
    2ece:	68 1b       	sub	r22, r24
    2ed0:	71 09       	sbc	r23, r1
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getFreeSpace()
{
	return capacity - getUsedSpace();
    2ed2:	26 1b       	sub	r18, r22
    2ed4:	37 0b       	sbc	r19, r23
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    2ed6:	7a 01       	movw	r14, r20
    2ed8:	24 17       	cp	r18, r20
    2eda:	35 07       	cpc	r19, r21
    2edc:	08 f4       	brcc	.+2      	; 0x2ee0 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0x42>
    2ede:	79 01       	movw	r14, r18
	unsigned int alreadyWrote = 0;

	//AnyRingBufferRecord<DataType>* p = getRecordContainingIndex( writePosition );
	//AnyRingBufferRecord<DataType>* p = writePositionRecord;

	byte writePositionInSingleArray = writePosition % sizeOfSingleArray;
    2ee0:	d8 01       	movw	r26, r16
    2ee2:	17 96       	adiw	r26, 0x07	; 7
    2ee4:	6c 91       	ld	r22, X
    2ee6:	17 97       	sbiw	r26, 0x07	; 7
    2ee8:	cf 01       	movw	r24, r30
    2eea:	70 e0       	ldi	r23, 0x00	; 0
    2eec:	0e 94 69 48 	call	0x90d2	; 0x90d2 <__udivmodhi4>
    2ef0:	c8 2f       	mov	r28, r24
		howManyWriteFromStream = min( howManyWriteFromStream , getFreeSpace() );
	}*/

	howManyWriteFromStream = min( howManyWriteFromStream , getFreeSpace() );

	unsigned int alreadyWrote = 0;
    2ef2:	cc 24       	eor	r12, r12
    2ef4:	dd 24       	eor	r13, r13
	//AnyRingBufferRecord<DataType>* p = getRecordContainingIndex( writePosition );
	//AnyRingBufferRecord<DataType>* p = writePositionRecord;

	byte writePositionInSingleArray = writePosition % sizeOfSingleArray;

	while( howManyWriteFromStream > 0 && writePositionRecord != NULL )
    2ef6:	16 c0       	rjmp	.+44     	; 0x2f24 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0x86>

		toWrite = fromStream->readBytes( (char*)(writePositionRecord->array+writePositionInSingleArray) , toWrite );

		if( toWrite == 0 ) break;

		alreadyWrote += toWrite;
    2ef8:	28 2f       	mov	r18, r24
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	c2 0e       	add	r12, r18
    2efe:	d3 1e       	adc	r13, r19
		howManyWriteFromStream -= toWrite;
    2f00:	e2 1a       	sub	r14, r18
    2f02:	f3 0a       	sbc	r15, r19

		writePositionInSingleArray += toWrite;
    2f04:	c8 0f       	add	r28, r24

		if( writePositionInSingleArray >= sizeOfSingleArray ) // mozna przeskoczyc dalej gdyz odczytana ilosc danych ze strumienia dopelinila ta tabliczke
    2f06:	f8 01       	movw	r30, r16
    2f08:	87 81       	ldd	r24, Z+7	; 0x07
    2f0a:	c8 17       	cp	r28, r24
    2f0c:	58 f0       	brcs	.+22     	; 0x2f24 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0x86>
		{
			//p = p->next;
			writePositionRecord = writePositionRecord->next;
    2f0e:	05 80       	ldd	r0, Z+5	; 0x05
    2f10:	f6 81       	ldd	r31, Z+6	; 0x06
    2f12:	e0 2d       	mov	r30, r0
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	d8 01       	movw	r26, r16
    2f1a:	16 96       	adiw	r26, 0x06	; 6
    2f1c:	9c 93       	st	X, r25
    2f1e:	8e 93       	st	-X, r24
    2f20:	15 97       	sbiw	r26, 0x05	; 5
			writePositionInSingleArray = 0;
    2f22:	c0 e0       	ldi	r28, 0x00	; 0
	//AnyRingBufferRecord<DataType>* p = getRecordContainingIndex( writePosition );
	//AnyRingBufferRecord<DataType>* p = writePositionRecord;

	byte writePositionInSingleArray = writePosition % sizeOfSingleArray;

	while( howManyWriteFromStream > 0 && writePositionRecord != NULL )
    2f24:	e1 14       	cp	r14, r1
    2f26:	f1 04       	cpc	r15, r1
    2f28:	e9 f0       	breq	.+58     	; 0x2f64 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0xc6>
    2f2a:	d8 01       	movw	r26, r16
    2f2c:	15 96       	adiw	r26, 0x05	; 5
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	16 97       	sbiw	r26, 0x06	; 6
    2f34:	30 97       	sbiw	r30, 0x00	; 0
    2f36:	b1 f0       	breq	.+44     	; 0x2f64 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0xc6>
	{
		//if( p == NULL ) break;

		byte toWrite = min( howManyWriteFromStream , sizeOfSingleArray - writePositionInSingleArray );

		toWrite = fromStream->readBytes( (char*)(writePositionRecord->array+writePositionInSingleArray) , toWrite );
    2f38:	8c 2f       	mov	r24, r28
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	60 81       	ld	r22, Z
    2f3e:	71 81       	ldd	r23, Z+1	; 0x01
    2f40:	68 0f       	add	r22, r24
    2f42:	79 1f       	adc	r23, r25

	while( howManyWriteFromStream > 0 && writePositionRecord != NULL )
	{
		//if( p == NULL ) break;

		byte toWrite = min( howManyWriteFromStream , sizeOfSingleArray - writePositionInSingleArray );
    2f44:	17 96       	adiw	r26, 0x07	; 7
    2f46:	4c 91       	ld	r20, X
    2f48:	17 97       	sbiw	r26, 0x07	; 7
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	48 1b       	sub	r20, r24
    2f4e:	59 0b       	sbc	r21, r25
    2f50:	e4 16       	cp	r14, r20
    2f52:	f5 06       	cpc	r15, r21
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0xba>
    2f56:	a7 01       	movw	r20, r14

		toWrite = fromStream->readBytes( (char*)(writePositionRecord->array+writePositionInSingleArray) , toWrite );
    2f58:	c5 01       	movw	r24, r10
    2f5a:	50 e0       	ldi	r21, 0x00	; 0
    2f5c:	0e 94 2f 46 	call	0x8c5e	; 0x8c5e <_ZN6Stream9readBytesEPcj>

		if( toWrite == 0 ) break;
    2f60:	88 23       	and	r24, r24
    2f62:	51 f6       	brne	.-108    	; 0x2ef8 <_ZN13AnyRingBufferIhE5writeEP6Streamj+0x5a>
			writePositionRecord = writePositionRecord->next;
			writePositionInSingleArray = 0;
		}
	}

	writePosition += alreadyWrote;
    2f64:	f8 01       	movw	r30, r16
    2f66:	82 85       	ldd	r24, Z+10	; 0x0a
    2f68:	93 85       	ldd	r25, Z+11	; 0x0b
    2f6a:	8c 0d       	add	r24, r12
    2f6c:	9d 1d       	adc	r25, r13
    2f6e:	93 87       	std	Z+11, r25	; 0x0b
    2f70:	82 87       	std	Z+10, r24	; 0x0a
	//writePositionRecord = p;

	return alreadyWrote;
}
    2f72:	c6 01       	movw	r24, r12
    2f74:	cf 91       	pop	r28
    2f76:	1f 91       	pop	r17
    2f78:	0f 91       	pop	r16
    2f7a:	ff 90       	pop	r15
    2f7c:	ef 90       	pop	r14
    2f7e:	df 90       	pop	r13
    2f80:	cf 90       	pop	r12
    2f82:	bf 90       	pop	r11
    2f84:	af 90       	pop	r10
    2f86:	08 95       	ret

00002f88 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv>:
}

// =================================================

bool StreamHFA11xRS232WiFi3::sendRECVAndReadRECVACK()
{
    2f88:	2f 92       	push	r2
    2f8a:	3f 92       	push	r3
    2f8c:	4f 92       	push	r4
    2f8e:	5f 92       	push	r5
    2f90:	6f 92       	push	r6
    2f92:	7f 92       	push	r7
    2f94:	8f 92       	push	r8
    2f96:	9f 92       	push	r9
    2f98:	af 92       	push	r10
    2f9a:	bf 92       	push	r11
    2f9c:	cf 92       	push	r12
    2f9e:	df 92       	push	r13
    2fa0:	ef 92       	push	r14
    2fa2:	ff 92       	push	r15
    2fa4:	0f 93       	push	r16
    2fa6:	1f 93       	push	r17
    2fa8:	cf 93       	push	r28
    2faa:	df 93       	push	r29
    2fac:	8c 01       	movw	r16, r24
	static const PROGMEM prog_char functionName[] = "sendRECVAndReadRECVACK";

	byte freeSpace = inputBuffer->getFreeSpace();
    2fae:	dc 01       	movw	r26, r24
    2fb0:	1f 96       	adiw	r26, 0x0f	; 15
    2fb2:	ed 91       	ld	r30, X+
    2fb4:	fc 91       	ld	r31, X
    2fb6:	50 97       	sbiw	r26, 0x10	; 16
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getFreeSpace()
{
	return capacity - getUsedSpace();
    2fb8:	c0 85       	ldd	r28, Z+8	; 0x08
    2fba:	d0 e0       	ldi	r29, 0x00	; 0
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    2fbc:	21 85       	ldd	r18, Z+9	; 0x09
    2fbe:	82 85       	ldd	r24, Z+10	; 0x0a
    2fc0:	93 85       	ldd	r25, Z+11	; 0x0b
    2fc2:	82 1b       	sub	r24, r18
    2fc4:	91 09       	sbc	r25, r1
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getFreeSpace()
{
	return capacity - getUsedSpace();
    2fc6:	c8 1b       	sub	r28, r24
    2fc8:	d9 0b       	sbc	r29, r25
    2fca:	cc 2e       	mov	r12, r28

	if( freeSpace > 0 )
    2fcc:	cc 23       	and	r28, r28
    2fce:	09 f4       	brne	.+2      	; 0x2fd2 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4a>
    2fd0:	e0 c3       	rjmp	.+1984   	; 0x3792 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80a>
	{
		aln( "a1 available=%u , freeSpace=%u, sn=%u" , crcStream->available() , freeSpace , arr[1] )
    2fd2:	1e 96       	adiw	r26, 0x0e	; 14
    2fd4:	8c 91       	ld	r24, X
    2fd6:	1e 97       	sbiw	r26, 0x0e	; 14
    2fd8:	8b 30       	cpi	r24, 0x0B	; 11
    2fda:	f0 f5       	brcc	.+124    	; 0x3058 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0xd0>
    2fdc:	c8 01       	movw	r24, r16
    2fde:	0c 96       	adiw	r24, 0x0c	; 12
    2fe0:	6b e8       	ldi	r22, 0x8B	; 139
    2fe2:	72 e1       	ldi	r23, 0x12	; 18
    2fe4:	40 e5       	ldi	r20, 0x50	; 80
    2fe6:	55 e0       	ldi	r21, 0x05	; 5
    2fe8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    2fec:	f8 01       	movw	r30, r16
    2fee:	83 89       	ldd	r24, Z+19	; 0x13
    2ff0:	94 89       	ldd	r25, Z+20	; 0x14
    2ff2:	dc 01       	movw	r26, r24
    2ff4:	ed 91       	ld	r30, X+
    2ff6:	fc 91       	ld	r31, X
    2ff8:	04 80       	ldd	r0, Z+4	; 0x04
    2ffa:	f5 81       	ldd	r31, Z+5	; 0x05
    2ffc:	e0 2d       	mov	r30, r0
    2ffe:	19 95       	eicall
    3000:	ed b7       	in	r30, 0x3d	; 61
    3002:	fe b7       	in	r31, 0x3e	; 62
    3004:	38 97       	sbiw	r30, 0x08	; 8
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	fe bf       	out	0x3e, r31	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	ed bf       	out	0x3d, r30	; 61
    3010:	31 96       	adiw	r30, 0x01	; 1
    3012:	27 e6       	ldi	r18, 0x67	; 103
    3014:	35 e0       	ldi	r19, 0x05	; 5
    3016:	ad b7       	in	r26, 0x3d	; 61
    3018:	be b7       	in	r27, 0x3e	; 62
    301a:	12 96       	adiw	r26, 0x02	; 2
    301c:	3c 93       	st	X, r19
    301e:	2e 93       	st	-X, r18
    3020:	11 97       	sbiw	r26, 0x01	; 1
    3022:	93 83       	std	Z+3, r25	; 0x03
    3024:	82 83       	std	Z+2, r24	; 0x02
    3026:	c4 83       	std	Z+4, r28	; 0x04
    3028:	15 82       	std	Z+5, r1	; 0x05
    302a:	d8 01       	movw	r26, r16
    302c:	56 96       	adiw	r26, 0x16	; 22
    302e:	8c 91       	ld	r24, X
    3030:	86 83       	std	Z+6, r24	; 0x06
    3032:	17 82       	std	Z+7, r1	; 0x07
    3034:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3038:	ed b7       	in	r30, 0x3d	; 61
    303a:	fe b7       	in	r31, 0x3e	; 62
    303c:	36 96       	adiw	r30, 0x06	; 6
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	fe bf       	out	0x3e, r31	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	ed bf       	out	0x3d, r30	; 61
    3048:	8e e8       	ldi	r24, 0x8E	; 142
    304a:	92 e1       	ldi	r25, 0x12	; 18
    304c:	92 83       	std	Z+2, r25	; 0x02
    304e:	81 83       	std	Z+1, r24	; 0x01
    3050:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3054:	0f 90       	pop	r0
    3056:	0f 90       	pop	r0
		//inputBuffer->printReport( "FROM StreamHFA11xRS232WiFi3::sendRECVAndReadRECVACK()");

		discardAnyWaitingDataInUnderlyingStream( false );
    3058:	c8 01       	movw	r24, r16
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb>
		//delay( 200 );
		//discardAnyWaitingDataInUnderlyingStream( false );

		// ---

		aln( "a2 available=%u" , crcStream->available() )
    3060:	d8 01       	movw	r26, r16
    3062:	1e 96       	adiw	r26, 0x0e	; 14
    3064:	8c 91       	ld	r24, X
    3066:	1e 97       	sbiw	r26, 0x0e	; 14
    3068:	8b 30       	cpi	r24, 0x0B	; 11
    306a:	60 f5       	brcc	.+88     	; 0x30c4 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x13c>
    306c:	c8 01       	movw	r24, r16
    306e:	0c 96       	adiw	r24, 0x0c	; 12
    3070:	6b e8       	ldi	r22, 0x8B	; 139
    3072:	72 e1       	ldi	r23, 0x12	; 18
    3074:	40 e5       	ldi	r20, 0x50	; 80
    3076:	55 e0       	ldi	r21, 0x05	; 5
    3078:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    307c:	f8 01       	movw	r30, r16
    307e:	83 89       	ldd	r24, Z+19	; 0x13
    3080:	94 89       	ldd	r25, Z+20	; 0x14
    3082:	dc 01       	movw	r26, r24
    3084:	ed 91       	ld	r30, X+
    3086:	fc 91       	ld	r31, X
    3088:	04 80       	ldd	r0, Z+4	; 0x04
    308a:	f5 81       	ldd	r31, Z+5	; 0x05
    308c:	e0 2d       	mov	r30, r0
    308e:	19 95       	eicall
    3090:	00 d0       	rcall	.+0      	; 0x3092 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x10a>
    3092:	0f 92       	push	r0
    3094:	2d e8       	ldi	r18, 0x8D	; 141
    3096:	35 e0       	ldi	r19, 0x05	; 5
    3098:	ed b7       	in	r30, 0x3d	; 61
    309a:	fe b7       	in	r31, 0x3e	; 62
    309c:	32 83       	std	Z+2, r19	; 0x02
    309e:	21 83       	std	Z+1, r18	; 0x01
    30a0:	94 83       	std	Z+4, r25	; 0x04
    30a2:	83 83       	std	Z+3, r24	; 0x03
    30a4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	8e e8       	ldi	r24, 0x8E	; 142
    30ae:	92 e1       	ldi	r25, 0x12	; 18
    30b0:	ad b7       	in	r26, 0x3d	; 61
    30b2:	be b7       	in	r27, 0x3e	; 62
    30b4:	12 96       	adiw	r26, 0x02	; 2
    30b6:	9c 93       	st	X, r25
    30b8:	8e 93       	st	-X, r24
    30ba:	11 97       	sbiw	r26, 0x01	; 1
    30bc:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0

		crcStream->resetOutgoingState();
    30c4:	f8 01       	movw	r30, r16
    30c6:	83 89       	ldd	r24, Z+19	; 0x13
    30c8:	94 89       	ldd	r25, Z+20	; 0x14
    30ca:	0e 94 ca 21 	call	0x4394	; 0x4394 <_ZN24StreamHFA11xRS232WiFiCRC18resetOutgoingStateEv>

		arr[0] = 2;
    30ce:	82 e0       	ldi	r24, 0x02	; 2
    30d0:	d8 01       	movw	r26, r16
    30d2:	55 96       	adiw	r26, 0x15	; 21
    30d4:	8c 93       	st	X, r24
    30d6:	55 97       	sbiw	r26, 0x15	; 21
		arr[4] = freeSpace;
    30d8:	59 96       	adiw	r26, 0x19	; 25
    30da:	cc 92       	st	X, r12
    30dc:	59 97       	sbiw	r26, 0x19	; 25
		arr[5] = 0;
    30de:	5a 96       	adiw	r26, 0x1a	; 26
    30e0:	1c 92       	st	X, r1
    30e2:	5a 97       	sbiw	r26, 0x1a	; 26

		if( crcStream->write( arr , 6 ) != 6 )
    30e4:	53 96       	adiw	r26, 0x13	; 19
    30e6:	8d 91       	ld	r24, X+
    30e8:	9c 91       	ld	r25, X
    30ea:	54 97       	sbiw	r26, 0x14	; 20
    30ec:	dc 01       	movw	r26, r24
    30ee:	ed 91       	ld	r30, X+
    30f0:	fc 91       	ld	r31, X
    30f2:	b8 01       	movw	r22, r16
    30f4:	6b 5e       	subi	r22, 0xEB	; 235
    30f6:	7f 4f       	sbci	r23, 0xFF	; 255
    30f8:	02 80       	ldd	r0, Z+2	; 0x02
    30fa:	f3 81       	ldd	r31, Z+3	; 0x03
    30fc:	e0 2d       	mov	r30, r0
    30fe:	46 e0       	ldi	r20, 0x06	; 6
    3100:	50 e0       	ldi	r21, 0x00	; 0
    3102:	19 95       	eicall
    3104:	f8 01       	movw	r30, r16
    3106:	26 85       	ldd	r18, Z+14	; 0x0e
    3108:	86 30       	cpi	r24, 0x06	; 6
    310a:	91 05       	cpc	r25, r1
    310c:	c1 f0       	breq	.+48     	; 0x313e <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x1b6>
		{
			wln( "could not send 6 bytes of RECV command" )
    310e:	2f 31       	cpi	r18, 0x1F	; 31
    3110:	08 f0       	brcs	.+2      	; 0x3114 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x18c>
    3112:	41 c3       	rjmp	.+1666   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3114:	c8 01       	movw	r24, r16
    3116:	0c 96       	adiw	r24, 0x0c	; 12
    3118:	65 e8       	ldi	r22, 0x85	; 133
    311a:	72 e1       	ldi	r23, 0x12	; 18
    311c:	40 e5       	ldi	r20, 0x50	; 80
    311e:	55 e0       	ldi	r21, 0x05	; 5
    3120:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3124:	0f 92       	push	r0
    3126:	0f 92       	push	r0
    3128:	8d e9       	ldi	r24, 0x9D	; 157
    312a:	95 e0       	ldi	r25, 0x05	; 5
    312c:	ad b7       	in	r26, 0x3d	; 61
    312e:	be b7       	in	r27, 0x3e	; 62
    3130:	12 96       	adiw	r26, 0x02	; 2
    3132:	9c 93       	st	X, r25
    3134:	8e 93       	st	-X, r24
    3136:	11 97       	sbiw	r26, 0x01	; 1
    3138:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    313c:	c8 c0       	rjmp	.+400    	; 0x32ce <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x346>
			return false;
		}

		aln( "a3 available=%u" , crcStream->available() )
    313e:	2b 30       	cpi	r18, 0x0B	; 11
    3140:	70 f5       	brcc	.+92     	; 0x319e <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x216>
    3142:	c8 01       	movw	r24, r16
    3144:	0c 96       	adiw	r24, 0x0c	; 12
    3146:	6b e8       	ldi	r22, 0x8B	; 139
    3148:	72 e1       	ldi	r23, 0x12	; 18
    314a:	40 e5       	ldi	r20, 0x50	; 80
    314c:	55 e0       	ldi	r21, 0x05	; 5
    314e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3152:	d8 01       	movw	r26, r16
    3154:	53 96       	adiw	r26, 0x13	; 19
    3156:	8d 91       	ld	r24, X+
    3158:	9c 91       	ld	r25, X
    315a:	54 97       	sbiw	r26, 0x14	; 20
    315c:	dc 01       	movw	r26, r24
    315e:	ed 91       	ld	r30, X+
    3160:	fc 91       	ld	r31, X
    3162:	04 80       	ldd	r0, Z+4	; 0x04
    3164:	f5 81       	ldd	r31, Z+5	; 0x05
    3166:	e0 2d       	mov	r30, r0
    3168:	19 95       	eicall
    316a:	00 d0       	rcall	.+0      	; 0x316c <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x1e4>
    316c:	0f 92       	push	r0
    316e:	24 ec       	ldi	r18, 0xC4	; 196
    3170:	35 e0       	ldi	r19, 0x05	; 5
    3172:	ed b7       	in	r30, 0x3d	; 61
    3174:	fe b7       	in	r31, 0x3e	; 62
    3176:	32 83       	std	Z+2, r19	; 0x02
    3178:	21 83       	std	Z+1, r18	; 0x01
    317a:	94 83       	std	Z+4, r25	; 0x04
    317c:	83 83       	std	Z+3, r24	; 0x03
    317e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	8e e8       	ldi	r24, 0x8E	; 142
    3188:	92 e1       	ldi	r25, 0x12	; 18
    318a:	ad b7       	in	r26, 0x3d	; 61
    318c:	be b7       	in	r27, 0x3e	; 62
    318e:	12 96       	adiw	r26, 0x02	; 2
    3190:	9c 93       	st	X, r25
    3192:	8e 93       	st	-X, r24
    3194:	11 97       	sbiw	r26, 0x01	; 1
    3196:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    319a:	0f 90       	pop	r0
    319c:	0f 90       	pop	r0

		//discardAnyWaitingDataInUnderlyingStream( false );

		if( !crcStream->writeCRC() )
    319e:	f8 01       	movw	r30, r16
    31a0:	83 89       	ldd	r24, Z+19	; 0x13
    31a2:	94 89       	ldd	r25, Z+20	; 0x14
    31a4:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN24StreamHFA11xRS232WiFiCRC8writeCRCEv>
    31a8:	88 23       	and	r24, r24
    31aa:	a1 f4       	brne	.+40     	; 0x31d4 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x24c>
		{
			wln( "could not send crc" )
    31ac:	d8 01       	movw	r26, r16
    31ae:	1e 96       	adiw	r26, 0x0e	; 14
    31b0:	8c 91       	ld	r24, X
    31b2:	1e 97       	sbiw	r26, 0x0e	; 14
    31b4:	8f 31       	cpi	r24, 0x1F	; 31
    31b6:	08 f0       	brcs	.+2      	; 0x31ba <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x232>
    31b8:	ee c2       	rjmp	.+1500   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    31ba:	c8 01       	movw	r24, r16
    31bc:	0c 96       	adiw	r24, 0x0c	; 12
    31be:	65 e8       	ldi	r22, 0x85	; 133
    31c0:	72 e1       	ldi	r23, 0x12	; 18
    31c2:	40 e5       	ldi	r20, 0x50	; 80
    31c4:	55 e0       	ldi	r21, 0x05	; 5
    31c6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    31ca:	0f 92       	push	r0
    31cc:	0f 92       	push	r0
    31ce:	84 ed       	ldi	r24, 0xD4	; 212
    31d0:	95 e0       	ldi	r25, 0x05	; 5
    31d2:	cc c2       	rjmp	.+1432   	; 0x376c <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x7e4>
			return false;
		}

		//iln( "a4" )

		crcStream->flush();
    31d4:	f8 01       	movw	r30, r16
    31d6:	83 89       	ldd	r24, Z+19	; 0x13
    31d8:	94 89       	ldd	r25, Z+20	; 0x14
    31da:	dc 01       	movw	r26, r24
    31dc:	ed 91       	ld	r30, X+
    31de:	fc 91       	ld	r31, X
    31e0:	02 84       	ldd	r0, Z+10	; 0x0a
    31e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    31e4:	e0 2d       	mov	r30, r0
    31e6:	19 95       	eicall

		aln( "a5 available=%u" , crcStream->available() )
    31e8:	f8 01       	movw	r30, r16
    31ea:	86 85       	ldd	r24, Z+14	; 0x0e
    31ec:	8b 30       	cpi	r24, 0x0B	; 11
    31ee:	70 f5       	brcc	.+92     	; 0x324c <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x2c4>
    31f0:	c8 01       	movw	r24, r16
    31f2:	0c 96       	adiw	r24, 0x0c	; 12
    31f4:	6b e8       	ldi	r22, 0x8B	; 139
    31f6:	72 e1       	ldi	r23, 0x12	; 18
    31f8:	40 e5       	ldi	r20, 0x50	; 80
    31fa:	55 e0       	ldi	r21, 0x05	; 5
    31fc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3200:	d8 01       	movw	r26, r16
    3202:	53 96       	adiw	r26, 0x13	; 19
    3204:	8d 91       	ld	r24, X+
    3206:	9c 91       	ld	r25, X
    3208:	54 97       	sbiw	r26, 0x14	; 20
    320a:	dc 01       	movw	r26, r24
    320c:	ed 91       	ld	r30, X+
    320e:	fc 91       	ld	r31, X
    3210:	04 80       	ldd	r0, Z+4	; 0x04
    3212:	f5 81       	ldd	r31, Z+5	; 0x05
    3214:	e0 2d       	mov	r30, r0
    3216:	19 95       	eicall
    3218:	00 d0       	rcall	.+0      	; 0x321a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x292>
    321a:	0f 92       	push	r0
    321c:	27 ee       	ldi	r18, 0xE7	; 231
    321e:	35 e0       	ldi	r19, 0x05	; 5
    3220:	ed b7       	in	r30, 0x3d	; 61
    3222:	fe b7       	in	r31, 0x3e	; 62
    3224:	32 83       	std	Z+2, r19	; 0x02
    3226:	21 83       	std	Z+1, r18	; 0x01
    3228:	94 83       	std	Z+4, r25	; 0x04
    322a:	83 83       	std	Z+3, r24	; 0x03
    322c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3230:	0f 90       	pop	r0
    3232:	0f 90       	pop	r0
    3234:	8e e8       	ldi	r24, 0x8E	; 142
    3236:	92 e1       	ldi	r25, 0x12	; 18
    3238:	ad b7       	in	r26, 0x3d	; 61
    323a:	be b7       	in	r27, 0x3e	; 62
    323c:	12 96       	adiw	r26, 0x02	; 2
    323e:	9c 93       	st	X, r25
    3240:	8e 93       	st	-X, r24
    3242:	11 97       	sbiw	r26, 0x01	; 1
    3244:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3248:	0f 90       	pop	r0
    324a:	0f 90       	pop	r0

		// ---

		crcStream->resetIncommingState();
    324c:	f8 01       	movw	r30, r16
    324e:	83 89       	ldd	r24, Z+19	; 0x13
    3250:	94 89       	ldd	r25, Z+20	; 0x14
    3252:	0e 94 ce 21 	call	0x439c	; 0x439c <_ZN24StreamHFA11xRS232WiFiCRC19resetIncommingStateEv>

		byte readByte = 0;

		while( crcStream->available() < 6 );
    3256:	d8 01       	movw	r26, r16
    3258:	53 96       	adiw	r26, 0x13	; 19
    325a:	8d 91       	ld	r24, X+
    325c:	9c 91       	ld	r25, X
    325e:	54 97       	sbiw	r26, 0x14	; 20
    3260:	dc 01       	movw	r26, r24
    3262:	ed 91       	ld	r30, X+
    3264:	fc 91       	ld	r31, X
    3266:	04 80       	ldd	r0, Z+4	; 0x04
    3268:	f5 81       	ldd	r31, Z+5	; 0x05
    326a:	e0 2d       	mov	r30, r0
    326c:	19 95       	eicall
    326e:	86 30       	cpi	r24, 0x06	; 6
    3270:	91 05       	cpc	r25, r1
    3272:	8c f3       	brlt	.-30     	; 0x3256 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x2ce>

		//while( ( readByte = crcStream->read() ) == -1 );
		if( ( readByte = crcStream->read() ) != 2 )
    3274:	f8 01       	movw	r30, r16
    3276:	83 89       	ldd	r24, Z+19	; 0x13
    3278:	94 89       	ldd	r25, Z+20	; 0x14
    327a:	dc 01       	movw	r26, r24
    327c:	ed 91       	ld	r30, X+
    327e:	fc 91       	ld	r31, X
    3280:	06 80       	ldd	r0, Z+6	; 0x06
    3282:	f7 81       	ldd	r31, Z+7	; 0x07
    3284:	e0 2d       	mov	r30, r0
    3286:	19 95       	eicall
    3288:	c8 2f       	mov	r28, r24
    328a:	82 30       	cpi	r24, 0x02	; 2
    328c:	39 f1       	breq	.+78     	; 0x32dc <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x354>
		{
			wln( "incomming command number (%u) not match 2" , readByte )
    328e:	f8 01       	movw	r30, r16
    3290:	86 85       	ldd	r24, Z+14	; 0x0e
    3292:	8f 31       	cpi	r24, 0x1F	; 31
    3294:	08 f0       	brcs	.+2      	; 0x3298 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x310>
    3296:	7f c2       	rjmp	.+1278   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3298:	c8 01       	movw	r24, r16
    329a:	0c 96       	adiw	r24, 0x0c	; 12
    329c:	65 e8       	ldi	r22, 0x85	; 133
    329e:	72 e1       	ldi	r23, 0x12	; 18
    32a0:	40 e5       	ldi	r20, 0x50	; 80
    32a2:	55 e0       	ldi	r21, 0x05	; 5
    32a4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x322>
    32aa:	0f 92       	push	r0
    32ac:	ed b7       	in	r30, 0x3d	; 61
    32ae:	fe b7       	in	r31, 0x3e	; 62
    32b0:	31 96       	adiw	r30, 0x01	; 1
    32b2:	87 ef       	ldi	r24, 0xF7	; 247
    32b4:	95 e0       	ldi	r25, 0x05	; 5
    32b6:	ad b7       	in	r26, 0x3d	; 61
    32b8:	be b7       	in	r27, 0x3e	; 62
    32ba:	12 96       	adiw	r26, 0x02	; 2
    32bc:	9c 93       	st	X, r25
    32be:	8e 93       	st	-X, r24
    32c0:	11 97       	sbiw	r26, 0x01	; 1
    32c2:	c2 83       	std	Z+2, r28	; 0x02
    32c4:	13 82       	std	Z+3, r1	; 0x03
    32c6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	8e e8       	ldi	r24, 0x8E	; 142
    32d0:	92 e1       	ldi	r25, 0x12	; 18
    32d2:	ed b7       	in	r30, 0x3d	; 61
    32d4:	fe b7       	in	r31, 0x3e	; 62
    32d6:	92 83       	std	Z+2, r25	; 0x02
    32d8:	81 83       	std	Z+1, r24	; 0x01
    32da:	56 c2       	rjmp	.+1196   	; 0x3788 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x800>
		}

		//iln( "a6 available=%u" , crcStream->available() )

		//while( ( readByte = crcStream->read() ) == -1 );
		if( ( readByte = crcStream->read() ) != arr[1] )
    32dc:	d8 01       	movw	r26, r16
    32de:	53 96       	adiw	r26, 0x13	; 19
    32e0:	8d 91       	ld	r24, X+
    32e2:	9c 91       	ld	r25, X
    32e4:	54 97       	sbiw	r26, 0x14	; 20
    32e6:	dc 01       	movw	r26, r24
    32e8:	ed 91       	ld	r30, X+
    32ea:	fc 91       	ld	r31, X
    32ec:	06 80       	ldd	r0, Z+6	; 0x06
    32ee:	f7 81       	ldd	r31, Z+7	; 0x07
    32f0:	e0 2d       	mov	r30, r0
    32f2:	19 95       	eicall
    32f4:	c8 2f       	mov	r28, r24
    32f6:	f8 01       	movw	r30, r16
    32f8:	86 89       	ldd	r24, Z+22	; 0x16
    32fa:	c8 17       	cp	r28, r24
    32fc:	09 f1       	breq	.+66     	; 0x3340 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x3b8>
		{
			wln( "incomming serial number (%u) not match %u" , readByte , arr[1] )
    32fe:	86 85       	ldd	r24, Z+14	; 0x0e
    3300:	8f 31       	cpi	r24, 0x1F	; 31
    3302:	08 f0       	brcs	.+2      	; 0x3306 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x37e>
    3304:	48 c2       	rjmp	.+1168   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3306:	c8 01       	movw	r24, r16
    3308:	0c 96       	adiw	r24, 0x0c	; 12
    330a:	65 e8       	ldi	r22, 0x85	; 133
    330c:	72 e1       	ldi	r23, 0x12	; 18
    330e:	40 e5       	ldi	r20, 0x50	; 80
    3310:	55 e0       	ldi	r21, 0x05	; 5
    3312:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3316:	00 d0       	rcall	.+0      	; 0x3318 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x390>
    3318:	00 d0       	rcall	.+0      	; 0x331a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x392>
    331a:	ed b7       	in	r30, 0x3d	; 61
    331c:	fe b7       	in	r31, 0x3e	; 62
    331e:	31 96       	adiw	r30, 0x01	; 1
    3320:	81 e2       	ldi	r24, 0x21	; 33
    3322:	96 e0       	ldi	r25, 0x06	; 6
    3324:	ad b7       	in	r26, 0x3d	; 61
    3326:	be b7       	in	r27, 0x3e	; 62
    3328:	12 96       	adiw	r26, 0x02	; 2
    332a:	9c 93       	st	X, r25
    332c:	8e 93       	st	-X, r24
    332e:	11 97       	sbiw	r26, 0x01	; 1
    3330:	c2 83       	std	Z+2, r28	; 0x02
    3332:	13 82       	std	Z+3, r1	; 0x03
    3334:	d8 01       	movw	r26, r16
    3336:	56 96       	adiw	r26, 0x16	; 22
    3338:	8c 91       	ld	r24, X
    333a:	56 97       	sbiw	r26, 0x16	; 22
    333c:	84 83       	std	Z+4, r24	; 0x04
    333e:	82 c0       	rjmp	.+260    	; 0x3444 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4bc>
		}

		//iln( "a7 available=%u" , crcStream->available() )

		//while( ( readByte = crcStream->read() ) == -1 );
		if( ( readByte = crcStream->read() ) != 0 )
    3340:	83 89       	ldd	r24, Z+19	; 0x13
    3342:	94 89       	ldd	r25, Z+20	; 0x14
    3344:	dc 01       	movw	r26, r24
    3346:	ed 91       	ld	r30, X+
    3348:	fc 91       	ld	r31, X
    334a:	06 80       	ldd	r0, Z+6	; 0x06
    334c:	f7 81       	ldd	r31, Z+7	; 0x07
    334e:	e0 2d       	mov	r30, r0
    3350:	19 95       	eicall
    3352:	c8 2f       	mov	r28, r24
    3354:	88 23       	and	r24, r24
    3356:	a9 f0       	breq	.+42     	; 0x3382 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x3fa>
		{
			wln( "incomming first reserved byte (%u) not match 0" , readByte )
    3358:	f8 01       	movw	r30, r16
    335a:	86 85       	ldd	r24, Z+14	; 0x0e
    335c:	8f 31       	cpi	r24, 0x1F	; 31
    335e:	08 f0       	brcs	.+2      	; 0x3362 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x3da>
    3360:	1a c2       	rjmp	.+1076   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3362:	c8 01       	movw	r24, r16
    3364:	0c 96       	adiw	r24, 0x0c	; 12
    3366:	65 e8       	ldi	r22, 0x85	; 133
    3368:	72 e1       	ldi	r23, 0x12	; 18
    336a:	40 e5       	ldi	r20, 0x50	; 80
    336c:	55 e0       	ldi	r21, 0x05	; 5
    336e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3372:	00 d0       	rcall	.+0      	; 0x3374 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x3ec>
    3374:	0f 92       	push	r0
    3376:	ed b7       	in	r30, 0x3d	; 61
    3378:	fe b7       	in	r31, 0x3e	; 62
    337a:	31 96       	adiw	r30, 0x01	; 1
    337c:	8b e4       	ldi	r24, 0x4B	; 75
    337e:	96 e0       	ldi	r25, 0x06	; 6
    3380:	9a cf       	rjmp	.-204    	; 0x32b6 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x32e>
			return false;
		}

		//while( ( readByte = crcStream->read() ) == -1 );
		if( ( readByte = crcStream->read() ) != 0 )
    3382:	d8 01       	movw	r26, r16
    3384:	53 96       	adiw	r26, 0x13	; 19
    3386:	8d 91       	ld	r24, X+
    3388:	9c 91       	ld	r25, X
    338a:	54 97       	sbiw	r26, 0x14	; 20
    338c:	dc 01       	movw	r26, r24
    338e:	ed 91       	ld	r30, X+
    3390:	fc 91       	ld	r31, X
    3392:	06 80       	ldd	r0, Z+6	; 0x06
    3394:	f7 81       	ldd	r31, Z+7	; 0x07
    3396:	e0 2d       	mov	r30, r0
    3398:	19 95       	eicall
    339a:	c8 2f       	mov	r28, r24
    339c:	88 23       	and	r24, r24
    339e:	a9 f0       	breq	.+42     	; 0x33ca <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x442>
		{
			wln( "incomming second reserved byte (%u) not match 0" , readByte )
    33a0:	f8 01       	movw	r30, r16
    33a2:	86 85       	ldd	r24, Z+14	; 0x0e
    33a4:	8f 31       	cpi	r24, 0x1F	; 31
    33a6:	08 f0       	brcs	.+2      	; 0x33aa <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x422>
    33a8:	f6 c1       	rjmp	.+1004   	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    33aa:	c8 01       	movw	r24, r16
    33ac:	0c 96       	adiw	r24, 0x0c	; 12
    33ae:	65 e8       	ldi	r22, 0x85	; 133
    33b0:	72 e1       	ldi	r23, 0x12	; 18
    33b2:	40 e5       	ldi	r20, 0x50	; 80
    33b4:	55 e0       	ldi	r21, 0x05	; 5
    33b6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x434>
    33bc:	0f 92       	push	r0
    33be:	ed b7       	in	r30, 0x3d	; 61
    33c0:	fe b7       	in	r31, 0x3e	; 62
    33c2:	31 96       	adiw	r30, 0x01	; 1
    33c4:	8a e7       	ldi	r24, 0x7A	; 122
    33c6:	96 e0       	ldi	r25, 0x06	; 6
    33c8:	76 cf       	rjmp	.-276    	; 0x32b6 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x32e>
		//iln( "a8 available=%u" , crcStream->available() )

		unsigned int incommingDataSize = 0;

		//while( ( readByte = crcStream->read() ) == -1 );
		incommingDataSize += crcStream->read();
    33ca:	d8 01       	movw	r26, r16
    33cc:	53 96       	adiw	r26, 0x13	; 19
    33ce:	8d 91       	ld	r24, X+
    33d0:	9c 91       	ld	r25, X
    33d2:	54 97       	sbiw	r26, 0x14	; 20
    33d4:	dc 01       	movw	r26, r24
    33d6:	ed 91       	ld	r30, X+
    33d8:	fc 91       	ld	r31, X
    33da:	06 80       	ldd	r0, Z+6	; 0x06
    33dc:	f7 81       	ldd	r31, Z+7	; 0x07
    33de:	e0 2d       	mov	r30, r0
    33e0:	19 95       	eicall
    33e2:	7c 01       	movw	r14, r24
		//while( ( readByte = crcStream->read() ) == -1 );
		incommingDataSize += 256 * crcStream->read();
    33e4:	f8 01       	movw	r30, r16
    33e6:	83 89       	ldd	r24, Z+19	; 0x13
    33e8:	94 89       	ldd	r25, Z+20	; 0x14
    33ea:	dc 01       	movw	r26, r24
    33ec:	ed 91       	ld	r30, X+
    33ee:	fc 91       	ld	r31, X
    33f0:	06 80       	ldd	r0, Z+6	; 0x06
    33f2:	f7 81       	ldd	r31, Z+7	; 0x07
    33f4:	e0 2d       	mov	r30, r0
    33f6:	19 95       	eicall
    33f8:	38 2f       	mov	r19, r24
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	e2 0e       	add	r14, r18
    33fe:	f3 1e       	adc	r15, r19

		if( incommingDataSize > freeSpace )
    3400:	8c 2d       	mov	r24, r12
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	f8 01       	movw	r30, r16
    3406:	26 85       	ldd	r18, Z+14	; 0x0e
    3408:	8e 15       	cp	r24, r14
    340a:	9f 05       	cpc	r25, r15
    340c:	18 f5       	brcc	.+70     	; 0x3454 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4cc>
		{
			wln( "incomming data size (%u) is greater than requested %u" , incommingDataSize , freeSpace )
    340e:	2f 31       	cpi	r18, 0x1F	; 31
    3410:	08 f0       	brcs	.+2      	; 0x3414 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x48c>
    3412:	c1 c1       	rjmp	.+898    	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3414:	c8 01       	movw	r24, r16
    3416:	0c 96       	adiw	r24, 0x0c	; 12
    3418:	65 e8       	ldi	r22, 0x85	; 133
    341a:	72 e1       	ldi	r23, 0x12	; 18
    341c:	40 e5       	ldi	r20, 0x50	; 80
    341e:	55 e0       	ldi	r21, 0x05	; 5
    3420:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3424:	00 d0       	rcall	.+0      	; 0x3426 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x49e>
    3426:	00 d0       	rcall	.+0      	; 0x3428 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4a0>
    3428:	ed b7       	in	r30, 0x3d	; 61
    342a:	fe b7       	in	r31, 0x3e	; 62
    342c:	31 96       	adiw	r30, 0x01	; 1
    342e:	8a ea       	ldi	r24, 0xAA	; 170
    3430:	96 e0       	ldi	r25, 0x06	; 6
    3432:	ad b7       	in	r26, 0x3d	; 61
    3434:	be b7       	in	r27, 0x3e	; 62
    3436:	12 96       	adiw	r26, 0x02	; 2
    3438:	9c 93       	st	X, r25
    343a:	8e 93       	st	-X, r24
    343c:	11 97       	sbiw	r26, 0x01	; 1
    343e:	f3 82       	std	Z+3, r15	; 0x03
    3440:	e2 82       	std	Z+2, r14	; 0x02
    3442:	c4 82       	std	Z+4, r12	; 0x04
    3444:	15 82       	std	Z+5, r1	; 0x05
    3446:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	3d cf       	rjmp	.-390    	; 0x32ce <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x346>
			return false;
		}
		else
		{
			aln( "requested %u bytes and received %u bytes" , freeSpace , incommingDataSize )
    3454:	2b 30       	cpi	r18, 0x0B	; 11
    3456:	48 f5       	brcc	.+82     	; 0x34aa <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x522>
    3458:	c8 01       	movw	r24, r16
    345a:	0c 96       	adiw	r24, 0x0c	; 12
    345c:	6b e8       	ldi	r22, 0x8B	; 139
    345e:	72 e1       	ldi	r23, 0x12	; 18
    3460:	40 e5       	ldi	r20, 0x50	; 80
    3462:	55 e0       	ldi	r21, 0x05	; 5
    3464:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3468:	00 d0       	rcall	.+0      	; 0x346a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4e2>
    346a:	00 d0       	rcall	.+0      	; 0x346c <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x4e4>
    346c:	ed b7       	in	r30, 0x3d	; 61
    346e:	fe b7       	in	r31, 0x3e	; 62
    3470:	31 96       	adiw	r30, 0x01	; 1
    3472:	80 ee       	ldi	r24, 0xE0	; 224
    3474:	96 e0       	ldi	r25, 0x06	; 6
    3476:	ad b7       	in	r26, 0x3d	; 61
    3478:	be b7       	in	r27, 0x3e	; 62
    347a:	12 96       	adiw	r26, 0x02	; 2
    347c:	9c 93       	st	X, r25
    347e:	8e 93       	st	-X, r24
    3480:	11 97       	sbiw	r26, 0x01	; 1
    3482:	c2 82       	std	Z+2, r12	; 0x02
    3484:	13 82       	std	Z+3, r1	; 0x03
    3486:	f5 82       	std	Z+5, r15	; 0x05
    3488:	e4 82       	std	Z+4, r14	; 0x04
    348a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	8e e8       	ldi	r24, 0x8E	; 142
    3498:	92 e1       	ldi	r25, 0x12	; 18
    349a:	ed b7       	in	r30, 0x3d	; 61
    349c:	fe b7       	in	r31, 0x3e	; 62
    349e:	92 83       	std	Z+2, r25	; 0x02
    34a0:	81 83       	std	Z+1, r24	; 0x01
    34a2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
}

// =================================================

bool StreamHFA11xRS232WiFi3::sendRECVAndReadRECVACK()
{
    34aa:	aa 24       	eor	r10, r10
    34ac:	bb 24       	eor	r11, r11
				incommingDataSize--;
				*/
			}
			else
			{
				aln( "waiting for available data while reading, readBytesCount = %u , incommingDataSize = %u" , readBytesCount , incommingDataSize )
    34ae:	6c e0       	ldi	r22, 0x0C	; 12
    34b0:	86 2e       	mov	r8, r22
    34b2:	91 2c       	mov	r9, r1
    34b4:	80 0e       	add	r8, r16
    34b6:	91 1e       	adc	r9, r17
    34b8:	7f e9       	ldi	r23, 0x9F	; 159
    34ba:	47 2e       	mov	r4, r23
    34bc:	77 e0       	ldi	r23, 0x07	; 7
    34be:	57 2e       	mov	r5, r23
    34c0:	ee e8       	ldi	r30, 0x8E	; 142
    34c2:	6e 2e       	mov	r6, r30
    34c4:	e2 e1       	ldi	r30, 0x12	; 18
    34c6:	7e 2e       	mov	r7, r30

				unsigned int toRead = min( aval , incommingDataSize - readBytesCount );

				unsigned int bytesReadFromStreamAndWroteToBuffer = inputBuffer->write( crcStream , toRead );

				iln( "toRead = %u, bytesReadFromStreamAndWroteToBuffer = %u, readBytesCount = %u , incommingDataSize = %u" , toRead , bytesReadFromStreamAndWroteToBuffer , readBytesCount , incommingDataSize )
    34c8:	fb e3       	ldi	r31, 0x3B	; 59
    34ca:	2f 2e       	mov	r2, r31
    34cc:	f7 e0       	ldi	r31, 0x07	; 7
    34ce:	3f 2e       	mov	r3, r31
    34d0:	a4 c0       	rjmp	.+328    	; 0x361a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x692>

		while( readBytesCount < incommingDataSize )
		{
			//while( ( readByte = crcStream->read() ) == -1 );

			unsigned int aval = crcStream->available();
    34d2:	d8 01       	movw	r26, r16
    34d4:	53 96       	adiw	r26, 0x13	; 19
    34d6:	8d 91       	ld	r24, X+
    34d8:	9c 91       	ld	r25, X
    34da:	54 97       	sbiw	r26, 0x14	; 20
    34dc:	dc 01       	movw	r26, r24
    34de:	ed 91       	ld	r30, X+
    34e0:	fc 91       	ld	r31, X
    34e2:	04 80       	ldd	r0, Z+4	; 0x04
    34e4:	f5 81       	ldd	r31, Z+5	; 0x05
    34e6:	e0 2d       	mov	r30, r0
    34e8:	19 95       	eicall
    34ea:	ec 01       	movw	r28, r24
    34ec:	f8 01       	movw	r30, r16
    34ee:	86 85       	ldd	r24, Z+14	; 0x0e

			if( aval > 0 )
    34f0:	20 97       	sbiw	r28, 0x00	; 0
    34f2:	09 f4       	brne	.+2      	; 0x34f6 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x56e>
    34f4:	6c c0       	rjmp	.+216    	; 0x35ce <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x646>
			{
				iln( "start reading because crcStream->available() = %u" , aval )
    34f6:	85 31       	cpi	r24, 0x15	; 21
    34f8:	18 f5       	brcc	.+70     	; 0x3540 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x5b8>
    34fa:	c4 01       	movw	r24, r8
    34fc:	68 e8       	ldi	r22, 0x88	; 136
    34fe:	72 e1       	ldi	r23, 0x12	; 18
    3500:	40 e5       	ldi	r20, 0x50	; 80
    3502:	55 e0       	ldi	r21, 0x05	; 5
    3504:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3508:	00 d0       	rcall	.+0      	; 0x350a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x582>
    350a:	0f 92       	push	r0
    350c:	e9 e0       	ldi	r30, 0x09	; 9
    350e:	f7 e0       	ldi	r31, 0x07	; 7
    3510:	ad b7       	in	r26, 0x3d	; 61
    3512:	be b7       	in	r27, 0x3e	; 62
    3514:	12 96       	adiw	r26, 0x02	; 2
    3516:	fc 93       	st	X, r31
    3518:	ee 93       	st	-X, r30
    351a:	11 97       	sbiw	r26, 0x01	; 1
    351c:	14 96       	adiw	r26, 0x04	; 4
    351e:	dc 93       	st	X, r29
    3520:	ce 93       	st	-X, r28
    3522:	13 97       	sbiw	r26, 0x03	; 3
    3524:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	ad b7       	in	r26, 0x3d	; 61
    352e:	be b7       	in	r27, 0x3e	; 62
    3530:	12 96       	adiw	r26, 0x02	; 2
    3532:	7c 92       	st	X, r7
    3534:	6e 92       	st	-X, r6
    3536:	11 97       	sbiw	r26, 0x01	; 1
    3538:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    353c:	0f 90       	pop	r0
    353e:	0f 90       	pop	r0

				unsigned int toRead = min( aval , incommingDataSize - readBytesCount );
    3540:	c7 01       	movw	r24, r14
    3542:	8a 19       	sub	r24, r10
    3544:	9b 09       	sbc	r25, r11
    3546:	8c 17       	cp	r24, r28
    3548:	9d 07       	cpc	r25, r29
    354a:	08 f4       	brcc	.+2      	; 0x354e <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x5c6>
    354c:	ec 01       	movw	r28, r24

				unsigned int bytesReadFromStreamAndWroteToBuffer = inputBuffer->write( crcStream , toRead );
    354e:	f8 01       	movw	r30, r16
    3550:	63 89       	ldd	r22, Z+19	; 0x13
    3552:	74 89       	ldd	r23, Z+20	; 0x14
    3554:	87 85       	ldd	r24, Z+15	; 0x0f
    3556:	90 89       	ldd	r25, Z+16	; 0x10
    3558:	ae 01       	movw	r20, r28
    355a:	0e 94 4f 17 	call	0x2e9e	; 0x2e9e <_ZN13AnyRingBufferIhE5writeEP6Streamj>
    355e:	6c 01       	movw	r12, r24

				iln( "toRead = %u, bytesReadFromStreamAndWroteToBuffer = %u, readBytesCount = %u , incommingDataSize = %u" , toRead , bytesReadFromStreamAndWroteToBuffer , readBytesCount , incommingDataSize )
    3560:	d8 01       	movw	r26, r16
    3562:	1e 96       	adiw	r26, 0x0e	; 14
    3564:	8c 91       	ld	r24, X
    3566:	1e 97       	sbiw	r26, 0x0e	; 14
    3568:	85 31       	cpi	r24, 0x15	; 21
    356a:	70 f5       	brcc	.+92     	; 0x35c8 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x640>
    356c:	c4 01       	movw	r24, r8
    356e:	68 e8       	ldi	r22, 0x88	; 136
    3570:	72 e1       	ldi	r23, 0x12	; 18
    3572:	40 e5       	ldi	r20, 0x50	; 80
    3574:	55 e0       	ldi	r21, 0x05	; 5
    3576:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    357a:	ed b7       	in	r30, 0x3d	; 61
    357c:	fe b7       	in	r31, 0x3e	; 62
    357e:	3a 97       	sbiw	r30, 0x0a	; 10
    3580:	0f b6       	in	r0, 0x3f	; 63
    3582:	f8 94       	cli
    3584:	fe bf       	out	0x3e, r31	; 62
    3586:	0f be       	out	0x3f, r0	; 63
    3588:	ed bf       	out	0x3d, r30	; 61
    358a:	31 96       	adiw	r30, 0x01	; 1
    358c:	ad b7       	in	r26, 0x3d	; 61
    358e:	be b7       	in	r27, 0x3e	; 62
    3590:	12 96       	adiw	r26, 0x02	; 2
    3592:	3c 92       	st	X, r3
    3594:	2e 92       	st	-X, r2
    3596:	11 97       	sbiw	r26, 0x01	; 1
    3598:	d3 83       	std	Z+3, r29	; 0x03
    359a:	c2 83       	std	Z+2, r28	; 0x02
    359c:	d5 82       	std	Z+5, r13	; 0x05
    359e:	c4 82       	std	Z+4, r12	; 0x04
    35a0:	b7 82       	std	Z+7, r11	; 0x07
    35a2:	a6 82       	std	Z+6, r10	; 0x06
    35a4:	f1 86       	std	Z+9, r15	; 0x09
    35a6:	e0 86       	std	Z+8, r14	; 0x08
    35a8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    35ac:	ed b7       	in	r30, 0x3d	; 61
    35ae:	fe b7       	in	r31, 0x3e	; 62
    35b0:	38 96       	adiw	r30, 0x08	; 8
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	fe bf       	out	0x3e, r31	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	ed bf       	out	0x3d, r30	; 61
    35bc:	72 82       	std	Z+2, r7	; 0x02
    35be:	61 82       	std	Z+1, r6	; 0x01
    35c0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0

				//incommingDataSize -= bytesReadFromStreamAndWroteToBuffer;
				readBytesCount += bytesReadFromStreamAndWroteToBuffer;
    35c8:	ac 0c       	add	r10, r12
    35ca:	bd 1c       	adc	r11, r13
    35cc:	26 c0       	rjmp	.+76     	; 0x361a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x692>
				incommingDataSize--;
				*/
			}
			else
			{
				aln( "waiting for available data while reading, readBytesCount = %u , incommingDataSize = %u" , readBytesCount , incommingDataSize )
    35ce:	8b 30       	cpi	r24, 0x0B	; 11
    35d0:	20 f5       	brcc	.+72     	; 0x361a <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x692>
    35d2:	c4 01       	movw	r24, r8
    35d4:	6b e8       	ldi	r22, 0x8B	; 139
    35d6:	72 e1       	ldi	r23, 0x12	; 18
    35d8:	40 e5       	ldi	r20, 0x50	; 80
    35da:	55 e0       	ldi	r21, 0x05	; 5
    35dc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x65a>
    35e2:	00 d0       	rcall	.+0      	; 0x35e4 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x65c>
    35e4:	ed b7       	in	r30, 0x3d	; 61
    35e6:	fe b7       	in	r31, 0x3e	; 62
    35e8:	31 96       	adiw	r30, 0x01	; 1
    35ea:	ad b7       	in	r26, 0x3d	; 61
    35ec:	be b7       	in	r27, 0x3e	; 62
    35ee:	12 96       	adiw	r26, 0x02	; 2
    35f0:	5c 92       	st	X, r5
    35f2:	4e 92       	st	-X, r4
    35f4:	11 97       	sbiw	r26, 0x01	; 1
    35f6:	b3 82       	std	Z+3, r11	; 0x03
    35f8:	a2 82       	std	Z+2, r10	; 0x02
    35fa:	f5 82       	std	Z+5, r15	; 0x05
    35fc:	e4 82       	std	Z+4, r14	; 0x04
    35fe:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3602:	0f 90       	pop	r0
    3604:	0f 90       	pop	r0
    3606:	0f 90       	pop	r0
    3608:	0f 90       	pop	r0
    360a:	ed b7       	in	r30, 0x3d	; 61
    360c:	fe b7       	in	r31, 0x3e	; 62
    360e:	72 82       	std	Z+2, r7	; 0x02
    3610:	61 82       	std	Z+1, r6	; 0x01
    3612:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3616:	0f 90       	pop	r0
    3618:	0f 90       	pop	r0
		//byte ccc = 0;
		//unsigned int writePosition = inputBuffer->getWritePosition();

		unsigned int readBytesCount = 0;

		while( readBytesCount < incommingDataSize )
    361a:	ae 14       	cp	r10, r14
    361c:	bf 04       	cpc	r11, r15
    361e:	08 f4       	brcc	.+2      	; 0x3622 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x69a>
    3620:	58 cf       	rjmp	.-336    	; 0x34d2 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x54a>

		//inputBuffer->setLimit( limitBefore );

		//iln( "a9 available=%u, ccc=%u" , crcStream->available() , ccc )

		while( crcStream->available() < 2 );
    3622:	d8 01       	movw	r26, r16
    3624:	53 96       	adiw	r26, 0x13	; 19
    3626:	8d 91       	ld	r24, X+
    3628:	9c 91       	ld	r25, X
    362a:	54 97       	sbiw	r26, 0x14	; 20
    362c:	dc 01       	movw	r26, r24
    362e:	ed 91       	ld	r30, X+
    3630:	fc 91       	ld	r31, X
    3632:	04 80       	ldd	r0, Z+4	; 0x04
    3634:	f5 81       	ldd	r31, Z+5	; 0x05
    3636:	e0 2d       	mov	r30, r0
    3638:	19 95       	eicall
    363a:	82 30       	cpi	r24, 0x02	; 2
    363c:	91 05       	cpc	r25, r1
    363e:	8c f3       	brlt	.-30     	; 0x3622 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x69a>

		aln( "a10 available=%u" , crcStream->available() )
    3640:	f8 01       	movw	r30, r16
    3642:	86 85       	ldd	r24, Z+14	; 0x0e
    3644:	8b 30       	cpi	r24, 0x0B	; 11
    3646:	70 f5       	brcc	.+92     	; 0x36a4 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x71c>
    3648:	c8 01       	movw	r24, r16
    364a:	0c 96       	adiw	r24, 0x0c	; 12
    364c:	6b e8       	ldi	r22, 0x8B	; 139
    364e:	72 e1       	ldi	r23, 0x12	; 18
    3650:	40 e5       	ldi	r20, 0x50	; 80
    3652:	55 e0       	ldi	r21, 0x05	; 5
    3654:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3658:	d8 01       	movw	r26, r16
    365a:	53 96       	adiw	r26, 0x13	; 19
    365c:	8d 91       	ld	r24, X+
    365e:	9c 91       	ld	r25, X
    3660:	54 97       	sbiw	r26, 0x14	; 20
    3662:	dc 01       	movw	r26, r24
    3664:	ed 91       	ld	r30, X+
    3666:	fc 91       	ld	r31, X
    3668:	04 80       	ldd	r0, Z+4	; 0x04
    366a:	f5 81       	ldd	r31, Z+5	; 0x05
    366c:	e0 2d       	mov	r30, r0
    366e:	19 95       	eicall
    3670:	00 d0       	rcall	.+0      	; 0x3672 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x6ea>
    3672:	0f 92       	push	r0
    3674:	26 ef       	ldi	r18, 0xF6	; 246
    3676:	37 e0       	ldi	r19, 0x07	; 7
    3678:	ed b7       	in	r30, 0x3d	; 61
    367a:	fe b7       	in	r31, 0x3e	; 62
    367c:	32 83       	std	Z+2, r19	; 0x02
    367e:	21 83       	std	Z+1, r18	; 0x01
    3680:	94 83       	std	Z+4, r25	; 0x04
    3682:	83 83       	std	Z+3, r24	; 0x03
    3684:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	8e e8       	ldi	r24, 0x8E	; 142
    368e:	92 e1       	ldi	r25, 0x12	; 18
    3690:	ad b7       	in	r26, 0x3d	; 61
    3692:	be b7       	in	r27, 0x3e	; 62
    3694:	12 96       	adiw	r26, 0x02	; 2
    3696:	9c 93       	st	X, r25
    3698:	8e 93       	st	-X, r24
    369a:	11 97       	sbiw	r26, 0x01	; 1
    369c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    36a0:	0f 90       	pop	r0
    36a2:	0f 90       	pop	r0

		if( crcStream->isIncommingCRCMatch() )
    36a4:	f8 01       	movw	r30, r16
    36a6:	83 89       	ldd	r24, Z+19	; 0x13
    36a8:	94 89       	ldd	r25, Z+20	; 0x14
    36aa:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <_ZN24StreamHFA11xRS232WiFiCRC19isIncommingCRCMatchEv>
    36ae:	88 23       	and	r24, r24
    36b0:	49 f0       	breq	.+18     	; 0x36c4 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x73c>
		{
			arr[1]++;
    36b2:	d8 01       	movw	r26, r16
    36b4:	56 96       	adiw	r26, 0x16	; 22
    36b6:	8c 91       	ld	r24, X
    36b8:	56 97       	sbiw	r26, 0x16	; 22
    36ba:	8f 5f       	subi	r24, 0xFF	; 255
    36bc:	56 96       	adiw	r26, 0x16	; 22
    36be:	8c 93       	st	X, r24
    36c0:	56 97       	sbiw	r26, 0x16	; 22
    36c2:	67 c0       	rjmp	.+206    	; 0x3792 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80a>

			return true;
		}
		else
		{
			inputBuffer->discardLastBytes( readBytesCount );
    36c4:	f8 01       	movw	r30, r16
    36c6:	c7 85       	ldd	r28, Z+15	; 0x0f
    36c8:	d0 89       	ldd	r29, Z+16	; 0x10
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    36ca:	4a 85       	ldd	r20, Y+10	; 0x0a
    36cc:	5b 85       	ldd	r21, Y+11	; 0x0b
    36ce:	89 85       	ldd	r24, Y+9	; 0x09
    36d0:	9a 01       	movw	r18, r20
    36d2:	28 1b       	sub	r18, r24
    36d4:	31 09       	sbc	r19, r1
template< typename DataType >
unsigned int AnyRingBuffer<DataType>::discardLastBytes( unsigned int bytesCount )
{
	bytesCount = min( getUsedSpace() , bytesCount );

	writePosition -= bytesCount;
    36d6:	c5 01       	movw	r24, r10
    36d8:	2a 15       	cp	r18, r10
    36da:	3b 05       	cpc	r19, r11
    36dc:	08 f4       	brcc	.+2      	; 0x36e0 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x758>
    36de:	c9 01       	movw	r24, r18
    36e0:	7a 01       	movw	r14, r20
    36e2:	e8 1a       	sub	r14, r24
    36e4:	f9 0a       	sbc	r15, r25
    36e6:	fb 86       	std	Y+11, r15	; 0x0b
    36e8:	ea 86       	std	Y+10, r14	; 0x0a
template< typename DataType >
AnyRingBufferRecord<DataType>* AnyRingBuffer<DataType>::getRecordContainingIndex( unsigned int index )
{
	static const PROGMEM prog_char functionName[] = "getRecordContainingIndex";

	AnyRingBufferRecord<DataType>* p = head;
    36ea:	cb 80       	ldd	r12, Y+3	; 0x03
    36ec:	dc 80       	ldd	r13, Y+4	; 0x04
	{
		i += sizeOfSingleArray;
		p = p->next;
	}

	aln( "record containing array that index start from %u contains asked global index %u" , i , index )
    36ee:	8a 81       	ldd	r24, Y+2	; 0x02
    36f0:	8b 30       	cpi	r24, 0x0B	; 11
    36f2:	40 f5       	brcc	.+80     	; 0x3744 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x7bc>
    36f4:	ce 01       	movw	r24, r28
    36f6:	6b e8       	ldi	r22, 0x8B	; 139
    36f8:	72 e1       	ldi	r23, 0x12	; 18
    36fa:	47 e0       	ldi	r20, 0x07	; 7
    36fc:	58 e0       	ldi	r21, 0x08	; 8
    36fe:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3702:	00 d0       	rcall	.+0      	; 0x3704 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x77c>
    3704:	00 d0       	rcall	.+0      	; 0x3706 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x77e>
    3706:	ed b7       	in	r30, 0x3d	; 61
    3708:	fe b7       	in	r31, 0x3e	; 62
    370a:	31 96       	adiw	r30, 0x01	; 1
    370c:	80 e2       	ldi	r24, 0x20	; 32
    370e:	98 e0       	ldi	r25, 0x08	; 8
    3710:	ad b7       	in	r26, 0x3d	; 61
    3712:	be b7       	in	r27, 0x3e	; 62
    3714:	12 96       	adiw	r26, 0x02	; 2
    3716:	9c 93       	st	X, r25
    3718:	8e 93       	st	-X, r24
    371a:	11 97       	sbiw	r26, 0x01	; 1
    371c:	13 82       	std	Z+3, r1	; 0x03
    371e:	12 82       	std	Z+2, r1	; 0x02
    3720:	f5 82       	std	Z+5, r15	; 0x05
    3722:	e4 82       	std	Z+4, r14	; 0x04
    3724:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	8e e8       	ldi	r24, 0x8E	; 142
    3732:	92 e1       	ldi	r25, 0x12	; 18
    3734:	ed b7       	in	r30, 0x3d	; 61
    3736:	fe b7       	in	r31, 0x3e	; 62
    3738:	92 83       	std	Z+2, r25	; 0x02
    373a:	81 83       	std	Z+1, r24	; 0x01
    373c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
{
	bytesCount = min( getUsedSpace() , bytesCount );

	writePosition -= bytesCount;

	writePositionRecord = getRecordContainingIndex( writePosition );
    3744:	de 82       	std	Y+6, r13	; 0x06
    3746:	cd 82       	std	Y+5, r12	; 0x05
			wln( "crc sum not match! ! ! !" )
    3748:	d8 01       	movw	r26, r16
    374a:	1e 96       	adiw	r26, 0x0e	; 14
    374c:	8c 91       	ld	r24, X
    374e:	1e 97       	sbiw	r26, 0x0e	; 14
    3750:	8f 31       	cpi	r24, 0x1F	; 31
    3752:	08 f5       	brcc	.+66     	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
    3754:	c8 01       	movw	r24, r16
    3756:	0c 96       	adiw	r24, 0x0c	; 12
    3758:	65 e8       	ldi	r22, 0x85	; 133
    375a:	72 e1       	ldi	r23, 0x12	; 18
    375c:	40 e5       	ldi	r20, 0x50	; 80
    375e:	55 e0       	ldi	r21, 0x05	; 5
    3760:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3764:	0f 92       	push	r0
    3766:	0f 92       	push	r0
    3768:	80 e7       	ldi	r24, 0x70	; 112
    376a:	98 e0       	ldi	r25, 0x08	; 8
    376c:	ed b7       	in	r30, 0x3d	; 61
    376e:	fe b7       	in	r31, 0x3e	; 62
    3770:	92 83       	std	Z+2, r25	; 0x02
    3772:	81 83       	std	Z+1, r24	; 0x01
    3774:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3778:	8e e8       	ldi	r24, 0x8E	; 142
    377a:	92 e1       	ldi	r25, 0x12	; 18
    377c:	ad b7       	in	r26, 0x3d	; 61
    377e:	be b7       	in	r27, 0x3e	; 62
    3780:	12 96       	adiw	r26, 0x02	; 2
    3782:	9c 93       	st	X, r25
    3784:	8e 93       	st	-X, r24
    3786:	11 97       	sbiw	r26, 0x01	; 1
    3788:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    378c:	0f 90       	pop	r0
    378e:	0f 90       	pop	r0
    3790:	02 c0       	rjmp	.+4      	; 0x3796 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x80e>
			return false;
		}
	}
	else
	{
		return true;
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	01 c0       	rjmp	.+2      	; 0x3798 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv+0x810>
		}
		else
		{
			inputBuffer->discardLastBytes( readBytesCount );
			wln( "crc sum not match! ! ! !" )
			return false;
    3796:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return true;
	}
}
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	bf 90       	pop	r11
    37aa:	af 90       	pop	r10
    37ac:	9f 90       	pop	r9
    37ae:	8f 90       	pop	r8
    37b0:	7f 90       	pop	r7
    37b2:	6f 90       	pop	r6
    37b4:	5f 90       	pop	r5
    37b6:	4f 90       	pop	r4
    37b8:	3f 90       	pop	r3
    37ba:	2f 90       	pop	r2
    37bc:	08 95       	ret

000037be <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv>:
}

// =================================================

void StreamHFA11xRS232WiFi3::doFullReadCycle()
{
    37be:	8f 92       	push	r8
    37c0:	9f 92       	push	r9
    37c2:	af 92       	push	r10
    37c4:	bf 92       	push	r11
    37c6:	cf 92       	push	r12
    37c8:	df 92       	push	r13
    37ca:	ef 92       	push	r14
    37cc:	ff 92       	push	r15
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	cf 93       	push	r28
    37d4:	df 93       	push	r29
    37d6:	8c 01       	movw	r16, r24
    37d8:	c0 e0       	ldi	r28, 0x00	; 0
    37da:	d0 e0       	ldi	r29, 0x00	; 0
		{
			return;
		}
		else
		{
			iln( "sending RECV again, retry %u / %u" , sendREADAndReadRECVACKCommandRetry , sendREADAndReadRECVACKCommandMaxRetries )
    37dc:	ac e0       	ldi	r26, 0x0C	; 12
    37de:	ea 2e       	mov	r14, r26
    37e0:	f1 2c       	mov	r15, r1
    37e2:	e8 0e       	add	r14, r24
    37e4:	f9 1e       	adc	r15, r25
    37e6:	be e2       	ldi	r27, 0x2E	; 46
    37e8:	cb 2e       	mov	r12, r27
    37ea:	b5 e0       	ldi	r27, 0x05	; 5
    37ec:	db 2e       	mov	r13, r27
    37ee:	24 e1       	ldi	r18, 0x14	; 20
    37f0:	a2 2e       	mov	r10, r18
    37f2:	b1 2c       	mov	r11, r1
    37f4:	3e e8       	ldi	r19, 0x8E	; 142
    37f6:	83 2e       	mov	r8, r19
    37f8:	32 e1       	ldi	r19, 0x12	; 18
    37fa:	93 2e       	mov	r9, r19

	byte sendREADAndReadRECVACKCommandMaxRetries = 20;

	for( byte sendREADAndReadRECVACKCommandRetry = 0 ; sendREADAndReadRECVACKCommandRetry < sendREADAndReadRECVACKCommandMaxRetries ; sendREADAndReadRECVACKCommandRetry++ )
	{
		if( sendRECVAndReadRECVACK() )
    37fc:	c8 01       	movw	r24, r16
    37fe:	0e 94 c4 17 	call	0x2f88	; 0x2f88 <_ZN22StreamHFA11xRS232WiFi322sendRECVAndReadRECVACKEv>
    3802:	88 23       	and	r24, r24
    3804:	71 f5       	brne	.+92     	; 0x3862 <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv+0xa4>
		{
			return;
		}
		else
		{
			iln( "sending RECV again, retry %u / %u" , sendREADAndReadRECVACKCommandRetry , sendREADAndReadRECVACKCommandMaxRetries )
    3806:	d8 01       	movw	r26, r16
    3808:	1e 96       	adiw	r26, 0x0e	; 14
    380a:	8c 91       	ld	r24, X
    380c:	1e 97       	sbiw	r26, 0x0e	; 14
    380e:	85 31       	cpi	r24, 0x15	; 21
    3810:	20 f5       	brcc	.+72     	; 0x385a <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv+0x9c>
    3812:	c7 01       	movw	r24, r14
    3814:	68 e8       	ldi	r22, 0x88	; 136
    3816:	72 e1       	ldi	r23, 0x12	; 18
    3818:	4e e1       	ldi	r20, 0x1E	; 30
    381a:	55 e0       	ldi	r21, 0x05	; 5
    381c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3820:	00 d0       	rcall	.+0      	; 0x3822 <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv+0x64>
    3822:	00 d0       	rcall	.+0      	; 0x3824 <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv+0x66>
    3824:	ed b7       	in	r30, 0x3d	; 61
    3826:	fe b7       	in	r31, 0x3e	; 62
    3828:	31 96       	adiw	r30, 0x01	; 1
    382a:	ad b7       	in	r26, 0x3d	; 61
    382c:	be b7       	in	r27, 0x3e	; 62
    382e:	12 96       	adiw	r26, 0x02	; 2
    3830:	dc 92       	st	X, r13
    3832:	ce 92       	st	-X, r12
    3834:	11 97       	sbiw	r26, 0x01	; 1
    3836:	d3 83       	std	Z+3, r29	; 0x03
    3838:	c2 83       	std	Z+2, r28	; 0x02
    383a:	b5 82       	std	Z+5, r11	; 0x05
    383c:	a4 82       	std	Z+4, r10	; 0x04
    383e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3842:	0f 90       	pop	r0
    3844:	0f 90       	pop	r0
    3846:	0f 90       	pop	r0
    3848:	0f 90       	pop	r0
    384a:	ed b7       	in	r30, 0x3d	; 61
    384c:	fe b7       	in	r31, 0x3e	; 62
    384e:	92 82       	std	Z+2, r9	; 0x02
    3850:	81 82       	std	Z+1, r8	; 0x01
    3852:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	21 96       	adiw	r28, 0x01	; 1
{
	static const PROGMEM prog_char functionName[] = "doFullReadCycle";

	byte sendREADAndReadRECVACKCommandMaxRetries = 20;

	for( byte sendREADAndReadRECVACKCommandRetry = 0 ; sendREADAndReadRECVACKCommandRetry < sendREADAndReadRECVACKCommandMaxRetries ; sendREADAndReadRECVACKCommandRetry++ )
    385c:	c4 31       	cpi	r28, 0x14	; 20
    385e:	d1 05       	cpc	r29, r1
    3860:	69 f6       	brne	.-102    	; 0x37fc <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv+0x3e>
		else
		{
			iln( "sending RECV again, retry %u / %u" , sendREADAndReadRECVACKCommandRetry , sendREADAndReadRECVACKCommandMaxRetries )
		}
	}
}
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	ff 90       	pop	r15
    386c:	ef 90       	pop	r14
    386e:	df 90       	pop	r13
    3870:	cf 90       	pop	r12
    3872:	bf 90       	pop	r11
    3874:	af 90       	pop	r10
    3876:	9f 90       	pop	r9
    3878:	8f 90       	pop	r8
    387a:	08 95       	ret

0000387c <_ZN22StreamHFA11xRS232WiFi39availableEv>:
//}

// =================================================

int StreamHFA11xRS232WiFi3::available()
{
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	ec 01       	movw	r28, r24
	byte available = inputBuffer->getUsedSpace();
    3882:	ef 85       	ldd	r30, Y+15	; 0x0f
    3884:	f8 89       	ldd	r31, Y+16	; 0x10
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    3886:	91 85       	ldd	r25, Z+9	; 0x09
    3888:	82 85       	ldd	r24, Z+10	; 0x0a
    388a:	89 1b       	sub	r24, r25

	if( available == 0 )
    388c:	59 f4       	brne	.+22     	; 0x38a4 <_ZN22StreamHFA11xRS232WiFi39availableEv+0x28>
	{
		doFullReadCycle();
    388e:	ce 01       	movw	r24, r28
    3890:	0e 94 df 1b 	call	0x37be	; 0x37be <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv>
		return inputBuffer->getUsedSpace();
    3894:	ef 85       	ldd	r30, Y+15	; 0x0f
    3896:	f8 89       	ldd	r31, Y+16	; 0x10
    3898:	21 85       	ldd	r18, Z+9	; 0x09
    389a:	82 85       	ldd	r24, Z+10	; 0x0a
    389c:	93 85       	ldd	r25, Z+11	; 0x0b
    389e:	82 1b       	sub	r24, r18
    38a0:	91 09       	sbc	r25, r1
    38a2:	01 c0       	rjmp	.+2      	; 0x38a6 <_ZN22StreamHFA11xRS232WiFi39availableEv+0x2a>
	}
	else
	{
		return available;
    38a4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <_ZN22StreamHFA11xRS232WiFi34peekEv>:
}

// =================================================

int StreamHFA11xRS232WiFi3::peek()
{
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	ec 01       	movw	r28, r24
	if( inputBuffer->getUsedSpace() == 0 ) doFullReadCycle();
    38b2:	ef 85       	ldd	r30, Y+15	; 0x0f
    38b4:	f8 89       	ldd	r31, Y+16	; 0x10
    38b6:	81 85       	ldd	r24, Z+9	; 0x09
    38b8:	90 e0       	ldi	r25, 0x00	; 0
    38ba:	22 85       	ldd	r18, Z+10	; 0x0a
    38bc:	33 85       	ldd	r19, Z+11	; 0x0b
    38be:	28 17       	cp	r18, r24
    38c0:	39 07       	cpc	r19, r25
    38c2:	19 f4       	brne	.+6      	; 0x38ca <_ZN22StreamHFA11xRS232WiFi34peekEv+0x1e>
    38c4:	ce 01       	movw	r24, r28
    38c6:	0e 94 df 1b 	call	0x37be	; 0x37be <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv>

	if( inputBuffer->getUsedSpace() > 0 )
    38ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    38cc:	98 89       	ldd	r25, Y+16	; 0x10
    38ce:	fc 01       	movw	r30, r24
    38d0:	21 85       	ldd	r18, Z+9	; 0x09
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	42 85       	ldd	r20, Z+10	; 0x0a
    38d6:	53 85       	ldd	r21, Z+11	; 0x0b
    38d8:	42 17       	cp	r20, r18
    38da:	53 07       	cpc	r21, r19
    38dc:	21 f0       	breq	.+8      	; 0x38e6 <_ZN22StreamHFA11xRS232WiFi34peekEv+0x3a>
	{
		return inputBuffer->peek();
    38de:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <_ZN13AnyRingBufferIhE4peekEv>
    38e2:	90 e0       	ldi	r25, 0x00	; 0
    38e4:	02 c0       	rjmp	.+4      	; 0x38ea <_ZN22StreamHFA11xRS232WiFi34peekEv+0x3e>
	}
	else
	{
		return -1;
    38e6:	8f ef       	ldi	r24, 0xFF	; 255
    38e8:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	08 95       	ret

000038f0 <_ZN13AnyRingBufferIhE19validateRecordsListEv>:
}

// =================================================

template< typename DataType >
void AnyRingBuffer<DataType>::validateRecordsList()
    38f0:	cf 93       	push	r28
    38f2:	df 93       	push	r29
    38f4:	ec 01       	movw	r28, r24
{
	static const PROGMEM prog_char functionName[] = "validateRecordsList";

	if( readPosition == writePosition )
    38f6:	49 85       	ldd	r20, Y+9	; 0x09
    38f8:	24 2f       	mov	r18, r20
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    38fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    3900:	28 17       	cp	r18, r24
    3902:	39 07       	cpc	r19, r25
    3904:	b1 f5       	brne	.+108    	; 0x3972 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x82>
	{
		aln( "readPosition (%u) == writePosition (%u), setting both to 0" , readPosition , writePosition )
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	8b 30       	cpi	r24, 0x0B	; 11
    390a:	58 f5       	brcc	.+86     	; 0x3962 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x72>
    390c:	ce 01       	movw	r24, r28
    390e:	6b e8       	ldi	r22, 0x8B	; 139
    3910:	72 e1       	ldi	r23, 0x12	; 18
    3912:	4a ee       	ldi	r20, 0xEA	; 234
    3914:	53 e0       	ldi	r21, 0x03	; 3
    3916:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    391a:	00 d0       	rcall	.+0      	; 0x391c <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x2c>
    391c:	00 d0       	rcall	.+0      	; 0x391e <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x2e>
    391e:	ed b7       	in	r30, 0x3d	; 61
    3920:	fe b7       	in	r31, 0x3e	; 62
    3922:	31 96       	adiw	r30, 0x01	; 1
    3924:	8e ef       	ldi	r24, 0xFE	; 254
    3926:	93 e0       	ldi	r25, 0x03	; 3
    3928:	ad b7       	in	r26, 0x3d	; 61
    392a:	be b7       	in	r27, 0x3e	; 62
    392c:	12 96       	adiw	r26, 0x02	; 2
    392e:	9c 93       	st	X, r25
    3930:	8e 93       	st	-X, r24
    3932:	11 97       	sbiw	r26, 0x01	; 1
    3934:	89 85       	ldd	r24, Y+9	; 0x09
    3936:	82 83       	std	Z+2, r24	; 0x02
    3938:	13 82       	std	Z+3, r1	; 0x03
    393a:	8a 85       	ldd	r24, Y+10	; 0x0a
    393c:	9b 85       	ldd	r25, Y+11	; 0x0b
    393e:	95 83       	std	Z+5, r25	; 0x05
    3940:	84 83       	std	Z+4, r24	; 0x04
    3942:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3946:	0f 90       	pop	r0
    3948:	0f 90       	pop	r0
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	8e e8       	ldi	r24, 0x8E	; 142
    3950:	92 e1       	ldi	r25, 0x12	; 18
    3952:	ed b7       	in	r30, 0x3d	; 61
    3954:	fe b7       	in	r31, 0x3e	; 62
    3956:	92 83       	std	Z+2, r25	; 0x02
    3958:	81 83       	std	Z+1, r24	; 0x01
    395a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    395e:	0f 90       	pop	r0
    3960:	0f 90       	pop	r0
// =================================================

template< typename DataType >
void AnyRingBuffer<DataType>::clear()
{
	readPosition = 0;
    3962:	19 86       	std	Y+9, r1	; 0x09
	writePosition = 0;
    3964:	1b 86       	std	Y+11, r1	; 0x0b
    3966:	1a 86       	std	Y+10, r1	; 0x0a
	writePositionRecord = head;
    3968:	8b 81       	ldd	r24, Y+3	; 0x03
    396a:	9c 81       	ldd	r25, Y+4	; 0x04
    396c:	9e 83       	std	Y+6, r25	; 0x06
    396e:	8d 83       	std	Y+5, r24	; 0x05
    3970:	53 c0       	rjmp	.+166    	; 0x3a18 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x128>
		//writePosition = 0;

		clear();
	}
	else
	if( readPosition >= sizeOfSingleArray )
    3972:	8f 81       	ldd	r24, Y+7	; 0x07
    3974:	48 17       	cp	r20, r24
    3976:	08 f4       	brcc	.+2      	; 0x397a <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x8a>
    3978:	4f c0       	rjmp	.+158    	; 0x3a18 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x128>
	{
		aln( "readPosition (%u) >= sizeOfSingleArray (%u), move-first-record-to-end" , readPosition , sizeOfSingleArray )
    397a:	8a 81       	ldd	r24, Y+2	; 0x02
    397c:	8b 30       	cpi	r24, 0x0B	; 11
    397e:	50 f5       	brcc	.+84     	; 0x39d4 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0xe4>
    3980:	ce 01       	movw	r24, r28
    3982:	6b e8       	ldi	r22, 0x8B	; 139
    3984:	72 e1       	ldi	r23, 0x12	; 18
    3986:	4a ee       	ldi	r20, 0xEA	; 234
    3988:	53 e0       	ldi	r21, 0x03	; 3
    398a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    398e:	00 d0       	rcall	.+0      	; 0x3990 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0xa0>
    3990:	00 d0       	rcall	.+0      	; 0x3992 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0xa2>
    3992:	ed b7       	in	r30, 0x3d	; 61
    3994:	fe b7       	in	r31, 0x3e	; 62
    3996:	31 96       	adiw	r30, 0x01	; 1
    3998:	89 e3       	ldi	r24, 0x39	; 57
    399a:	94 e0       	ldi	r25, 0x04	; 4
    399c:	ad b7       	in	r26, 0x3d	; 61
    399e:	be b7       	in	r27, 0x3e	; 62
    39a0:	12 96       	adiw	r26, 0x02	; 2
    39a2:	9c 93       	st	X, r25
    39a4:	8e 93       	st	-X, r24
    39a6:	11 97       	sbiw	r26, 0x01	; 1
    39a8:	89 85       	ldd	r24, Y+9	; 0x09
    39aa:	82 83       	std	Z+2, r24	; 0x02
    39ac:	13 82       	std	Z+3, r1	; 0x03
    39ae:	8f 81       	ldd	r24, Y+7	; 0x07
    39b0:	84 83       	std	Z+4, r24	; 0x04
    39b2:	15 82       	std	Z+5, r1	; 0x05
    39b4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    39b8:	0f 90       	pop	r0
    39ba:	0f 90       	pop	r0
    39bc:	0f 90       	pop	r0
    39be:	0f 90       	pop	r0
    39c0:	8e e8       	ldi	r24, 0x8E	; 142
    39c2:	92 e1       	ldi	r25, 0x12	; 18
    39c4:	ed b7       	in	r30, 0x3d	; 61
    39c6:	fe b7       	in	r31, 0x3e	; 62
    39c8:	92 83       	std	Z+2, r25	; 0x02
    39ca:	81 83       	std	Z+1, r24	; 0x01
    39cc:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    39d0:	0f 90       	pop	r0
    39d2:	0f 90       	pop	r0
// =================================================

template< typename DataType >
void AnyRingBuffer<DataType>::moveFirstRecordToEnd()
{
	AnyRingBufferRecord<DataType>* firstRecord = head;
    39d4:	ab 81       	ldd	r26, Y+3	; 0x03
    39d6:	bc 81       	ldd	r27, Y+4	; 0x04
	head = head->next;
    39d8:	12 96       	adiw	r26, 0x02	; 2
    39da:	ed 91       	ld	r30, X+
    39dc:	fc 91       	ld	r31, X
    39de:	13 97       	sbiw	r26, 0x03	; 3
    39e0:	fc 83       	std	Y+4, r31	; 0x04
    39e2:	eb 83       	std	Y+3, r30	; 0x03
    39e4:	01 c0       	rjmp	.+2      	; 0x39e8 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0xf8>

	AnyRingBufferRecord<DataType>* lastRecord = head;
	while( lastRecord->next != NULL ) lastRecord = lastRecord->next;
    39e6:	fc 01       	movw	r30, r24
    39e8:	82 81       	ldd	r24, Z+2	; 0x02
    39ea:	93 81       	ldd	r25, Z+3	; 0x03
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	d9 f7       	brne	.-10     	; 0x39e6 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0xf6>

	lastRecord->next = firstRecord;
    39f0:	b3 83       	std	Z+3, r27	; 0x03
    39f2:	a2 83       	std	Z+2, r26	; 0x02
	firstRecord->next = NULL;
    39f4:	13 96       	adiw	r26, 0x03	; 3
    39f6:	1c 92       	st	X, r1
    39f8:	1e 92       	st	-X, r1
    39fa:	12 97       	sbiw	r26, 0x02	; 2

	if( writePositionRecord == NULL ) writePositionRecord = firstRecord;
    39fc:	8d 81       	ldd	r24, Y+5	; 0x05
    39fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3a00:	00 97       	sbiw	r24, 0x00	; 0
    3a02:	11 f4       	brne	.+4      	; 0x3a08 <_ZN13AnyRingBufferIhE19validateRecordsListEv+0x118>
    3a04:	be 83       	std	Y+6, r27	; 0x06
    3a06:	ad 83       	std	Y+5, r26	; 0x05

	//readPosition -= sizeOfSingleArray;
	readPosition = 0;
    3a08:	19 86       	std	Y+9, r1	; 0x09
	writePosition -= sizeOfSingleArray;
    3a0a:	2f 81       	ldd	r18, Y+7	; 0x07
    3a0c:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a0e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a10:	82 1b       	sub	r24, r18
    3a12:	91 09       	sbc	r25, r1
    3a14:	9b 87       	std	Y+11, r25	; 0x0b
    3a16:	8a 87       	std	Y+10, r24	; 0x0a
	{
		aln( "readPosition (%u) >= sizeOfSingleArray (%u), move-first-record-to-end" , readPosition , sizeOfSingleArray )

		moveFirstRecordToEnd();
	}
}
    3a18:	df 91       	pop	r29
    3a1a:	cf 91       	pop	r28
    3a1c:	08 95       	ret

00003a1e <_ZN13AnyRingBufferIhE17discardFirstBytesEj>:
}

// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::discardFirstBytes( unsigned int bytesCount )
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	8c 01       	movw	r16, r24
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    3a28:	fc 01       	movw	r30, r24
    3a2a:	21 85       	ldd	r18, Z+9	; 0x09
    3a2c:	82 85       	ldd	r24, Z+10	; 0x0a
    3a2e:	93 85       	ldd	r25, Z+11	; 0x0b
    3a30:	82 1b       	sub	r24, r18
    3a32:	91 09       	sbc	r25, r1
}

// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::discardFirstBytes( unsigned int bytesCount )
    3a34:	eb 01       	movw	r28, r22
    3a36:	86 17       	cp	r24, r22
    3a38:	97 07       	cpc	r25, r23
    3a3a:	a8 f4       	brcc	.+42     	; 0x3a66 <_ZN13AnyRingBufferIhE17discardFirstBytesEj+0x48>
    3a3c:	ec 01       	movw	r28, r24
    3a3e:	13 c0       	rjmp	.+38     	; 0x3a66 <_ZN13AnyRingBufferIhE17discardFirstBytesEj+0x48>

	bytesCount = bytesToDiscard;

	while( bytesCount > 0 )
	{
		byte i = min( bytesCount , sizeOfSingleArray - readPosition );
    3a40:	f8 01       	movw	r30, r16
    3a42:	21 85       	ldd	r18, Z+9	; 0x09
    3a44:	87 81       	ldd	r24, Z+7	; 0x07
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	82 1b       	sub	r24, r18
    3a4a:	91 09       	sbc	r25, r1
    3a4c:	3c 2f       	mov	r19, r28
    3a4e:	8c 17       	cp	r24, r28
    3a50:	9d 07       	cpc	r25, r29
    3a52:	08 f4       	brcc	.+2      	; 0x3a56 <_ZN13AnyRingBufferIhE17discardFirstBytesEj+0x38>
    3a54:	38 2f       	mov	r19, r24

		readPosition += i;
    3a56:	23 0f       	add	r18, r19
    3a58:	f8 01       	movw	r30, r16
    3a5a:	21 87       	std	Z+9, r18	; 0x09
		bytesCount -= i;
    3a5c:	c3 1b       	sub	r28, r19
    3a5e:	d1 09       	sbc	r29, r1

		validateRecordsList();
    3a60:	c8 01       	movw	r24, r16
    3a62:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN13AnyRingBufferIhE19validateRecordsListEv>

	//if( readPosition + bytesCount > writePosition ) bytesCount = writePosition - readPosition;

	bytesCount = bytesToDiscard;

	while( bytesCount > 0 )
    3a66:	20 97       	sbiw	r28, 0x00	; 0
    3a68:	59 f7       	brne	.-42     	; 0x3a40 <_ZN13AnyRingBufferIhE17discardFirstBytesEj+0x22>

		validateRecordsList();
	}

	return bytesCount;
}
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	08 95       	ret

00003a78 <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj>:

// =================================================

// info bardzo podobna do read( arr ), poprawiajac ja poprawiac te dwie
template< typename DataType >
unsigned int AnyRingBuffer<DataType>::readOrPeek( bool doRead , Stream* toStream , unsigned int howManyReadToStream )
    3a78:	4f 92       	push	r4
    3a7a:	5f 92       	push	r5
    3a7c:	6f 92       	push	r6
    3a7e:	7f 92       	push	r7
    3a80:	8f 92       	push	r8
    3a82:	9f 92       	push	r9
    3a84:	af 92       	push	r10
    3a86:	bf 92       	push	r11
    3a88:	cf 92       	push	r12
    3a8a:	df 92       	push	r13
    3a8c:	ef 92       	push	r14
    3a8e:	ff 92       	push	r15
    3a90:	0f 93       	push	r16
    3a92:	1f 93       	push	r17
    3a94:	cf 93       	push	r28
    3a96:	df 93       	push	r29
    3a98:	8c 01       	movw	r16, r24
    3a9a:	46 2e       	mov	r4, r22
    3a9c:	3a 01       	movw	r6, r20
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	19 96       	adiw	r26, 0x09	; 9
    3aa2:	ac 90       	ld	r10, X
    3aa4:	19 97       	sbiw	r26, 0x09	; 9
    3aa6:	bb 24       	eor	r11, r11
    3aa8:	1a 96       	adiw	r26, 0x0a	; 10
    3aaa:	8d 91       	ld	r24, X+
    3aac:	9c 91       	ld	r25, X
    3aae:	1b 97       	sbiw	r26, 0x0b	; 11
    3ab0:	8a 19       	sub	r24, r10
    3ab2:	9b 09       	sbc	r25, r11
    3ab4:	e9 01       	movw	r28, r18
    3ab6:	82 17       	cp	r24, r18
    3ab8:	93 07       	cpc	r25, r19
    3aba:	08 f4       	brcc	.+2      	; 0x3abe <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0x46>
    3abc:	ec 01       	movw	r28, r24
		howManyReadToStream = min( howManyReadToStream , getUsedSpace() );
	}*/

	howManyReadToStream = min( howManyReadToStream , getUsedSpace() );

	AnyRingBufferRecord<DataType>* p = head;
    3abe:	f8 01       	movw	r30, r16
    3ac0:	e3 80       	ldd	r14, Z+3	; 0x03
    3ac2:	f4 80       	ldd	r15, Z+4	; 0x04
	unsigned int globalReadPosition = readPosition;

	unsigned int alreadyRead = 0;
    3ac4:	cc 24       	eor	r12, r12
    3ac6:	dd 24       	eor	r13, r13

		byte readPositionInSingleArray = globalReadPosition % sizeOfSingleArray;

		byte toRead = min( howManyReadToStream , sizeOfSingleArray - readPositionInSingleArray );

		toRead = toStream->write( p->array + readPositionInSingleArray , toRead );
    3ac8:	86 2c       	mov	r8, r6
    3aca:	57 2c       	mov	r5, r7
	AnyRingBufferRecord<DataType>* p = head;
	unsigned int globalReadPosition = readPosition;

	unsigned int alreadyRead = 0;

	while( howManyReadToStream > 0 && p != NULL )
    3acc:	05 c0       	rjmp	.+10     	; 0x3ad8 <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0x60>
		globalReadPosition += toRead;
		readPositionInSingleArray += toRead;

		if( readPositionInSingleArray >= sizeOfSingleArray )
		{
			p = p->next;
    3ace:	d7 01       	movw	r26, r14
    3ad0:	12 96       	adiw	r26, 0x02	; 2
    3ad2:	ed 90       	ld	r14, X+
    3ad4:	fc 90       	ld	r15, X
    3ad6:	13 97       	sbiw	r26, 0x03	; 3
	AnyRingBufferRecord<DataType>* p = head;
	unsigned int globalReadPosition = readPosition;

	unsigned int alreadyRead = 0;

	while( howManyReadToStream > 0 && p != NULL )
    3ad8:	20 97       	sbiw	r28, 0x00	; 0
    3ada:	89 f1       	breq	.+98     	; 0x3b3e <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0xc6>
    3adc:	e1 14       	cp	r14, r1
    3ade:	f1 04       	cpc	r15, r1
    3ae0:	71 f1       	breq	.+92     	; 0x3b3e <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0xc6>
	{
		//if( p == NULL ) break;

		byte readPositionInSingleArray = globalReadPosition % sizeOfSingleArray;
    3ae2:	f8 01       	movw	r30, r16
    3ae4:	27 81       	ldd	r18, Z+7	; 0x07
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	c5 01       	movw	r24, r10
    3aea:	b9 01       	movw	r22, r18
    3aec:	0e 94 69 48 	call	0x90d2	; 0x90d2 <__udivmodhi4>
    3af0:	98 2e       	mov	r9, r24

		byte toRead = min( howManyReadToStream , sizeOfSingleArray - readPositionInSingleArray );

		toRead = toStream->write( p->array + readPositionInSingleArray , toRead );
    3af2:	d3 01       	movw	r26, r6
    3af4:	ed 91       	ld	r30, X+
    3af6:	fc 91       	ld	r31, X
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	d7 01       	movw	r26, r14
    3afc:	6d 91       	ld	r22, X+
    3afe:	7c 91       	ld	r23, X
    3b00:	11 97       	sbiw	r26, 0x01	; 1
    3b02:	68 0f       	add	r22, r24
    3b04:	79 1f       	adc	r23, r25
	{
		//if( p == NULL ) break;

		byte readPositionInSingleArray = globalReadPosition % sizeOfSingleArray;

		byte toRead = min( howManyReadToStream , sizeOfSingleArray - readPositionInSingleArray );
    3b06:	a9 01       	movw	r20, r18
    3b08:	48 1b       	sub	r20, r24
    3b0a:	59 0b       	sbc	r21, r25
    3b0c:	c4 17       	cp	r28, r20
    3b0e:	d5 07       	cpc	r29, r21
    3b10:	08 f4       	brcc	.+2      	; 0x3b14 <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0x9c>
    3b12:	ae 01       	movw	r20, r28

		toRead = toStream->write( p->array + readPositionInSingleArray , toRead );
    3b14:	02 80       	ldd	r0, Z+2	; 0x02
    3b16:	f3 81       	ldd	r31, Z+3	; 0x03
    3b18:	e0 2d       	mov	r30, r0
    3b1a:	88 2d       	mov	r24, r8
    3b1c:	95 2d       	mov	r25, r5
    3b1e:	50 e0       	ldi	r21, 0x00	; 0
    3b20:	19 95       	eicall

		alreadyRead += toRead;
    3b22:	28 2f       	mov	r18, r24
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	c2 0e       	add	r12, r18
    3b28:	d3 1e       	adc	r13, r19

		howManyReadToStream -= toRead;
    3b2a:	c2 1b       	sub	r28, r18
    3b2c:	d3 0b       	sbc	r29, r19

		globalReadPosition += toRead;
    3b2e:	a2 0e       	add	r10, r18
    3b30:	b3 1e       	adc	r11, r19
		readPositionInSingleArray += toRead;
    3b32:	98 0e       	add	r9, r24

		if( readPositionInSingleArray >= sizeOfSingleArray )
    3b34:	f8 01       	movw	r30, r16
    3b36:	97 81       	ldd	r25, Z+7	; 0x07
    3b38:	99 16       	cp	r9, r25
    3b3a:	48 f6       	brcc	.-110    	; 0x3ace <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0x56>
    3b3c:	cd cf       	rjmp	.-102    	; 0x3ad8 <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0x60>
		{
			p = p->next;
		}
	}

	if( doRead ) discardFirstBytes( alreadyRead );
    3b3e:	44 20       	and	r4, r4
    3b40:	21 f0       	breq	.+8      	; 0x3b4a <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj+0xd2>
    3b42:	c8 01       	movw	r24, r16
    3b44:	b6 01       	movw	r22, r12
    3b46:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <_ZN13AnyRingBufferIhE17discardFirstBytesEj>

	return alreadyRead;
}
    3b4a:	c6 01       	movw	r24, r12
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	1f 91       	pop	r17
    3b52:	0f 91       	pop	r16
    3b54:	ff 90       	pop	r15
    3b56:	ef 90       	pop	r14
    3b58:	df 90       	pop	r13
    3b5a:	cf 90       	pop	r12
    3b5c:	bf 90       	pop	r11
    3b5e:	af 90       	pop	r10
    3b60:	9f 90       	pop	r9
    3b62:	8f 90       	pop	r8
    3b64:	7f 90       	pop	r7
    3b66:	6f 90       	pop	r6
    3b68:	5f 90       	pop	r5
    3b6a:	4f 90       	pop	r4
    3b6c:	08 95       	ret

00003b6e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv>:
}

// =================================================

bool StreamHFA11xRS232WiFi3::sendSENDAndReadSENDACK()
{
    3b6e:	cf 92       	push	r12
    3b70:	df 92       	push	r13
    3b72:	ff 92       	push	r15
    3b74:	0f 93       	push	r16
    3b76:	1f 93       	push	r17
    3b78:	cf 93       	push	r28
    3b7a:	df 93       	push	r29
    3b7c:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "sendSENDAndReadSENDACK";

	byte waitingToSendDataCount = outputBuffer->getUsedSpace();
    3b7e:	e9 89       	ldd	r30, Y+17	; 0x11
    3b80:	fa 89       	ldd	r31, Y+18	; 0x12
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    3b82:	81 85       	ldd	r24, Z+9	; 0x09
    3b84:	02 85       	ldd	r16, Z+10	; 0x0a
    3b86:	13 85       	ldd	r17, Z+11	; 0x0b
    3b88:	08 1b       	sub	r16, r24
    3b8a:	11 09       	sbc	r17, r1
    3b8c:	f0 2e       	mov	r15, r16

	if( waitingToSendDataCount > 0 )
    3b8e:	00 23       	and	r16, r16
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x26>
    3b92:	db c1       	rjmp	.+950    	; 0x3f4a <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3dc>
	{
		aln( "b1 available=%u , waitingToSendDataCount=%u, sn=%u" , crcStream->available() , waitingToSendDataCount , arr[1] )
    3b94:	8e 85       	ldd	r24, Y+14	; 0x0e
    3b96:	8b 30       	cpi	r24, 0x0B	; 11
    3b98:	d8 f5       	brcc	.+118    	; 0x3c10 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0xa2>
    3b9a:	ce 01       	movw	r24, r28
    3b9c:	0c 96       	adiw	r24, 0x0c	; 12
    3b9e:	6b e8       	ldi	r22, 0x8B	; 139
    3ba0:	72 e1       	ldi	r23, 0x12	; 18
    3ba2:	4d ec       	ldi	r20, 0xCD	; 205
    3ba4:	58 e0       	ldi	r21, 0x08	; 8
    3ba6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3baa:	8b 89       	ldd	r24, Y+19	; 0x13
    3bac:	9c 89       	ldd	r25, Y+20	; 0x14
    3bae:	dc 01       	movw	r26, r24
    3bb0:	ed 91       	ld	r30, X+
    3bb2:	fc 91       	ld	r31, X
    3bb4:	04 80       	ldd	r0, Z+4	; 0x04
    3bb6:	f5 81       	ldd	r31, Z+5	; 0x05
    3bb8:	e0 2d       	mov	r30, r0
    3bba:	19 95       	eicall
    3bbc:	ed b7       	in	r30, 0x3d	; 61
    3bbe:	fe b7       	in	r31, 0x3e	; 62
    3bc0:	38 97       	sbiw	r30, 0x08	; 8
    3bc2:	0f b6       	in	r0, 0x3f	; 63
    3bc4:	f8 94       	cli
    3bc6:	fe bf       	out	0x3e, r31	; 62
    3bc8:	0f be       	out	0x3f, r0	; 63
    3bca:	ed bf       	out	0x3d, r30	; 61
    3bcc:	31 96       	adiw	r30, 0x01	; 1
    3bce:	24 ee       	ldi	r18, 0xE4	; 228
    3bd0:	38 e0       	ldi	r19, 0x08	; 8
    3bd2:	ad b7       	in	r26, 0x3d	; 61
    3bd4:	be b7       	in	r27, 0x3e	; 62
    3bd6:	12 96       	adiw	r26, 0x02	; 2
    3bd8:	3c 93       	st	X, r19
    3bda:	2e 93       	st	-X, r18
    3bdc:	11 97       	sbiw	r26, 0x01	; 1
    3bde:	93 83       	std	Z+3, r25	; 0x03
    3be0:	82 83       	std	Z+2, r24	; 0x02
    3be2:	04 83       	std	Z+4, r16	; 0x04
    3be4:	15 82       	std	Z+5, r1	; 0x05
    3be6:	8e 89       	ldd	r24, Y+22	; 0x16
    3be8:	86 83       	std	Z+6, r24	; 0x06
    3bea:	17 82       	std	Z+7, r1	; 0x07
    3bec:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3bf0:	ed b7       	in	r30, 0x3d	; 61
    3bf2:	fe b7       	in	r31, 0x3e	; 62
    3bf4:	36 96       	adiw	r30, 0x06	; 6
    3bf6:	0f b6       	in	r0, 0x3f	; 63
    3bf8:	f8 94       	cli
    3bfa:	fe bf       	out	0x3e, r31	; 62
    3bfc:	0f be       	out	0x3f, r0	; 63
    3bfe:	ed bf       	out	0x3d, r30	; 61
    3c00:	8e e8       	ldi	r24, 0x8E	; 142
    3c02:	92 e1       	ldi	r25, 0x12	; 18
    3c04:	92 83       	std	Z+2, r25	; 0x02
    3c06:	81 83       	std	Z+1, r24	; 0x01
    3c08:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3c0c:	0f 90       	pop	r0
    3c0e:	0f 90       	pop	r0

		discardAnyWaitingDataInUnderlyingStream( false );
    3c10:	ce 01       	movw	r24, r28
    3c12:	60 e0       	ldi	r22, 0x00	; 0
    3c14:	0e 94 ca 15 	call	0x2b94	; 0x2b94 <_ZN22StreamHFA11xRS232WiFi339discardAnyWaitingDataInUnderlyingStreamEb>

		aln( "b2 available=%u" , crcStream->available() )
    3c18:	8e 85       	ldd	r24, Y+14	; 0x0e
    3c1a:	8b 30       	cpi	r24, 0x0B	; 11
    3c1c:	58 f5       	brcc	.+86     	; 0x3c74 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x106>
    3c1e:	ce 01       	movw	r24, r28
    3c20:	0c 96       	adiw	r24, 0x0c	; 12
    3c22:	6b e8       	ldi	r22, 0x8B	; 139
    3c24:	72 e1       	ldi	r23, 0x12	; 18
    3c26:	4d ec       	ldi	r20, 0xCD	; 205
    3c28:	58 e0       	ldi	r21, 0x08	; 8
    3c2a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    3c30:	9c 89       	ldd	r25, Y+20	; 0x14
    3c32:	dc 01       	movw	r26, r24
    3c34:	ed 91       	ld	r30, X+
    3c36:	fc 91       	ld	r31, X
    3c38:	04 80       	ldd	r0, Z+4	; 0x04
    3c3a:	f5 81       	ldd	r31, Z+5	; 0x05
    3c3c:	e0 2d       	mov	r30, r0
    3c3e:	19 95       	eicall
    3c40:	00 d0       	rcall	.+0      	; 0x3c42 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0xd4>
    3c42:	0f 92       	push	r0
    3c44:	27 e1       	ldi	r18, 0x17	; 23
    3c46:	39 e0       	ldi	r19, 0x09	; 9
    3c48:	ed b7       	in	r30, 0x3d	; 61
    3c4a:	fe b7       	in	r31, 0x3e	; 62
    3c4c:	32 83       	std	Z+2, r19	; 0x02
    3c4e:	21 83       	std	Z+1, r18	; 0x01
    3c50:	94 83       	std	Z+4, r25	; 0x04
    3c52:	83 83       	std	Z+3, r24	; 0x03
    3c54:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3c58:	0f 90       	pop	r0
    3c5a:	0f 90       	pop	r0
    3c5c:	8e e8       	ldi	r24, 0x8E	; 142
    3c5e:	92 e1       	ldi	r25, 0x12	; 18
    3c60:	ad b7       	in	r26, 0x3d	; 61
    3c62:	be b7       	in	r27, 0x3e	; 62
    3c64:	12 96       	adiw	r26, 0x02	; 2
    3c66:	9c 93       	st	X, r25
    3c68:	8e 93       	st	-X, r24
    3c6a:	11 97       	sbiw	r26, 0x01	; 1
    3c6c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3c70:	0f 90       	pop	r0
    3c72:	0f 90       	pop	r0

		// ---

		crcStream->resetOutgoingState();
    3c74:	8b 89       	ldd	r24, Y+19	; 0x13
    3c76:	9c 89       	ldd	r25, Y+20	; 0x14
    3c78:	0e 94 ca 21 	call	0x4394	; 0x4394 <_ZN24StreamHFA11xRS232WiFiCRC18resetOutgoingStateEv>

		arr[0] = 1;
    3c7c:	81 e0       	ldi	r24, 0x01	; 1
    3c7e:	8d 8b       	std	Y+21, r24	; 0x15
		arr[4] = waitingToSendDataCount;
    3c80:	f9 8e       	std	Y+25, r15	; 0x19
		arr[5] = 0;
    3c82:	1a 8e       	std	Y+26, r1	; 0x1a

		if( crcStream->write( arr , 6 ) != 6 )
    3c84:	8b 89       	ldd	r24, Y+19	; 0x13
    3c86:	9c 89       	ldd	r25, Y+20	; 0x14
    3c88:	dc 01       	movw	r26, r24
    3c8a:	ed 91       	ld	r30, X+
    3c8c:	fc 91       	ld	r31, X
    3c8e:	be 01       	movw	r22, r28
    3c90:	6b 5e       	subi	r22, 0xEB	; 235
    3c92:	7f 4f       	sbci	r23, 0xFF	; 255
    3c94:	02 80       	ldd	r0, Z+2	; 0x02
    3c96:	f3 81       	ldd	r31, Z+3	; 0x03
    3c98:	e0 2d       	mov	r30, r0
    3c9a:	46 e0       	ldi	r20, 0x06	; 6
    3c9c:	50 e0       	ldi	r21, 0x00	; 0
    3c9e:	19 95       	eicall
    3ca0:	86 30       	cpi	r24, 0x06	; 6
    3ca2:	91 05       	cpc	r25, r1
    3ca4:	89 f0       	breq	.+34     	; 0x3cc8 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x15a>
		{
			wln( "could not send 6 bytes of SEND command" )
    3ca6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ca8:	8f 31       	cpi	r24, 0x1F	; 31
    3caa:	08 f0       	brcs	.+2      	; 0x3cae <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x140>
    3cac:	50 c1       	rjmp	.+672    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3cae:	ce 01       	movw	r24, r28
    3cb0:	0c 96       	adiw	r24, 0x0c	; 12
    3cb2:	65 e8       	ldi	r22, 0x85	; 133
    3cb4:	72 e1       	ldi	r23, 0x12	; 18
    3cb6:	4d ec       	ldi	r20, 0xCD	; 205
    3cb8:	58 e0       	ldi	r21, 0x08	; 8
    3cba:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3cbe:	0f 92       	push	r0
    3cc0:	0f 92       	push	r0
    3cc2:	87 e2       	ldi	r24, 0x27	; 39
    3cc4:	99 e0       	ldi	r25, 0x09	; 9
    3cc6:	2e c1       	rjmp	.+604    	; 0x3f24 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3b6>
			return false;
		}

		if( outputBuffer->readOrPeek( false , crcStream , waitingToSendDataCount ) != waitingToSendDataCount )
    3cc8:	0f 2d       	mov	r16, r15
    3cca:	10 e0       	ldi	r17, 0x00	; 0
    3ccc:	4b 89       	ldd	r20, Y+19	; 0x13
    3cce:	5c 89       	ldd	r21, Y+20	; 0x14
    3cd0:	89 89       	ldd	r24, Y+17	; 0x11
    3cd2:	9a 89       	ldd	r25, Y+18	; 0x12
    3cd4:	60 e0       	ldi	r22, 0x00	; 0
    3cd6:	98 01       	movw	r18, r16
    3cd8:	0e 94 3c 1d 	call	0x3a78	; 0x3a78 <_ZN13AnyRingBufferIhE10readOrPeekEbP6Streamj>
    3cdc:	6c 01       	movw	r12, r24
    3cde:	80 17       	cp	r24, r16
    3ce0:	91 07       	cpc	r25, r17
    3ce2:	d9 f0       	breq	.+54     	; 0x3d1a <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x1ac>
		{
			wln( "could not send %u bytes of data inside SEND command" , waitingToSendDataCount )
    3ce4:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ce6:	8f 31       	cpi	r24, 0x1F	; 31
    3ce8:	08 f0       	brcs	.+2      	; 0x3cec <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x17e>
    3cea:	31 c1       	rjmp	.+610    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3cec:	ce 01       	movw	r24, r28
    3cee:	0c 96       	adiw	r24, 0x0c	; 12
    3cf0:	65 e8       	ldi	r22, 0x85	; 133
    3cf2:	72 e1       	ldi	r23, 0x12	; 18
    3cf4:	4d ec       	ldi	r20, 0xCD	; 205
    3cf6:	58 e0       	ldi	r21, 0x08	; 8
    3cf8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3cfc:	00 d0       	rcall	.+0      	; 0x3cfe <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x190>
    3cfe:	0f 92       	push	r0
    3d00:	ed b7       	in	r30, 0x3d	; 61
    3d02:	fe b7       	in	r31, 0x3e	; 62
    3d04:	31 96       	adiw	r30, 0x01	; 1
    3d06:	8e e4       	ldi	r24, 0x4E	; 78
    3d08:	99 e0       	ldi	r25, 0x09	; 9
    3d0a:	ad b7       	in	r26, 0x3d	; 61
    3d0c:	be b7       	in	r27, 0x3e	; 62
    3d0e:	12 96       	adiw	r26, 0x02	; 2
    3d10:	9c 93       	st	X, r25
    3d12:	8e 93       	st	-X, r24
    3d14:	11 97       	sbiw	r26, 0x01	; 1
    3d16:	f2 82       	std	Z+2, r15	; 0x02
    3d18:	5c c0       	rjmp	.+184    	; 0x3dd2 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x264>
			return false;
		}

		if( !crcStream->writeCRC() )
    3d1a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d1c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d1e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <_ZN24StreamHFA11xRS232WiFiCRC8writeCRCEv>
    3d22:	88 23       	and	r24, r24
    3d24:	c9 f4       	brne	.+50     	; 0x3d58 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x1ea>
		{
			wln( "could not send crc" )
    3d26:	8e 85       	ldd	r24, Y+14	; 0x0e
    3d28:	8f 31       	cpi	r24, 0x1F	; 31
    3d2a:	08 f0       	brcs	.+2      	; 0x3d2e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x1c0>
    3d2c:	10 c1       	rjmp	.+544    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3d2e:	ce 01       	movw	r24, r28
    3d30:	0c 96       	adiw	r24, 0x0c	; 12
    3d32:	65 e8       	ldi	r22, 0x85	; 133
    3d34:	72 e1       	ldi	r23, 0x12	; 18
    3d36:	4d ec       	ldi	r20, 0xCD	; 205
    3d38:	58 e0       	ldi	r21, 0x08	; 8
    3d3a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3d3e:	0f 92       	push	r0
    3d40:	0f 92       	push	r0
    3d42:	82 e8       	ldi	r24, 0x82	; 130
    3d44:	99 e0       	ldi	r25, 0x09	; 9
    3d46:	ad b7       	in	r26, 0x3d	; 61
    3d48:	be b7       	in	r27, 0x3e	; 62
    3d4a:	12 96       	adiw	r26, 0x02	; 2
    3d4c:	9c 93       	st	X, r25
    3d4e:	8e 93       	st	-X, r24
    3d50:	11 97       	sbiw	r26, 0x01	; 1
    3d52:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3d56:	42 c0       	rjmp	.+132    	; 0x3ddc <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x26e>
			return false;
		}

		crcStream->flush();
    3d58:	8b 89       	ldd	r24, Y+19	; 0x13
    3d5a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	ed 91       	ld	r30, X+
    3d60:	fc 91       	ld	r31, X
    3d62:	02 84       	ldd	r0, Z+10	; 0x0a
    3d64:	f3 85       	ldd	r31, Z+11	; 0x0b
    3d66:	e0 2d       	mov	r30, r0
    3d68:	19 95       	eicall

		// ---

		while( crcStream->available() < 5 );
    3d6a:	8b 89       	ldd	r24, Y+19	; 0x13
    3d6c:	9c 89       	ldd	r25, Y+20	; 0x14
    3d6e:	dc 01       	movw	r26, r24
    3d70:	ed 91       	ld	r30, X+
    3d72:	fc 91       	ld	r31, X
    3d74:	04 80       	ldd	r0, Z+4	; 0x04
    3d76:	f5 81       	ldd	r31, Z+5	; 0x05
    3d78:	e0 2d       	mov	r30, r0
    3d7a:	19 95       	eicall
    3d7c:	85 30       	cpi	r24, 0x05	; 5
    3d7e:	91 05       	cpc	r25, r1
    3d80:	a4 f3       	brlt	.-24     	; 0x3d6a <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x1fc>

		byte readByte = 0;

		if( ( readByte = crcStream->underlyingStream->read() ) != 1 )
    3d82:	eb 89       	ldd	r30, Y+19	; 0x13
    3d84:	fc 89       	ldd	r31, Y+20	; 0x14
    3d86:	84 85       	ldd	r24, Z+12	; 0x0c
    3d88:	95 85       	ldd	r25, Z+13	; 0x0d
    3d8a:	dc 01       	movw	r26, r24
    3d8c:	ed 91       	ld	r30, X+
    3d8e:	fc 91       	ld	r31, X
    3d90:	06 80       	ldd	r0, Z+6	; 0x06
    3d92:	f7 81       	ldd	r31, Z+7	; 0x07
    3d94:	e0 2d       	mov	r30, r0
    3d96:	19 95       	eicall
    3d98:	18 2f       	mov	r17, r24
    3d9a:	81 30       	cpi	r24, 0x01	; 1
    3d9c:	31 f1       	breq	.+76     	; 0x3dea <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x27c>
		{
			wln( "incomming command number (%u) not match 1" , readByte )
    3d9e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3da0:	8f 31       	cpi	r24, 0x1F	; 31
    3da2:	08 f0       	brcs	.+2      	; 0x3da6 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x238>
    3da4:	d4 c0       	rjmp	.+424    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3da6:	ce 01       	movw	r24, r28
    3da8:	0c 96       	adiw	r24, 0x0c	; 12
    3daa:	65 e8       	ldi	r22, 0x85	; 133
    3dac:	72 e1       	ldi	r23, 0x12	; 18
    3dae:	4d ec       	ldi	r20, 0xCD	; 205
    3db0:	58 e0       	ldi	r21, 0x08	; 8
    3db2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x24a>
    3db8:	0f 92       	push	r0
    3dba:	ed b7       	in	r30, 0x3d	; 61
    3dbc:	fe b7       	in	r31, 0x3e	; 62
    3dbe:	31 96       	adiw	r30, 0x01	; 1
    3dc0:	85 e9       	ldi	r24, 0x95	; 149
    3dc2:	99 e0       	ldi	r25, 0x09	; 9
    3dc4:	ad b7       	in	r26, 0x3d	; 61
    3dc6:	be b7       	in	r27, 0x3e	; 62
    3dc8:	12 96       	adiw	r26, 0x02	; 2
    3dca:	9c 93       	st	X, r25
    3dcc:	8e 93       	st	-X, r24
    3dce:	11 97       	sbiw	r26, 0x01	; 1
    3dd0:	12 83       	std	Z+2, r17	; 0x02
    3dd2:	13 82       	std	Z+3, r1	; 0x03
    3dd4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3dd8:	0f 90       	pop	r0
    3dda:	0f 90       	pop	r0
    3ddc:	8e e8       	ldi	r24, 0x8E	; 142
    3dde:	92 e1       	ldi	r25, 0x12	; 18
    3de0:	ed b7       	in	r30, 0x3d	; 61
    3de2:	fe b7       	in	r31, 0x3e	; 62
    3de4:	92 83       	std	Z+2, r25	; 0x02
    3de6:	81 83       	std	Z+1, r24	; 0x01
    3de8:	ab c0       	rjmp	.+342    	; 0x3f40 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3d2>
			return false;
		}

		if( ( readByte = crcStream->underlyingStream->read() ) != arr[1] )
    3dea:	eb 89       	ldd	r30, Y+19	; 0x13
    3dec:	fc 89       	ldd	r31, Y+20	; 0x14
    3dee:	84 85       	ldd	r24, Z+12	; 0x0c
    3df0:	95 85       	ldd	r25, Z+13	; 0x0d
    3df2:	dc 01       	movw	r26, r24
    3df4:	ed 91       	ld	r30, X+
    3df6:	fc 91       	ld	r31, X
    3df8:	06 80       	ldd	r0, Z+6	; 0x06
    3dfa:	f7 81       	ldd	r31, Z+7	; 0x07
    3dfc:	e0 2d       	mov	r30, r0
    3dfe:	19 95       	eicall
    3e00:	18 2f       	mov	r17, r24
    3e02:	8e 89       	ldd	r24, Y+22	; 0x16
    3e04:	18 17       	cp	r17, r24
    3e06:	29 f1       	breq	.+74     	; 0x3e52 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x2e4>
		{
			wln( "incomming serial number (%u) not match %u" , readByte , arr[1] )
    3e08:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e0a:	8f 31       	cpi	r24, 0x1F	; 31
    3e0c:	08 f0       	brcs	.+2      	; 0x3e10 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x2a2>
    3e0e:	9f c0       	rjmp	.+318    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3e10:	ce 01       	movw	r24, r28
    3e12:	0c 96       	adiw	r24, 0x0c	; 12
    3e14:	65 e8       	ldi	r22, 0x85	; 133
    3e16:	72 e1       	ldi	r23, 0x12	; 18
    3e18:	4d ec       	ldi	r20, 0xCD	; 205
    3e1a:	58 e0       	ldi	r21, 0x08	; 8
    3e1c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3e20:	00 d0       	rcall	.+0      	; 0x3e22 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x2b4>
    3e22:	00 d0       	rcall	.+0      	; 0x3e24 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x2b6>
    3e24:	ed b7       	in	r30, 0x3d	; 61
    3e26:	fe b7       	in	r31, 0x3e	; 62
    3e28:	31 96       	adiw	r30, 0x01	; 1
    3e2a:	8f eb       	ldi	r24, 0xBF	; 191
    3e2c:	99 e0       	ldi	r25, 0x09	; 9
    3e2e:	ad b7       	in	r26, 0x3d	; 61
    3e30:	be b7       	in	r27, 0x3e	; 62
    3e32:	12 96       	adiw	r26, 0x02	; 2
    3e34:	9c 93       	st	X, r25
    3e36:	8e 93       	st	-X, r24
    3e38:	11 97       	sbiw	r26, 0x01	; 1
    3e3a:	12 83       	std	Z+2, r17	; 0x02
    3e3c:	13 82       	std	Z+3, r1	; 0x03
    3e3e:	8e 89       	ldd	r24, Y+22	; 0x16
    3e40:	84 83       	std	Z+4, r24	; 0x04
    3e42:	15 82       	std	Z+5, r1	; 0x05
    3e44:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3e48:	0f 90       	pop	r0
    3e4a:	0f 90       	pop	r0
    3e4c:	0f 90       	pop	r0
    3e4e:	0f 90       	pop	r0
    3e50:	c5 cf       	rjmp	.-118    	; 0x3ddc <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x26e>
			return false;
		}

		if( ( readByte = crcStream->underlyingStream->read() ) != 0 )
    3e52:	eb 89       	ldd	r30, Y+19	; 0x13
    3e54:	fc 89       	ldd	r31, Y+20	; 0x14
    3e56:	84 85       	ldd	r24, Z+12	; 0x0c
    3e58:	95 85       	ldd	r25, Z+13	; 0x0d
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	ed 91       	ld	r30, X+
    3e5e:	fc 91       	ld	r31, X
    3e60:	06 80       	ldd	r0, Z+6	; 0x06
    3e62:	f7 81       	ldd	r31, Z+7	; 0x07
    3e64:	e0 2d       	mov	r30, r0
    3e66:	19 95       	eicall
    3e68:	18 2f       	mov	r17, r24
    3e6a:	88 23       	and	r24, r24
    3e6c:	a1 f0       	breq	.+40     	; 0x3e96 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x328>
		{
			wln( "incomming first reserved byte (%u) not match 0" , readByte )
    3e6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e70:	8f 31       	cpi	r24, 0x1F	; 31
    3e72:	08 f0       	brcs	.+2      	; 0x3e76 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x308>
    3e74:	6c c0       	rjmp	.+216    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3e76:	ce 01       	movw	r24, r28
    3e78:	0c 96       	adiw	r24, 0x0c	; 12
    3e7a:	65 e8       	ldi	r22, 0x85	; 133
    3e7c:	72 e1       	ldi	r23, 0x12	; 18
    3e7e:	4d ec       	ldi	r20, 0xCD	; 205
    3e80:	58 e0       	ldi	r21, 0x08	; 8
    3e82:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3e86:	00 d0       	rcall	.+0      	; 0x3e88 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x31a>
    3e88:	0f 92       	push	r0
    3e8a:	ed b7       	in	r30, 0x3d	; 61
    3e8c:	fe b7       	in	r31, 0x3e	; 62
    3e8e:	31 96       	adiw	r30, 0x01	; 1
    3e90:	89 ee       	ldi	r24, 0xE9	; 233
    3e92:	99 e0       	ldi	r25, 0x09	; 9
    3e94:	97 cf       	rjmp	.-210    	; 0x3dc4 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x256>
			return false;
		}

		if( ( readByte = crcStream->underlyingStream->read() ) != 0 )
    3e96:	eb 89       	ldd	r30, Y+19	; 0x13
    3e98:	fc 89       	ldd	r31, Y+20	; 0x14
    3e9a:	84 85       	ldd	r24, Z+12	; 0x0c
    3e9c:	95 85       	ldd	r25, Z+13	; 0x0d
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	ed 91       	ld	r30, X+
    3ea2:	fc 91       	ld	r31, X
    3ea4:	06 80       	ldd	r0, Z+6	; 0x06
    3ea6:	f7 81       	ldd	r31, Z+7	; 0x07
    3ea8:	e0 2d       	mov	r30, r0
    3eaa:	19 95       	eicall
    3eac:	18 2f       	mov	r17, r24
    3eae:	88 23       	and	r24, r24
    3eb0:	a1 f0       	breq	.+40     	; 0x3eda <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x36c>
		{
			wln( "incomming second reserved byte (%u) not match 0" , readByte )
    3eb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    3eb4:	8f 31       	cpi	r24, 0x1F	; 31
    3eb6:	08 f0       	brcs	.+2      	; 0x3eba <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x34c>
    3eb8:	4a c0       	rjmp	.+148    	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3eba:	ce 01       	movw	r24, r28
    3ebc:	0c 96       	adiw	r24, 0x0c	; 12
    3ebe:	65 e8       	ldi	r22, 0x85	; 133
    3ec0:	72 e1       	ldi	r23, 0x12	; 18
    3ec2:	4d ec       	ldi	r20, 0xCD	; 205
    3ec4:	58 e0       	ldi	r21, 0x08	; 8
    3ec6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3eca:	00 d0       	rcall	.+0      	; 0x3ecc <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x35e>
    3ecc:	0f 92       	push	r0
    3ece:	ed b7       	in	r30, 0x3d	; 61
    3ed0:	fe b7       	in	r31, 0x3e	; 62
    3ed2:	31 96       	adiw	r30, 0x01	; 1
    3ed4:	88 e1       	ldi	r24, 0x18	; 24
    3ed6:	9a e0       	ldi	r25, 0x0A	; 10
    3ed8:	75 cf       	rjmp	.-278    	; 0x3dc4 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x256>
			return false;
		}

		byte ackInfo = crcStream->underlyingStream->read();
    3eda:	eb 89       	ldd	r30, Y+19	; 0x13
    3edc:	fc 89       	ldd	r31, Y+20	; 0x14
    3ede:	84 85       	ldd	r24, Z+12	; 0x0c
    3ee0:	95 85       	ldd	r25, Z+13	; 0x0d
    3ee2:	dc 01       	movw	r26, r24
    3ee4:	ed 91       	ld	r30, X+
    3ee6:	fc 91       	ld	r31, X
    3ee8:	06 80       	ldd	r0, Z+6	; 0x06
    3eea:	f7 81       	ldd	r31, Z+7	; 0x07
    3eec:	e0 2d       	mov	r30, r0
    3eee:	19 95       	eicall

		if( ackInfo == 0 )
    3ef0:	88 23       	and	r24, r24
    3ef2:	49 f4       	brne	.+18     	; 0x3f06 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x398>
		{
			outputBuffer->discardFirstBytes( waitingToSendDataCount );
    3ef4:	89 89       	ldd	r24, Y+17	; 0x11
    3ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ef8:	b6 01       	movw	r22, r12
    3efa:	0e 94 0f 1d 	call	0x3a1e	; 0x3a1e <_ZN13AnyRingBufferIhE17discardFirstBytesEj>

			arr[1]++;
    3efe:	8e 89       	ldd	r24, Y+22	; 0x16
    3f00:	8f 5f       	subi	r24, 0xFF	; 255
    3f02:	8e 8b       	std	Y+22, r24	; 0x16
    3f04:	22 c0       	rjmp	.+68     	; 0x3f4a <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3dc>

			return true;
		}
		else
		{
			wln( "ackInfo ERR :(((" )
    3f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f08:	8f 31       	cpi	r24, 0x1F	; 31
    3f0a:	08 f5       	brcc	.+66     	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
    3f0c:	ce 01       	movw	r24, r28
    3f0e:	0c 96       	adiw	r24, 0x0c	; 12
    3f10:	65 e8       	ldi	r22, 0x85	; 133
    3f12:	72 e1       	ldi	r23, 0x12	; 18
    3f14:	4d ec       	ldi	r20, 0xCD	; 205
    3f16:	58 e0       	ldi	r21, 0x08	; 8
    3f18:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3f1c:	0f 92       	push	r0
    3f1e:	0f 92       	push	r0
    3f20:	88 e4       	ldi	r24, 0x48	; 72
    3f22:	9a e0       	ldi	r25, 0x0A	; 10
    3f24:	ed b7       	in	r30, 0x3d	; 61
    3f26:	fe b7       	in	r31, 0x3e	; 62
    3f28:	92 83       	std	Z+2, r25	; 0x02
    3f2a:	81 83       	std	Z+1, r24	; 0x01
    3f2c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3f30:	8e e8       	ldi	r24, 0x8E	; 142
    3f32:	92 e1       	ldi	r25, 0x12	; 18
    3f34:	ad b7       	in	r26, 0x3d	; 61
    3f36:	be b7       	in	r27, 0x3e	; 62
    3f38:	12 96       	adiw	r26, 0x02	; 2
    3f3a:	9c 93       	st	X, r25
    3f3c:	8e 93       	st	-X, r24
    3f3e:	11 97       	sbiw	r26, 0x01	; 1
    3f40:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	02 c0       	rjmp	.+4      	; 0x3f4e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e0>
			return false;
		}
	}
	else
	{
		return true;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	01 c0       	rjmp	.+2      	; 0x3f50 <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv+0x3e2>
			return true;
		}
		else
		{
			wln( "ackInfo ERR :(((" )
			return false;
    3f4e:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return true;
	}
}
    3f50:	df 91       	pop	r29
    3f52:	cf 91       	pop	r28
    3f54:	1f 91       	pop	r17
    3f56:	0f 91       	pop	r16
    3f58:	ff 90       	pop	r15
    3f5a:	df 90       	pop	r13
    3f5c:	cf 90       	pop	r12
    3f5e:	08 95       	ret

00003f60 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv>:
}

// =================================================

void StreamHFA11xRS232WiFi3::doFullSendCycle()
{
    3f60:	8f 92       	push	r8
    3f62:	9f 92       	push	r9
    3f64:	af 92       	push	r10
    3f66:	bf 92       	push	r11
    3f68:	cf 92       	push	r12
    3f6a:	df 92       	push	r13
    3f6c:	ef 92       	push	r14
    3f6e:	ff 92       	push	r15
    3f70:	0f 93       	push	r16
    3f72:	1f 93       	push	r17
    3f74:	cf 93       	push	r28
    3f76:	df 93       	push	r29
    3f78:	8c 01       	movw	r16, r24
    3f7a:	c0 e0       	ldi	r28, 0x00	; 0
    3f7c:	d0 e0       	ldi	r29, 0x00	; 0
		{
			return;
		}
		else
		{
			wln( "sending SEND again with %u B of data, retry %u / %u" , outputBuffer->getUsedSpace() , sendSENDAndReadSENDACKCommandRetry , sendSENDAndReadSENDACKCommandMaxRetries )
    3f7e:	4c e0       	ldi	r20, 0x0C	; 12
    3f80:	e4 2e       	mov	r14, r20
    3f82:	f1 2c       	mov	r15, r1
    3f84:	e8 0e       	add	r14, r24
    3f86:	f9 1e       	adc	r15, r25
    3f88:	59 e9       	ldi	r21, 0x99	; 153
    3f8a:	c5 2e       	mov	r12, r21
    3f8c:	58 e0       	ldi	r21, 0x08	; 8
    3f8e:	d5 2e       	mov	r13, r21
    3f90:	64 e1       	ldi	r22, 0x14	; 20
    3f92:	a6 2e       	mov	r10, r22
    3f94:	b1 2c       	mov	r11, r1
    3f96:	7e e8       	ldi	r23, 0x8E	; 142
    3f98:	87 2e       	mov	r8, r23
    3f9a:	72 e1       	ldi	r23, 0x12	; 18
    3f9c:	97 2e       	mov	r9, r23

	byte sendSENDAndReadSENDACKCommandMaxRetries = 20;

	for( byte sendSENDAndReadSENDACKCommandRetry = 0 ; sendSENDAndReadSENDACKCommandRetry < sendSENDAndReadSENDACKCommandMaxRetries ; sendSENDAndReadSENDACKCommandRetry++ )
	{
		if( sendSENDAndReadSENDACK() )
    3f9e:	c8 01       	movw	r24, r16
    3fa0:	0e 94 b7 1d 	call	0x3b6e	; 0x3b6e <_ZN22StreamHFA11xRS232WiFi322sendSENDAndReadSENDACKEv>
    3fa4:	88 23       	and	r24, r24
    3fa6:	09 f0       	breq	.+2      	; 0x3faa <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0x4a>
    3fa8:	4b c0       	rjmp	.+150    	; 0x4040 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0xe0>
		{
			return;
		}
		else
		{
			wln( "sending SEND again with %u B of data, retry %u / %u" , outputBuffer->getUsedSpace() , sendSENDAndReadSENDACKCommandRetry , sendSENDAndReadSENDACKCommandMaxRetries )
    3faa:	d8 01       	movw	r26, r16
    3fac:	1e 96       	adiw	r26, 0x0e	; 14
    3fae:	8c 91       	ld	r24, X
    3fb0:	1e 97       	sbiw	r26, 0x0e	; 14
    3fb2:	8f 31       	cpi	r24, 0x1F	; 31
    3fb4:	08 f0       	brcs	.+2      	; 0x3fb8 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0x58>
    3fb6:	3f c0       	rjmp	.+126    	; 0x4036 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0xd6>
    3fb8:	c7 01       	movw	r24, r14
    3fba:	65 e8       	ldi	r22, 0x85	; 133
    3fbc:	72 e1       	ldi	r23, 0x12	; 18
    3fbe:	49 e8       	ldi	r20, 0x89	; 137
    3fc0:	58 e0       	ldi	r21, 0x08	; 8
    3fc2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    3fc6:	f8 01       	movw	r30, r16
    3fc8:	41 89       	ldd	r20, Z+17	; 0x11
    3fca:	52 89       	ldd	r21, Z+18	; 0x12
    3fcc:	8d b7       	in	r24, 0x3d	; 61
    3fce:	9e b7       	in	r25, 0x3e	; 62
    3fd0:	08 97       	sbiw	r24, 0x08	; 8
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	9e bf       	out	0x3e, r25	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	8d bf       	out	0x3d, r24	; 61
    3fdc:	ad b7       	in	r26, 0x3d	; 61
    3fde:	be b7       	in	r27, 0x3e	; 62
    3fe0:	11 96       	adiw	r26, 0x01	; 1
    3fe2:	ed b7       	in	r30, 0x3d	; 61
    3fe4:	fe b7       	in	r31, 0x3e	; 62
    3fe6:	d2 82       	std	Z+2, r13	; 0x02
    3fe8:	c1 82       	std	Z+1, r12	; 0x01
    3fea:	fa 01       	movw	r30, r20
    3fec:	21 85       	ldd	r18, Z+9	; 0x09
    3fee:	82 85       	ldd	r24, Z+10	; 0x0a
    3ff0:	93 85       	ldd	r25, Z+11	; 0x0b
    3ff2:	82 1b       	sub	r24, r18
    3ff4:	91 09       	sbc	r25, r1
    3ff6:	13 96       	adiw	r26, 0x03	; 3
    3ff8:	9c 93       	st	X, r25
    3ffa:	8e 93       	st	-X, r24
    3ffc:	12 97       	sbiw	r26, 0x02	; 2
    3ffe:	15 96       	adiw	r26, 0x05	; 5
    4000:	dc 93       	st	X, r29
    4002:	ce 93       	st	-X, r28
    4004:	14 97       	sbiw	r26, 0x04	; 4
    4006:	17 96       	adiw	r26, 0x07	; 7
    4008:	bc 92       	st	X, r11
    400a:	ae 92       	st	-X, r10
    400c:	16 97       	sbiw	r26, 0x06	; 6
    400e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4012:	8d b7       	in	r24, 0x3d	; 61
    4014:	9e b7       	in	r25, 0x3e	; 62
    4016:	06 96       	adiw	r24, 0x06	; 6
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	f8 94       	cli
    401c:	9e bf       	out	0x3e, r25	; 62
    401e:	0f be       	out	0x3f, r0	; 63
    4020:	8d bf       	out	0x3d, r24	; 61
    4022:	ad b7       	in	r26, 0x3d	; 61
    4024:	be b7       	in	r27, 0x3e	; 62
    4026:	12 96       	adiw	r26, 0x02	; 2
    4028:	9c 92       	st	X, r9
    402a:	8e 92       	st	-X, r8
    402c:	11 97       	sbiw	r26, 0x01	; 1
    402e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4032:	0f 90       	pop	r0
    4034:	0f 90       	pop	r0
    4036:	21 96       	adiw	r28, 0x01	; 1
{
	static const PROGMEM prog_char functionName[] = "doFullSendCycle";

	byte sendSENDAndReadSENDACKCommandMaxRetries = 20;

	for( byte sendSENDAndReadSENDACKCommandRetry = 0 ; sendSENDAndReadSENDACKCommandRetry < sendSENDAndReadSENDACKCommandMaxRetries ; sendSENDAndReadSENDACKCommandRetry++ )
    4038:	c4 31       	cpi	r28, 0x14	; 20
    403a:	d1 05       	cpc	r29, r1
    403c:	09 f0       	breq	.+2      	; 0x4040 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0xe0>
    403e:	af cf       	rjmp	.-162    	; 0x3f9e <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv+0x3e>
		else
		{
			wln( "sending SEND again with %u B of data, retry %u / %u" , outputBuffer->getUsedSpace() , sendSENDAndReadSENDACKCommandRetry , sendSENDAndReadSENDACKCommandMaxRetries )
		}
	}
}
    4040:	df 91       	pop	r29
    4042:	cf 91       	pop	r28
    4044:	1f 91       	pop	r17
    4046:	0f 91       	pop	r16
    4048:	ff 90       	pop	r15
    404a:	ef 90       	pop	r14
    404c:	df 90       	pop	r13
    404e:	cf 90       	pop	r12
    4050:	bf 90       	pop	r11
    4052:	af 90       	pop	r10
    4054:	9f 90       	pop	r9
    4056:	8f 90       	pop	r8
    4058:	08 95       	ret

0000405a <_ZN22StreamHFA11xRS232WiFi35writeEh>:
}

// =================================================

size_t StreamHFA11xRS232WiFi3::write( uint8_t b )
{
    405a:	1f 93       	push	r17
    405c:	cf 93       	push	r28
    405e:	df 93       	push	r29
    4060:	ec 01       	movw	r28, r24
    4062:	16 2f       	mov	r17, r22
	while( outputBuffer->getFreeSpace() == 0 ) doFullSendCycle();
    4064:	03 c0       	rjmp	.+6      	; 0x406c <_ZN22StreamHFA11xRS232WiFi35writeEh+0x12>
    4066:	ce 01       	movw	r24, r28
    4068:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv>
    406c:	e9 89       	ldd	r30, Y+17	; 0x11
    406e:	fa 89       	ldd	r31, Y+18	; 0x12
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getFreeSpace()
{
	return capacity - getUsedSpace();
    4070:	40 85       	ldd	r20, Z+8	; 0x08
    4072:	50 e0       	ldi	r21, 0x00	; 0
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    4074:	22 85       	ldd	r18, Z+10	; 0x0a
    4076:	33 85       	ldd	r19, Z+11	; 0x0b
    4078:	81 85       	ldd	r24, Z+9	; 0x09
    407a:	b9 01       	movw	r22, r18
    407c:	68 1b       	sub	r22, r24
    407e:	71 09       	sbc	r23, r1
    4080:	46 17       	cp	r20, r22
    4082:	57 07       	cpc	r21, r23
    4084:	81 f3       	breq	.-32     	; 0x4066 <_ZN22StreamHFA11xRS232WiFi35writeEh+0xc>
bool AnyRingBuffer<DataType>::write( DataType data )
{
	if( canWrite() )
	{
		//AnyRingBufferRecord<DataType>* p = getRecordContainingIndex( writePosition );
		AnyRingBufferRecord<DataType>* p = writePositionRecord;
    4086:	c5 81       	ldd	r28, Z+5	; 0x05
    4088:	d6 81       	ldd	r29, Z+6	; 0x06

		if( p == NULL )
    408a:	20 97       	sbiw	r28, 0x00	; 0
    408c:	f1 f0       	breq	.+60     	; 0x40ca <_ZN22StreamHFA11xRS232WiFi35writeEh+0x70>
		{
			return false;
		}
		else
		{
			p->array[ writePosition % sizeOfSingleArray ] = data;
    408e:	67 81       	ldd	r22, Z+7	; 0x07
    4090:	c9 01       	movw	r24, r18
    4092:	70 e0       	ldi	r23, 0x00	; 0
    4094:	0e 94 69 48 	call	0x90d2	; 0x90d2 <__udivmodhi4>
    4098:	a8 81       	ld	r26, Y
    409a:	b9 81       	ldd	r27, Y+1	; 0x01
    409c:	a8 0f       	add	r26, r24
    409e:	b9 1f       	adc	r27, r25
    40a0:	1c 93       	st	X, r17
			writePosition++;
    40a2:	82 85       	ldd	r24, Z+10	; 0x0a
    40a4:	93 85       	ldd	r25, Z+11	; 0x0b
    40a6:	01 96       	adiw	r24, 0x01	; 1
    40a8:	93 87       	std	Z+11, r25	; 0x0b
    40aa:	82 87       	std	Z+10, r24	; 0x0a

			if( writePosition % sizeOfSingleArray == 0 ) writePositionRecord = writePositionRecord->next;
    40ac:	67 81       	ldd	r22, Z+7	; 0x07
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	0e 94 69 48 	call	0x90d2	; 0x90d2 <__udivmodhi4>
    40b4:	00 97       	sbiw	r24, 0x00	; 0
    40b6:	59 f4       	brne	.+22     	; 0x40ce <_ZN22StreamHFA11xRS232WiFi35writeEh+0x74>
    40b8:	a5 81       	ldd	r26, Z+5	; 0x05
    40ba:	b6 81       	ldd	r27, Z+6	; 0x06
    40bc:	12 96       	adiw	r26, 0x02	; 2
    40be:	8d 91       	ld	r24, X+
    40c0:	9c 91       	ld	r25, X
    40c2:	13 97       	sbiw	r26, 0x03	; 3
    40c4:	96 83       	std	Z+6, r25	; 0x06
    40c6:	85 83       	std	Z+5, r24	; 0x05
    40c8:	02 c0       	rjmp	.+4      	; 0x40ce <_ZN22StreamHFA11xRS232WiFi35writeEh+0x74>
		//AnyRingBufferRecord<DataType>* p = getRecordContainingIndex( writePosition );
		AnyRingBufferRecord<DataType>* p = writePositionRecord;

		if( p == NULL )
		{
			return false;
    40ca:	80 e0       	ldi	r24, 0x00	; 0
    40cc:	01 c0       	rjmp	.+2      	; 0x40d0 <_ZN22StreamHFA11xRS232WiFi35writeEh+0x76>
			p->array[ writePosition % sizeOfSingleArray ] = data;
			writePosition++;

			if( writePosition % sizeOfSingleArray == 0 ) writePositionRecord = writePositionRecord->next;

			return true;
    40ce:	81 e0       	ldi	r24, 0x01	; 1
	return outputBuffer->write( b );

	//outputBuffer->array[ outputBuffer->limit++ ] = b;

	//return 1;
}
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	df 91       	pop	r29
    40d4:	cf 91       	pop	r28
    40d6:	1f 91       	pop	r17
    40d8:	08 95       	ret

000040da <_ZN22StreamHFA11xRS232WiFi35flushEv>:
}

// =================================================

void StreamHFA11xRS232WiFi3::flush()
{
    40da:	1f 93       	push	r17
    40dc:	cf 93       	push	r28
    40de:	df 93       	push	r29
    40e0:	ec 01       	movw	r28, r24
    40e2:	1a e0       	ldi	r17, 0x0A	; 10
	for( byte sendWholeData = 0 ; sendWholeData < 10 && outputBuffer->getUsedSpace() > 0 ; sendWholeData++ )
    40e4:	e9 89       	ldd	r30, Y+17	; 0x11
    40e6:	fa 89       	ldd	r31, Y+18	; 0x12
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    40e8:	81 85       	ldd	r24, Z+9	; 0x09
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	22 85       	ldd	r18, Z+10	; 0x0a
    40ee:	33 85       	ldd	r19, Z+11	; 0x0b
    40f0:	28 17       	cp	r18, r24
    40f2:	39 07       	cpc	r19, r25
    40f4:	29 f0       	breq	.+10     	; 0x4100 <_ZN22StreamHFA11xRS232WiFi35flushEv+0x26>
	{
		doFullSendCycle();
    40f6:	ce 01       	movw	r24, r28
    40f8:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <_ZN22StreamHFA11xRS232WiFi315doFullSendCycleEv>
    40fc:	11 50       	subi	r17, 0x01	; 1

// =================================================

void StreamHFA11xRS232WiFi3::flush()
{
	for( byte sendWholeData = 0 ; sendWholeData < 10 && outputBuffer->getUsedSpace() > 0 ; sendWholeData++ )
    40fe:	91 f7       	brne	.-28     	; 0x40e4 <_ZN22StreamHFA11xRS232WiFi35flushEv+0xa>
	{
		doFullSendCycle();
	}
}
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	08 95       	ret

00004108 <_ZN13AnyRingBufferIhE4readEv>:
}

// =================================================

template< typename DataType >
DataType AnyRingBuffer<DataType>::read()
    4108:	1f 93       	push	r17
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	ec 01       	movw	r28, r24
// =================================================

template< typename DataType >
bool AnyRingBuffer<DataType>::canRead()
{
	return readPosition < writePosition;
    4110:	49 85       	ldd	r20, Y+9	; 0x09
    4112:	84 2f       	mov	r24, r20
    4114:	90 e0       	ldi	r25, 0x00	; 0
template< typename DataType >
DataType AnyRingBuffer<DataType>::read()
{
	static const PROGMEM prog_char functionName[] = "read";

	if( canRead() )
    4116:	2a 85       	ldd	r18, Y+10	; 0x0a
    4118:	3b 85       	ldd	r19, Y+11	; 0x0b
    411a:	82 17       	cp	r24, r18
    411c:	93 07       	cpc	r25, r19
    411e:	c8 f5       	brcc	.+114    	; 0x4192 <_ZN13AnyRingBufferIhE4readEv+0x8a>
	{
		DataType result = head->array[ readPosition++ ];
    4120:	eb 81       	ldd	r30, Y+3	; 0x03
    4122:	fc 81       	ldd	r31, Y+4	; 0x04
    4124:	01 90       	ld	r0, Z+
    4126:	f0 81       	ld	r31, Z
    4128:	e0 2d       	mov	r30, r0
    412a:	e8 0f       	add	r30, r24
    412c:	f9 1f       	adc	r31, r25
    412e:	10 81       	ld	r17, Z
    4130:	4f 5f       	subi	r20, 0xFF	; 255
    4132:	49 87       	std	Y+9, r20	; 0x09

		aln( "result = %c (%u)" , result , result )
    4134:	8a 81       	ldd	r24, Y+2	; 0x02
    4136:	8b 30       	cpi	r24, 0x0B	; 11
    4138:	40 f5       	brcc	.+80     	; 0x418a <_ZN13AnyRingBufferIhE4readEv+0x82>
    413a:	ce 01       	movw	r24, r28
    413c:	6b e8       	ldi	r22, 0x8B	; 139
    413e:	72 e1       	ldi	r23, 0x12	; 18
    4140:	48 eb       	ldi	r20, 0xB8	; 184
    4142:	53 e0       	ldi	r21, 0x03	; 3
    4144:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4148:	00 d0       	rcall	.+0      	; 0x414a <_ZN13AnyRingBufferIhE4readEv+0x42>
    414a:	00 d0       	rcall	.+0      	; 0x414c <_ZN13AnyRingBufferIhE4readEv+0x44>
    414c:	ed b7       	in	r30, 0x3d	; 61
    414e:	fe b7       	in	r31, 0x3e	; 62
    4150:	31 96       	adiw	r30, 0x01	; 1
    4152:	8d eb       	ldi	r24, 0xBD	; 189
    4154:	93 e0       	ldi	r25, 0x03	; 3
    4156:	ad b7       	in	r26, 0x3d	; 61
    4158:	be b7       	in	r27, 0x3e	; 62
    415a:	12 96       	adiw	r26, 0x02	; 2
    415c:	9c 93       	st	X, r25
    415e:	8e 93       	st	-X, r24
    4160:	11 97       	sbiw	r26, 0x01	; 1
    4162:	12 83       	std	Z+2, r17	; 0x02
    4164:	13 82       	std	Z+3, r1	; 0x03
    4166:	14 83       	std	Z+4, r17	; 0x04
    4168:	15 82       	std	Z+5, r1	; 0x05
    416a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    416e:	0f 90       	pop	r0
    4170:	0f 90       	pop	r0
    4172:	0f 90       	pop	r0
    4174:	0f 90       	pop	r0
    4176:	8e e8       	ldi	r24, 0x8E	; 142
    4178:	92 e1       	ldi	r25, 0x12	; 18
    417a:	ed b7       	in	r30, 0x3d	; 61
    417c:	fe b7       	in	r31, 0x3e	; 62
    417e:	92 83       	std	Z+2, r25	; 0x02
    4180:	81 83       	std	Z+1, r24	; 0x01
    4182:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4186:	0f 90       	pop	r0
    4188:	0f 90       	pop	r0

		validateRecordsList();
    418a:	ce 01       	movw	r24, r28
    418c:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <_ZN13AnyRingBufferIhE19validateRecordsListEv>

		return result;
    4190:	21 c0       	rjmp	.+66     	; 0x41d4 <_ZN13AnyRingBufferIhE4readEv+0xcc>
	}
	else
	{
		wln( "could not read, returning 0" )
    4192:	8a 81       	ldd	r24, Y+2	; 0x02
    4194:	8f 31       	cpi	r24, 0x1F	; 31
    4196:	e8 f4       	brcc	.+58     	; 0x41d2 <_ZN13AnyRingBufferIhE4readEv+0xca>
    4198:	ce 01       	movw	r24, r28
    419a:	65 e8       	ldi	r22, 0x85	; 133
    419c:	72 e1       	ldi	r23, 0x12	; 18
    419e:	48 eb       	ldi	r20, 0xB8	; 184
    41a0:	53 e0       	ldi	r21, 0x03	; 3
    41a2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    41a6:	0f 92       	push	r0
    41a8:	0f 92       	push	r0
    41aa:	8e ec       	ldi	r24, 0xCE	; 206
    41ac:	93 e0       	ldi	r25, 0x03	; 3
    41ae:	ad b7       	in	r26, 0x3d	; 61
    41b0:	be b7       	in	r27, 0x3e	; 62
    41b2:	12 96       	adiw	r26, 0x02	; 2
    41b4:	9c 93       	st	X, r25
    41b6:	8e 93       	st	-X, r24
    41b8:	11 97       	sbiw	r26, 0x01	; 1
    41ba:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    41be:	8e e8       	ldi	r24, 0x8E	; 142
    41c0:	92 e1       	ldi	r25, 0x12	; 18
    41c2:	ed b7       	in	r30, 0x3d	; 61
    41c4:	fe b7       	in	r31, 0x3e	; 62
    41c6:	92 83       	std	Z+2, r25	; 0x02
    41c8:	81 83       	std	Z+1, r24	; 0x01
    41ca:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    41ce:	0f 90       	pop	r0
    41d0:	0f 90       	pop	r0
		return 0;
    41d2:	10 e0       	ldi	r17, 0x00	; 0
	}
}
    41d4:	81 2f       	mov	r24, r17
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	08 95       	ret

000041de <_ZN22StreamHFA11xRS232WiFi34readEv>:
}

// =================================================

int StreamHFA11xRS232WiFi3::read()
{
    41de:	cf 93       	push	r28
    41e0:	df 93       	push	r29
    41e2:	ec 01       	movw	r28, r24
	if( inputBuffer->getUsedSpace() == 0 ) doFullReadCycle();
    41e4:	ef 85       	ldd	r30, Y+15	; 0x0f
    41e6:	f8 89       	ldd	r31, Y+16	; 0x10
// =================================================

template< typename DataType >
unsigned int AnyRingBuffer<DataType>::getUsedSpace()
{
	return writePosition - readPosition;
    41e8:	81 85       	ldd	r24, Z+9	; 0x09
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	22 85       	ldd	r18, Z+10	; 0x0a
    41ee:	33 85       	ldd	r19, Z+11	; 0x0b
    41f0:	28 17       	cp	r18, r24
    41f2:	39 07       	cpc	r19, r25
    41f4:	19 f4       	brne	.+6      	; 0x41fc <_ZN22StreamHFA11xRS232WiFi34readEv+0x1e>
    41f6:	ce 01       	movw	r24, r28
    41f8:	0e 94 df 1b 	call	0x37be	; 0x37be <_ZN22StreamHFA11xRS232WiFi315doFullReadCycleEv>

	if( inputBuffer->getUsedSpace() > 0 )
    41fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41fe:	98 89       	ldd	r25, Y+16	; 0x10
    4200:	fc 01       	movw	r30, r24
    4202:	21 85       	ldd	r18, Z+9	; 0x09
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	42 85       	ldd	r20, Z+10	; 0x0a
    4208:	53 85       	ldd	r21, Z+11	; 0x0b
    420a:	42 17       	cp	r20, r18
    420c:	53 07       	cpc	r21, r19
    420e:	21 f0       	breq	.+8      	; 0x4218 <_ZN22StreamHFA11xRS232WiFi34readEv+0x3a>
	{
		return inputBuffer->read();
    4210:	0e 94 84 20 	call	0x4108	; 0x4108 <_ZN13AnyRingBufferIhE4readEv>
    4214:	90 e0       	ldi	r25, 0x00	; 0
    4216:	02 c0       	rjmp	.+4      	; 0x421c <_ZN22StreamHFA11xRS232WiFi34readEv+0x3e>
	}
	else
	{
		return -1;
    4218:	8f ef       	ldi	r24, 0xFF	; 255
    421a:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	08 95       	ret

00004222 <_ZN24StreamHFA11xRS232WiFiCRC4peekEv>:

// =================================================

int StreamHFA11xRS232WiFiCRC::peek()
{
	return underlyingStream->peek();
    4222:	dc 01       	movw	r26, r24
    4224:	1c 96       	adiw	r26, 0x0c	; 12
    4226:	8d 91       	ld	r24, X+
    4228:	9c 91       	ld	r25, X
    422a:	1d 97       	sbiw	r26, 0x0d	; 13
    422c:	dc 01       	movw	r26, r24
    422e:	ed 91       	ld	r30, X+
    4230:	fc 91       	ld	r31, X
    4232:	00 84       	ldd	r0, Z+8	; 0x08
    4234:	f1 85       	ldd	r31, Z+9	; 0x09
    4236:	e0 2d       	mov	r30, r0
    4238:	19 95       	eicall
}
    423a:	08 95       	ret

0000423c <_ZN24StreamHFA11xRS232WiFiCRC5flushEv>:

// =================================================

void StreamHFA11xRS232WiFiCRC::flush()
{
	underlyingStream->flush();
    423c:	dc 01       	movw	r26, r24
    423e:	1c 96       	adiw	r26, 0x0c	; 12
    4240:	8d 91       	ld	r24, X+
    4242:	9c 91       	ld	r25, X
    4244:	1d 97       	sbiw	r26, 0x0d	; 13
    4246:	dc 01       	movw	r26, r24
    4248:	ed 91       	ld	r30, X+
    424a:	fc 91       	ld	r31, X
    424c:	02 84       	ldd	r0, Z+10	; 0x0a
    424e:	f3 85       	ldd	r31, Z+11	; 0x0b
    4250:	e0 2d       	mov	r30, r0
    4252:	19 95       	eicall
}
    4254:	08 95       	ret

00004256 <_ZN24StreamHFA11xRS232WiFiCRC9availableEv>:

// =================================================

int StreamHFA11xRS232WiFiCRC::available()
{
	return underlyingStream->available();
    4256:	dc 01       	movw	r26, r24
    4258:	1c 96       	adiw	r26, 0x0c	; 12
    425a:	8d 91       	ld	r24, X+
    425c:	9c 91       	ld	r25, X
    425e:	1d 97       	sbiw	r26, 0x0d	; 13
    4260:	dc 01       	movw	r26, r24
    4262:	ed 91       	ld	r30, X+
    4264:	fc 91       	ld	r31, X
    4266:	04 80       	ldd	r0, Z+4	; 0x04
    4268:	f5 81       	ldd	r31, Z+5	; 0x05
    426a:	e0 2d       	mov	r30, r0
    426c:	19 95       	eicall
}
    426e:	08 95       	ret

00004270 <_ZN24StreamHFA11xRS232WiFiCRC5writeEPKhj>:
}

// =================================================

size_t StreamHFA11xRS232WiFiCRC::write( const uint8_t* buffer , size_t size )
{
    4270:	ef 92       	push	r14
    4272:	ff 92       	push	r15
    4274:	0f 93       	push	r16
    4276:	1f 93       	push	r17
    4278:	cf 93       	push	r28
    427a:	df 93       	push	r29
    427c:	ec 01       	movw	r28, r24
    427e:	7b 01       	movw	r14, r22
    4280:	14 2f       	mov	r17, r20
    4282:	05 2f       	mov	r16, r21
	outgoingCRC.processBytes( (uint8_t*)buffer , size );
    4284:	41 96       	adiw	r24, 0x11	; 17
    4286:	0e 94 39 22 	call	0x4472	; 0x4472 <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh>
	underlyingStream->write( buffer , size );
    428a:	8c 85       	ldd	r24, Y+12	; 0x0c
    428c:	9d 85       	ldd	r25, Y+13	; 0x0d
    428e:	dc 01       	movw	r26, r24
    4290:	ed 91       	ld	r30, X+
    4292:	fc 91       	ld	r31, X
    4294:	02 80       	ldd	r0, Z+2	; 0x02
    4296:	f3 81       	ldd	r31, Z+3	; 0x03
    4298:	e0 2d       	mov	r30, r0
    429a:	b7 01       	movw	r22, r14
    429c:	41 2f       	mov	r20, r17
    429e:	50 2f       	mov	r21, r16
    42a0:	19 95       	eicall

	for( unsigned int i = 0 ; i < result ; i++ ) outgoingCRC.processByte( buffer[i] );

	return result;
	*/
}
    42a2:	81 2f       	mov	r24, r17
    42a4:	90 2f       	mov	r25, r16
    42a6:	df 91       	pop	r29
    42a8:	cf 91       	pop	r28
    42aa:	1f 91       	pop	r17
    42ac:	0f 91       	pop	r16
    42ae:	ff 90       	pop	r15
    42b0:	ef 90       	pop	r14
    42b2:	08 95       	ret

000042b4 <_ZN24StreamHFA11xRS232WiFiCRC5writeEh>:
}

// =================================================

size_t StreamHFA11xRS232WiFiCRC::write( uint8_t b )
{
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	ec 01       	movw	r28, r24
    42bc:	16 2f       	mov	r17, r22
	outgoingCRC.processByte( b );
    42be:	41 96       	adiw	r24, 0x11	; 17
    42c0:	0e 94 1e 22 	call	0x443c	; 0x443c <_ZN18HFA11xRS232WiFiCRC11processByteEh>
	return underlyingStream->write( b );
    42c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    42c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    42c8:	dc 01       	movw	r26, r24
    42ca:	ed 91       	ld	r30, X+
    42cc:	fc 91       	ld	r31, X
    42ce:	01 90       	ld	r0, Z+
    42d0:	f0 81       	ld	r31, Z
    42d2:	e0 2d       	mov	r30, r0
    42d4:	61 2f       	mov	r22, r17
    42d6:	19 95       	eicall

	if( result == 1 ) outgoingCRC.processByte( b );

	return result;
	*/
}
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	08 95       	ret

000042e0 <_ZN24StreamHFA11xRS232WiFiCRC4readEv>:
}

// =================================================

int StreamHFA11xRS232WiFiCRC::read()
{
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	8c 01       	movw	r16, r24
	int b = underlyingStream->read();
    42ea:	dc 01       	movw	r26, r24
    42ec:	1c 96       	adiw	r26, 0x0c	; 12
    42ee:	8d 91       	ld	r24, X+
    42f0:	9c 91       	ld	r25, X
    42f2:	1d 97       	sbiw	r26, 0x0d	; 13
    42f4:	dc 01       	movw	r26, r24
    42f6:	ed 91       	ld	r30, X+
    42f8:	fc 91       	ld	r31, X
    42fa:	06 80       	ldd	r0, Z+6	; 0x06
    42fc:	f7 81       	ldd	r31, Z+7	; 0x07
    42fe:	e0 2d       	mov	r30, r0
    4300:	19 95       	eicall
    4302:	ec 01       	movw	r28, r24

	if( b != -1 ) incommingCRC.processByte( b );
    4304:	bf ef       	ldi	r27, 0xFF	; 255
    4306:	8f 3f       	cpi	r24, 0xFF	; 255
    4308:	9b 07       	cpc	r25, r27
    430a:	29 f0       	breq	.+10     	; 0x4316 <_ZN24StreamHFA11xRS232WiFiCRC4readEv+0x36>
    430c:	c8 01       	movw	r24, r16
    430e:	4b 96       	adiw	r24, 0x1b	; 27
    4310:	6c 2f       	mov	r22, r28
    4312:	0e 94 1e 22 	call	0x443c	; 0x443c <_ZN18HFA11xRS232WiFiCRC11processByteEh>

	return b;
}
    4316:	ce 01       	movw	r24, r28
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	08 95       	ret

00004322 <_ZN24StreamHFA11xRS232WiFiCRC18resetInternalStateEv>:
}

// =================================================

void StreamHFA11xRS232WiFiCRC::resetInternalState()
{
    4322:	cf 93       	push	r28
    4324:	df 93       	push	r29
    4326:	ec 01       	movw	r28, r24

// =================================================

void StreamHFA11xRS232WiFiCRC::resetIncommingState()
{
	incommingCRC.reset();
    4328:	4b 96       	adiw	r24, 0x1b	; 27
    432a:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN18HFA11xRS232WiFiCRC5resetEv>

// =================================================

void StreamHFA11xRS232WiFiCRC::resetOutgoingState()
{
	outgoingCRC.reset();
    432e:	ce 01       	movw	r24, r28
    4330:	41 96       	adiw	r24, 0x11	; 17
    4332:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN18HFA11xRS232WiFiCRC5resetEv>

void StreamHFA11xRS232WiFiCRC::resetInternalState()
{
	resetIncommingState();
	resetOutgoingState();
}
    4336:	df 91       	pop	r29
    4338:	cf 91       	pop	r28
    433a:	08 95       	ret

0000433c <_ZN24StreamHFA11xRS232WiFiCRCC1EP6Stream>:
//	resetInternalState();
//}

// =================================================

StreamHFA11xRS232WiFiCRC::StreamHFA11xRS232WiFiCRC( Stream* _underlyingStream ) : dp( PSTR( "StreamHFA11xRS232WiFiCRC" ) )
    433c:	0f 93       	push	r16
    433e:	1f 93       	push	r17
    4340:	cf 93       	push	r28
    4342:	df 93       	push	r29
    4344:	ec 01       	movw	r28, r24
    4346:	8b 01       	movw	r16, r22
    4348:	1b 82       	std	Y+3, r1	; 0x03
    434a:	1a 82       	std	Y+2, r1	; 0x02
    434c:	88 ee       	ldi	r24, 0xE8	; 232
    434e:	93 e0       	ldi	r25, 0x03	; 3
    4350:	a0 e0       	ldi	r26, 0x00	; 0
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	8c 83       	std	Y+4, r24	; 0x04
    4356:	9d 83       	std	Y+5, r25	; 0x05
    4358:	ae 83       	std	Y+6, r26	; 0x06
    435a:	bf 83       	std	Y+7, r27	; 0x07
    435c:	85 e8       	ldi	r24, 0x85	; 133
    435e:	9e e0       	ldi	r25, 0x0E	; 14
    4360:	99 83       	std	Y+1, r25	; 0x01
    4362:	88 83       	st	Y, r24
    4364:	ce 01       	movw	r24, r28
    4366:	0e 96       	adiw	r24, 0x0e	; 14
    4368:	69 e5       	ldi	r22, 0x59	; 89
    436a:	7a e0       	ldi	r23, 0x0A	; 10
    436c:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    4370:	ce 01       	movw	r24, r28
    4372:	41 96       	adiw	r24, 0x11	; 17
    4374:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN18HFA11xRS232WiFiCRCC1Ev>
    4378:	ce 01       	movw	r24, r28
    437a:	4b 96       	adiw	r24, 0x1b	; 27
    437c:	0e 94 08 22 	call	0x4410	; 0x4410 <_ZN18HFA11xRS232WiFiCRCC1Ev>

// =================================================

void StreamHFA11xRS232WiFiCRC::setStream( Stream* _underlyingStream )
{
	underlyingStream = _underlyingStream;
    4380:	1d 87       	std	Y+13, r17	; 0x0d
    4382:	0c 87       	std	Y+12, r16	; 0x0c
// =================================================

StreamHFA11xRS232WiFiCRC::StreamHFA11xRS232WiFiCRC( Stream* _underlyingStream ) : dp( PSTR( "StreamHFA11xRS232WiFiCRC" ) )
{
	setStream( _underlyingStream );
	resetInternalState();
    4384:	ce 01       	movw	r24, r28
    4386:	0e 94 91 21 	call	0x4322	; 0x4322 <_ZN24StreamHFA11xRS232WiFiCRC18resetInternalStateEv>
}
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	0f 91       	pop	r16
    4392:	08 95       	ret

00004394 <_ZN24StreamHFA11xRS232WiFiCRC18resetOutgoingStateEv>:

// =================================================

void StreamHFA11xRS232WiFiCRC::resetOutgoingState()
{
	outgoingCRC.reset();
    4394:	41 96       	adiw	r24, 0x11	; 17
    4396:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN18HFA11xRS232WiFiCRC5resetEv>
}
    439a:	08 95       	ret

0000439c <_ZN24StreamHFA11xRS232WiFiCRC19resetIncommingStateEv>:

// =================================================

void StreamHFA11xRS232WiFiCRC::resetIncommingState()
{
	incommingCRC.reset();
    439c:	4b 96       	adiw	r24, 0x1b	; 27
    439e:	0e 94 17 22 	call	0x442e	; 0x442e <_ZN18HFA11xRS232WiFiCRC5resetEv>
}
    43a2:	08 95       	ret

000043a4 <_ZN24StreamHFA11xRS232WiFiCRC8writeCRCEv>:
{
	//static const PROGMEM prog_char functionName[] = "writeCRCToStream";

	//aln( "calculating CRC and write to stream" )

	return outgoingCRC.writeCRCBytesToStream( underlyingStream );
    43a4:	fc 01       	movw	r30, r24
    43a6:	64 85       	ldd	r22, Z+12	; 0x0c
    43a8:	75 85       	ldd	r23, Z+13	; 0x0d
    43aa:	41 96       	adiw	r24, 0x11	; 17
    43ac:	0e 94 e6 22 	call	0x45cc	; 0x45cc <_ZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6Stream>

	bool result = outgoingCRC.writeCRCBytesToStream( underlyingStream );

	return result;
	*/
}
    43b0:	08 95       	ret

000043b2 <_ZN24StreamHFA11xRS232WiFiCRC19isIncommingCRCMatchEv>:
}

// =================================================

bool StreamHFA11xRS232WiFiCRC::isIncommingCRCMatch()
{
    43b2:	ef 92       	push	r14
    43b4:	ff 92       	push	r15
    43b6:	0f 93       	push	r16
    43b8:	1f 93       	push	r17
    43ba:	cf 93       	push	r28
    43bc:	df 93       	push	r29
    43be:	ec 01       	movw	r28, r24

// =================================================

unsigned int StreamHFA11xRS232WiFiCRC::getCRC()
{
	return incommingCRC.getCRCSum();
    43c0:	4b 96       	adiw	r24, 0x1b	; 27
    43c2:	0e 94 7e 22 	call	0x44fc	; 0x44fc <_ZN18HFA11xRS232WiFiCRC9getCRCSumEv>
    43c6:	7c 01       	movw	r14, r24
	unsigned int crcCountedUsingIncimmingBytes = getCRC();


	unsigned int crcCountedUsingTwoLastBytes = 0;

	crcCountedUsingTwoLastBytes = (unsigned char)underlyingStream->read(); // first byte of crc (low byte of u16)
    43c8:	8c 85       	ldd	r24, Y+12	; 0x0c
    43ca:	9d 85       	ldd	r25, Y+13	; 0x0d
    43cc:	dc 01       	movw	r26, r24
    43ce:	ed 91       	ld	r30, X+
    43d0:	fc 91       	ld	r31, X
    43d2:	06 80       	ldd	r0, Z+6	; 0x06
    43d4:	f7 81       	ldd	r31, Z+7	; 0x07
    43d6:	e0 2d       	mov	r30, r0
    43d8:	19 95       	eicall
    43da:	08 2f       	mov	r16, r24
    43dc:	10 e0       	ldi	r17, 0x00	; 0

	crcCountedUsingTwoLastBytes += 256 * (unsigned char)underlyingStream->read(); // second byte of crc (high byte of u16)
    43de:	8c 85       	ldd	r24, Y+12	; 0x0c
    43e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    43e2:	dc 01       	movw	r26, r24
    43e4:	ed 91       	ld	r30, X+
    43e6:	fc 91       	ld	r31, X
    43e8:	06 80       	ldd	r0, Z+6	; 0x06
    43ea:	f7 81       	ldd	r31, Z+7	; 0x07
    43ec:	e0 2d       	mov	r30, r0
    43ee:	19 95       	eicall
    43f0:	38 2f       	mov	r19, r24
    43f2:	20 e0       	ldi	r18, 0x00	; 0
    43f4:	02 0f       	add	r16, r18
    43f6:	13 1f       	adc	r17, r19

	return crcCountedUsingTwoLastBytes == crcCountedUsingIncimmingBytes;
    43f8:	81 e0       	ldi	r24, 0x01	; 1
    43fa:	0e 15       	cp	r16, r14
    43fc:	1f 05       	cpc	r17, r15
    43fe:	09 f0       	breq	.+2      	; 0x4402 <_ZN24StreamHFA11xRS232WiFiCRC19isIncommingCRCMatchEv+0x50>
    4400:	80 e0       	ldi	r24, 0x00	; 0

	//return crcCountedUsingIncimmingBytes == ( underlyingStream->read() + (256 * underlyingStream->read()) );
}
    4402:	df 91       	pop	r29
    4404:	cf 91       	pop	r28
    4406:	1f 91       	pop	r17
    4408:	0f 91       	pop	r16
    440a:	ff 90       	pop	r15
    440c:	ef 90       	pop	r14
    440e:	08 95       	ret

00004410 <_ZN18HFA11xRS232WiFiCRCC1Ev>:

#include "HFA11xRS232WiFiCRC.h"

// =================================================

HFA11xRS232WiFiCRC::HFA11xRS232WiFiCRC() : dp( PSTR( "HFA11xRS232WiFiCRC" ) )
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	ec 01       	movw	r28, r24
    4416:	62 e7       	ldi	r22, 0x72	; 114
    4418:	7a e0       	ldi	r23, 0x0A	; 10
    441a:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>

// =================================================

void HFA11xRS232WiFiCRC::reset()
{
	crcCounter = 0;
    441e:	1e 82       	std	Y+6, r1	; 0x06
    4420:	1f 82       	std	Y+7, r1	; 0x07
    4422:	18 86       	std	Y+8, r1	; 0x08
    4424:	19 86       	std	Y+9, r1	; 0x09
	//lastprocessedByte = 0;
	//isLastprocessedByteSet = false;
	isFirstByteSet = false;
    4426:	1d 82       	std	Y+5, r1	; 0x05
// =================================================

HFA11xRS232WiFiCRC::HFA11xRS232WiFiCRC() : dp( PSTR( "HFA11xRS232WiFiCRC" ) )
{
	reset();
}
    4428:	df 91       	pop	r29
    442a:	cf 91       	pop	r28
    442c:	08 95       	ret

0000442e <_ZN18HFA11xRS232WiFiCRC5resetEv>:

// =================================================

void HFA11xRS232WiFiCRC::reset()
{
    442e:	fc 01       	movw	r30, r24
	crcCounter = 0;
    4430:	16 82       	std	Z+6, r1	; 0x06
    4432:	17 82       	std	Z+7, r1	; 0x07
    4434:	10 86       	std	Z+8, r1	; 0x08
    4436:	11 86       	std	Z+9, r1	; 0x09
	//lastprocessedByte = 0;
	//isLastprocessedByteSet = false;
	isFirstByteSet = false;
    4438:	15 82       	std	Z+5, r1	; 0x05
}
    443a:	08 95       	ret

0000443c <_ZN18HFA11xRS232WiFiCRC11processByteEh>:
}

// =================================================

void HFA11xRS232WiFiCRC::processByte( byte b )
{
    443c:	fc 01       	movw	r30, r24
	//static const PROGMEM prog_char functionName[] = "processByte";

	if( !isFirstByteSet )
    443e:	85 81       	ldd	r24, Z+5	; 0x05
    4440:	88 23       	and	r24, r24
    4442:	21 f4       	brne	.+8      	; 0x444c <_ZN18HFA11xRS232WiFiCRC11processByteEh+0x10>
	{
		arr[0] = b;
    4444:	63 83       	std	Z+3, r22	; 0x03
		isFirstByteSet = true;
    4446:	81 e0       	ldi	r24, 0x01	; 1
    4448:	85 83       	std	Z+5, r24	; 0x05
    444a:	08 95       	ret
	}
	else
	{
		arr[1] = b;
    444c:	64 83       	std	Z+4, r22	; 0x04
		char* arrPtr = &arr[0];
		unsigned int* u = (unsigned int*)arrPtr;
		crcCounter += *u;
    444e:	83 81       	ldd	r24, Z+3	; 0x03
    4450:	94 81       	ldd	r25, Z+4	; 0x04
    4452:	a0 e0       	ldi	r26, 0x00	; 0
    4454:	b0 e0       	ldi	r27, 0x00	; 0
    4456:	46 81       	ldd	r20, Z+6	; 0x06
    4458:	57 81       	ldd	r21, Z+7	; 0x07
    445a:	60 85       	ldd	r22, Z+8	; 0x08
    445c:	71 85       	ldd	r23, Z+9	; 0x09
    445e:	48 0f       	add	r20, r24
    4460:	59 1f       	adc	r21, r25
    4462:	6a 1f       	adc	r22, r26
    4464:	7b 1f       	adc	r23, r27
    4466:	46 83       	std	Z+6, r20	; 0x06
    4468:	57 83       	std	Z+7, r21	; 0x07
    446a:	60 87       	std	Z+8, r22	; 0x08
    446c:	71 87       	std	Z+9, r23	; 0x09

		isFirstByteSet = false;
    446e:	15 82       	std	Z+5, r1	; 0x05
    4470:	08 95       	ret

00004472 <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh>:
}

// =================================================

void HFA11xRS232WiFiCRC::processBytes( byte* buff , byte size )
{
    4472:	cf 92       	push	r12
    4474:	df 92       	push	r13
    4476:	ef 92       	push	r14
    4478:	ff 92       	push	r15
    447a:	0f 93       	push	r16
    447c:	1f 93       	push	r17
    447e:	cf 93       	push	r28
    4480:	8c 01       	movw	r16, r24
    4482:	c4 2f       	mov	r28, r20
	unsigned int* p = NULL;

	if( isFirstByteSet )
    4484:	fc 01       	movw	r30, r24
    4486:	85 81       	ldd	r24, Z+5	; 0x05
    4488:	88 23       	and	r24, r24
    448a:	41 f0       	breq	.+16     	; 0x449c <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh+0x2a>
	{
		processByte( buff[0] );
    448c:	c8 01       	movw	r24, r16
    448e:	fb 01       	movw	r30, r22
    4490:	61 91       	ld	r22, Z+
    4492:	7f 01       	movw	r14, r30
    4494:	0e 94 1e 22 	call	0x443c	; 0x443c <_ZN18HFA11xRS232WiFiCRC11processByteEh>
		p = (unsigned int*)(buff+1);
		size--;
    4498:	c1 50       	subi	r28, 0x01	; 1
    449a:	01 c0       	rjmp	.+2      	; 0x449e <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh+0x2c>
	}
	else
	{
		p = (unsigned int*)buff;
    449c:	7b 01       	movw	r14, r22
    449e:	67 01       	movw	r12, r14
    44a0:	2c 2f       	mov	r18, r28
    44a2:	14 c0       	rjmp	.+40     	; 0x44cc <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh+0x5a>
	}

	while( size > 1 )
	{
		crcCounter += *p++;
    44a4:	f6 01       	movw	r30, r12
    44a6:	41 91       	ld	r20, Z+
    44a8:	51 91       	ld	r21, Z+
    44aa:	6f 01       	movw	r12, r30
    44ac:	60 e0       	ldi	r22, 0x00	; 0
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	f8 01       	movw	r30, r16
    44b2:	86 81       	ldd	r24, Z+6	; 0x06
    44b4:	97 81       	ldd	r25, Z+7	; 0x07
    44b6:	a0 85       	ldd	r26, Z+8	; 0x08
    44b8:	b1 85       	ldd	r27, Z+9	; 0x09
    44ba:	84 0f       	add	r24, r20
    44bc:	95 1f       	adc	r25, r21
    44be:	a6 1f       	adc	r26, r22
    44c0:	b7 1f       	adc	r27, r23
    44c2:	86 83       	std	Z+6, r24	; 0x06
    44c4:	97 83       	std	Z+7, r25	; 0x07
    44c6:	a0 87       	std	Z+8, r26	; 0x08
    44c8:	b1 87       	std	Z+9, r27	; 0x09
		size -= 2;
    44ca:	22 50       	subi	r18, 0x02	; 2
	else
	{
		p = (unsigned int*)buff;
	}

	while( size > 1 )
    44cc:	22 30       	cpi	r18, 0x02	; 2
    44ce:	50 f7       	brcc	.-44     	; 0x44a4 <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh+0x32>
	isFirstByteSet = false;
}

// =================================================

void HFA11xRS232WiFiCRC::processBytes( byte* buff , byte size )
    44d0:	ec 2f       	mov	r30, r28
    44d2:	e6 95       	lsr	r30
    44d4:	f0 e0       	ldi	r31, 0x00	; 0
    44d6:	ee 0f       	add	r30, r30
    44d8:	ff 1f       	adc	r31, r31
    44da:	ee 0d       	add	r30, r14
    44dc:	ff 1d       	adc	r31, r15
	{
		crcCounter += *p++;
		size -= 2;
	}

	if( size > 0 )
    44de:	c0 ff       	sbrs	r28, 0
    44e0:	05 c0       	rjmp	.+10     	; 0x44ec <_ZN18HFA11xRS232WiFiCRC12processBytesEPhh+0x7a>
	{
		//crcCounter += *(byte*)p;

		arr[0] = *(byte*)p;
    44e2:	80 81       	ld	r24, Z
    44e4:	f8 01       	movw	r30, r16
    44e6:	83 83       	std	Z+3, r24	; 0x03
		isFirstByteSet = true;
    44e8:	81 e0       	ldi	r24, 0x01	; 1
    44ea:	85 83       	std	Z+5, r24	; 0x05
	}
	//else
	//{
	//	isFirstByteSet = false;
	//}
}
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	ef 90       	pop	r14
    44f6:	df 90       	pop	r13
    44f8:	cf 90       	pop	r12
    44fa:	08 95       	ret

000044fc <_ZN18HFA11xRS232WiFiCRC9getCRCSumEv>:
}

// =================================================

unsigned int HFA11xRS232WiFiCRC::getCRCSum()
{
    44fc:	cf 92       	push	r12
    44fe:	df 92       	push	r13
    4500:	ef 92       	push	r14
    4502:	ff 92       	push	r15
    4504:	cf 93       	push	r28
    4506:	df 93       	push	r29
    4508:	fc 01       	movw	r30, r24
	static const PROGMEM prog_char functionName[] = "getCRCSum";

	unsigned long localCRCcounter = crcCounter;
    450a:	86 81       	ldd	r24, Z+6	; 0x06
    450c:	97 81       	ldd	r25, Z+7	; 0x07
    450e:	a0 85       	ldd	r26, Z+8	; 0x08
    4510:	b1 85       	ldd	r27, Z+9	; 0x09

	if( isFirstByteSet ) localCRCcounter += arr[0];
    4512:	25 81       	ldd	r18, Z+5	; 0x05
    4514:	22 23       	and	r18, r18
    4516:	51 f0       	breq	.+20     	; 0x452c <_ZN18HFA11xRS232WiFiCRC9getCRCSumEv+0x30>
    4518:	43 81       	ldd	r20, Z+3	; 0x03
    451a:	55 27       	eor	r21, r21
    451c:	47 fd       	sbrc	r20, 7
    451e:	50 95       	com	r21
    4520:	65 2f       	mov	r22, r21
    4522:	75 2f       	mov	r23, r21
    4524:	84 0f       	add	r24, r20
    4526:	95 1f       	adc	r25, r21
    4528:	a6 1f       	adc	r26, r22
    452a:	b7 1f       	adc	r27, r23
	/*if( isLastprocessedByteSet )
	{
		localCRCcounter += lastprocessedByte;
	}*/

	localCRCcounter = ( localCRCcounter >> 16 ) + ( localCRCcounter & 0xffff );
    452c:	ad 01       	movw	r20, r26
    452e:	66 27       	eor	r22, r22
    4530:	77 27       	eor	r23, r23
    4532:	a0 70       	andi	r26, 0x00	; 0
    4534:	b0 70       	andi	r27, 0x00	; 0
    4536:	84 0f       	add	r24, r20
    4538:	95 1f       	adc	r25, r21
    453a:	a6 1f       	adc	r26, r22
    453c:	b7 1f       	adc	r27, r23
	localCRCcounter += ( localCRCcounter >> 16 );
    453e:	6d 01       	movw	r12, r26
    4540:	ee 24       	eor	r14, r14
    4542:	ff 24       	eor	r15, r15
    4544:	c8 0e       	add	r12, r24
    4546:	d9 1e       	adc	r13, r25
    4548:	ea 1e       	adc	r14, r26
    454a:	fb 1e       	adc	r15, r27
	//localCRCcounter = ~localCRCcounter;

	unsigned int crcSum = ~localCRCcounter;
    454c:	e6 01       	movw	r28, r12
    454e:	c0 95       	com	r28
    4550:	d0 95       	com	r29

	aln( "calculated crcSum = %u , localCRCcounter = %lu" , crcSum , localCRCcounter )
    4552:	82 81       	ldd	r24, Z+2	; 0x02
    4554:	8b 30       	cpi	r24, 0x0B	; 11
    4556:	90 f5       	brcc	.+100    	; 0x45bc <_ZN18HFA11xRS232WiFiCRC9getCRCSumEv+0xc0>
    4558:	cf 01       	movw	r24, r30
    455a:	6b e8       	ldi	r22, 0x8B	; 139
    455c:	72 e1       	ldi	r23, 0x12	; 18
    455e:	45 e8       	ldi	r20, 0x85	; 133
    4560:	5a e0       	ldi	r21, 0x0A	; 10
    4562:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4566:	8d b7       	in	r24, 0x3d	; 61
    4568:	9e b7       	in	r25, 0x3e	; 62
    456a:	08 97       	sbiw	r24, 0x08	; 8
    456c:	0f b6       	in	r0, 0x3f	; 63
    456e:	f8 94       	cli
    4570:	9e bf       	out	0x3e, r25	; 62
    4572:	0f be       	out	0x3f, r0	; 63
    4574:	8d bf       	out	0x3d, r24	; 61
    4576:	ed b7       	in	r30, 0x3d	; 61
    4578:	fe b7       	in	r31, 0x3e	; 62
    457a:	31 96       	adiw	r30, 0x01	; 1
    457c:	8f e8       	ldi	r24, 0x8F	; 143
    457e:	9a e0       	ldi	r25, 0x0A	; 10
    4580:	ad b7       	in	r26, 0x3d	; 61
    4582:	be b7       	in	r27, 0x3e	; 62
    4584:	12 96       	adiw	r26, 0x02	; 2
    4586:	9c 93       	st	X, r25
    4588:	8e 93       	st	-X, r24
    458a:	11 97       	sbiw	r26, 0x01	; 1
    458c:	d3 83       	std	Z+3, r29	; 0x03
    458e:	c2 83       	std	Z+2, r28	; 0x02
    4590:	c4 82       	std	Z+4, r12	; 0x04
    4592:	d5 82       	std	Z+5, r13	; 0x05
    4594:	e6 82       	std	Z+6, r14	; 0x06
    4596:	f7 82       	std	Z+7, r15	; 0x07
    4598:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    459c:	ed b7       	in	r30, 0x3d	; 61
    459e:	fe b7       	in	r31, 0x3e	; 62
    45a0:	36 96       	adiw	r30, 0x06	; 6
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	fe bf       	out	0x3e, r31	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	ed bf       	out	0x3d, r30	; 61
    45ac:	8e e8       	ldi	r24, 0x8E	; 142
    45ae:	92 e1       	ldi	r25, 0x12	; 18
    45b0:	92 83       	std	Z+2, r25	; 0x02
    45b2:	81 83       	std	Z+1, r24	; 0x01
    45b4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    45b8:	0f 90       	pop	r0
    45ba:	0f 90       	pop	r0

	return crcSum;
}
    45bc:	ce 01       	movw	r24, r28
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	ff 90       	pop	r15
    45c4:	ef 90       	pop	r14
    45c6:	df 90       	pop	r13
    45c8:	cf 90       	pop	r12
    45ca:	08 95       	ret

000045cc <_ZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6Stream>:

// =================================================

bool HFA11xRS232WiFiCRC::writeCRCBytesToStream( Stream* stream )
{
    45cc:	ef 92       	push	r14
    45ce:	ff 92       	push	r15
    45d0:	0f 93       	push	r16
    45d2:	1f 93       	push	r17
    45d4:	cf 93       	push	r28
    45d6:	df 93       	push	r29
    45d8:	ec 01       	movw	r28, r24
    45da:	7b 01       	movw	r14, r22
	static const PROGMEM prog_char functionName[] = "writeCRCBytesToStream";

	unsigned int crcSum = getCRCSum();
    45dc:	0e 94 7e 22 	call	0x44fc	; 0x44fc <_ZN18HFA11xRS232WiFiCRC9getCRCSumEv>
    45e0:	18 2f       	mov	r17, r24
    45e2:	09 2f       	mov	r16, r25
	unsigned char highByte = getCRCHighByte( crcSum );
	unsigned char lowByte = getCRCLowByte( crcSum );

	aln( "writing to stream crc highByte = %u, lowByte = %u (in order: first LOW %u, then HIGH byte %u)" , highByte , lowByte , lowByte , highByte )
    45e4:	8a 81       	ldd	r24, Y+2	; 0x02
    45e6:	8b 30       	cpi	r24, 0x0B	; 11
    45e8:	a0 f5       	brcc	.+104    	; 0x4652 <_ZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6Stream+0x86>
    45ea:	ce 01       	movw	r24, r28
    45ec:	6b e8       	ldi	r22, 0x8B	; 139
    45ee:	72 e1       	ldi	r23, 0x12	; 18
    45f0:	4e eb       	ldi	r20, 0xBE	; 190
    45f2:	5a e0       	ldi	r21, 0x0A	; 10
    45f4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    45f8:	8d b7       	in	r24, 0x3d	; 61
    45fa:	9e b7       	in	r25, 0x3e	; 62
    45fc:	0a 97       	sbiw	r24, 0x0a	; 10
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	f8 94       	cli
    4602:	9e bf       	out	0x3e, r25	; 62
    4604:	0f be       	out	0x3f, r0	; 63
    4606:	8d bf       	out	0x3d, r24	; 61
    4608:	ed b7       	in	r30, 0x3d	; 61
    460a:	fe b7       	in	r31, 0x3e	; 62
    460c:	31 96       	adiw	r30, 0x01	; 1
    460e:	84 ed       	ldi	r24, 0xD4	; 212
    4610:	9a e0       	ldi	r25, 0x0A	; 10
    4612:	ad b7       	in	r26, 0x3d	; 61
    4614:	be b7       	in	r27, 0x3e	; 62
    4616:	12 96       	adiw	r26, 0x02	; 2
    4618:	9c 93       	st	X, r25
    461a:	8e 93       	st	-X, r24
    461c:	11 97       	sbiw	r26, 0x01	; 1
    461e:	02 83       	std	Z+2, r16	; 0x02
    4620:	13 82       	std	Z+3, r1	; 0x03
    4622:	14 83       	std	Z+4, r17	; 0x04
    4624:	15 82       	std	Z+5, r1	; 0x05
    4626:	16 83       	std	Z+6, r17	; 0x06
    4628:	17 82       	std	Z+7, r1	; 0x07
    462a:	00 87       	std	Z+8, r16	; 0x08
    462c:	11 86       	std	Z+9, r1	; 0x09
    462e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4632:	ed b7       	in	r30, 0x3d	; 61
    4634:	fe b7       	in	r31, 0x3e	; 62
    4636:	38 96       	adiw	r30, 0x08	; 8
    4638:	0f b6       	in	r0, 0x3f	; 63
    463a:	f8 94       	cli
    463c:	fe bf       	out	0x3e, r31	; 62
    463e:	0f be       	out	0x3f, r0	; 63
    4640:	ed bf       	out	0x3d, r30	; 61
    4642:	8e e8       	ldi	r24, 0x8E	; 142
    4644:	92 e1       	ldi	r25, 0x12	; 18
    4646:	92 83       	std	Z+2, r25	; 0x02
    4648:	81 83       	std	Z+1, r24	; 0x01
    464a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    464e:	0f 90       	pop	r0
    4650:	0f 90       	pop	r0

	//stream->write( lowByte );
	//stream->write( highByte );

	return stream->write( lowByte ) + stream->write( highByte ) == 2;
    4652:	d7 01       	movw	r26, r14
    4654:	ed 91       	ld	r30, X+
    4656:	fc 91       	ld	r31, X
    4658:	01 90       	ld	r0, Z+
    465a:	f0 81       	ld	r31, Z
    465c:	e0 2d       	mov	r30, r0
    465e:	c7 01       	movw	r24, r14
    4660:	61 2f       	mov	r22, r17
    4662:	19 95       	eicall
    4664:	ec 01       	movw	r28, r24
    4666:	d7 01       	movw	r26, r14
    4668:	ed 91       	ld	r30, X+
    466a:	fc 91       	ld	r31, X
    466c:	01 90       	ld	r0, Z+
    466e:	f0 81       	ld	r31, Z
    4670:	e0 2d       	mov	r30, r0
    4672:	c7 01       	movw	r24, r14
    4674:	60 2f       	mov	r22, r16
    4676:	19 95       	eicall
    4678:	c8 0f       	add	r28, r24
    467a:	d9 1f       	adc	r29, r25
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	c2 30       	cpi	r28, 0x02	; 2
    4680:	d1 05       	cpc	r29, r1
    4682:	09 f0       	breq	.+2      	; 0x4686 <_ZN18HFA11xRS232WiFiCRC21writeCRCBytesToStreamEP6Stream+0xba>
    4684:	80 e0       	ldi	r24, 0x00	; 0
}
    4686:	df 91       	pop	r29
    4688:	cf 91       	pop	r28
    468a:	1f 91       	pop	r17
    468c:	0f 91       	pop	r16
    468e:	ff 90       	pop	r15
    4690:	ef 90       	pop	r14
    4692:	08 95       	ret

00004694 <_ZN38JsonMetadescriptionRestServiceRenderer34renderSpaceBetweenRestServicePatrsEP6Stream>:
// =================================================

void JsonMetadescriptionRestServiceRenderer::renderSpaceBetweenRestServicePatrs( Stream* stream )
{

}
    4694:	08 95       	ret

00004696 <_ZN38JsonMetadescriptionRestServiceRenderer17renderValueSetterEP6StreamP11RestService>:
// =================================================

void JsonMetadescriptionRestServiceRenderer::renderValueSetter( Stream* stream , RestService* restService )
{

}
    4696:	08 95       	ret

00004698 <_ZN38JsonMetadescriptionRestServiceRenderer22renderAfterRestServiceEP6Stream>:

// =================================================

void JsonMetadescriptionRestServiceRenderer::renderAfterRestService( Stream* stream )
{
    4698:	cb 01       	movw	r24, r22
	stream->write( "\r\n}\r\n" );
    469a:	6d e5       	ldi	r22, 0x5D	; 93
    469c:	73 e0       	ldi	r23, 0x03	; 3
    469e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    46a2:	08 95       	ret

000046a4 <_ZN38JsonMetadescriptionRestServiceRenderer23renderBeforeRestServiceEP6Stream>:
}

// =================================================

void JsonMetadescriptionRestServiceRenderer::renderBeforeRestService( Stream* stream )
{
    46a4:	cb 01       	movw	r24, r22
	stream->write( "{\r\n" );
    46a6:	63 e6       	ldi	r22, 0x63	; 99
    46a8:	73 e0       	ldi	r23, 0x03	; 3
    46aa:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    46ae:	08 95       	ret

000046b0 <_ZN38JsonMetadescriptionRestServiceRendererC1Ev>:

#include "JsonMetadescriptionRestServiceRenderer.h"

// =================================================

JsonMetadescriptionRestServiceRenderer::JsonMetadescriptionRestServiceRenderer()
    46b0:	25 e9       	ldi	r18, 0x95	; 149
    46b2:	3e e0       	ldi	r19, 0x0E	; 14
    46b4:	fc 01       	movw	r30, r24
    46b6:	31 83       	std	Z+1, r19	; 0x01
    46b8:	20 83       	st	Z, r18
{

}
    46ba:	08 95       	ret

000046bc <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh>:
}

// =================================================

void JsonMetadescriptionRestServiceRenderer::renderMetadescriptionTypeDescription( Stream* stream , unsigned char type )
{
    46bc:	cb 01       	movw	r24, r22
	if( type == REST_SERVICE_TYPE_READ_ONLY )
    46be:	44 23       	and	r20, r20
    46c0:	19 f4       	brne	.+6      	; 0x46c8 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0xc>
	{
		stream->write( "read_only" );
    46c2:	67 e6       	ldi	r22, 0x67	; 103
    46c4:	73 e0       	ldi	r23, 0x03	; 3
    46c6:	20 c0       	rjmp	.+64     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_BY_MYSELF )
    46c8:	41 30       	cpi	r20, 0x01	; 1
    46ca:	19 f4       	brne	.+6      	; 0x46d2 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x16>
	{
		stream->write( "updateable" );
    46cc:	61 e7       	ldi	r22, 0x71	; 113
    46ce:	73 e0       	ldi	r23, 0x03	; 3
    46d0:	1b c0       	rjmp	.+54     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_TEXT )
    46d2:	42 30       	cpi	r20, 0x02	; 2
    46d4:	19 f4       	brne	.+6      	; 0x46dc <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x20>
	{
		stream->write( "updateable-text" );
    46d6:	6c e7       	ldi	r22, 0x7C	; 124
    46d8:	73 e0       	ldi	r23, 0x03	; 3
    46da:	16 c0       	rjmp	.+44     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN )
    46dc:	43 30       	cpi	r20, 0x03	; 3
    46de:	19 f4       	brne	.+6      	; 0x46e6 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x2a>
	{
		stream->write( "updateable-boolean" );
    46e0:	6c e8       	ldi	r22, 0x8C	; 140
    46e2:	73 e0       	ldi	r23, 0x03	; 3
    46e4:	11 c0       	rjmp	.+34     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF )
    46e6:	44 30       	cpi	r20, 0x04	; 4
    46e8:	19 f4       	brne	.+6      	; 0x46f0 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x34>
	{
		stream->write( "updateable-boolean-on_off" );
    46ea:	6f e9       	ldi	r22, 0x9F	; 159
    46ec:	73 e0       	ldi	r23, 0x03	; 3
    46ee:	0c c0       	rjmp	.+24     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONE_TIME_EXECUTION )
    46f0:	45 30       	cpi	r20, 0x05	; 5
    46f2:	19 f4       	brne	.+6      	; 0x46fa <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x3e>
	{
		stream->write( "updateable-boolean-one_time_execution" );
    46f4:	69 eb       	ldi	r22, 0xB9	; 185
    46f6:	73 e0       	ldi	r23, 0x03	; 3
    46f8:	07 c0       	rjmp	.+14     	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	if( type == REST_SERVICE_TYPE_UPDATEABLE_INT )
    46fa:	46 30       	cpi	r20, 0x06	; 6
    46fc:	19 f4       	brne	.+6      	; 0x4704 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x48>
	{
		stream->write( "updateable-int" );
    46fe:	6f ed       	ldi	r22, 0xDF	; 223
    4700:	73 e0       	ldi	r23, 0x03	; 3
    4702:	02 c0       	rjmp	.+4      	; 0x4708 <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh+0x4c>
	}
	else
	{
		stream->write( "unknown" );
    4704:	6e ee       	ldi	r22, 0xEE	; 238
    4706:	73 e0       	ldi	r23, 0x03	; 3
    4708:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
    470c:	08 95       	ret

0000470e <_ZN38JsonMetadescriptionRestServiceRenderer14renderGetValueEP6StreamP11RestService>:
}

// =================================================

void JsonMetadescriptionRestServiceRenderer::renderGetValue( Stream* stream , RestService* restService)
{
    470e:	ef 92       	push	r14
    4710:	ff 92       	push	r15
    4712:	0f 93       	push	r16
    4714:	1f 93       	push	r17
    4716:	cf 93       	push	r28
    4718:	df 93       	push	r29
    471a:	7c 01       	movw	r14, r24
    471c:	eb 01       	movw	r28, r22
    471e:	8a 01       	movw	r16, r20
	stream->write( "\"id\":\"" );
    4720:	cb 01       	movw	r24, r22
    4722:	66 ef       	ldi	r22, 0xF6	; 246
    4724:	73 e0       	ldi	r23, 0x03	; 3
    4726:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->print( restService->id );
    472a:	ce 01       	movw	r24, r28
    472c:	d8 01       	movw	r26, r16
    472e:	12 96       	adiw	r26, 0x02	; 2
    4730:	6c 91       	ld	r22, X
    4732:	4a e0       	ldi	r20, 0x0A	; 10
    4734:	50 e0       	ldi	r21, 0x00	; 0
    4736:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <_ZN5Print5printEhi>
	stream->write( "\"," );
    473a:	ce 01       	movw	r24, r28
    473c:	6d ef       	ldi	r22, 0xFD	; 253
    473e:	73 e0       	ldi	r23, 0x03	; 3
    4740:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "\r\n\"name\":\"" );
    4744:	ce 01       	movw	r24, r28
    4746:	60 e0       	ldi	r22, 0x00	; 0
    4748:	74 e0       	ldi	r23, 0x04	; 4
    474a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( restService->name );
    474e:	f8 01       	movw	r30, r16
    4750:	63 81       	ldd	r22, Z+3	; 0x03
    4752:	74 81       	ldd	r23, Z+4	; 0x04
    4754:	ce 01       	movw	r24, r28
    4756:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( "\"," );
    475a:	ce 01       	movw	r24, r28
    475c:	6d ef       	ldi	r22, 0xFD	; 253
    475e:	73 e0       	ldi	r23, 0x03	; 3
    4760:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "\r\n\"type\":\"" );
    4764:	ce 01       	movw	r24, r28
    4766:	6b e0       	ldi	r22, 0x0B	; 11
    4768:	74 e0       	ldi	r23, 0x04	; 4
    476a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	renderMetadescriptionTypeDescription( stream , restService->type );
    476e:	c7 01       	movw	r24, r14
    4770:	be 01       	movw	r22, r28
    4772:	d8 01       	movw	r26, r16
    4774:	15 96       	adiw	r26, 0x05	; 5
    4776:	4c 91       	ld	r20, X
    4778:	0e 94 5e 23 	call	0x46bc	; 0x46bc <_ZN38JsonMetadescriptionRestServiceRenderer36renderMetadescriptionTypeDescriptionEP6Streamh>
	stream->write( "\"" );
    477c:	ce 01       	movw	r24, r28
    477e:	66 e1       	ldi	r22, 0x16	; 22
    4780:	74 e0       	ldi	r23, 0x04	; 4
    4782:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_INT )
    4786:	f8 01       	movw	r30, r16
    4788:	85 81       	ldd	r24, Z+5	; 0x05
    478a:	86 30       	cpi	r24, 0x06	; 6
    478c:	59 f5       	brne	.+86     	; 0x47e4 <_ZN38JsonMetadescriptionRestServiceRenderer14renderGetValueEP6StreamP11RestService+0xd6>
	{
		stream->write( "\r\n\"minValue\":\"" );
    478e:	ce 01       	movw	r24, r28
    4790:	68 e1       	ldi	r22, 0x18	; 24
    4792:	74 e0       	ldi	r23, 0x04	; 4
    4794:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
		stream->print( restService->getIntMinValue() );
    4798:	d8 01       	movw	r26, r16
    479a:	ed 91       	ld	r30, X+
    479c:	fc 91       	ld	r31, X
    479e:	04 84       	ldd	r0, Z+12	; 0x0c
    47a0:	f5 85       	ldd	r31, Z+13	; 0x0d
    47a2:	e0 2d       	mov	r30, r0
    47a4:	c8 01       	movw	r24, r16
    47a6:	19 95       	eicall
    47a8:	bc 01       	movw	r22, r24
    47aa:	ce 01       	movw	r24, r28
    47ac:	4a e0       	ldi	r20, 0x0A	; 10
    47ae:	50 e0       	ldi	r21, 0x00	; 0
    47b0:	0e 94 f7 45 	call	0x8bee	; 0x8bee <_ZN5Print5printEii>
		stream->write( "\"," );
    47b4:	ce 01       	movw	r24, r28
    47b6:	6d ef       	ldi	r22, 0xFD	; 253
    47b8:	73 e0       	ldi	r23, 0x03	; 3
    47ba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

		stream->write( "\r\n\"maxValue\":\"" );
    47be:	ce 01       	movw	r24, r28
    47c0:	67 e2       	ldi	r22, 0x27	; 39
    47c2:	74 e0       	ldi	r23, 0x04	; 4
    47c4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
		stream->print( restService->getIntMaxValue() );
    47c8:	d8 01       	movw	r26, r16
    47ca:	ed 91       	ld	r30, X+
    47cc:	fc 91       	ld	r31, X
    47ce:	06 84       	ldd	r0, Z+14	; 0x0e
    47d0:	f7 85       	ldd	r31, Z+15	; 0x0f
    47d2:	e0 2d       	mov	r30, r0
    47d4:	c8 01       	movw	r24, r16
    47d6:	19 95       	eicall
    47d8:	bc 01       	movw	r22, r24
    47da:	ce 01       	movw	r24, r28
    47dc:	4a e0       	ldi	r20, 0x0A	; 10
    47de:	50 e0       	ldi	r21, 0x00	; 0
    47e0:	0e 94 f7 45 	call	0x8bee	; 0x8bee <_ZN5Print5printEii>
	}
}
    47e4:	df 91       	pop	r29
    47e6:	cf 91       	pop	r28
    47e8:	1f 91       	pop	r17
    47ea:	0f 91       	pop	r16
    47ec:	ff 90       	pop	r15
    47ee:	ef 90       	pop	r14
    47f0:	08 95       	ret

000047f2 <_ZN16JsonPageRenderer23renderBeforeRestServiceEP6Stream>:
// =================================================

void JsonPageRenderer::renderBeforeRestService( Stream* stream )
{
	//stream->write( "{\r\n" );
}
    47f2:	08 95       	ret

000047f4 <_ZN16JsonPageRenderer22renderAfterRestServiceEP6Stream>:
// =================================================

void JsonPageRenderer::renderAfterRestService( Stream* stream )
{
	//stream->write( "}" );
}
    47f4:	08 95       	ret

000047f6 <_ZN16JsonPageRenderer16renderPageBottomEP6Stream>:

// =================================================

void JsonPageRenderer::renderPageBottom( Stream* stream )
{
    47f6:	cb 01       	movw	r24, r22
	stream->write( "]" );
    47f8:	66 e3       	ldi	r22, 0x36	; 54
    47fa:	74 e0       	ldi	r23, 0x04	; 4
    47fc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	//stream->write( "\r\n\r\n" );
	//stream->write( "\r\n\r\n" );
	//stream->write( "\r\n\r\n" );
}
    4800:	08 95       	ret

00004802 <_ZN16JsonPageRenderer13renderPageTopEP6Stream>:
}

// =================================================

void JsonPageRenderer::renderPageTop( Stream* stream )
{
    4802:	cb 01       	movw	r24, r22
	stream->write( "[\r\n" );
    4804:	68 e3       	ldi	r22, 0x38	; 56
    4806:	74 e0       	ldi	r23, 0x04	; 4
    4808:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    480c:	08 95       	ret

0000480e <_ZN16JsonPageRenderer16renderHttpHeaderEP6Stream>:
}

// =================================================

void JsonPageRenderer::renderHttpHeader( Stream* stream )
{
    480e:	cf 93       	push	r28
    4810:	df 93       	push	r29
    4812:	eb 01       	movw	r28, r22
	if( pageRendererTimeMeasurement != NULL ) pageRendererTimeMeasurement->saveTime();
    4814:	fc 01       	movw	r30, r24
    4816:	82 81       	ldd	r24, Z+2	; 0x02
    4818:	93 81       	ldd	r25, Z+3	; 0x03
    481a:	00 97       	sbiw	r24, 0x00	; 0
    481c:	11 f0       	breq	.+4      	; 0x4822 <_ZN16JsonPageRenderer16renderHttpHeaderEP6Stream+0x14>
    481e:	0e 94 2a 3b 	call	0x7654	; 0x7654 <_ZN15TimeMeasurement8saveTimeEv>

	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nConnection: close\r\n\r\n" );
	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\nContent-length: -1\r\n\r\n" );
	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\n\r\n" );

	stream->write( "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nTransfer-Encoding: chunked\r\nConnection: close\r\n\r\n" );
    4822:	ce 01       	movw	r24, r28
    4824:	6c e3       	ldi	r22, 0x3C	; 60
    4826:	74 e0       	ldi	r23, 0x04	; 4
    4828:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    482c:	df 91       	pop	r29
    482e:	cf 91       	pop	r28
    4830:	08 95       	ret

00004832 <_ZN16JsonPageRendererC1EP15TimeMeasurement>:

#include "JsonPageRenderer.h"

// =================================================

JsonPageRenderer::JsonPageRenderer( TimeMeasurement* _pageRendererTimeMeasurement )
    4832:	fc 01       	movw	r30, r24
    4834:	83 ea       	ldi	r24, 0xA3	; 163
    4836:	9e e0       	ldi	r25, 0x0E	; 14
    4838:	91 83       	std	Z+1, r25	; 0x01
    483a:	80 83       	st	Z, r24
{
	pageRendererTimeMeasurement = _pageRendererTimeMeasurement;
    483c:	73 83       	std	Z+3, r23	; 0x03
    483e:	62 83       	std	Z+2, r22	; 0x02
}
    4840:	08 95       	ret

00004842 <_ZN23JsonRestServiceRenderer34renderSpaceBetweenRestServicePatrsEP6Stream>:
// =================================================

void JsonRestServiceRenderer::renderSpaceBetweenRestServicePatrs( Stream* stream )
{

}
    4842:	08 95       	ret

00004844 <_ZN23JsonRestServiceRenderer17renderValueSetterEP6StreamP11RestService>:
// =================================================

void JsonRestServiceRenderer::renderValueSetter( Stream* stream , RestService* restService )
{

}
    4844:	08 95       	ret

00004846 <_ZN23JsonRestServiceRenderer22renderAfterRestServiceEP6Stream>:

// =================================================

void JsonRestServiceRenderer::renderAfterRestService( Stream* stream )
{
    4846:	cb 01       	movw	r24, r22
	stream->write( "\r\n}\r\n" );
    4848:	6f e9       	ldi	r22, 0x9F	; 159
    484a:	74 e0       	ldi	r23, 0x04	; 4
    484c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    4850:	08 95       	ret

00004852 <_ZN23JsonRestServiceRenderer14renderGetValueEP6StreamP11RestService>:
}

// =================================================

void JsonRestServiceRenderer::renderGetValue( Stream* stream , RestService* restService)
{
    4852:	ef 92       	push	r14
    4854:	ff 92       	push	r15
    4856:	0f 93       	push	r16
    4858:	1f 93       	push	r17
    485a:	cf 93       	push	r28
    485c:	df 93       	push	r29
    485e:	eb 01       	movw	r28, r22
    4860:	8a 01       	movw	r16, r20
	stream->write( "\"" );
    4862:	85 ea       	ldi	r24, 0xA5	; 165
    4864:	e8 2e       	mov	r14, r24
    4866:	84 e0       	ldi	r24, 0x04	; 4
    4868:	f8 2e       	mov	r15, r24
    486a:	cb 01       	movw	r24, r22
    486c:	b7 01       	movw	r22, r14
    486e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( restService->name );
    4872:	d8 01       	movw	r26, r16
    4874:	13 96       	adiw	r26, 0x03	; 3
    4876:	6d 91       	ld	r22, X+
    4878:	7c 91       	ld	r23, X
    487a:	14 97       	sbiw	r26, 0x04	; 4
    487c:	ce 01       	movw	r24, r28
    487e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( "\":\"" );
    4882:	ce 01       	movw	r24, r28
    4884:	67 ea       	ldi	r22, 0xA7	; 167
    4886:	74 e0       	ldi	r23, 0x04	; 4
    4888:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	restService->writeValueToStream( stream );
    488c:	d8 01       	movw	r26, r16
    488e:	ed 91       	ld	r30, X+
    4890:	fc 91       	ld	r31, X
    4892:	01 90       	ld	r0, Z+
    4894:	f0 81       	ld	r31, Z
    4896:	e0 2d       	mov	r30, r0
    4898:	c8 01       	movw	r24, r16
    489a:	be 01       	movw	r22, r28
    489c:	19 95       	eicall
	stream->write( "\"" );
    489e:	ce 01       	movw	r24, r28
    48a0:	b7 01       	movw	r22, r14
    48a2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    48a6:	df 91       	pop	r29
    48a8:	cf 91       	pop	r28
    48aa:	1f 91       	pop	r17
    48ac:	0f 91       	pop	r16
    48ae:	ff 90       	pop	r15
    48b0:	ef 90       	pop	r14
    48b2:	08 95       	ret

000048b4 <_ZN23JsonRestServiceRenderer23renderBeforeRestServiceEP6Stream>:
}

// =================================================

void JsonRestServiceRenderer::renderBeforeRestService( Stream* stream )
{
    48b4:	cb 01       	movw	r24, r22
	stream->write( "{\r\n" );
    48b6:	6b ea       	ldi	r22, 0xAB	; 171
    48b8:	74 e0       	ldi	r23, 0x04	; 4
    48ba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    48be:	08 95       	ret

000048c0 <_ZN23JsonRestServiceRendererC1Ev>:

#include "JsonRestServiceRenderer.h"

// =================================================

JsonRestServiceRenderer::JsonRestServiceRenderer()
    48c0:	21 eb       	ldi	r18, 0xB1	; 177
    48c2:	3e e0       	ldi	r19, 0x0E	; 14
    48c4:	fc 01       	movw	r30, r24
    48c6:	31 83       	std	Z+1, r19	; 0x01
    48c8:	20 83       	st	Z, r18
{

}
    48ca:	08 95       	ret

000048cc <_ZN20NameValueRestService18writeValueToStreamEP6Stream>:
}

// =================================================

void NameValueRestService::writeValueToStream( Stream* stream )
{
    48cc:	cf 93       	push	r28
    48ce:	df 93       	push	r29
    48d0:	fc 01       	movw	r30, r24
    48d2:	db 01       	movw	r26, r22
	stream->write( value );
    48d4:	66 81       	ldd	r22, Z+6	; 0x06
    48d6:	77 81       	ldd	r23, Z+7	; 0x07
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    48d8:	fb 01       	movw	r30, r22
    48da:	ef 01       	movw	r28, r30
    48dc:	09 90       	ld	r0, Y+
    48de:	00 20       	and	r0, r0
    48e0:	e9 f7       	brne	.-6      	; 0x48dc <_ZN20NameValueRestService18writeValueToStreamEP6Stream+0x10>
    48e2:	ae 01       	movw	r20, r28
    48e4:	41 50       	subi	r20, 0x01	; 1
    48e6:	50 40       	sbci	r21, 0x00	; 0
    48e8:	4e 1b       	sub	r20, r30
    48ea:	5f 0b       	sbc	r21, r31
    48ec:	ed 91       	ld	r30, X+
    48ee:	fc 91       	ld	r31, X
    48f0:	11 97       	sbiw	r26, 0x01	; 1
    48f2:	02 80       	ldd	r0, Z+2	; 0x02
    48f4:	f3 81       	ldd	r31, Z+3	; 0x03
    48f6:	e0 2d       	mov	r30, r0
    48f8:	cd 01       	movw	r24, r26
    48fa:	19 95       	eicall
}
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	08 95       	ret

00004902 <_ZN20NameValueRestServiceC1EhPKcS1_>:

#include "NameValueRestService.h"

// =================================================

NameValueRestService::NameValueRestService( unsigned char _id , const char* _name , const char* _value ) : RestService( _id , _name , REST_SERVICE_TYPE_READ_ONLY ) //, p(_p)
    4902:	0f 93       	push	r16
    4904:	1f 93       	push	r17
    4906:	cf 93       	push	r28
    4908:	df 93       	push	r29
    490a:	ec 01       	movw	r28, r24
    490c:	89 01       	movw	r16, r18
    490e:	20 e0       	ldi	r18, 0x00	; 0
    4910:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    4914:	8f eb       	ldi	r24, 0xBF	; 191
    4916:	9e e0       	ldi	r25, 0x0E	; 14
    4918:	99 83       	std	Y+1, r25	; 0x01
    491a:	88 83       	st	Y, r24
{
	value = _value;
    491c:	1f 83       	std	Y+7, r17	; 0x07
    491e:	0e 83       	std	Y+6, r16	; 0x06
}
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	1f 91       	pop	r17
    4926:	0f 91       	pop	r16
    4928:	08 95       	ret

0000492a <_ZN10RestServer18resetInternalStateEv>:
}

// =================================================

void RestServer::resetInternalState()
{
    492a:	cf 93       	push	r28
    492c:	df 93       	push	r29
    492e:	ec 01       	movw	r28, r24
	currentSubTask = &determinateHttpMethodSubTask;
    4930:	8c 53       	subi	r24, 0x3C	; 60
    4932:	9f 4f       	sbci	r25, 0xFF	; 255
    4934:	9d 8f       	std	Y+29, r25	; 0x1d
    4936:	8c 8f       	std	Y+28, r24	; 0x1c
	currentSubTask->resetInternalState();
    4938:	dc 01       	movw	r26, r24
    493a:	ed 91       	ld	r30, X+
    493c:	fc 91       	ld	r31, X
    493e:	02 80       	ldd	r0, Z+2	; 0x02
    4940:	f3 81       	ldd	r31, Z+3	; 0x03
    4942:	e0 2d       	mov	r30, r0
    4944:	19 95       	eicall

	streamReadBytesCounting.resetInternalState();
    4946:	ce 01       	movw	r24, r28
    4948:	8f 51       	subi	r24, 0x1F	; 31
    494a:	9f 4f       	sbci	r25, 0xFF	; 255
    494c:	0e 94 0e 38 	call	0x701c	; 0x701c <_ZN23StreamReadBytesCounting18resetInternalStateEv>
	isTimeoutWatcherStarted = false;
    4950:	cd 50       	subi	r28, 0x0D	; 13
    4952:	df 4f       	sbci	r29, 0xFF	; 255
    4954:	18 82       	st	Y, r1
}
    4956:	df 91       	pop	r29
    4958:	cf 91       	pop	r28
    495a:	08 95       	ret

0000495c <_ZN10RestServerC1EPP18ServiceDescriptionhP12PageRendererS4_PKcS6_S1_bPbPhhP9AnyBufferIhhEPch>:

#include "RestServer.h"

// =================================================

RestServer::RestServer( ServiceDescription** _serviceDescrptions , unsigned char _serviceDescrptionsCount , PageRenderer* _htmlPageRenderer , PageRenderer* _jsonPageRenderer , const char* jsonActivatorURLPrefix , const char* metadescriptionActivatorURLPrefix , ServiceDescription* readHttpPathSubTaskArrayForSelectdServices , bool _blockToServeIncommingConnectionToTheEnd , bool* readHttpParameterNameSubTaskArrayForMatchServiceNames , unsigned char* readHttpParameterValueSubTaskArrayForValueBytes , unsigned char readHttpParameterValueSubTaskArrayForValueBytesSize , AnyBuffer< byte , byte >* sendResponseSubTaskChunkedStreamBuffer , char* _buffer , unsigned char _bufferSize )
    495c:	3f 92       	push	r3
    495e:	4f 92       	push	r4
    4960:	5f 92       	push	r5
    4962:	6f 92       	push	r6
    4964:	7f 92       	push	r7
    4966:	8f 92       	push	r8
    4968:	9f 92       	push	r9
    496a:	af 92       	push	r10
    496c:	bf 92       	push	r11
    496e:	cf 92       	push	r12
    4970:	df 92       	push	r13
    4972:	ef 92       	push	r14
    4974:	ff 92       	push	r15
    4976:	0f 93       	push	r16
    4978:	1f 93       	push	r17
    497a:	cf 93       	push	r28
    497c:	df 93       	push	r29
    497e:	cd b7       	in	r28, 0x3d	; 61
    4980:	de b7       	in	r29, 0x3e	; 62
    4982:	60 97       	sbiw	r28, 0x10	; 16
    4984:	0f b6       	in	r0, 0x3f	; 63
    4986:	f8 94       	cli
    4988:	de bf       	out	0x3e, r29	; 62
    498a:	0f be       	out	0x3f, r0	; 63
    498c:	cd bf       	out	0x3d, r28	; 61
    498e:	3c 01       	movw	r6, r24
    4990:	7a 83       	std	Y+2, r23	; 0x02
    4992:	69 83       	std	Y+1, r22	; 0x01
    4994:	34 2e       	mov	r3, r20
    4996:	3c 83       	std	Y+4, r19	; 0x04
    4998:	2b 83       	std	Y+3, r18	; 0x03
    499a:	b8 8a       	std	Y+16, r11	; 0x10
    499c:	af 86       	std	Y+15, r10	; 0x0f
    499e:	98 2c       	mov	r9, r8
	  readHttpParameterValueSubTask( &errorSubTask , MAX_TIME_FOR_READING_HTTP_PARAMETER_VALUE , readHttpParameterValueSubTaskArrayForValueBytes , readHttpParameterValueSubTaskArrayForValueBytesSize ) ,
	  readHttpParameterNameSubTask( &errorSubTask , MAX_TIME_FOR_READING_HTTP_PARAMETER_NAME , MAX_BYTES_COUNT_WHILE_READING_HTTP_PARAMETER_NAME , _serviceDescrptions , _serviceDescrptionsCount-2 , readHttpParameterNameSubTaskArrayForMatchServiceNames , &readHttpParameterValueSubTask ) ,
	  readHttpPathSubTask( &errorSubTask , &skipBytesUntilSequenceSubTask , &readHttpParameterNameSubTask , &sendResponseSubTask , _serviceDescrptions , _serviceDescrptionsCount , readHttpPathSubTaskArrayForSelectdServices , !_blockToServeIncommingConnectionToTheEnd , _buffer , _bufferSize) ,
	  determinateHttpMethodSubTask( &errorSubTask , &skipBytesUntilSequenceSubTask , &readHttpPathSubTask ) ,
	  jsonActivatorRestService( 255 , jsonActivatorURLPrefix , 0 ) ,
	  metadescriptionActivatorRestService( 255 , metadescriptionActivatorURLPrefix , 0 )
    49a0:	62 e3       	ldi	r22, 0x32	; 50
    49a2:	7b e0       	ldi	r23, 0x0B	; 11
    49a4:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    49a8:	93 01       	movw	r18, r6
    49aa:	2c 5f       	subi	r18, 0xFC	; 252
    49ac:	3f 4f       	sbci	r19, 0xFF	; 255
    49ae:	38 87       	std	Y+8, r19	; 0x08
    49b0:	2f 83       	std	Y+7, r18	; 0x07
    49b2:	c9 01       	movw	r24, r18
    49b4:	6f ef       	ldi	r22, 0xFF	; 255
    49b6:	a7 01       	movw	r20, r14
    49b8:	20 e0       	ldi	r18, 0x00	; 0
    49ba:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>
    49be:	c3 01       	movw	r24, r6
    49c0:	0e 96       	adiw	r24, 0x0e	; 14
    49c2:	9a 87       	std	Y+10, r25	; 0x0a
    49c4:	89 87       	std	Y+9, r24	; 0x09
    49c6:	6f ef       	ldi	r22, 0xFF	; 255
    49c8:	a6 01       	movw	r20, r12
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	0e 94 6d 28 	call	0x50da	; 0x50da <_ZN11RestServiceC1EhPKch>

#include "RestServerSubTask.h"

// =================================================

class ErrorSubTask : public RestServerSubTask
    49d0:	81 e2       	ldi	r24, 0x21	; 33
    49d2:	9f e0       	ldi	r25, 0x0F	; 15
    49d4:	f3 01       	movw	r30, r6
    49d6:	91 8f       	std	Z+25, r25	; 0x19
    49d8:	80 8f       	std	Z+24, r24	; 0x18
    49da:	93 01       	movw	r18, r6
    49dc:	22 5e       	subi	r18, 0xE2	; 226
    49de:	3f 4f       	sbci	r19, 0xFF	; 255
    49e0:	3e 83       	std	Y+6, r19	; 0x06
    49e2:	2d 83       	std	Y+5, r18	; 0x05
    49e4:	68 e1       	ldi	r22, 0x18	; 24
    49e6:	46 2e       	mov	r4, r22
    49e8:	51 2c       	mov	r5, r1
    49ea:	46 0c       	add	r4, r6
    49ec:	57 1c       	adc	r5, r7
    49ee:	c9 01       	movw	r24, r18
    49f0:	b2 01       	movw	r22, r4
    49f2:	0e 94 81 2a 	call	0x5502	; 0x5502 <_ZN29SkipBytesUntilSequenceSubTaskC1EP17RestServerSubTask>
    49f6:	c3 01       	movw	r24, r6
    49f8:	cf 96       	adiw	r24, 0x3f	; 63
    49fa:	9c 87       	std	Y+12, r25	; 0x0c
    49fc:	8b 87       	std	Y+11, r24	; 0x0b
    49fe:	88 24       	eor	r8, r8
    4a00:	83 94       	inc	r8
    4a02:	89 24       	eor	r8, r9
    4a04:	b2 01       	movw	r22, r4
    4a06:	4b 81       	ldd	r20, Y+3	; 0x03
    4a08:	5c 81       	ldd	r21, Y+4	; 0x04
    4a0a:	98 01       	movw	r18, r16
    4a0c:	08 2d       	mov	r16, r8
    4a0e:	ea a4       	ldd	r14, Y+42	; 0x2a
    4a10:	fb a4       	ldd	r15, Y+43	; 0x2b
    4a12:	0e 94 ca 29 	call	0x5394	; 0x5394 <_ZN19SendResponseSubTaskC1EP17RestServerSubTaskP12PageRendererS3_bP9AnyBufferIhhE>
    4a16:	a4 e6       	ldi	r26, 0x64	; 100
    4a18:	aa 2e       	mov	r10, r26
    4a1a:	b1 2c       	mov	r11, r1
    4a1c:	a6 0c       	add	r10, r6
    4a1e:	b7 1c       	adc	r11, r7
    4a20:	c5 01       	movw	r24, r10
    4a22:	b2 01       	movw	r22, r4
    4a24:	48 e8       	ldi	r20, 0x88	; 136
    4a26:	53 e1       	ldi	r21, 0x13	; 19
    4a28:	2f a1       	ldd	r18, Y+39	; 0x27
    4a2a:	38 a5       	ldd	r19, Y+40	; 0x28
    4a2c:	09 a5       	ldd	r16, Y+41	; 0x29
    4a2e:	0e 94 61 30 	call	0x60c2	; 0x60c2 <_ZN29ReadHttpParameterValueSubTaskC1EP17RestServerSubTaskjPhh>
    4a32:	f3 01       	movw	r30, r6
    4a34:	e3 58       	subi	r30, 0x83	; 131
    4a36:	ff 4f       	sbci	r31, 0xFF	; 255
    4a38:	fc 83       	std	Y+4, r31	; 0x04
    4a3a:	eb 83       	std	Y+3, r30	; 0x03
    4a3c:	be ef       	ldi	r27, 0xFE	; 254
    4a3e:	eb 2e       	mov	r14, r27
    4a40:	e3 0c       	add	r14, r3
    4a42:	cf 01       	movw	r24, r30
    4a44:	b2 01       	movw	r22, r4
    4a46:	48 e8       	ldi	r20, 0x88	; 136
    4a48:	53 e1       	ldi	r21, 0x13	; 19
    4a4a:	20 e0       	ldi	r18, 0x00	; 0
    4a4c:	38 e2       	ldi	r19, 0x28	; 40
    4a4e:	09 81       	ldd	r16, Y+1	; 0x01
    4a50:	1a 81       	ldd	r17, Y+2	; 0x02
    4a52:	cd a0       	ldd	r12, Y+37	; 0x25
    4a54:	de a0       	ldd	r13, Y+38	; 0x26
    4a56:	0e 94 03 30 	call	0x6006	; 0x6006 <_ZN28ReadHttpParameterNameSubTaskC1EP17RestServerSubTaskjjPP18ServiceDescriptionhPbP29ReadHttpParameterValueSubTask>
    4a5a:	93 01       	movw	r18, r6
    4a5c:	28 56       	subi	r18, 0x68	; 104
    4a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    4a60:	3e 87       	std	Y+14, r19	; 0x0e
    4a62:	2d 87       	std	Y+13, r18	; 0x0d
    4a64:	00 d0       	rcall	.+0      	; 0x4a66 <_ZN10RestServerC1EPP18ServiceDescriptionhP12PageRendererS4_PKcS6_S1_bPbPhhP9AnyBufferIhhEPch+0x10a>
    4a66:	8c a5       	ldd	r24, Y+44	; 0x2c
    4a68:	9d a5       	ldd	r25, Y+45	; 0x2d
    4a6a:	ed b7       	in	r30, 0x3d	; 61
    4a6c:	fe b7       	in	r31, 0x3e	; 62
    4a6e:	92 83       	std	Z+2, r25	; 0x02
    4a70:	81 83       	std	Z+1, r24	; 0x01
    4a72:	8e a5       	ldd	r24, Y+46	; 0x2e
    4a74:	83 83       	std	Z+3, r24	; 0x03
    4a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a7a:	b2 01       	movw	r22, r4
    4a7c:	4d 81       	ldd	r20, Y+5	; 0x05
    4a7e:	5e 81       	ldd	r21, Y+6	; 0x06
    4a80:	2b 81       	ldd	r18, Y+3	; 0x03
    4a82:	3c 81       	ldd	r19, Y+4	; 0x04
    4a84:	0b 85       	ldd	r16, Y+11	; 0x0b
    4a86:	1c 85       	ldd	r17, Y+12	; 0x0c
    4a88:	e9 80       	ldd	r14, Y+1	; 0x01
    4a8a:	fa 80       	ldd	r15, Y+2	; 0x02
    4a8c:	c3 2c       	mov	r12, r3
    4a8e:	af 84       	ldd	r10, Y+15	; 0x0f
    4a90:	b8 88       	ldd	r11, Y+16	; 0x10
    4a92:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <_ZN19ReadHttpPathSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP28ReadHttpParameterNameSubTaskP19SendResponseSubTaskPP18ServiceDescriptionhS9_bPch>
    4a96:	0f 90       	pop	r0
    4a98:	0f 90       	pop	r0
    4a9a:	0f 90       	pop	r0
    4a9c:	c3 01       	movw	r24, r6
    4a9e:	8c 53       	subi	r24, 0x3C	; 60
    4aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa2:	b2 01       	movw	r22, r4
    4aa4:	4d 81       	ldd	r20, Y+5	; 0x05
    4aa6:	5e 81       	ldd	r21, Y+6	; 0x06
    4aa8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4aaa:	3e 85       	ldd	r19, Y+14	; 0x0e
    4aac:	0e 94 6f 2e 	call	0x5cde	; 0x5cde <_ZN28DeterminateHttpMethodSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP19ReadHttpPathSubTask>
    4ab0:	83 01       	movw	r16, r6
    4ab2:	0f 51       	subi	r16, 0x1F	; 31
    4ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    4ab6:	c8 01       	movw	r24, r16
    4ab8:	0e 94 f6 37 	call	0x6fec	; 0x6fec <_ZN23StreamReadBytesCountingC1Ev>
{
	blockToServeIncommingConnectionToTheEnd = _blockToServeIncommingConnectionToTheEnd;
    4abc:	f3 01       	movw	r30, r6
    4abe:	93 82       	std	Z+3, r9	; 0x03

	jsonServiceDescription.restService = &jsonActivatorRestService;
    4ac0:	2f 81       	ldd	r18, Y+7	; 0x07
    4ac2:	38 85       	ldd	r19, Y+8	; 0x08
    4ac4:	33 87       	std	Z+11, r19	; 0x0b
    4ac6:	22 87       	std	Z+10, r18	; 0x0a

	metadescriptionServiceDescription.restService = &metadescriptionActivatorRestService;
    4ac8:	89 85       	ldd	r24, Y+9	; 0x09
    4aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4acc:	95 8b       	std	Z+21, r25	; 0x15
    4ace:	84 8b       	std	Z+20, r24	; 0x14

	_serviceDescrptions[ _serviceDescrptionsCount - 2 ] = &jsonServiceDescription;
    4ad0:	83 2d       	mov	r24, r3
    4ad2:	90 e0       	ldi	r25, 0x00	; 0
    4ad4:	fc 01       	movw	r30, r24
    4ad6:	32 97       	sbiw	r30, 0x02	; 2
    4ad8:	ee 0f       	add	r30, r30
    4ada:	ff 1f       	adc	r31, r31
    4adc:	29 81       	ldd	r18, Y+1	; 0x01
    4ade:	3a 81       	ldd	r19, Y+2	; 0x02
    4ae0:	e2 0f       	add	r30, r18
    4ae2:	f3 1f       	adc	r31, r19
    4ae4:	93 01       	movw	r18, r6
    4ae6:	26 5f       	subi	r18, 0xF6	; 246
    4ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    4aea:	31 83       	std	Z+1, r19	; 0x01
    4aec:	20 83       	st	Z, r18
	_serviceDescrptions[ _serviceDescrptionsCount - 1 ] = &metadescriptionServiceDescription;
    4aee:	fc 01       	movw	r30, r24
    4af0:	31 97       	sbiw	r30, 0x01	; 1
    4af2:	ee 0f       	add	r30, r30
    4af4:	ff 1f       	adc	r31, r31
    4af6:	89 81       	ldd	r24, Y+1	; 0x01
    4af8:	9a 81       	ldd	r25, Y+2	; 0x02
    4afa:	e8 0f       	add	r30, r24
    4afc:	f9 1f       	adc	r31, r25
    4afe:	c3 01       	movw	r24, r6
    4b00:	44 96       	adiw	r24, 0x14	; 20
    4b02:	91 83       	std	Z+1, r25	; 0x01
    4b04:	80 83       	st	Z, r24

	errorSubTaskPtr = &errorSubTask;
    4b06:	f3 01       	movw	r30, r6
    4b08:	53 8e       	std	Z+27, r5	; 0x1b
    4b0a:	42 8e       	std	Z+26, r4	; 0x1a

	streamReadBytesCountingPtr = &streamReadBytesCounting;
    4b0c:	ef 50       	subi	r30, 0x0F	; 15
    4b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b10:	11 83       	std	Z+1, r17	; 0x01
    4b12:	00 83       	st	Z, r16

	resetInternalState();
    4b14:	c3 01       	movw	r24, r6
    4b16:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN10RestServer18resetInternalStateEv>
}
    4b1a:	60 96       	adiw	r28, 0x10	; 16
    4b1c:	0f b6       	in	r0, 0x3f	; 63
    4b1e:	f8 94       	cli
    4b20:	de bf       	out	0x3e, r29	; 62
    4b22:	0f be       	out	0x3f, r0	; 63
    4b24:	cd bf       	out	0x3d, r28	; 61
    4b26:	df 91       	pop	r29
    4b28:	cf 91       	pop	r28
    4b2a:	1f 91       	pop	r17
    4b2c:	0f 91       	pop	r16
    4b2e:	ff 90       	pop	r15
    4b30:	ef 90       	pop	r14
    4b32:	df 90       	pop	r13
    4b34:	cf 90       	pop	r12
    4b36:	bf 90       	pop	r11
    4b38:	af 90       	pop	r10
    4b3a:	9f 90       	pop	r9
    4b3c:	8f 90       	pop	r8
    4b3e:	7f 90       	pop	r7
    4b40:	6f 90       	pop	r6
    4b42:	5f 90       	pop	r5
    4b44:	4f 90       	pop	r4
    4b46:	3f 90       	pop	r3
    4b48:	08 95       	ret

00004b4a <_ZN10RestServer13processStreamEP6Stream>:
}

// =================================================

bool RestServer::processStream( Stream* stream )
{
    4b4a:	2f 92       	push	r2
    4b4c:	3f 92       	push	r3
    4b4e:	5f 92       	push	r5
    4b50:	6f 92       	push	r6
    4b52:	7f 92       	push	r7
    4b54:	8f 92       	push	r8
    4b56:	9f 92       	push	r9
    4b58:	af 92       	push	r10
    4b5a:	bf 92       	push	r11
    4b5c:	cf 92       	push	r12
    4b5e:	df 92       	push	r13
    4b60:	ef 92       	push	r14
    4b62:	ff 92       	push	r15
    4b64:	0f 93       	push	r16
    4b66:	1f 93       	push	r17
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
    4b6c:	ec 01       	movw	r28, r24
    4b6e:	8b 01       	movw	r16, r22
	//static const char* prefix = "RestServer:processStream():";

	//static const unsigned int timeoutInSeconds = 10; // todo to ma byc jako parametr przekazany do konstruktora

	//all( p << prefix << "beginning work, executing '" << currentSubTask->getSubTaskName() << "' sub-task" << endl; )
	aln( "beginning work, executing '%s' sub-task" , currentSubTask->getSubTaskName() )
    4b70:	8a 81       	ldd	r24, Y+2	; 0x02
    4b72:	8b 30       	cpi	r24, 0x0B	; 11
    4b74:	50 f5       	brcc	.+84     	; 0x4bca <_ZN10RestServer13processStreamEP6Stream+0x80>
    4b76:	ce 01       	movw	r24, r28
    4b78:	6b e8       	ldi	r22, 0x8B	; 139
    4b7a:	72 e1       	ldi	r23, 0x12	; 18
    4b7c:	4d e3       	ldi	r20, 0x3D	; 61
    4b7e:	5b e0       	ldi	r21, 0x0B	; 11
    4b80:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4b84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4b86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4b88:	dc 01       	movw	r26, r24
    4b8a:	ed 91       	ld	r30, X+
    4b8c:	fc 91       	ld	r31, X
    4b8e:	01 90       	ld	r0, Z+
    4b90:	f0 81       	ld	r31, Z
    4b92:	e0 2d       	mov	r30, r0
    4b94:	19 95       	eicall
    4b96:	00 d0       	rcall	.+0      	; 0x4b98 <_ZN10RestServer13processStreamEP6Stream+0x4e>
    4b98:	0f 92       	push	r0
    4b9a:	2b e4       	ldi	r18, 0x4B	; 75
    4b9c:	3b e0       	ldi	r19, 0x0B	; 11
    4b9e:	ed b7       	in	r30, 0x3d	; 61
    4ba0:	fe b7       	in	r31, 0x3e	; 62
    4ba2:	32 83       	std	Z+2, r19	; 0x02
    4ba4:	21 83       	std	Z+1, r18	; 0x01
    4ba6:	94 83       	std	Z+4, r25	; 0x04
    4ba8:	83 83       	std	Z+3, r24	; 0x03
    4baa:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4bae:	0f 90       	pop	r0
    4bb0:	0f 90       	pop	r0
    4bb2:	8e e8       	ldi	r24, 0x8E	; 142
    4bb4:	92 e1       	ldi	r25, 0x12	; 18
    4bb6:	ad b7       	in	r26, 0x3d	; 61
    4bb8:	be b7       	in	r27, 0x3e	; 62
    4bba:	12 96       	adiw	r26, 0x02	; 2
    4bbc:	9c 93       	st	X, r25
    4bbe:	8e 93       	st	-X, r24
    4bc0:	11 97       	sbiw	r26, 0x01	; 1
    4bc2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4bc6:	0f 90       	pop	r0
    4bc8:	0f 90       	pop	r0

	streamReadBytesCounting.setStream( stream );
    4bca:	21 ee       	ldi	r18, 0xE1	; 225
    4bcc:	82 2e       	mov	r8, r18
    4bce:	91 2c       	mov	r9, r1
    4bd0:	8c 0e       	add	r8, r28
    4bd2:	9d 1e       	adc	r9, r29
    4bd4:	c4 01       	movw	r24, r8
    4bd6:	b8 01       	movw	r22, r16
    4bd8:	0e 94 0a 38 	call	0x7014	; 0x7014 <_ZN23StreamReadBytesCounting9setStreamEP6Stream>

	if( blockToServeIncommingConnectionToTheEnd )
    4bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bde:	88 23       	and	r24, r24
    4be0:	09 f4       	brne	.+2      	; 0x4be4 <_ZN10RestServer13processStreamEP6Stream+0x9a>
    4be2:	17 c1       	rjmp	.+558    	; 0x4e12 <_ZN10RestServer13processStreamEP6Stream+0x2c8>
	{
		while( true )
		{
			if( isTimeoutWatcherStarted && ( millis() - startTime ) > MAX_TIME_FOR_PROCESS_INCOMMING_HTTP_REQUEST )
    4be4:	13 ef       	ldi	r17, 0xF3	; 243
    4be6:	c1 2e       	mov	r12, r17
    4be8:	d1 2c       	mov	r13, r1
    4bea:	cc 0e       	add	r12, r28
    4bec:	dd 1e       	adc	r13, r29
    4bee:	04 ef       	ldi	r16, 0xF4	; 244
    4bf0:	60 2e       	mov	r6, r16
    4bf2:	71 2c       	mov	r7, r1
    4bf4:	6c 0e       	add	r6, r28
    4bf6:	7d 1e       	adc	r7, r29
				wln( "http request max bytes reached while processing this request" )

				break;
			}

			RestServerSubTask* newSubTask = currentSubTask->executeSubTask( streamReadBytesCountingPtr );
    4bf8:	81 ef       	ldi	r24, 0xF1	; 241
    4bfa:	28 2e       	mov	r2, r24
    4bfc:	31 2c       	mov	r3, r1
    4bfe:	2c 0e       	add	r2, r28
    4c00:	3d 1e       	adc	r3, r29
				}
			}
			else
			{
				//all( p << ", during next execution there will be continuation of current sub-task ('" << currentSubTask->getSubTaskName() << "')" << endl; )
				aln( "during next execution there will be continuation of current sub-task ('%s')" , currentSubTask->getSubTaskName() )
    4c02:	9e e8       	ldi	r25, 0x8E	; 142
    4c04:	a9 2e       	mov	r10, r25
    4c06:	92 e1       	ldi	r25, 0x12	; 18
    4c08:	b9 2e       	mov	r11, r25
					currentSubTask = newSubTask;
					currentSubTask->resetInternalState();

					if( !isTimeoutWatcherStarted )
					{
						isTimeoutWatcherStarted = true;
    4c0a:	55 24       	eor	r5, r5
    4c0c:	53 94       	inc	r5

	if( blockToServeIncommingConnectionToTheEnd )
	{
		while( true )
		{
			if( isTimeoutWatcherStarted && ( millis() - startTime ) > MAX_TIME_FOR_PROCESS_INCOMMING_HTTP_REQUEST )
    4c0e:	f6 01       	movw	r30, r12
    4c10:	80 81       	ld	r24, Z
    4c12:	88 23       	and	r24, r24
    4c14:	09 f4       	brne	.+2      	; 0x4c18 <_ZN10RestServer13processStreamEP6Stream+0xce>
    4c16:	42 c2       	rjmp	.+1156   	; 0x509c <_ZN10RestServer13processStreamEP6Stream+0x552>
    4c18:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    4c1c:	dc 01       	movw	r26, r24
    4c1e:	cb 01       	movw	r24, r22
    4c20:	f3 01       	movw	r30, r6
    4c22:	40 81       	ld	r20, Z
    4c24:	51 81       	ldd	r21, Z+1	; 0x01
    4c26:	62 81       	ldd	r22, Z+2	; 0x02
    4c28:	73 81       	ldd	r23, Z+3	; 0x03
    4c2a:	84 1b       	sub	r24, r20
    4c2c:	95 0b       	sbc	r25, r21
    4c2e:	a6 0b       	sbc	r26, r22
    4c30:	b7 0b       	sbc	r27, r23
    4c32:	89 39       	cpi	r24, 0x99	; 153
    4c34:	fa e3       	ldi	r31, 0x3A	; 58
    4c36:	9f 07       	cpc	r25, r31
    4c38:	f0 e0       	ldi	r31, 0x00	; 0
    4c3a:	af 07       	cpc	r26, r31
    4c3c:	f0 e0       	ldi	r31, 0x00	; 0
    4c3e:	bf 07       	cpc	r27, r31
    4c40:	08 f4       	brcc	.+2      	; 0x4c44 <_ZN10RestServer13processStreamEP6Stream+0xfa>
    4c42:	2c c2       	rjmp	.+1112   	; 0x509c <_ZN10RestServer13processStreamEP6Stream+0x552>
			{
				//warning( p << prefix << "timeout while processing this request" << endl; )
				wln( "timeout while processing this request" )
    4c44:	8a 81       	ldd	r24, Y+2	; 0x02
    4c46:	8f 31       	cpi	r24, 0x1F	; 31
    4c48:	08 f0       	brcs	.+2      	; 0x4c4c <_ZN10RestServer13processStreamEP6Stream+0x102>
    4c4a:	75 c1       	rjmp	.+746    	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	65 e8       	ldi	r22, 0x85	; 133
    4c50:	72 e1       	ldi	r23, 0x12	; 18
    4c52:	4d e3       	ldi	r20, 0x3D	; 61
    4c54:	5b e0       	ldi	r21, 0x0B	; 11
    4c56:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4c5a:	0f 92       	push	r0
    4c5c:	0f 92       	push	r0
    4c5e:	83 e7       	ldi	r24, 0x73	; 115
    4c60:	9b e0       	ldi	r25, 0x0B	; 11
    4c62:	15 c1       	rjmp	.+554    	; 0x4e8e <_ZN10RestServer13processStreamEP6Stream+0x344>
			}

			if( streamReadBytesCounting.getReadBytesCount() > MAX_BYTES_COUNT_OF_INCOMMING_HTTP_REQUEST )
			{
				//warning( p << prefix << "http request max bytes reached while processing this request" << endl; )
				wln( "http request max bytes reached while processing this request" )
    4c64:	8a 81       	ldd	r24, Y+2	; 0x02
    4c66:	8f 31       	cpi	r24, 0x1F	; 31
    4c68:	08 f0       	brcs	.+2      	; 0x4c6c <_ZN10RestServer13processStreamEP6Stream+0x122>
    4c6a:	65 c1       	rjmp	.+714    	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4c6c:	ce 01       	movw	r24, r28
    4c6e:	65 e8       	ldi	r22, 0x85	; 133
    4c70:	72 e1       	ldi	r23, 0x12	; 18
    4c72:	4d e3       	ldi	r20, 0x3D	; 61
    4c74:	5b e0       	ldi	r21, 0x0B	; 11
    4c76:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4c7a:	0f 92       	push	r0
    4c7c:	0f 92       	push	r0
    4c7e:	89 e9       	ldi	r24, 0x99	; 153
    4c80:	9b e0       	ldi	r25, 0x0B	; 11
    4c82:	05 c1       	rjmp	.+522    	; 0x4e8e <_ZN10RestServer13processStreamEP6Stream+0x344>

				break;
			}

			RestServerSubTask* newSubTask = currentSubTask->executeSubTask( streamReadBytesCountingPtr );
    4c84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4c86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4c88:	dc 01       	movw	r26, r24
    4c8a:	ed 91       	ld	r30, X+
    4c8c:	fc 91       	ld	r31, X
    4c8e:	d1 01       	movw	r26, r2
    4c90:	6d 91       	ld	r22, X+
    4c92:	7c 91       	ld	r23, X
    4c94:	04 80       	ldd	r0, Z+4	; 0x04
    4c96:	f5 81       	ldd	r31, Z+5	; 0x05
    4c98:	e0 2d       	mov	r30, r0
    4c9a:	19 95       	eicall
    4c9c:	8c 01       	movw	r16, r24
    4c9e:	2a 81       	ldd	r18, Y+2	; 0x02

			if( newSubTask != NULL )
    4ca0:	00 97       	sbiw	r24, 0x00	; 0
    4ca2:	09 f4       	brne	.+2      	; 0x4ca6 <_ZN10RestServer13processStreamEP6Stream+0x15c>
    4ca4:	8a c0       	rjmp	.+276    	; 0x4dba <_ZN10RestServer13processStreamEP6Stream+0x270>
			{
				//all( p << prefix << "finishing work"; )

				if( newSubTask == errorSubTaskPtr )
    4ca6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ca8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4caa:	08 17       	cp	r16, r24
    4cac:	19 07       	cpc	r17, r25
    4cae:	c1 f4       	brne	.+48     	; 0x4ce0 <_ZN10RestServer13processStreamEP6Stream+0x196>
				{
					//warning( p << prefix << "finishing work, already executed '" << currentSubTask->getSubTaskName() << "' sub-task asked to reset internal state (future execution will start state machine from beginning)" << endl; )
					wln( "finishing work, already executed '%s' sub-task asked to reset internal state (future execution will start state machine from beginning)" , currentSubTask->getSubTaskName() )
    4cb0:	2f 31       	cpi	r18, 0x1F	; 31
    4cb2:	08 f0       	brcs	.+2      	; 0x4cb6 <_ZN10RestServer13processStreamEP6Stream+0x16c>
    4cb4:	40 c1       	rjmp	.+640    	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4cb6:	ce 01       	movw	r24, r28
    4cb8:	65 e8       	ldi	r22, 0x85	; 133
    4cba:	72 e1       	ldi	r23, 0x12	; 18
    4cbc:	4d e3       	ldi	r20, 0x3D	; 61
    4cbe:	5b e0       	ldi	r21, 0x0B	; 11
    4cc0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4cc4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4cc6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4cc8:	dc 01       	movw	r26, r24
    4cca:	ed 91       	ld	r30, X+
    4ccc:	fc 91       	ld	r31, X
    4cce:	01 90       	ld	r0, Z+
    4cd0:	f0 81       	ld	r31, Z
    4cd2:	e0 2d       	mov	r30, r0
    4cd4:	19 95       	eicall
    4cd6:	00 d0       	rcall	.+0      	; 0x4cd8 <_ZN10RestServer13processStreamEP6Stream+0x18e>
    4cd8:	0f 92       	push	r0
    4cda:	26 ed       	ldi	r18, 0xD6	; 214
    4cdc:	3b e0       	ldi	r19, 0x0B	; 11
    4cde:	15 c1       	rjmp	.+554    	; 0x4f0a <_ZN10RestServer13processStreamEP6Stream+0x3c0>
					break;
				}
				else
				{
					//all( p << prefix << "finishing work, changing already executed '" << currentSubTask->getSubTaskName() << "' sub-task to '" << newSubTask->getSubTaskName() << "'" << endl; )
					aln( "finishing work, changing already executed '%s' sub-task to '%s'" , currentSubTask->getSubTaskName() , newSubTask->getSubTaskName() )
    4ce0:	2b 30       	cpi	r18, 0x0B	; 11
    4ce2:	d0 f5       	brcc	.+116    	; 0x4d58 <_ZN10RestServer13processStreamEP6Stream+0x20e>
    4ce4:	ce 01       	movw	r24, r28
    4ce6:	6b e8       	ldi	r22, 0x8B	; 139
    4ce8:	72 e1       	ldi	r23, 0x12	; 18
    4cea:	4d e3       	ldi	r20, 0x3D	; 61
    4cec:	5b e0       	ldi	r21, 0x0B	; 11
    4cee:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4cf2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4cf4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4cf6:	dc 01       	movw	r26, r24
    4cf8:	ed 91       	ld	r30, X+
    4cfa:	fc 91       	ld	r31, X
    4cfc:	01 90       	ld	r0, Z+
    4cfe:	f0 81       	ld	r31, Z
    4d00:	e0 2d       	mov	r30, r0
    4d02:	19 95       	eicall
    4d04:	7c 01       	movw	r14, r24
    4d06:	d8 01       	movw	r26, r16
    4d08:	ed 91       	ld	r30, X+
    4d0a:	fc 91       	ld	r31, X
    4d0c:	01 90       	ld	r0, Z+
    4d0e:	f0 81       	ld	r31, Z
    4d10:	e0 2d       	mov	r30, r0
    4d12:	c8 01       	movw	r24, r16
    4d14:	19 95       	eicall
    4d16:	00 d0       	rcall	.+0      	; 0x4d18 <_ZN10RestServer13processStreamEP6Stream+0x1ce>
    4d18:	00 d0       	rcall	.+0      	; 0x4d1a <_ZN10RestServer13processStreamEP6Stream+0x1d0>
    4d1a:	ed b7       	in	r30, 0x3d	; 61
    4d1c:	fe b7       	in	r31, 0x3e	; 62
    4d1e:	31 96       	adiw	r30, 0x01	; 1
    4d20:	2e e5       	ldi	r18, 0x5E	; 94
    4d22:	3c e0       	ldi	r19, 0x0C	; 12
    4d24:	ad b7       	in	r26, 0x3d	; 61
    4d26:	be b7       	in	r27, 0x3e	; 62
    4d28:	12 96       	adiw	r26, 0x02	; 2
    4d2a:	3c 93       	st	X, r19
    4d2c:	2e 93       	st	-X, r18
    4d2e:	11 97       	sbiw	r26, 0x01	; 1
    4d30:	f3 82       	std	Z+3, r15	; 0x03
    4d32:	e2 82       	std	Z+2, r14	; 0x02
    4d34:	95 83       	std	Z+5, r25	; 0x05
    4d36:	84 83       	std	Z+4, r24	; 0x04
    4d38:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4d3c:	0f 90       	pop	r0
    4d3e:	0f 90       	pop	r0
    4d40:	0f 90       	pop	r0
    4d42:	0f 90       	pop	r0
    4d44:	ad b7       	in	r26, 0x3d	; 61
    4d46:	be b7       	in	r27, 0x3e	; 62
    4d48:	12 96       	adiw	r26, 0x02	; 2
    4d4a:	bc 92       	st	X, r11
    4d4c:	ae 92       	st	-X, r10
    4d4e:	11 97       	sbiw	r26, 0x01	; 1
    4d50:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4d54:	0f 90       	pop	r0
    4d56:	0f 90       	pop	r0

					currentSubTask = newSubTask;
    4d58:	1d 8f       	std	Y+29, r17	; 0x1d
    4d5a:	0c 8f       	std	Y+28, r16	; 0x1c
					currentSubTask->resetInternalState();
    4d5c:	d8 01       	movw	r26, r16
    4d5e:	ed 91       	ld	r30, X+
    4d60:	fc 91       	ld	r31, X
    4d62:	02 80       	ldd	r0, Z+2	; 0x02
    4d64:	f3 81       	ldd	r31, Z+3	; 0x03
    4d66:	e0 2d       	mov	r30, r0
    4d68:	c8 01       	movw	r24, r16
    4d6a:	19 95       	eicall

					if( !isTimeoutWatcherStarted )
    4d6c:	f6 01       	movw	r30, r12
    4d6e:	80 81       	ld	r24, Z
    4d70:	88 23       	and	r24, r24
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <_ZN10RestServer13processStreamEP6Stream+0x22c>
    4d74:	4c cf       	rjmp	.-360    	; 0x4c0e <_ZN10RestServer13processStreamEP6Stream+0xc4>
					{
						isTimeoutWatcherStarted = true;
    4d76:	50 82       	st	Z, r5
						startTime = millis();
    4d78:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	f3 01       	movw	r30, r6
    4d82:	80 83       	st	Z, r24
    4d84:	91 83       	std	Z+1, r25	; 0x01
    4d86:	a2 83       	std	Z+2, r26	; 0x02
    4d88:	b3 83       	std	Z+3, r27	; 0x03
						iln( "start time counter" )
    4d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d8c:	85 31       	cpi	r24, 0x15	; 21
    4d8e:	08 f0       	brcs	.+2      	; 0x4d92 <_ZN10RestServer13processStreamEP6Stream+0x248>
    4d90:	3e cf       	rjmp	.-388    	; 0x4c0e <_ZN10RestServer13processStreamEP6Stream+0xc4>
    4d92:	ce 01       	movw	r24, r28
    4d94:	68 e8       	ldi	r22, 0x88	; 136
    4d96:	72 e1       	ldi	r23, 0x12	; 18
    4d98:	4d e3       	ldi	r20, 0x3D	; 61
    4d9a:	5b e0       	ldi	r21, 0x0B	; 11
    4d9c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4da0:	0f 92       	push	r0
    4da2:	0f 92       	push	r0
    4da4:	ee e9       	ldi	r30, 0x9E	; 158
    4da6:	fc e0       	ldi	r31, 0x0C	; 12
    4da8:	ad b7       	in	r26, 0x3d	; 61
    4daa:	be b7       	in	r27, 0x3e	; 62
    4dac:	12 96       	adiw	r26, 0x02	; 2
    4dae:	fc 93       	st	X, r31
    4db0:	ee 93       	st	-X, r30
    4db2:	11 97       	sbiw	r26, 0x01	; 1
    4db4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4db8:	21 c0       	rjmp	.+66     	; 0x4dfc <_ZN10RestServer13processStreamEP6Stream+0x2b2>
				}
			}
			else
			{
				//all( p << ", during next execution there will be continuation of current sub-task ('" << currentSubTask->getSubTaskName() << "')" << endl; )
				aln( "during next execution there will be continuation of current sub-task ('%s')" , currentSubTask->getSubTaskName() )
    4dba:	2b 30       	cpi	r18, 0x0B	; 11
    4dbc:	08 f0       	brcs	.+2      	; 0x4dc0 <_ZN10RestServer13processStreamEP6Stream+0x276>
    4dbe:	27 cf       	rjmp	.-434    	; 0x4c0e <_ZN10RestServer13processStreamEP6Stream+0xc4>
    4dc0:	ce 01       	movw	r24, r28
    4dc2:	6b e8       	ldi	r22, 0x8B	; 139
    4dc4:	72 e1       	ldi	r23, 0x12	; 18
    4dc6:	4d e3       	ldi	r20, 0x3D	; 61
    4dc8:	5b e0       	ldi	r21, 0x0B	; 11
    4dca:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4dce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4dd0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	ed 91       	ld	r30, X+
    4dd6:	fc 91       	ld	r31, X
    4dd8:	01 90       	ld	r0, Z+
    4dda:	f0 81       	ld	r31, Z
    4ddc:	e0 2d       	mov	r30, r0
    4dde:	19 95       	eicall
    4de0:	00 d0       	rcall	.+0      	; 0x4de2 <_ZN10RestServer13processStreamEP6Stream+0x298>
    4de2:	0f 92       	push	r0
    4de4:	21 eb       	ldi	r18, 0xB1	; 177
    4de6:	3c e0       	ldi	r19, 0x0C	; 12
    4de8:	ed b7       	in	r30, 0x3d	; 61
    4dea:	fe b7       	in	r31, 0x3e	; 62
    4dec:	32 83       	std	Z+2, r19	; 0x02
    4dee:	21 83       	std	Z+1, r18	; 0x01
    4df0:	94 83       	std	Z+4, r25	; 0x04
    4df2:	83 83       	std	Z+3, r24	; 0x03
    4df4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4df8:	0f 90       	pop	r0
    4dfa:	0f 90       	pop	r0
    4dfc:	ad b7       	in	r26, 0x3d	; 61
    4dfe:	be b7       	in	r27, 0x3e	; 62
    4e00:	12 96       	adiw	r26, 0x02	; 2
    4e02:	bc 92       	st	X, r11
    4e04:	ae 92       	st	-X, r10
    4e06:	11 97       	sbiw	r26, 0x01	; 1
    4e08:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4e0c:	0f 90       	pop	r0
    4e0e:	0f 90       	pop	r0
    4e10:	fe ce       	rjmp	.-516    	; 0x4c0e <_ZN10RestServer13processStreamEP6Stream+0xc4>
		resetInternalState();
		return true;
	}
	else
	{
		if( isTimeoutWatcherStarted && ( ( millis() - startTime ) ) > MAX_TIME_FOR_PROCESS_INCOMMING_HTTP_REQUEST )
    4e12:	fe 01       	movw	r30, r28
    4e14:	ed 50       	subi	r30, 0x0D	; 13
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	80 81       	ld	r24, Z
    4e1a:	88 23       	and	r24, r24
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <_ZN10RestServer13processStreamEP6Stream+0x2d6>
    4e1e:	47 c1       	rjmp	.+654    	; 0x50ae <_ZN10RestServer13processStreamEP6Stream+0x564>
    4e20:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    4e24:	dc 01       	movw	r26, r24
    4e26:	cb 01       	movw	r24, r22
    4e28:	fe 01       	movw	r30, r28
    4e2a:	ec 50       	subi	r30, 0x0C	; 12
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	40 81       	ld	r20, Z
    4e30:	51 81       	ldd	r21, Z+1	; 0x01
    4e32:	62 81       	ldd	r22, Z+2	; 0x02
    4e34:	73 81       	ldd	r23, Z+3	; 0x03
    4e36:	84 1b       	sub	r24, r20
    4e38:	95 0b       	sbc	r25, r21
    4e3a:	a6 0b       	sbc	r26, r22
    4e3c:	b7 0b       	sbc	r27, r23
    4e3e:	89 39       	cpi	r24, 0x99	; 153
    4e40:	ea e3       	ldi	r30, 0x3A	; 58
    4e42:	9e 07       	cpc	r25, r30
    4e44:	e0 e0       	ldi	r30, 0x00	; 0
    4e46:	ae 07       	cpc	r26, r30
    4e48:	e0 e0       	ldi	r30, 0x00	; 0
    4e4a:	be 07       	cpc	r27, r30
    4e4c:	08 f4       	brcc	.+2      	; 0x4e50 <_ZN10RestServer13processStreamEP6Stream+0x306>
    4e4e:	2f c1       	rjmp	.+606    	; 0x50ae <_ZN10RestServer13processStreamEP6Stream+0x564>
		{
			//warning( p << prefix << "timeout while processing this request" << endl; )
			wln( "timeout while processing this request" )
    4e50:	8a 81       	ldd	r24, Y+2	; 0x02
    4e52:	8f 31       	cpi	r24, 0x1F	; 31
    4e54:	08 f0       	brcs	.+2      	; 0x4e58 <_ZN10RestServer13processStreamEP6Stream+0x30e>
    4e56:	6f c0       	rjmp	.+222    	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4e58:	ce 01       	movw	r24, r28
    4e5a:	65 e8       	ldi	r22, 0x85	; 133
    4e5c:	72 e1       	ldi	r23, 0x12	; 18
    4e5e:	4d e3       	ldi	r20, 0x3D	; 61
    4e60:	5b e0       	ldi	r21, 0x0B	; 11
    4e62:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4e66:	0f 92       	push	r0
    4e68:	0f 92       	push	r0
    4e6a:	8d ef       	ldi	r24, 0xFD	; 253
    4e6c:	9c e0       	ldi	r25, 0x0C	; 12
    4e6e:	0f c0       	rjmp	.+30     	; 0x4e8e <_ZN10RestServer13processStreamEP6Stream+0x344>
		}

		if( streamReadBytesCounting.getReadBytesCount() > MAX_BYTES_COUNT_OF_INCOMMING_HTTP_REQUEST )
		{
			//warning( p << prefix << "http request max bytes reached while processing this request" << endl; )
			wln( "http request max bytes reached while processing this request" )
    4e70:	8a 81       	ldd	r24, Y+2	; 0x02
    4e72:	8f 31       	cpi	r24, 0x1F	; 31
    4e74:	08 f0       	brcs	.+2      	; 0x4e78 <_ZN10RestServer13processStreamEP6Stream+0x32e>
    4e76:	5f c0       	rjmp	.+190    	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4e78:	ce 01       	movw	r24, r28
    4e7a:	65 e8       	ldi	r22, 0x85	; 133
    4e7c:	72 e1       	ldi	r23, 0x12	; 18
    4e7e:	4d e3       	ldi	r20, 0x3D	; 61
    4e80:	5b e0       	ldi	r21, 0x0B	; 11
    4e82:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4e86:	0f 92       	push	r0
    4e88:	0f 92       	push	r0
    4e8a:	83 e2       	ldi	r24, 0x23	; 35
    4e8c:	9d e0       	ldi	r25, 0x0D	; 13
    4e8e:	ad b7       	in	r26, 0x3d	; 61
    4e90:	be b7       	in	r27, 0x3e	; 62
    4e92:	12 96       	adiw	r26, 0x02	; 2
    4e94:	9c 93       	st	X, r25
    4e96:	8e 93       	st	-X, r24
    4e98:	11 97       	sbiw	r26, 0x01	; 1
    4e9a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4e9e:	8e e8       	ldi	r24, 0x8E	; 142
    4ea0:	92 e1       	ldi	r25, 0x12	; 18
    4ea2:	ed b7       	in	r30, 0x3d	; 61
    4ea4:	fe b7       	in	r31, 0x3e	; 62
    4ea6:	92 83       	std	Z+2, r25	; 0x02
    4ea8:	81 83       	std	Z+1, r24	; 0x01
    4eaa:	41 c0       	rjmp	.+130    	; 0x4f2e <_ZN10RestServer13processStreamEP6Stream+0x3e4>

			resetInternalState();
			return true;
		}

		RestServerSubTask* newSubTask = currentSubTask->executeSubTask( streamReadBytesCountingPtr );
    4eac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4eae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4eb0:	fc 01       	movw	r30, r24
    4eb2:	a0 81       	ld	r26, Z
    4eb4:	b1 81       	ldd	r27, Z+1	; 0x01
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	ef 50       	subi	r30, 0x0F	; 15
    4eba:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebc:	60 81       	ld	r22, Z
    4ebe:	71 81       	ldd	r23, Z+1	; 0x01
    4ec0:	14 96       	adiw	r26, 0x04	; 4
    4ec2:	ed 91       	ld	r30, X+
    4ec4:	fc 91       	ld	r31, X
    4ec6:	15 97       	sbiw	r26, 0x05	; 5
    4ec8:	19 95       	eicall
    4eca:	8c 01       	movw	r16, r24
    4ecc:	2a 81       	ldd	r18, Y+2	; 0x02

		if( newSubTask != NULL )
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	09 f4       	brne	.+2      	; 0x4ed4 <_ZN10RestServer13processStreamEP6Stream+0x38a>
    4ed2:	a5 c0       	rjmp	.+330    	; 0x501e <_ZN10RestServer13processStreamEP6Stream+0x4d4>
		{
			//all( p << prefix << "finishing work"; )

			if( newSubTask == errorSubTaskPtr )
    4ed4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4ed6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4ed8:	08 17       	cp	r16, r24
    4eda:	19 07       	cpc	r17, r25
    4edc:	89 f5       	brne	.+98     	; 0x4f40 <_ZN10RestServer13processStreamEP6Stream+0x3f6>
			{
				//warning( p << prefix << "finishing work, already executed '" << currentSubTask->getSubTaskName() << "' sub-task asked to reset internal state (future execution will start state machine from beginning)" << endl; )
				wln( "finishing work, already executed '%s' sub-task asked to reset internal state (future execution will start state machine from beginning)" , currentSubTask->getSubTaskName() )
    4ede:	2f 31       	cpi	r18, 0x1F	; 31
    4ee0:	50 f5       	brcc	.+84     	; 0x4f36 <_ZN10RestServer13processStreamEP6Stream+0x3ec>
    4ee2:	ce 01       	movw	r24, r28
    4ee4:	65 e8       	ldi	r22, 0x85	; 133
    4ee6:	72 e1       	ldi	r23, 0x12	; 18
    4ee8:	4d e3       	ldi	r20, 0x3D	; 61
    4eea:	5b e0       	ldi	r21, 0x0B	; 11
    4eec:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4ef0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4ef2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4ef4:	dc 01       	movw	r26, r24
    4ef6:	ed 91       	ld	r30, X+
    4ef8:	fc 91       	ld	r31, X
    4efa:	01 90       	ld	r0, Z+
    4efc:	f0 81       	ld	r31, Z
    4efe:	e0 2d       	mov	r30, r0
    4f00:	19 95       	eicall
    4f02:	00 d0       	rcall	.+0      	; 0x4f04 <_ZN10RestServer13processStreamEP6Stream+0x3ba>
    4f04:	0f 92       	push	r0
    4f06:	20 e6       	ldi	r18, 0x60	; 96
    4f08:	3d e0       	ldi	r19, 0x0D	; 13
    4f0a:	ed b7       	in	r30, 0x3d	; 61
    4f0c:	fe b7       	in	r31, 0x3e	; 62
    4f0e:	32 83       	std	Z+2, r19	; 0x02
    4f10:	21 83       	std	Z+1, r18	; 0x01
    4f12:	94 83       	std	Z+4, r25	; 0x04
    4f14:	83 83       	std	Z+3, r24	; 0x03
    4f16:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4f1a:	0f 90       	pop	r0
    4f1c:	0f 90       	pop	r0
    4f1e:	8e e8       	ldi	r24, 0x8E	; 142
    4f20:	92 e1       	ldi	r25, 0x12	; 18
    4f22:	ad b7       	in	r26, 0x3d	; 61
    4f24:	be b7       	in	r27, 0x3e	; 62
    4f26:	12 96       	adiw	r26, 0x02	; 2
    4f28:	9c 93       	st	X, r25
    4f2a:	8e 93       	st	-X, r24
    4f2c:	11 97       	sbiw	r26, 0x01	; 1
    4f2e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4f32:	0f 90       	pop	r0
    4f34:	0f 90       	pop	r0

				resetInternalState();
    4f36:	ce 01       	movw	r24, r28
    4f38:	0e 94 95 24 	call	0x492a	; 0x492a <_ZN10RestServer18resetInternalStateEv>
				return true;
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	9c c0       	rjmp	.+312    	; 0x5078 <_ZN10RestServer13processStreamEP6Stream+0x52e>
			}
			else
			{
				//info( p << prefix << "finishing work, changing already executed '" << currentSubTask->getSubTaskName() << "' sub-task to '" << newSubTask->getSubTaskName() << "'" << endl; )
				aln( "finishing work, changing already executed '%s' sub-task to '%s'" , currentSubTask->getSubTaskName() , newSubTask->getSubTaskName() )
    4f40:	2b 30       	cpi	r18, 0x0B	; 11
    4f42:	d0 f5       	brcc	.+116    	; 0x4fb8 <_ZN10RestServer13processStreamEP6Stream+0x46e>
    4f44:	ce 01       	movw	r24, r28
    4f46:	6b e8       	ldi	r22, 0x8B	; 139
    4f48:	72 e1       	ldi	r23, 0x12	; 18
    4f4a:	4d e3       	ldi	r20, 0x3D	; 61
    4f4c:	5b e0       	ldi	r21, 0x0B	; 11
    4f4e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    4f52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4f54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4f56:	dc 01       	movw	r26, r24
    4f58:	ed 91       	ld	r30, X+
    4f5a:	fc 91       	ld	r31, X
    4f5c:	01 90       	ld	r0, Z+
    4f5e:	f0 81       	ld	r31, Z
    4f60:	e0 2d       	mov	r30, r0
    4f62:	19 95       	eicall
    4f64:	7c 01       	movw	r14, r24
    4f66:	d8 01       	movw	r26, r16
    4f68:	ed 91       	ld	r30, X+
    4f6a:	fc 91       	ld	r31, X
    4f6c:	01 90       	ld	r0, Z+
    4f6e:	f0 81       	ld	r31, Z
    4f70:	e0 2d       	mov	r30, r0
    4f72:	c8 01       	movw	r24, r16
    4f74:	19 95       	eicall
    4f76:	00 d0       	rcall	.+0      	; 0x4f78 <_ZN10RestServer13processStreamEP6Stream+0x42e>
    4f78:	00 d0       	rcall	.+0      	; 0x4f7a <_ZN10RestServer13processStreamEP6Stream+0x430>
    4f7a:	ed b7       	in	r30, 0x3d	; 61
    4f7c:	fe b7       	in	r31, 0x3e	; 62
    4f7e:	31 96       	adiw	r30, 0x01	; 1
    4f80:	28 ee       	ldi	r18, 0xE8	; 232
    4f82:	3d e0       	ldi	r19, 0x0D	; 13
    4f84:	ad b7       	in	r26, 0x3d	; 61
    4f86:	be b7       	in	r27, 0x3e	; 62
    4f88:	12 96       	adiw	r26, 0x02	; 2
    4f8a:	3c 93       	st	X, r19
    4f8c:	2e 93       	st	-X, r18
    4f8e:	11 97       	sbiw	r26, 0x01	; 1
    4f90:	f3 82       	std	Z+3, r15	; 0x03
    4f92:	e2 82       	std	Z+2, r14	; 0x02
    4f94:	95 83       	std	Z+5, r25	; 0x05
    4f96:	84 83       	std	Z+4, r24	; 0x04
    4f98:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4f9c:	0f 90       	pop	r0
    4f9e:	0f 90       	pop	r0
    4fa0:	0f 90       	pop	r0
    4fa2:	0f 90       	pop	r0
    4fa4:	8e e8       	ldi	r24, 0x8E	; 142
    4fa6:	92 e1       	ldi	r25, 0x12	; 18
    4fa8:	ed b7       	in	r30, 0x3d	; 61
    4faa:	fe b7       	in	r31, 0x3e	; 62
    4fac:	92 83       	std	Z+2, r25	; 0x02
    4fae:	81 83       	std	Z+1, r24	; 0x01
    4fb0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    4fb4:	0f 90       	pop	r0
    4fb6:	0f 90       	pop	r0

				currentSubTask = newSubTask;
    4fb8:	1d 8f       	std	Y+29, r17	; 0x1d
    4fba:	0c 8f       	std	Y+28, r16	; 0x1c
				currentSubTask->resetInternalState();
    4fbc:	d8 01       	movw	r26, r16
    4fbe:	ed 91       	ld	r30, X+
    4fc0:	fc 91       	ld	r31, X
    4fc2:	02 80       	ldd	r0, Z+2	; 0x02
    4fc4:	f3 81       	ldd	r31, Z+3	; 0x03
    4fc6:	e0 2d       	mov	r30, r0
    4fc8:	c8 01       	movw	r24, r16
    4fca:	19 95       	eicall

				if( !isTimeoutWatcherStarted )
    4fcc:	fe 01       	movw	r30, r28
    4fce:	ed 50       	subi	r30, 0x0D	; 13
    4fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd2:	80 81       	ld	r24, Z
    4fd4:	88 23       	and	r24, r24
    4fd6:	09 f0       	breq	.+2      	; 0x4fda <_ZN10RestServer13processStreamEP6Stream+0x490>
    4fd8:	4e c0       	rjmp	.+156    	; 0x5076 <_ZN10RestServer13processStreamEP6Stream+0x52c>
				{
					isTimeoutWatcherStarted = true;
    4fda:	81 e0       	ldi	r24, 0x01	; 1
    4fdc:	80 83       	st	Z, r24
					startTime = millis();
    4fde:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    4fe2:	dc 01       	movw	r26, r24
    4fe4:	cb 01       	movw	r24, r22
    4fe6:	fe 01       	movw	r30, r28
    4fe8:	ec 50       	subi	r30, 0x0C	; 12
    4fea:	ff 4f       	sbci	r31, 0xFF	; 255
    4fec:	80 83       	st	Z, r24
    4fee:	91 83       	std	Z+1, r25	; 0x01
    4ff0:	a2 83       	std	Z+2, r26	; 0x02
    4ff2:	b3 83       	std	Z+3, r27	; 0x03

					//info( p << prefix << "start time counter" << endl; )
					aln( "start time counter" )
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	8b 30       	cpi	r24, 0x0B	; 11
    4ff8:	f0 f5       	brcc	.+124    	; 0x5076 <_ZN10RestServer13processStreamEP6Stream+0x52c>
    4ffa:	ce 01       	movw	r24, r28
    4ffc:	6b e8       	ldi	r22, 0x8B	; 139
    4ffe:	72 e1       	ldi	r23, 0x12	; 18
    5000:	4d e3       	ldi	r20, 0x3D	; 61
    5002:	5b e0       	ldi	r21, 0x0B	; 11
    5004:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    5008:	0f 92       	push	r0
    500a:	0f 92       	push	r0
    500c:	88 e2       	ldi	r24, 0x28	; 40
    500e:	9e e0       	ldi	r25, 0x0E	; 14
    5010:	ed b7       	in	r30, 0x3d	; 61
    5012:	fe b7       	in	r31, 0x3e	; 62
    5014:	92 83       	std	Z+2, r25	; 0x02
    5016:	81 83       	std	Z+1, r24	; 0x01
    5018:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    501c:	20 c0       	rjmp	.+64     	; 0x505e <_ZN10RestServer13processStreamEP6Stream+0x514>
			}
		}
		else
		{
			//all( p << ", during next execution there will be continuation of current sub-task ('" << currentSubTask->getSubTaskName() << "')" << endl; )
			aln( "during next execution there will be continuation of current sub-task ('%s')" , currentSubTask->getSubTaskName() )
    501e:	2b 30       	cpi	r18, 0x0B	; 11
    5020:	50 f5       	brcc	.+84     	; 0x5076 <_ZN10RestServer13processStreamEP6Stream+0x52c>
    5022:	ce 01       	movw	r24, r28
    5024:	6b e8       	ldi	r22, 0x8B	; 139
    5026:	72 e1       	ldi	r23, 0x12	; 18
    5028:	4d e3       	ldi	r20, 0x3D	; 61
    502a:	5b e0       	ldi	r21, 0x0B	; 11
    502c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    5030:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5032:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5034:	dc 01       	movw	r26, r24
    5036:	ed 91       	ld	r30, X+
    5038:	fc 91       	ld	r31, X
    503a:	01 90       	ld	r0, Z+
    503c:	f0 81       	ld	r31, Z
    503e:	e0 2d       	mov	r30, r0
    5040:	19 95       	eicall
    5042:	00 d0       	rcall	.+0      	; 0x5044 <_ZN10RestServer13processStreamEP6Stream+0x4fa>
    5044:	0f 92       	push	r0
    5046:	2b e3       	ldi	r18, 0x3B	; 59
    5048:	3e e0       	ldi	r19, 0x0E	; 14
    504a:	ed b7       	in	r30, 0x3d	; 61
    504c:	fe b7       	in	r31, 0x3e	; 62
    504e:	32 83       	std	Z+2, r19	; 0x02
    5050:	21 83       	std	Z+1, r18	; 0x01
    5052:	94 83       	std	Z+4, r25	; 0x04
    5054:	83 83       	std	Z+3, r24	; 0x03
    5056:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	8e e8       	ldi	r24, 0x8E	; 142
    5060:	92 e1       	ldi	r25, 0x12	; 18
    5062:	ad b7       	in	r26, 0x3d	; 61
    5064:	be b7       	in	r27, 0x3e	; 62
    5066:	12 96       	adiw	r26, 0x02	; 2
    5068:	9c 93       	st	X, r25
    506a:	8e 93       	st	-X, r24
    506c:	11 97       	sbiw	r26, 0x01	; 1
    506e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    5072:	0f 90       	pop	r0
    5074:	0f 90       	pop	r0

			return false;
    5076:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
}
    5078:	df 91       	pop	r29
    507a:	cf 91       	pop	r28
    507c:	1f 91       	pop	r17
    507e:	0f 91       	pop	r16
    5080:	ff 90       	pop	r15
    5082:	ef 90       	pop	r14
    5084:	df 90       	pop	r13
    5086:	cf 90       	pop	r12
    5088:	bf 90       	pop	r11
    508a:	af 90       	pop	r10
    508c:	9f 90       	pop	r9
    508e:	8f 90       	pop	r8
    5090:	7f 90       	pop	r7
    5092:	6f 90       	pop	r6
    5094:	5f 90       	pop	r5
    5096:	3f 90       	pop	r3
    5098:	2f 90       	pop	r2
    509a:	08 95       	ret
				wln( "timeout while processing this request" )

				break;
			}

			if( streamReadBytesCounting.getReadBytesCount() > MAX_BYTES_COUNT_OF_INCOMMING_HTTP_REQUEST )
    509c:	c4 01       	movw	r24, r8
    509e:	0e 94 12 38 	call	0x7024	; 0x7024 <_ZN23StreamReadBytesCounting17getReadBytesCountEv>
    50a2:	b8 e2       	ldi	r27, 0x28	; 40
    50a4:	81 30       	cpi	r24, 0x01	; 1
    50a6:	9b 07       	cpc	r25, r27
    50a8:	08 f4       	brcc	.+2      	; 0x50ac <_ZN10RestServer13processStreamEP6Stream+0x562>
    50aa:	ec cd       	rjmp	.-1064   	; 0x4c84 <_ZN10RestServer13processStreamEP6Stream+0x13a>
    50ac:	db cd       	rjmp	.-1098   	; 0x4c64 <_ZN10RestServer13processStreamEP6Stream+0x11a>

			resetInternalState();
			return true;
		}

		if( streamReadBytesCounting.getReadBytesCount() > MAX_BYTES_COUNT_OF_INCOMMING_HTTP_REQUEST )
    50ae:	c4 01       	movw	r24, r8
    50b0:	0e 94 12 38 	call	0x7024	; 0x7024 <_ZN23StreamReadBytesCounting17getReadBytesCountEv>
    50b4:	e8 e2       	ldi	r30, 0x28	; 40
    50b6:	81 30       	cpi	r24, 0x01	; 1
    50b8:	9e 07       	cpc	r25, r30
    50ba:	08 f0       	brcs	.+2      	; 0x50be <_ZN10RestServer13processStreamEP6Stream+0x574>
    50bc:	d9 ce       	rjmp	.-590    	; 0x4e70 <_ZN10RestServer13processStreamEP6Stream+0x326>
    50be:	f6 ce       	rjmp	.-532    	; 0x4eac <_ZN10RestServer13processStreamEP6Stream+0x362>

000050c0 <_ZN11RestService18writeValueToStreamEP6Stream>:
	type = _type;
}

// =================================================

void RestService::writeValueToStream( Stream* stream ) {}
    50c0:	08 95       	ret

000050c2 <_ZN11RestService17renderValueSetterEP6Streamb>:

// =================================================

void RestService::renderValueSetter( Stream* stream , bool useGETHttpMethodInForms ) {}
    50c2:	08 95       	ret

000050c4 <_ZN11RestService15getBooleanValueEv>:

// =================================================

bool RestService::getBooleanValue() { return false; }
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	08 95       	ret

000050c8 <_ZN11RestService12setTextValueEPh>:

// =================================================

void RestService::setTextValue( unsigned char* newValue ) {}
    50c8:	08 95       	ret

000050ca <_ZN11RestService15setBooleanValueEb>:

// =================================================

void RestService::setBooleanValue( bool newValue ) {}
    50ca:	08 95       	ret

000050cc <_ZN11RestService11setIntValueEi>:

// =================================================

void RestService::setIntValue( int newValue ) {}
    50cc:	08 95       	ret

000050ce <_ZN11RestService14getIntMinValueEv>:

// =================================================

int RestService::getIntMinValue() { return 0; }
    50ce:	80 e0       	ldi	r24, 0x00	; 0
    50d0:	90 e0       	ldi	r25, 0x00	; 0
    50d2:	08 95       	ret

000050d4 <_ZN11RestService14getIntMaxValueEv>:

// =================================================

int RestService::getIntMaxValue() { return 1; }
    50d4:	81 e0       	ldi	r24, 0x01	; 1
    50d6:	90 e0       	ldi	r25, 0x00	; 0
    50d8:	08 95       	ret

000050da <_ZN11RestServiceC1EhPKch>:

#include "RestService.h"

// =================================================

RestService::RestService( unsigned char _id , const char* _name , unsigned char _type )
    50da:	fc 01       	movw	r30, r24
    50dc:	83 ed       	ldi	r24, 0xD3	; 211
    50de:	9e e0       	ldi	r25, 0x0E	; 14
    50e0:	91 83       	std	Z+1, r25	; 0x01
    50e2:	80 83       	st	Z, r24
{
	id = _id;
    50e4:	62 83       	std	Z+2, r22	; 0x02
	name = _name;
    50e6:	54 83       	std	Z+4, r21	; 0x04
    50e8:	43 83       	std	Z+3, r20	; 0x03
	type = _type;
    50ea:	25 83       	std	Z+5, r18	; 0x05
}
    50ec:	08 95       	ret

000050ee <_ZN19SendResponseSubTask14getSubTaskNameEv>:
// =================================================

char* SendResponseSubTask::getSubTaskName()
{
	return "SendResponse-sub-task";
}
    50ee:	8f ea       	ldi	r24, 0xAF	; 175
    50f0:	94 e0       	ldi	r25, 0x04	; 4
    50f2:	08 95       	ret

000050f4 <_ZN19SendResponseSubTask18resetInternalStateEv>:

// =================================================

void SendResponseSubTask::resetInternalState()
{
	indexOfGeneratedService = 0;
    50f4:	fc 01       	movw	r30, r24
    50f6:	14 86       	std	Z+12, r1	; 0x0c
}
    50f8:	08 95       	ret

000050fa <_ZN19SendResponseSubTask14executeSubTaskEP6Stream>:
}

// =================================================

RestServerSubTask* SendResponseSubTask::executeSubTask( Stream* stream )
{
    50fa:	cf 92       	push	r12
    50fc:	df 92       	push	r13
    50fe:	ef 92       	push	r14
    5100:	ff 92       	push	r15
    5102:	0f 93       	push	r16
    5104:	1f 93       	push	r17
    5106:	cf 93       	push	r28
    5108:	df 93       	push	r29
    510a:	8c 01       	movw	r16, r24
    510c:	6b 01       	movw	r12, r22
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "SendResponseSubTask:executeSubTask():";

	if( !isGETHttpMethod )
    510e:	dc 01       	movw	r26, r24
    5110:	1d 96       	adiw	r26, 0x0d	; 13
    5112:	8c 91       	ld	r24, X
    5114:	1d 97       	sbiw	r26, 0x0d	; 13
    5116:	88 23       	and	r24, r24
    5118:	29 f4       	brne	.+10     	; 0x5124 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x2a>
	{
		// TODO: POST nie jest jeszcze obslugiwany
		return errorSubTask;
    511a:	15 96       	adiw	r26, 0x05	; 5
    511c:	8d 91       	ld	r24, X+
    511e:	9c 91       	ld	r25, X
    5120:	16 97       	sbiw	r26, 0x06	; 6
    5122:	2f c1       	rjmp	.+606    	; 0x5382 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x288>
	}
	else
	{
		//all( p << prefix << "sending response, in this execution generating response for rest service under index " << indexOfGeneratedService << " '" << selectdServices[indexOfGeneratedService].restService->name << "' (of all " << selectedServicesCount << ")" << endl; )
		//all( wpln( "sending response, in this execution generating response for rest service under index %u '%s' (of all %u)" , indexOfGeneratedService , selectdServices[indexOfGeneratedService].restService->name , selectedServicesCount ) )
		aln( "sending response, in this execution generating response for rest service under index %u '%s' (of all %u)" , indexOfGeneratedService , selectdServices[indexOfGeneratedService].restService->name , selectedServicesCount )
    5124:	e8 01       	movw	r28, r16
    5126:	8c 81       	ldd	r24, Y+4	; 0x04
    5128:	8b 30       	cpi	r24, 0x0B	; 11
    512a:	08 f0       	brcs	.+2      	; 0x512e <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x34>
    512c:	4b c0       	rjmp	.+150    	; 0x51c4 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0xca>
    512e:	c8 01       	movw	r24, r16
    5130:	02 96       	adiw	r24, 0x02	; 2
    5132:	6b e8       	ldi	r22, 0x8B	; 139
    5134:	72 e1       	ldi	r23, 0x12	; 18
    5136:	48 e1       	ldi	r20, 0x18	; 24
    5138:	5f e0       	ldi	r21, 0x0F	; 15
    513a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    513e:	8c 85       	ldd	r24, Y+12	; 0x0c
    5140:	ed b7       	in	r30, 0x3d	; 61
    5142:	fe b7       	in	r31, 0x3e	; 62
    5144:	38 97       	sbiw	r30, 0x08	; 8
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	fe bf       	out	0x3e, r31	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	ed bf       	out	0x3d, r30	; 61
    5150:	ad b7       	in	r26, 0x3d	; 61
    5152:	be b7       	in	r27, 0x3e	; 62
    5154:	11 96       	adiw	r26, 0x01	; 1
    5156:	27 e2       	ldi	r18, 0x27	; 39
    5158:	3f e0       	ldi	r19, 0x0F	; 15
    515a:	cd b7       	in	r28, 0x3d	; 61
    515c:	de b7       	in	r29, 0x3e	; 62
    515e:	3a 83       	std	Y+2, r19	; 0x02
    5160:	29 83       	std	Y+1, r18	; 0x01
    5162:	12 96       	adiw	r26, 0x02	; 2
    5164:	8c 93       	st	X, r24
    5166:	12 97       	sbiw	r26, 0x02	; 2
    5168:	13 96       	adiw	r26, 0x03	; 3
    516a:	1c 92       	st	X, r1
    516c:	13 97       	sbiw	r26, 0x03	; 3
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	88 0f       	add	r24, r24
    5172:	99 1f       	adc	r25, r25
    5174:	88 0f       	add	r24, r24
    5176:	99 1f       	adc	r25, r25
    5178:	e8 01       	movw	r28, r16
    517a:	e8 89       	ldd	r30, Y+16	; 0x10
    517c:	f9 89       	ldd	r31, Y+17	; 0x11
    517e:	e8 0f       	add	r30, r24
    5180:	f9 1f       	adc	r31, r25
    5182:	01 90       	ld	r0, Z+
    5184:	f0 81       	ld	r31, Z
    5186:	e0 2d       	mov	r30, r0
    5188:	83 81       	ldd	r24, Z+3	; 0x03
    518a:	94 81       	ldd	r25, Z+4	; 0x04
    518c:	15 96       	adiw	r26, 0x05	; 5
    518e:	9c 93       	st	X, r25
    5190:	8e 93       	st	-X, r24
    5192:	14 97       	sbiw	r26, 0x04	; 4
    5194:	8a 89       	ldd	r24, Y+18	; 0x12
    5196:	16 96       	adiw	r26, 0x06	; 6
    5198:	8c 93       	st	X, r24
    519a:	16 97       	sbiw	r26, 0x06	; 6
    519c:	17 96       	adiw	r26, 0x07	; 7
    519e:	1c 92       	st	X, r1
    51a0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    51a4:	ed b7       	in	r30, 0x3d	; 61
    51a6:	fe b7       	in	r31, 0x3e	; 62
    51a8:	36 96       	adiw	r30, 0x06	; 6
    51aa:	0f b6       	in	r0, 0x3f	; 63
    51ac:	f8 94       	cli
    51ae:	fe bf       	out	0x3e, r31	; 62
    51b0:	0f be       	out	0x3f, r0	; 63
    51b2:	ed bf       	out	0x3d, r30	; 61
    51b4:	8e e8       	ldi	r24, 0x8E	; 142
    51b6:	92 e1       	ldi	r25, 0x12	; 18
    51b8:	92 83       	std	Z+2, r25	; 0x02
    51ba:	81 83       	std	Z+1, r24	; 0x01
    51bc:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    51c0:	0f 90       	pop	r0
    51c2:	0f 90       	pop	r0

		if( indexOfGeneratedService == 0 )
    51c4:	d8 01       	movw	r26, r16
    51c6:	1c 96       	adiw	r26, 0x0c	; 12
    51c8:	8c 91       	ld	r24, X
    51ca:	1c 97       	sbiw	r26, 0x0c	; 12
    51cc:	88 23       	and	r24, r24
    51ce:	19 f5       	brne	.+70     	; 0x5216 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x11c>
		{
			//info( p << prefix << "1" << endl; )

			currentPageRenderer->renderHttpHeader( stream );
    51d0:	53 96       	adiw	r26, 0x13	; 19
    51d2:	8d 91       	ld	r24, X+
    51d4:	9c 91       	ld	r25, X
    51d6:	54 97       	sbiw	r26, 0x14	; 20
    51d8:	ec 01       	movw	r28, r24
    51da:	e8 81       	ld	r30, Y
    51dc:	f9 81       	ldd	r31, Y+1	; 0x01
    51de:	01 90       	ld	r0, Z+
    51e0:	f0 81       	ld	r31, Z
    51e2:	e0 2d       	mov	r30, r0
    51e4:	b6 01       	movw	r22, r12
    51e6:	19 95       	eicall

			//info( p << prefix << "2" << endl; )

			//chunkedStream.setStreamAndResetInternalState( stream );
			chunkedStream.setStream( stream );
    51e8:	e8 01       	movw	r28, r16
    51ea:	65 96       	adiw	r28, 0x15	; 21
    51ec:	ce 01       	movw	r24, r28
    51ee:	b6 01       	movw	r22, r12
    51f0:	0e 94 13 37 	call	0x6e26	; 0x6e26 <_ZN33StreamHttpChunkedTransferEncoding9setStreamEP6Stream>
			chunkedStream.resetInternalState();
    51f4:	ce 01       	movw	r24, r28
    51f6:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <_ZN33StreamHttpChunkedTransferEncoding18resetInternalStateEv>

			currentPageRenderer->renderPageTop( &chunkedStream );
    51fa:	f8 01       	movw	r30, r16
    51fc:	83 89       	ldd	r24, Z+19	; 0x13
    51fe:	94 89       	ldd	r25, Z+20	; 0x14
    5200:	dc 01       	movw	r26, r24
    5202:	ed 91       	ld	r30, X+
    5204:	fc 91       	ld	r31, X
    5206:	02 80       	ldd	r0, Z+2	; 0x02
    5208:	f3 81       	ldd	r31, Z+3	; 0x03
    520a:	e0 2d       	mov	r30, r0
    520c:	be 01       	movw	r22, r28
    520e:	19 95       	eicall

			chunkedStream.flush();
    5210:	ce 01       	movw	r24, r28
    5212:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <_ZN33StreamHttpChunkedTransferEncoding5flushEv>

			//info( p << prefix << "3" << endl; )
		}

		if( indexOfGeneratedService < selectedServicesCount )
    5216:	e8 01       	movw	r28, r16
    5218:	9c 85       	ldd	r25, Y+12	; 0x0c
    521a:	8a 89       	ldd	r24, Y+18	; 0x12
    521c:	98 17       	cp	r25, r24
    521e:	08 f0       	brcs	.+2      	; 0x5222 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x128>
    5220:	8b c0       	rjmp	.+278    	; 0x5338 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x23e>
		{
			//info( p << prefix << "4" << endl; )

			currentPageRenderer->renderBeforeRestService( &chunkedStream );
    5222:	8b 89       	ldd	r24, Y+19	; 0x13
    5224:	9c 89       	ldd	r25, Y+20	; 0x14
    5226:	25 e1       	ldi	r18, 0x15	; 21
    5228:	e2 2e       	mov	r14, r18
    522a:	f1 2c       	mov	r15, r1
    522c:	e0 0e       	add	r14, r16
    522e:	f1 1e       	adc	r15, r17
    5230:	dc 01       	movw	r26, r24
    5232:	ed 91       	ld	r30, X+
    5234:	fc 91       	ld	r31, X
    5236:	04 80       	ldd	r0, Z+4	; 0x04
    5238:	f5 81       	ldd	r31, Z+5	; 0x05
    523a:	e0 2d       	mov	r30, r0
    523c:	b7 01       	movw	r22, r14
    523e:	19 95       	eicall
			//info( p << prefix << "5" << endl; )

			//RestServiceRenderer* currentRestServiceRenderer = sendResponseAsServiceMetaDescription ? selectdServices[indexOfGeneratedService].metadescriptionRestServiceRenderer : ( sendResponseInJSON ? selectdServices[indexOfGeneratedService].jsonRestServiceRenderer : selectdServices[indexOfGeneratedService].htmlRestServiceRenderer);

			//unsigned char indexOfRenderer = sendResponseAsServiceMetaDescription ? 2 : ( sendResponseInJSON ? 1 : 0 );
			RestServiceRenderer* currentRestServiceRenderer = selectdServices[indexOfGeneratedService].restServiceRenderers[ sendResponseAsServiceMetaDescription ? 2 : ( sendResponseInJSON ? 1 : 0 ) ];
    5240:	8c 85       	ldd	r24, Y+12	; 0x0c
    5242:	90 e0       	ldi	r25, 0x00	; 0
    5244:	88 0f       	add	r24, r24
    5246:	99 1f       	adc	r25, r25
    5248:	88 0f       	add	r24, r24
    524a:	99 1f       	adc	r25, r25
    524c:	e8 89       	ldd	r30, Y+16	; 0x10
    524e:	f9 89       	ldd	r31, Y+17	; 0x11
    5250:	e8 0f       	add	r30, r24
    5252:	f9 1f       	adc	r31, r25
    5254:	22 81       	ldd	r18, Z+2	; 0x02
    5256:	33 81       	ldd	r19, Z+3	; 0x03
    5258:	8e 85       	ldd	r24, Y+14	; 0x0e
    525a:	88 23       	and	r24, r24
    525c:	31 f4       	brne	.+12     	; 0x526a <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x170>
    525e:	8f 85       	ldd	r24, Y+15	; 0x0f
    5260:	88 23       	and	r24, r24
    5262:	31 f0       	breq	.+12     	; 0x5270 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x176>
    5264:	82 e0       	ldi	r24, 0x02	; 2
    5266:	90 e0       	ldi	r25, 0x00	; 0
    5268:	05 c0       	rjmp	.+10     	; 0x5274 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x17a>
    526a:	84 e0       	ldi	r24, 0x04	; 4
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	02 c0       	rjmp	.+4      	; 0x5274 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x17a>
    5270:	80 e0       	ldi	r24, 0x00	; 0
    5272:	90 e0       	ldi	r25, 0x00	; 0
    5274:	82 0f       	add	r24, r18
    5276:	93 1f       	adc	r25, r19
    5278:	fc 01       	movw	r30, r24
    527a:	c0 81       	ld	r28, Z
    527c:	d1 81       	ldd	r29, Z+1	; 0x01

			//info( p << prefix << "6" << endl; )

			currentRestServiceRenderer->renderBeforeRestService( &chunkedStream );
    527e:	e8 81       	ld	r30, Y
    5280:	f9 81       	ldd	r31, Y+1	; 0x01
    5282:	01 90       	ld	r0, Z+
    5284:	f0 81       	ld	r31, Z
    5286:	e0 2d       	mov	r30, r0
    5288:	ce 01       	movw	r24, r28
    528a:	b7 01       	movw	r22, r14
    528c:	19 95       	eicall

			currentRestServiceRenderer->renderGetValue( &chunkedStream , selectdServices[indexOfGeneratedService].restService );
    528e:	d8 01       	movw	r26, r16
    5290:	1c 96       	adiw	r26, 0x0c	; 12
    5292:	8c 91       	ld	r24, X
    5294:	1c 97       	sbiw	r26, 0x0c	; 12
    5296:	28 81       	ld	r18, Y
    5298:	39 81       	ldd	r19, Y+1	; 0x01
    529a:	90 e0       	ldi	r25, 0x00	; 0
    529c:	88 0f       	add	r24, r24
    529e:	99 1f       	adc	r25, r25
    52a0:	88 0f       	add	r24, r24
    52a2:	99 1f       	adc	r25, r25
    52a4:	50 96       	adiw	r26, 0x10	; 16
    52a6:	ed 91       	ld	r30, X+
    52a8:	fc 91       	ld	r31, X
    52aa:	51 97       	sbiw	r26, 0x11	; 17
    52ac:	e8 0f       	add	r30, r24
    52ae:	f9 1f       	adc	r31, r25
    52b0:	40 81       	ld	r20, Z
    52b2:	51 81       	ldd	r21, Z+1	; 0x01
    52b4:	d9 01       	movw	r26, r18
    52b6:	14 96       	adiw	r26, 0x04	; 4
    52b8:	ed 91       	ld	r30, X+
    52ba:	fc 91       	ld	r31, X
    52bc:	15 97       	sbiw	r26, 0x05	; 5
    52be:	ce 01       	movw	r24, r28
    52c0:	b7 01       	movw	r22, r14
    52c2:	19 95       	eicall

			currentRestServiceRenderer->renderSpaceBetweenRestServicePatrs( &chunkedStream );
    52c4:	e8 81       	ld	r30, Y
    52c6:	f9 81       	ldd	r31, Y+1	; 0x01
    52c8:	02 80       	ldd	r0, Z+2	; 0x02
    52ca:	f3 81       	ldd	r31, Z+3	; 0x03
    52cc:	e0 2d       	mov	r30, r0
    52ce:	ce 01       	movw	r24, r28
    52d0:	b7 01       	movw	r22, r14
    52d2:	19 95       	eicall

			currentRestServiceRenderer->renderValueSetter( &chunkedStream , selectdServices[indexOfGeneratedService].restService );
    52d4:	f8 01       	movw	r30, r16
    52d6:	84 85       	ldd	r24, Z+12	; 0x0c
    52d8:	28 81       	ld	r18, Y
    52da:	39 81       	ldd	r19, Y+1	; 0x01
    52dc:	90 e0       	ldi	r25, 0x00	; 0
    52de:	88 0f       	add	r24, r24
    52e0:	99 1f       	adc	r25, r25
    52e2:	88 0f       	add	r24, r24
    52e4:	99 1f       	adc	r25, r25
    52e6:	00 88       	ldd	r0, Z+16	; 0x10
    52e8:	f1 89       	ldd	r31, Z+17	; 0x11
    52ea:	e0 2d       	mov	r30, r0
    52ec:	e8 0f       	add	r30, r24
    52ee:	f9 1f       	adc	r31, r25
    52f0:	40 81       	ld	r20, Z
    52f2:	51 81       	ldd	r21, Z+1	; 0x01
    52f4:	d9 01       	movw	r26, r18
    52f6:	16 96       	adiw	r26, 0x06	; 6
    52f8:	ed 91       	ld	r30, X+
    52fa:	fc 91       	ld	r31, X
    52fc:	17 97       	sbiw	r26, 0x07	; 7
    52fe:	ce 01       	movw	r24, r28
    5300:	b7 01       	movw	r22, r14
    5302:	19 95       	eicall

			currentRestServiceRenderer->renderAfterRestService( &chunkedStream );
    5304:	e8 81       	ld	r30, Y
    5306:	f9 81       	ldd	r31, Y+1	; 0x01
    5308:	00 84       	ldd	r0, Z+8	; 0x08
    530a:	f1 85       	ldd	r31, Z+9	; 0x09
    530c:	e0 2d       	mov	r30, r0
    530e:	ce 01       	movw	r24, r28
    5310:	b7 01       	movw	r22, r14
    5312:	19 95       	eicall

			currentPageRenderer->renderAfterRestService( &chunkedStream );
    5314:	e8 01       	movw	r28, r16
    5316:	8b 89       	ldd	r24, Y+19	; 0x13
    5318:	9c 89       	ldd	r25, Y+20	; 0x14
    531a:	dc 01       	movw	r26, r24
    531c:	ed 91       	ld	r30, X+
    531e:	fc 91       	ld	r31, X
    5320:	06 80       	ldd	r0, Z+6	; 0x06
    5322:	f7 81       	ldd	r31, Z+7	; 0x07
    5324:	e0 2d       	mov	r30, r0
    5326:	b7 01       	movw	r22, r14
    5328:	19 95       	eicall

			chunkedStream.flush();
    532a:	c8 01       	movw	r24, r16
    532c:	45 96       	adiw	r24, 0x15	; 21
    532e:	0e 94 72 37 	call	0x6ee4	; 0x6ee4 <_ZN33StreamHttpChunkedTransferEncoding5flushEv>
				}

				currentPageRenderer->renderAfterRestService( stream );
			}*/

			indexOfGeneratedService++;
    5332:	8c 85       	ldd	r24, Y+12	; 0x0c
    5334:	8f 5f       	subi	r24, 0xFF	; 255
    5336:	8c 87       	std	Y+12, r24	; 0x0c

			//delay( 100 ); // tutaj mozna spowolnic sztucznie odsylanie odpowiedzi
		}

		if( indexOfGeneratedService >= selectedServicesCount )
    5338:	e8 01       	movw	r28, r16
    533a:	9c 85       	ldd	r25, Y+12	; 0x0c
    533c:	8a 89       	ldd	r24, Y+18	; 0x12
    533e:	98 17       	cp	r25, r24
    5340:	f0 f0       	brcs	.+60     	; 0x537e <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x284>
		{
			currentPageRenderer->renderPageBottom( &chunkedStream );
    5342:	8b 89       	ldd	r24, Y+19	; 0x13
    5344:	9c 89       	ldd	r25, Y+20	; 0x14
    5346:	dc 01       	movw	r26, r24
    5348:	ed 91       	ld	r30, X+
    534a:	fc 91       	ld	r31, X
    534c:	65 96       	adiw	r28, 0x15	; 21
    534e:	00 84       	ldd	r0, Z+8	; 0x08
    5350:	f1 85       	ldd	r31, Z+9	; 0x09
    5352:	e0 2d       	mov	r30, r0
    5354:	be 01       	movw	r22, r28
    5356:	19 95       	eicall

			chunkedStream.finishChunkedTransmission();
    5358:	ce 01       	movw	r24, r28
    535a:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <_ZN33StreamHttpChunkedTransferEncoding25finishChunkedTransmissionEv>
			//chunkedStream.flush();

			if( readLasyByteFromStreamAfterFullResponse ) stream->read();
    535e:	e8 01       	movw	r28, r16
    5360:	8b 85       	ldd	r24, Y+11	; 0x0b
    5362:	88 23       	and	r24, r24
    5364:	41 f0       	breq	.+16     	; 0x5376 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x27c>
    5366:	d6 01       	movw	r26, r12
    5368:	ed 91       	ld	r30, X+
    536a:	fc 91       	ld	r31, X
    536c:	06 80       	ldd	r0, Z+6	; 0x06
    536e:	f7 81       	ldd	r31, Z+7	; 0x07
    5370:	e0 2d       	mov	r30, r0
    5372:	c6 01       	movw	r24, r12
    5374:	19 95       	eicall

			return errorSubTask;
    5376:	e8 01       	movw	r28, r16
    5378:	8d 81       	ldd	r24, Y+5	; 0x05
    537a:	9e 81       	ldd	r25, Y+6	; 0x06
    537c:	02 c0       	rjmp	.+4      	; 0x5382 <_ZN19SendResponseSubTask14executeSubTaskEP6Stream+0x288>
		}

		return NULL;
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    5382:	df 91       	pop	r29
    5384:	cf 91       	pop	r28
    5386:	1f 91       	pop	r17
    5388:	0f 91       	pop	r16
    538a:	ff 90       	pop	r15
    538c:	ef 90       	pop	r14
    538e:	df 90       	pop	r13
    5390:	cf 90       	pop	r12
    5392:	08 95       	ret

00005394 <_ZN19SendResponseSubTaskC1EP17RestServerSubTaskP12PageRendererS3_bP9AnyBufferIhhE>:

//const PROGMEM prog_char SendResponseSubTask::className[] = "SendResponseSubTask";

// =================================================

SendResponseSubTask::SendResponseSubTask( RestServerSubTask* _errorSubTask , PageRenderer* _htmlPageRenderer , PageRenderer* _jsonPageRenderer , bool _readLasyByteFromStreamAfterFullResponse , AnyBuffer< byte , byte >* _chunkedStreamBuffer )
    5394:	8f 92       	push	r8
    5396:	9f 92       	push	r9
    5398:	af 92       	push	r10
    539a:	bf 92       	push	r11
    539c:	cf 92       	push	r12
    539e:	df 92       	push	r13
    53a0:	ef 92       	push	r14
    53a2:	ff 92       	push	r15
    53a4:	0f 93       	push	r16
    53a6:	cf 93       	push	r28
    53a8:	df 93       	push	r29
    53aa:	ec 01       	movw	r28, r24
    53ac:	5b 01       	movw	r10, r22
    53ae:	4a 01       	movw	r8, r20
    53b0:	69 01       	movw	r12, r18
	: dp( PSTR( "SendResponseSubTask" ) ) ,
	  chunkedStream( _chunkedStreamBuffer , NULL )
    53b2:	27 ee       	ldi	r18, 0xE7	; 231
    53b4:	3e e0       	ldi	r19, 0x0E	; 14
    53b6:	fc 01       	movw	r30, r24
    53b8:	21 93       	st	Z+, r18
    53ba:	31 93       	st	Z+, r19
    53bc:	cf 01       	movw	r24, r30
    53be:	67 e8       	ldi	r22, 0x87	; 135
    53c0:	7e e0       	ldi	r23, 0x0E	; 14
    53c2:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    53c6:	ce 01       	movw	r24, r28
    53c8:	45 96       	adiw	r24, 0x15	; 21
    53ca:	b7 01       	movw	r22, r14
    53cc:	40 e0       	ldi	r20, 0x00	; 0
    53ce:	50 e0       	ldi	r21, 0x00	; 0
    53d0:	0e 94 20 37 	call	0x6e40	; 0x6e40 <_ZN33StreamHttpChunkedTransferEncodingC1EP9AnyBufferIhhEP6Stream>
{
	errorSubTask = _errorSubTask;
    53d4:	be 82       	std	Y+6, r11	; 0x06
    53d6:	ad 82       	std	Y+5, r10	; 0x05
	htmlPageRenderer = _htmlPageRenderer;
    53d8:	98 86       	std	Y+8, r9	; 0x08
    53da:	8f 82       	std	Y+7, r8	; 0x07
	jsonPageRenderer = _jsonPageRenderer;
    53dc:	da 86       	std	Y+10, r13	; 0x0a
    53de:	c9 86       	std	Y+9, r12	; 0x09
	readLasyByteFromStreamAfterFullResponse = _readLasyByteFromStreamAfterFullResponse;
    53e0:	0b 87       	std	Y+11, r16	; 0x0b

	//chunkedStreamPtr = &chunkedStream;
}
    53e2:	df 91       	pop	r29
    53e4:	cf 91       	pop	r28
    53e6:	0f 91       	pop	r16
    53e8:	ff 90       	pop	r15
    53ea:	ef 90       	pop	r14
    53ec:	df 90       	pop	r13
    53ee:	cf 90       	pop	r12
    53f0:	bf 90       	pop	r11
    53f2:	af 90       	pop	r10
    53f4:	9f 90       	pop	r9
    53f6:	8f 90       	pop	r8
    53f8:	08 95       	ret

000053fa <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh>:
}

// =================================================

void SendResponseSubTask::setWork( bool _isGETHttpMethod , bool _sendResponseInJSON, bool _sendResponseAsServiceMetaDescription , ServiceDescription* _selectdServices , unsigned char _selectedServicesCount )
{
    53fa:	ef 92       	push	r14
    53fc:	0f 93       	push	r16
    53fe:	1f 93       	push	r17
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "setWork";
	//static const char* prefix = "SendResponseSubTask:setWork():";

	isGETHttpMethod = _isGETHttpMethod;
    5406:	6d 87       	std	Y+13, r22	; 0x0d
	sendResponseInJSON = _sendResponseInJSON;
    5408:	4f 87       	std	Y+15, r20	; 0x0f
	sendResponseAsServiceMetaDescription = _sendResponseAsServiceMetaDescription;
    540a:	2e 87       	std	Y+14, r18	; 0x0e
	selectdServices = _selectdServices;
    540c:	19 8b       	std	Y+17, r17	; 0x11
    540e:	08 8b       	std	Y+16, r16	; 0x10
	selectedServicesCount = _selectedServicesCount;
    5410:	ea 8a       	std	Y+18, r14	; 0x12

	if( sendResponseAsServiceMetaDescription ) sendResponseInJSON = true;
    5412:	22 23       	and	r18, r18
    5414:	11 f0       	breq	.+4      	; 0x541a <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh+0x20>
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	8f 87       	std	Y+15, r24	; 0x0f

	//all( p << prefix << "isGETHttpMethod = " << isGETHttpMethod << ", sendResponseInJSON = " << sendResponseInJSON << ", sendResponseAsServiceMetaDescription = " << sendResponseAsServiceMetaDescription << ", selectedServicesCount = " << selectedServicesCount << endl; )
	//all( wpln( "isGETHttpMethod = %u, sendResponseInJSON = %u, sendResponseAsServiceMetaDescription = %u, selectedServicesCount = %u" , isGETHttpMethod , sendResponseInJSON , sendResponseAsServiceMetaDescription , selectedServicesCount ) )
	aln( "isGETHttpMethod = %u, sendResponseInJSON = %u, sendResponseAsServiceMetaDescription = %u, selectedServicesCount = %u" , isGETHttpMethod , sendResponseInJSON , sendResponseAsServiceMetaDescription , selectedServicesCount )
    541a:	8c 81       	ldd	r24, Y+4	; 0x04
    541c:	8b 30       	cpi	r24, 0x0B	; 11
    541e:	c8 f5       	brcc	.+114    	; 0x5492 <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh+0x98>
    5420:	ce 01       	movw	r24, r28
    5422:	02 96       	adiw	r24, 0x02	; 2
    5424:	6b e8       	ldi	r22, 0x8B	; 139
    5426:	72 e1       	ldi	r23, 0x12	; 18
    5428:	4b e9       	ldi	r20, 0x9B	; 155
    542a:	5e e0       	ldi	r21, 0x0E	; 14
    542c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    5430:	8d b7       	in	r24, 0x3d	; 61
    5432:	9e b7       	in	r25, 0x3e	; 62
    5434:	0a 97       	sbiw	r24, 0x0a	; 10
    5436:	0f b6       	in	r0, 0x3f	; 63
    5438:	f8 94       	cli
    543a:	9e bf       	out	0x3e, r25	; 62
    543c:	0f be       	out	0x3f, r0	; 63
    543e:	8d bf       	out	0x3d, r24	; 61
    5440:	ed b7       	in	r30, 0x3d	; 61
    5442:	fe b7       	in	r31, 0x3e	; 62
    5444:	31 96       	adiw	r30, 0x01	; 1
    5446:	83 ea       	ldi	r24, 0xA3	; 163
    5448:	9e e0       	ldi	r25, 0x0E	; 14
    544a:	ad b7       	in	r26, 0x3d	; 61
    544c:	be b7       	in	r27, 0x3e	; 62
    544e:	12 96       	adiw	r26, 0x02	; 2
    5450:	9c 93       	st	X, r25
    5452:	8e 93       	st	-X, r24
    5454:	11 97       	sbiw	r26, 0x01	; 1
    5456:	8d 85       	ldd	r24, Y+13	; 0x0d
    5458:	82 83       	std	Z+2, r24	; 0x02
    545a:	13 82       	std	Z+3, r1	; 0x03
    545c:	8f 85       	ldd	r24, Y+15	; 0x0f
    545e:	84 83       	std	Z+4, r24	; 0x04
    5460:	15 82       	std	Z+5, r1	; 0x05
    5462:	8e 85       	ldd	r24, Y+14	; 0x0e
    5464:	86 83       	std	Z+6, r24	; 0x06
    5466:	17 82       	std	Z+7, r1	; 0x07
    5468:	8a 89       	ldd	r24, Y+18	; 0x12
    546a:	80 87       	std	Z+8, r24	; 0x08
    546c:	11 86       	std	Z+9, r1	; 0x09
    546e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    5472:	ed b7       	in	r30, 0x3d	; 61
    5474:	fe b7       	in	r31, 0x3e	; 62
    5476:	38 96       	adiw	r30, 0x08	; 8
    5478:	0f b6       	in	r0, 0x3f	; 63
    547a:	f8 94       	cli
    547c:	fe bf       	out	0x3e, r31	; 62
    547e:	0f be       	out	0x3f, r0	; 63
    5480:	ed bf       	out	0x3d, r30	; 61
    5482:	8e e8       	ldi	r24, 0x8E	; 142
    5484:	92 e1       	ldi	r25, 0x12	; 18
    5486:	92 83       	std	Z+2, r25	; 0x02
    5488:	81 83       	std	Z+1, r24	; 0x01
    548a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    548e:	0f 90       	pop	r0
    5490:	0f 90       	pop	r0

	currentPageRenderer = sendResponseInJSON ? jsonPageRenderer : htmlPageRenderer;
    5492:	8f 85       	ldd	r24, Y+15	; 0x0f
    5494:	88 23       	and	r24, r24
    5496:	19 f0       	breq	.+6      	; 0x549e <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh+0xa4>
    5498:	89 85       	ldd	r24, Y+9	; 0x09
    549a:	9a 85       	ldd	r25, Y+10	; 0x0a
    549c:	02 c0       	rjmp	.+4      	; 0x54a2 <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh+0xa8>
    549e:	8f 81       	ldd	r24, Y+7	; 0x07
    54a0:	98 85       	ldd	r25, Y+8	; 0x08
    54a2:	9c 8b       	std	Y+20, r25	; 0x14
    54a4:	8b 8b       	std	Y+19, r24	; 0x13

	//if( sendResponseInJSON )
	//	currentPageRenderer = jsonPageRenderer;
	//else
	//	currentPageRenderer = htmlPageRenderer;
}
    54a6:	df 91       	pop	r29
    54a8:	cf 91       	pop	r28
    54aa:	1f 91       	pop	r17
    54ac:	0f 91       	pop	r16
    54ae:	ef 90       	pop	r14
    54b0:	08 95       	ret

000054b2 <_ZN29SkipBytesUntilSequenceSubTask14getSubTaskNameEv>:
// =================================================

char* SkipBytesUntilSequenceSubTask::getSubTaskName()
{
	return "SkipBytesUntilSequence-sub-task";
}
    54b2:	85 ec       	ldi	r24, 0xC5	; 197
    54b4:	94 e0       	ldi	r25, 0x04	; 4
    54b6:	08 95       	ret

000054b8 <_ZN29SkipBytesUntilSequenceSubTask18resetInternalStateEv>:
{
	//alreadySkippedBytesCount = 0;
	//alreadyMatchedBytesCount = 0;

	//startTime = millis();
}
    54b8:	08 95       	ret

000054ba <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream>:

// =================================================

RestServerSubTask* SkipBytesUntilSequenceSubTask::executeSubTask( Stream* stream )
{
    54ba:	0f 93       	push	r16
    54bc:	1f 93       	push	r17
    54be:	cf 93       	push	r28
    54c0:	df 93       	push	r29
    54c2:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "SkipBytesUntilSequenceSubTask:executeSubTask():";

	int streamReadingResult = 0;

	streamSkipBytes.setStream( stream );
    54c4:	8c 01       	movw	r16, r24
    54c6:	07 5f       	subi	r16, 0xF7	; 247
    54c8:	1f 4f       	sbci	r17, 0xFF	; 255
    54ca:	c8 01       	movw	r24, r16
    54cc:	0e 94 19 3b 	call	0x7632	; 0x7632 <_ZN15StreamSkipBytes9setStreamEP6Stream>

	while( ( streamReadingResult = streamSkipBytes.read() ) == 0 ){}
    54d0:	c8 01       	movw	r24, r16
    54d2:	0e 94 a9 39 	call	0x7352	; 0x7352 <_ZN15StreamSkipBytes4readEv>
    54d6:	00 97       	sbiw	r24, 0x00	; 0
    54d8:	d9 f3       	breq	.-10     	; 0x54d0 <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream+0x16>

	if( streamReadingResult == -1 )
    54da:	2f ef       	ldi	r18, 0xFF	; 255
    54dc:	8f 3f       	cpi	r24, 0xFF	; 255
    54de:	92 07       	cpc	r25, r18
    54e0:	49 f0       	breq	.+18     	; 0x54f4 <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream+0x3a>
	{
		return NULL;
	}
	else
	if( streamReadingResult == 1 )
    54e2:	81 30       	cpi	r24, 0x01	; 1
    54e4:	91 05       	cpc	r25, r1
    54e6:	19 f4       	brne	.+6      	; 0x54ee <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream+0x34>
	{
		return nextSubTask;
    54e8:	8f 81       	ldd	r24, Y+7	; 0x07
    54ea:	98 85       	ldd	r25, Y+8	; 0x08
    54ec:	05 c0       	rjmp	.+10     	; 0x54f8 <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream+0x3e>
	}
	else
	{
		return errorSubTask;
    54ee:	8d 81       	ldd	r24, Y+5	; 0x05
    54f0:	9e 81       	ldd	r25, Y+6	; 0x06
    54f2:	02 c0       	rjmp	.+4      	; 0x54f8 <_ZN29SkipBytesUntilSequenceSubTask14executeSubTaskEP6Stream+0x3e>

	while( ( streamReadingResult = streamSkipBytes.read() ) == 0 ){}

	if( streamReadingResult == -1 )
	{
		return NULL;
    54f4:	80 e0       	ldi	r24, 0x00	; 0
    54f6:	90 e0       	ldi	r25, 0x00	; 0
			alreadySkippedBytesCount++;
		}

		return errorSubTask;
	}*/
}
    54f8:	df 91       	pop	r29
    54fa:	cf 91       	pop	r28
    54fc:	1f 91       	pop	r17
    54fe:	0f 91       	pop	r16
    5500:	08 95       	ret

00005502 <_ZN29SkipBytesUntilSequenceSubTaskC1EP17RestServerSubTask>:
//const PROGMEM prog_char SkipBytesUntilSequenceSubTask::className[] = "SkipBytesUntilSequenceSubTask";

// =================================================

//SkipBytesUntilSequenceSubTask::SkipBytesUntilSequenceSubTask( Print& _p , RestServerSubTask* _errorSubTask , unsigned int _skippingMaxTime , unsigned int _skippingMaxBytesCount ) : p( _p )
SkipBytesUntilSequenceSubTask::SkipBytesUntilSequenceSubTask( RestServerSubTask* _errorSubTask ) : dp( PSTR( "SkipBytesUntilSequenceSubTask" ) )//: p( _p ) //, streamSkipBytes( _p )
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	ec 01       	movw	r28, r24
    550c:	8b 01       	movw	r16, r22
    550e:	21 ef       	ldi	r18, 0xF1	; 241
    5510:	3e e0       	ldi	r19, 0x0E	; 14
    5512:	fc 01       	movw	r30, r24
    5514:	21 93       	st	Z+, r18
    5516:	31 93       	st	Z+, r19
    5518:	cf 01       	movw	r24, r30
    551a:	60 e9       	ldi	r22, 0x90	; 144
    551c:	7f e0       	ldi	r23, 0x0F	; 15
    551e:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    5522:	ce 01       	movw	r24, r28
    5524:	09 96       	adiw	r24, 0x09	; 9
    5526:	0e 94 f9 3a 	call	0x75f2	; 0x75f2 <_ZN15StreamSkipBytesC1Ev>
{
	errorSubTask = _errorSubTask;
    552a:	1e 83       	std	Y+6, r17	; 0x06
    552c:	0d 83       	std	Y+5, r16	; 0x05
	//skippingMaxTime = _skippingMaxTime;
	//skippingMaxBytesCount = _skippingMaxBytesCount;
}
    552e:	df 91       	pop	r29
    5530:	cf 91       	pop	r28
    5532:	1f 91       	pop	r17
    5534:	0f 91       	pop	r16
    5536:	08 95       	ret

00005538 <_ZN29SkipBytesUntilSequenceSubTask29setStopSequenceAndNextSubTaskEPcbP17RestServerSubTask>:
{
	//workUsingSkipBytesCount = false;

	//stopSequence = _stopSequence;
	//leaveLastByteInStream = _leaveLastByteInStream;
	nextSubTask = _nextSubTask;
    5538:	fc 01       	movw	r30, r24
    553a:	30 87       	std	Z+8, r19	; 0x08
    553c:	27 83       	std	Z+7, r18	; 0x07

	streamSkipBytes.resetInternalState( _stopSequence , _leaveLastByteInStream );
    553e:	09 96       	adiw	r24, 0x09	; 9
    5540:	0e 94 23 3b 	call	0x7646	; 0x7646 <_ZN15StreamSkipBytes18resetInternalStateEPcb>
}
    5544:	08 95       	ret

00005546 <_ZN29SkipBytesUntilSequenceSubTask31setSkipBytesCountAndNextSubTaskEjP17RestServerSubTask>:
void SkipBytesUntilSequenceSubTask::setSkipBytesCountAndNextSubTask( unsigned int _skipBytesCount , RestServerSubTask* _nextSubTask )
{
	//workUsingSkipBytesCount = true;

	//skipBytesCount = _skipBytesCount;
	nextSubTask = _nextSubTask;
    5546:	fc 01       	movw	r30, r24
    5548:	50 87       	std	Z+8, r21	; 0x08
    554a:	47 83       	std	Z+7, r20	; 0x07

	streamSkipBytes.resetInternalState( _skipBytesCount );
    554c:	09 96       	adiw	r24, 0x09	; 9
    554e:	0e 94 1d 3b 	call	0x763a	; 0x763a <_ZN15StreamSkipBytes18resetInternalStateEj>
}
    5552:	08 95       	ret

00005554 <_ZN21TableHTMLPageRenderer22renderAfterRestServiceEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::renderAfterRestService( Stream* stream )
{
    5554:	cb 01       	movw	r24, r22
	stream->write( "</tr>" );
    5556:	65 ee       	ldi	r22, 0xE5	; 229
    5558:	74 e0       	ldi	r23, 0x04	; 4
    555a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    555e:	08 95       	ret

00005560 <_ZN21TableHTMLPageRenderer23renderBeforeRestServiceEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::renderBeforeRestService( Stream* stream )
{
    5560:	cf 93       	push	r28
    5562:	df 93       	push	r29
    5564:	ec 01       	movw	r28, r24
    5566:	cb 01       	movw	r24, r22
	if( generateLighterRowBackground )
    5568:	2f 81       	ldd	r18, Y+7	; 0x07
    556a:	22 23       	and	r18, r18
    556c:	19 f0       	breq	.+6      	; 0x5574 <_ZN21TableHTMLPageRenderer23renderBeforeRestServiceEP6Stream+0x14>
		stream->write( "<tr style='background-color:#f7f6ec;'>" );
    556e:	6b ee       	ldi	r22, 0xEB	; 235
    5570:	74 e0       	ldi	r23, 0x04	; 4
    5572:	02 c0       	rjmp	.+4      	; 0x5578 <_ZN21TableHTMLPageRenderer23renderBeforeRestServiceEP6Stream+0x18>
	else
		stream->write( "<tr>" );
    5574:	62 e1       	ldi	r22, 0x12	; 18
    5576:	75 e0       	ldi	r23, 0x05	; 5
    5578:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	generateLighterRowBackground = !generateLighterRowBackground;
    557c:	8f 81       	ldd	r24, Y+7	; 0x07
    557e:	91 e0       	ldi	r25, 0x01	; 1
    5580:	89 27       	eor	r24, r25
    5582:	8f 83       	std	Y+7, r24	; 0x07
}
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	08 95       	ret

0000558a <_ZN21TableHTMLPageRenderer13renderPageTopEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::renderPageTop( Stream* stream )
{
    558a:	cf 93       	push	r28
    558c:	df 93       	push	r29
    558e:	d6 2f       	mov	r29, r22
    5590:	c7 2f       	mov	r28, r23
	stream->write( "<html><body style='background-color:#dbdbdb;'>" );
    5592:	86 2f       	mov	r24, r22
    5594:	97 2f       	mov	r25, r23
    5596:	67 e1       	ldi	r22, 0x17	; 23
    5598:	75 e0       	ldi	r23, 0x05	; 5
    559a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( "<table width='100%' style='border-width:1px;background-color:#efeee5;border-style:solid;border-color:#000000;'><tr style='background-color:#dbeeff;text-align:center;font-weight:bold;'><td>ID</td><td>NAME</td><td>VALUE</td><td>SET NEW VALUE</td></tr>" );
    559e:	8d 2f       	mov	r24, r29
    55a0:	9c 2f       	mov	r25, r28
    55a2:	66 e4       	ldi	r22, 0x46	; 70
    55a4:	75 e0       	ldi	r23, 0x05	; 5
    55a6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    55aa:	df 91       	pop	r29
    55ac:	cf 91       	pop	r28
    55ae:	08 95       	ret

000055b0 <_ZN21TableHTMLPageRenderer16renderHttpHeaderEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::renderHttpHeader( Stream* stream )
{
    55b0:	cf 93       	push	r28
    55b2:	df 93       	push	r29
    55b4:	eb 01       	movw	r28, r22
	if( pageRendererTimeMeasurement != NULL ) pageRendererTimeMeasurement->saveTime();
    55b6:	fc 01       	movw	r30, r24
    55b8:	85 81       	ldd	r24, Z+5	; 0x05
    55ba:	96 81       	ldd	r25, Z+6	; 0x06
    55bc:	00 97       	sbiw	r24, 0x00	; 0
    55be:	11 f0       	breq	.+4      	; 0x55c4 <_ZN21TableHTMLPageRenderer16renderHttpHeaderEP6Stream+0x14>
    55c0:	0e 94 2a 3b 	call	0x7654	; 0x7654 <_ZN15TimeMeasurement8saveTimeEv>
	//stream->write( "HTTP/1.0 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\n\r\n" );
	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: keep-alive\r\nKeep-Alive: timeout=10, max=1\r\n\r\n" );

	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nTransfer-Encoding: chunked\r\n\r\n" );

	stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nTransfer-Encoding: chunked\r\nConnection: close\r\n\r\n" );
    55c4:	ce 01       	movw	r24, r28
    55c6:	60 e4       	ldi	r22, 0x40	; 64
    55c8:	76 e0       	ldi	r23, 0x06	; 6
    55ca:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nTransfer-Encoding: chunked\r\nConnection: keep-alive\r\n\r\n" );
}
    55ce:	df 91       	pop	r29
    55d0:	cf 91       	pop	r28
    55d2:	08 95       	ret

000055d4 <_ZN21TableHTMLPageRendererC1EPP18ServiceDescriptionhP15TimeMeasurement>:

#include "TableHTMLPageRenderer.h"

// =================================================

TableHTMLPageRenderer::TableHTMLPageRenderer( ServiceDescription** _serviceDescrptions , unsigned char _serviceDescrptionsCount , TimeMeasurement* _pageRendererTimeMeasurement )
    55d4:	fc 01       	movw	r30, r24
    55d6:	8b ef       	ldi	r24, 0xFB	; 251
    55d8:	9e e0       	ldi	r25, 0x0E	; 14
    55da:	91 83       	std	Z+1, r25	; 0x01
    55dc:	80 83       	st	Z, r24
{
	serviceDescrptions = _serviceDescrptions;
    55de:	73 83       	std	Z+3, r23	; 0x03
    55e0:	62 83       	std	Z+2, r22	; 0x02
	serviceDescrptionsCount = _serviceDescrptionsCount;
    55e2:	44 83       	std	Z+4, r20	; 0x04
	pageRendererTimeMeasurement = _pageRendererTimeMeasurement;
    55e4:	36 83       	std	Z+6, r19	; 0x06
    55e6:	25 83       	std	Z+5, r18	; 0x05

	generateLighterRowBackground = true;
    55e8:	81 e0       	ldi	r24, 0x01	; 1
    55ea:	87 83       	std	Z+7, r24	; 0x07
}
    55ec:	08 95       	ret

000055ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>:
}

// =================================================

void TableHTMLPageRenderer::generateReadOnlyOrUpdateableServicesNamesForLink( Stream* stream , bool generateReadOnly )
{
    55ee:	bf 92       	push	r11
    55f0:	cf 92       	push	r12
    55f2:	df 92       	push	r13
    55f4:	ef 92       	push	r14
    55f6:	ff 92       	push	r15
    55f8:	0f 93       	push	r16
    55fa:	1f 93       	push	r17
    55fc:	cf 93       	push	r28
    55fe:	df 93       	push	r29
    5600:	7c 01       	movw	r14, r24
    5602:	16 2f       	mov	r17, r22
    5604:	07 2f       	mov	r16, r23
    5606:	b4 2e       	mov	r11, r20
	for( unsigned int i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    5608:	c0 e0       	ldi	r28, 0x00	; 0
    560a:	d0 e0       	ldi	r29, 0x00	; 0
    560c:	cc 24       	eor	r12, r12
    560e:	dd 24       	eor	r13, r13
    5610:	33 c0       	rjmp	.+102    	; 0x5678 <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x8a>
    5612:	d7 01       	movw	r26, r14
    5614:	12 96       	adiw	r26, 0x02	; 2
    5616:	8d 91       	ld	r24, X+
    5618:	9c 91       	ld	r25, X
    561a:	13 97       	sbiw	r26, 0x03	; 3
	{
		if( generateReadOnly && serviceDescrptions[i]->restService->type == 0 )
    561c:	8c 0f       	add	r24, r28
    561e:	9d 1f       	adc	r25, r29
    5620:	dc 01       	movw	r26, r24
    5622:	ed 91       	ld	r30, X+
    5624:	fc 91       	ld	r31, X
    5626:	11 97       	sbiw	r26, 0x01	; 1
    5628:	01 90       	ld	r0, Z+
    562a:	f0 81       	ld	r31, Z
    562c:	e0 2d       	mov	r30, r0
    562e:	85 81       	ldd	r24, Z+5	; 0x05
    5630:	bb 20       	and	r11, r11
    5632:	19 f0       	breq	.+6      	; 0x563a <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x4c>
    5634:	88 23       	and	r24, r24
    5636:	e1 f4       	brne	.+56     	; 0x5670 <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x82>
    5638:	02 c0       	rjmp	.+4      	; 0x563e <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x50>
		{
			stream->write( "/" );
			stream->write( serviceDescrptions[i]->restService->name );
		}
		else
		if( !generateReadOnly && serviceDescrptions[i]->restService->type > 0 )
    563a:	88 23       	and	r24, r24
    563c:	c9 f0       	breq	.+50     	; 0x5670 <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x82>
		{
			stream->write( "/" );
    563e:	81 2f       	mov	r24, r17
    5640:	90 2f       	mov	r25, r16
    5642:	6c e9       	ldi	r22, 0x9C	; 156
    5644:	76 e0       	ldi	r23, 0x06	; 6
    5646:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( serviceDescrptions[i]->restService->name );
    564a:	d7 01       	movw	r26, r14
    564c:	12 96       	adiw	r26, 0x02	; 2
    564e:	ed 91       	ld	r30, X+
    5650:	fc 91       	ld	r31, X
    5652:	13 97       	sbiw	r26, 0x03	; 3
    5654:	ec 0f       	add	r30, r28
    5656:	fd 1f       	adc	r31, r29
    5658:	01 90       	ld	r0, Z+
    565a:	f0 81       	ld	r31, Z
    565c:	e0 2d       	mov	r30, r0
    565e:	01 90       	ld	r0, Z+
    5660:	f0 81       	ld	r31, Z
    5662:	e0 2d       	mov	r30, r0
    5664:	63 81       	ldd	r22, Z+3	; 0x03
    5666:	74 81       	ldd	r23, Z+4	; 0x04
    5668:	81 2f       	mov	r24, r17
    566a:	90 2f       	mov	r25, r16
    566c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

// =================================================

void TableHTMLPageRenderer::generateReadOnlyOrUpdateableServicesNamesForLink( Stream* stream , bool generateReadOnly )
{
	for( unsigned int i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    5670:	08 94       	sec
    5672:	c1 1c       	adc	r12, r1
    5674:	d1 1c       	adc	r13, r1
    5676:	22 96       	adiw	r28, 0x02	; 2
    5678:	f7 01       	movw	r30, r14
    567a:	84 81       	ldd	r24, Z+4	; 0x04
    567c:	90 e0       	ldi	r25, 0x00	; 0
    567e:	02 97       	sbiw	r24, 0x02	; 2
    5680:	c8 16       	cp	r12, r24
    5682:	d9 06       	cpc	r13, r25
    5684:	30 f2       	brcs	.-116    	; 0x5612 <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb+0x24>
		{
			stream->write( "/" );
			stream->write( serviceDescrptions[i]->restService->name );
		}
	}
}
    5686:	df 91       	pop	r29
    5688:	cf 91       	pop	r28
    568a:	1f 91       	pop	r17
    568c:	0f 91       	pop	r16
    568e:	ff 90       	pop	r15
    5690:	ef 90       	pop	r14
    5692:	df 90       	pop	r13
    5694:	cf 90       	pop	r12
    5696:	bf 90       	pop	r11
    5698:	08 95       	ret

0000569a <_ZN21TableHTMLPageRenderer12generateHelpEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::generateHelp( Stream* stream )
{
    569a:	af 92       	push	r10
    569c:	bf 92       	push	r11
    569e:	cf 92       	push	r12
    56a0:	df 92       	push	r13
    56a2:	ef 92       	push	r14
    56a4:	ff 92       	push	r15
    56a6:	0f 93       	push	r16
    56a8:	1f 93       	push	r17
    56aa:	cf 93       	push	r28
    56ac:	df 93       	push	r29
    56ae:	8c 01       	movw	r16, r24
    56b0:	eb 01       	movw	r28, r22
	// ---------

	stream->write( "<font size='+1' style='font-family:Arial,Helvetica,Verdana,sans-serif;'><b>Useful links:</b></font><br />" );
    56b2:	cb 01       	movw	r24, r22
    56b4:	6e e9       	ldi	r22, 0x9E	; 158
    56b6:	76 e0       	ldi	r23, 0x06	; 6
    56b8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "Show data normally:&nbsp;" );
    56bc:	ce 01       	movw	r24, r28
    56be:	68 e0       	ldi	r22, 0x08	; 8
    56c0:	77 e0       	ldi	r23, 0x07	; 7
    56c2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/'>all</a>,&nbsp;" );
    56c6:	ce 01       	movw	r24, r28
    56c8:	62 e2       	ldi	r22, 0x22	; 34
    56ca:	77 e0       	ldi	r23, 0x07	; 7
    56cc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='" );
    56d0:	8d e3       	ldi	r24, 0x3D	; 61
    56d2:	e8 2e       	mov	r14, r24
    56d4:	87 e0       	ldi	r24, 0x07	; 7
    56d6:	f8 2e       	mov	r15, r24
    56d8:	ce 01       	movw	r24, r28
    56da:	b7 01       	movw	r22, r14
    56dc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , true );
    56e0:	c8 01       	movw	r24, r16
    56e2:	be 01       	movw	r22, r28
    56e4:	41 e0       	ldi	r20, 0x01	; 1
    56e6:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>read only</a>,&nbsp;" );
    56ea:	27 e4       	ldi	r18, 0x47	; 71
    56ec:	a2 2e       	mov	r10, r18
    56ee:	27 e0       	ldi	r18, 0x07	; 7
    56f0:	b2 2e       	mov	r11, r18
    56f2:	ce 01       	movw	r24, r28
    56f4:	b5 01       	movw	r22, r10
    56f6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='" );
    56fa:	ce 01       	movw	r24, r28
    56fc:	b7 01       	movw	r22, r14
    56fe:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , false );
    5702:	c8 01       	movw	r24, r16
    5704:	be 01       	movw	r22, r28
    5706:	40 e0       	ldi	r20, 0x00	; 0
    5708:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>updateable</a>, or in JSON:&nbsp;" );
    570c:	ce 01       	movw	r24, r28
    570e:	6e e5       	ldi	r22, 0x5E	; 94
    5710:	77 e0       	ldi	r23, 0x07	; 7
    5712:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------

	stream->write( "<a href='/j'>all</a>,&nbsp;" );
    5716:	ce 01       	movw	r24, r28
    5718:	62 e8       	ldi	r22, 0x82	; 130
    571a:	77 e0       	ldi	r23, 0x07	; 7
    571c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/j" );
    5720:	3e e9       	ldi	r19, 0x9E	; 158
    5722:	e3 2e       	mov	r14, r19
    5724:	37 e0       	ldi	r19, 0x07	; 7
    5726:	f3 2e       	mov	r15, r19
    5728:	ce 01       	movw	r24, r28
    572a:	b7 01       	movw	r22, r14
    572c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , true );
    5730:	c8 01       	movw	r24, r16
    5732:	be 01       	movw	r22, r28
    5734:	41 e0       	ldi	r20, 0x01	; 1
    5736:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>read only</a>,&nbsp;" );
    573a:	ce 01       	movw	r24, r28
    573c:	b5 01       	movw	r22, r10
    573e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/j" );
    5742:	ce 01       	movw	r24, r28
    5744:	b7 01       	movw	r22, r14
    5746:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , false );
    574a:	c8 01       	movw	r24, r16
    574c:	be 01       	movw	r22, r28
    574e:	40 e0       	ldi	r20, 0x00	; 0
    5750:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>updateable</a>." );
    5754:	4a ea       	ldi	r20, 0xAA	; 170
    5756:	c4 2e       	mov	r12, r20
    5758:	47 e0       	ldi	r20, 0x07	; 7
    575a:	d4 2e       	mov	r13, r20
    575c:	ce 01       	movw	r24, r28
    575e:	b6 01       	movw	r22, r12
    5760:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------

	stream->write( "<br />Show metadescription:&nbsp;" );
    5764:	ce 01       	movw	r24, r28
    5766:	6c eb       	ldi	r22, 0xBC	; 188
    5768:	77 e0       	ldi	r23, 0x07	; 7
    576a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/m'>all</a>,&nbsp;" );
    576e:	ce 01       	movw	r24, r28
    5770:	6e ed       	ldi	r22, 0xDE	; 222
    5772:	77 e0       	ldi	r23, 0x07	; 7
    5774:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/m" );
    5778:	5a ef       	ldi	r21, 0xFA	; 250
    577a:	e5 2e       	mov	r14, r21
    577c:	57 e0       	ldi	r21, 0x07	; 7
    577e:	f5 2e       	mov	r15, r21
    5780:	ce 01       	movw	r24, r28
    5782:	b7 01       	movw	r22, r14
    5784:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , true );
    5788:	c8 01       	movw	r24, r16
    578a:	be 01       	movw	r22, r28
    578c:	41 e0       	ldi	r20, 0x01	; 1
    578e:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>read only</a>,&nbsp;" );
    5792:	ce 01       	movw	r24, r28
    5794:	b5 01       	movw	r22, r10
    5796:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<a href='/m" );
    579a:	ce 01       	movw	r24, r28
    579c:	b7 01       	movw	r22, r14
    579e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	generateReadOnlyOrUpdateableServicesNamesForLink( stream , false );
    57a2:	c8 01       	movw	r24, r16
    57a4:	be 01       	movw	r22, r28
    57a6:	40 e0       	ldi	r20, 0x00	; 0
    57a8:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <_ZN21TableHTMLPageRenderer48generateReadOnlyOrUpdateableServicesNamesForLinkEP6Streamb>
	stream->write( "'>updateable</a>." );
    57ac:	ce 01       	movw	r24, r28
    57ae:	b6 01       	movw	r22, r12
    57b0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------

	//stream->write( "<hr width='40%'/>" );
	stream->write( "<hr />" );
    57b4:	ce 01       	movw	r24, r28
    57b6:	66 e0       	ldi	r22, 0x06	; 6
    57b8:	78 e0       	ldi	r23, 0x08	; 8
    57ba:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------

	stream->write( "<font size='+1' style='font-family:Arial,Helvetica,Verdana,sans-serif;'><b>Help:</b></font><br />" );
    57be:	ce 01       	movw	r24, r28
    57c0:	6d e0       	ldi	r22, 0x0D	; 13
    57c2:	78 e0       	ldi	r23, 0x08	; 8
    57c4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "&nbsp;-&nbsp;ask about services using '*', for example asking for all services starting with 'soft' and 'tim' will be <font color='#000083'>http://192.168.1.10/<b>soft*</b>/<b>tim*</b></font>" );
    57c8:	ce 01       	movw	r24, r28
    57ca:	6f e6       	ldi	r22, 0x6F	; 111
    57cc:	78 e0       	ldi	r23, 0x08	; 8
    57ce:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<br />" );
    57d2:	0f e2       	ldi	r16, 0x2F	; 47
    57d4:	19 e0       	ldi	r17, 0x09	; 9
    57d6:	ce 01       	movw	r24, r28
    57d8:	b8 01       	movw	r22, r16
    57da:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "&nbsp;-&nbsp;ask about services in JSON using '/j' prefix, for example <font color='#000083'>http://192.168.1.10/<b>j</b>/soft*/tim*</font>" );
    57de:	ce 01       	movw	r24, r28
    57e0:	66 e3       	ldi	r22, 0x36	; 54
    57e2:	79 e0       	ldi	r23, 0x09	; 9
    57e4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<br />" );
    57e8:	ce 01       	movw	r24, r28
    57ea:	b8 01       	movw	r22, r16
    57ec:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "&nbsp;-&nbsp;ask about services metadescription (it is always in JSON) '/m' prefix, for example <font color='#000083'>http://192.168.1.10/<b>m</b>/soft*/tim*</font>" );
    57f0:	ce 01       	movw	r24, r28
    57f2:	62 ec       	ldi	r22, 0xC2	; 194
    57f4:	79 e0       	ldi	r23, 0x09	; 9
    57f6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------
}
    57fa:	df 91       	pop	r29
    57fc:	cf 91       	pop	r28
    57fe:	1f 91       	pop	r17
    5800:	0f 91       	pop	r16
    5802:	ff 90       	pop	r15
    5804:	ef 90       	pop	r14
    5806:	df 90       	pop	r13
    5808:	cf 90       	pop	r12
    580a:	bf 90       	pop	r11
    580c:	af 90       	pop	r10
    580e:	08 95       	ret

00005810 <_ZN21TableHTMLPageRenderer16renderPageBottomEP6Stream>:
}

// =================================================

void TableHTMLPageRenderer::renderPageBottom( Stream* stream )
{
    5810:	ef 92       	push	r14
    5812:	ff 92       	push	r15
    5814:	0f 93       	push	r16
    5816:	1f 93       	push	r17
    5818:	cf 93       	push	r28
    581a:	df 93       	push	r29
    581c:	8c 01       	movw	r16, r24
    581e:	7b 01       	movw	r14, r22
	stream->write( "</table>" );
    5820:	cb 01       	movw	r24, r22
    5822:	67 e6       	ldi	r22, 0x67	; 103
    5824:	7a e0       	ldi	r23, 0x0A	; 10
    5826:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	// ---------

	stream->write( "<hr />" );
    582a:	c6 e0       	ldi	r28, 0x06	; 6
    582c:	d8 e0       	ldi	r29, 0x08	; 8
    582e:	c7 01       	movw	r24, r14
    5830:	be 01       	movw	r22, r28
    5832:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	generateHelp( stream );
    5836:	c8 01       	movw	r24, r16
    5838:	b7 01       	movw	r22, r14
    583a:	0e 94 4d 2b 	call	0x569a	; 0x569a <_ZN21TableHTMLPageRenderer12generateHelpEP6Stream>

	stream->write( "<hr />" );
    583e:	c7 01       	movw	r24, r14
    5840:	be 01       	movw	r22, r28
    5842:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<table width='100%'><tr><td style='text-align:right;'><font size='-1'>Artur Stanek 2012</font></td></tr></table>" );
    5846:	c7 01       	movw	r24, r14
    5848:	60 e7       	ldi	r22, 0x70	; 112
    584a:	7a e0       	ldi	r23, 0x0A	; 10
    584c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "</body></html>" );
    5850:	c7 01       	movw	r24, r14
    5852:	61 ee       	ldi	r22, 0xE1	; 225
    5854:	7a e0       	ldi	r23, 0x0A	; 10
    5856:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	//stream->write( "\r\n\r\n" );
	//stream->write( "\r\n\r\n" );
	//stream->write( "\r\n\r\n" );

	//stream->write( "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\nConnection: close\r\nContent-length: 0\r\n\r\n" );
}
    585a:	df 91       	pop	r29
    585c:	cf 91       	pop	r28
    585e:	1f 91       	pop	r17
    5860:	0f 91       	pop	r16
    5862:	ff 90       	pop	r15
    5864:	ef 90       	pop	r14
    5866:	08 95       	ret

00005868 <_ZN28TableHTMLRestServiceRenderer23renderBeforeRestServiceEP6Stream>:
// =================================================

void TableHTMLRestServiceRenderer::renderBeforeRestService( Stream* stream )
{

}
    5868:	08 95       	ret

0000586a <_ZN28TableHTMLRestServiceRenderer34renderSpaceBetweenRestServicePatrsEP6Stream>:
// =================================================

void TableHTMLRestServiceRenderer::renderSpaceBetweenRestServicePatrs( Stream* stream )
{

}
    586a:	08 95       	ret

0000586c <_ZN28TableHTMLRestServiceRenderer22renderAfterRestServiceEP6Stream>:
// =================================================

void TableHTMLRestServiceRenderer::renderAfterRestService( Stream* stream )
{

}
    586c:	08 95       	ret

0000586e <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService>:
}

// =================================================

void TableHTMLRestServiceRenderer::renderValueSetter( Stream* stream , RestService* restService )
{
    586e:	df 92       	push	r13
    5870:	ef 92       	push	r14
    5872:	ff 92       	push	r15
    5874:	0f 93       	push	r16
    5876:	1f 93       	push	r17
    5878:	cf 93       	push	r28
    587a:	df 93       	push	r29
    587c:	7c 01       	movw	r14, r24
    587e:	eb 01       	movw	r28, r22
    5880:	8a 01       	movw	r16, r20
	stream->write( "<td>" );
    5882:	cb 01       	movw	r24, r22
    5884:	6f e0       	ldi	r22, 0x0F	; 15
    5886:	7b e0       	ldi	r23, 0x0B	; 11
    5888:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	if( restService->type == REST_SERVICE_TYPE_READ_ONLY )
    588c:	d8 01       	movw	r26, r16
    588e:	15 96       	adiw	r26, 0x05	; 5
    5890:	8c 91       	ld	r24, X
    5892:	15 97       	sbiw	r26, 0x05	; 5
    5894:	88 23       	and	r24, r24
    5896:	21 f4       	brne	.+8      	; 0x58a0 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x32>
	{
		stream->write( "&nbsp;" );
    5898:	ce 01       	movw	r24, r28
    589a:	64 e1       	ldi	r22, 0x14	; 20
    589c:	7b e0       	ldi	r23, 0x0B	; 11
    589e:	84 c1       	rjmp	.+776    	; 0x5ba8 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33a>
	}
	else
	{
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_BY_MYSELF )
    58a0:	81 30       	cpi	r24, 0x01	; 1
    58a2:	69 f4       	brne	.+26     	; 0x58be <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x50>
		{
			restService->renderValueSetter( stream , useGETHttpMethodInForms );
    58a4:	d8 01       	movw	r26, r16
    58a6:	ed 91       	ld	r30, X+
    58a8:	fc 91       	ld	r31, X
    58aa:	02 80       	ldd	r0, Z+2	; 0x02
    58ac:	f3 81       	ldd	r31, Z+3	; 0x03
    58ae:	e0 2d       	mov	r30, r0
    58b0:	c8 01       	movw	r24, r16
    58b2:	be 01       	movw	r22, r28
    58b4:	d7 01       	movw	r26, r14
    58b6:	12 96       	adiw	r26, 0x02	; 2
    58b8:	4c 91       	ld	r20, X
    58ba:	19 95       	eicall
    58bc:	77 c1       	rjmp	.+750    	; 0x5bac <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33e>
		}
		else
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_TEXT )
    58be:	82 30       	cpi	r24, 0x02	; 2
    58c0:	61 f5       	brne	.+88     	; 0x591a <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0xac>
		{
			stream->write( "<form style='display:inline;' action='' method='" );
    58c2:	ce 01       	movw	r24, r28
    58c4:	6b e1       	ldi	r22, 0x1B	; 27
    58c6:	7b e0       	ldi	r23, 0x0B	; 11
    58c8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( useGETHttpMethodInForms ? "GET" : "POST" );
    58cc:	f7 01       	movw	r30, r14
    58ce:	82 81       	ldd	r24, Z+2	; 0x02
    58d0:	88 23       	and	r24, r24
    58d2:	19 f0       	breq	.+6      	; 0x58da <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x6c>
    58d4:	60 ef       	ldi	r22, 0xF0	; 240
    58d6:	7a e0       	ldi	r23, 0x0A	; 10
    58d8:	02 c0       	rjmp	.+4      	; 0x58de <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x70>
    58da:	64 ef       	ldi	r22, 0xF4	; 244
    58dc:	7a e0       	ldi	r23, 0x0A	; 10
    58de:	ce 01       	movw	r24, r28
    58e0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'>" );
    58e4:	ce 01       	movw	r24, r28
    58e6:	6c e4       	ldi	r22, 0x4C	; 76
    58e8:	7b e0       	ldi	r23, 0x0B	; 11
    58ea:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='text' name='" );
    58ee:	ce 01       	movw	r24, r28
    58f0:	6f e4       	ldi	r22, 0x4F	; 79
    58f2:	7b e0       	ldi	r23, 0x0B	; 11
    58f4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( restService->name );
    58f8:	d8 01       	movw	r26, r16
    58fa:	13 96       	adiw	r26, 0x03	; 3
    58fc:	6d 91       	ld	r22, X+
    58fe:	7c 91       	ld	r23, X
    5900:	14 97       	sbiw	r26, 0x04	; 4
    5902:	ce 01       	movw	r24, r28
    5904:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' />" );
    5908:	ce 01       	movw	r24, r28
    590a:	69 e6       	ldi	r22, 0x69	; 105
    590c:	7b e0       	ldi	r23, 0x0B	; 11
    590e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "&nbsp;&nbsp;<input type='submit' value='Set' /></form>" );
    5912:	ce 01       	movw	r24, r28
    5914:	6e e6       	ldi	r22, 0x6E	; 110
    5916:	7b e0       	ldi	r23, 0x0B	; 11
    5918:	47 c1       	rjmp	.+654    	; 0x5ba8 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33a>
		}
		else
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN )
    591a:	83 30       	cpi	r24, 0x03	; 3
    591c:	09 f0       	breq	.+2      	; 0x5920 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0xb2>
    591e:	4d c0       	rjmp	.+154    	; 0x59ba <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x14c>
		{
			bool booleanValue = restService->getBooleanValue();
    5920:	d8 01       	movw	r26, r16
    5922:	ed 91       	ld	r30, X+
    5924:	fc 91       	ld	r31, X
    5926:	04 80       	ldd	r0, Z+4	; 0x04
    5928:	f5 81       	ldd	r31, Z+5	; 0x05
    592a:	e0 2d       	mov	r30, r0
    592c:	c8 01       	movw	r24, r16
    592e:	19 95       	eicall
    5930:	d8 2e       	mov	r13, r24

			stream->write( "<form style='display:inline;' action='' method='" );
    5932:	ce 01       	movw	r24, r28
    5934:	6b e1       	ldi	r22, 0x1B	; 27
    5936:	7b e0       	ldi	r23, 0x0B	; 11
    5938:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( useGETHttpMethodInForms ? "GET" : "POST" );
    593c:	f7 01       	movw	r30, r14
    593e:	82 81       	ldd	r24, Z+2	; 0x02
    5940:	88 23       	and	r24, r24
    5942:	19 f0       	breq	.+6      	; 0x594a <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0xdc>
    5944:	60 ef       	ldi	r22, 0xF0	; 240
    5946:	7a e0       	ldi	r23, 0x0A	; 10
    5948:	02 c0       	rjmp	.+4      	; 0x594e <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0xe0>
    594a:	64 ef       	ldi	r22, 0xF4	; 244
    594c:	7a e0       	ldi	r23, 0x0A	; 10
    594e:	ce 01       	movw	r24, r28
    5950:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'>" );
    5954:	ce 01       	movw	r24, r28
    5956:	6c e4       	ldi	r22, 0x4C	; 76
    5958:	7b e0       	ldi	r23, 0x0B	; 11
    595a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='hidden' name='" );
    595e:	ce 01       	movw	r24, r28
    5960:	65 ea       	ldi	r22, 0xA5	; 165
    5962:	7b e0       	ldi	r23, 0x0B	; 11
    5964:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( restService->name );
    5968:	d8 01       	movw	r26, r16
    596a:	13 96       	adiw	r26, 0x03	; 3
    596c:	6d 91       	ld	r22, X+
    596e:	7c 91       	ld	r23, X
    5970:	14 97       	sbiw	r26, 0x04	; 4
    5972:	ce 01       	movw	r24, r28
    5974:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' value='" );
    5978:	ce 01       	movw	r24, r28
    597a:	61 ec       	ldi	r22, 0xC1	; 193
    597c:	7b e0       	ldi	r23, 0x0B	; 11
    597e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( booleanValue ? "0" : "1" );
    5982:	dd 20       	and	r13, r13
    5984:	19 f0       	breq	.+6      	; 0x598c <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x11e>
    5986:	69 ef       	ldi	r22, 0xF9	; 249
    5988:	7a e0       	ldi	r23, 0x0A	; 10
    598a:	02 c0       	rjmp	.+4      	; 0x5990 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x122>
    598c:	6b ef       	ldi	r22, 0xFB	; 251
    598e:	7a e0       	ldi	r23, 0x0A	; 10
    5990:	ce 01       	movw	r24, r28
    5992:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' />" );
    5996:	ce 01       	movw	r24, r28
    5998:	69 e6       	ldi	r22, 0x69	; 105
    599a:	7b e0       	ldi	r23, 0x0B	; 11
    599c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='submit' value='" );
    59a0:	ce 01       	movw	r24, r28
    59a2:	6b ec       	ldi	r22, 0xCB	; 203
    59a4:	7b e0       	ldi	r23, 0x0B	; 11
    59a6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( booleanValue ? "FALSE" : "TRUE" );
    59aa:	dd 20       	and	r13, r13
    59ac:	19 f0       	breq	.+6      	; 0x59b4 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x146>
    59ae:	6d ef       	ldi	r22, 0xFD	; 253
    59b0:	7a e0       	ldi	r23, 0x0A	; 10
    59b2:	52 c0       	rjmp	.+164    	; 0x5a58 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1ea>
    59b4:	63 e0       	ldi	r22, 0x03	; 3
    59b6:	7b e0       	ldi	r23, 0x0B	; 11
    59b8:	4f c0       	rjmp	.+158    	; 0x5a58 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1ea>
			stream->write( " />" );

			stream->write( "</form>" );
		}
		else
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF )
    59ba:	84 30       	cpi	r24, 0x04	; 4
    59bc:	09 f0       	breq	.+2      	; 0x59c0 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x152>
    59be:	5d c0       	rjmp	.+186    	; 0x5a7a <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x20c>
		{
			bool booleanValue = restService->getBooleanValue();
    59c0:	d8 01       	movw	r26, r16
    59c2:	ed 91       	ld	r30, X+
    59c4:	fc 91       	ld	r31, X
    59c6:	04 80       	ldd	r0, Z+4	; 0x04
    59c8:	f5 81       	ldd	r31, Z+5	; 0x05
    59ca:	e0 2d       	mov	r30, r0
    59cc:	c8 01       	movw	r24, r16
    59ce:	19 95       	eicall
    59d0:	d8 2e       	mov	r13, r24

			stream->write( "<form style='display:inline;' action='' method='" );
    59d2:	ce 01       	movw	r24, r28
    59d4:	6b e1       	ldi	r22, 0x1B	; 27
    59d6:	7b e0       	ldi	r23, 0x0B	; 11
    59d8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			//stream->write( "<form style='display:inline;' method='" );
			stream->write( useGETHttpMethodInForms ? "GET" : "POST" );
    59dc:	f7 01       	movw	r30, r14
    59de:	82 81       	ldd	r24, Z+2	; 0x02
    59e0:	88 23       	and	r24, r24
    59e2:	19 f0       	breq	.+6      	; 0x59ea <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x17c>
    59e4:	60 ef       	ldi	r22, 0xF0	; 240
    59e6:	7a e0       	ldi	r23, 0x0A	; 10
    59e8:	02 c0       	rjmp	.+4      	; 0x59ee <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x180>
    59ea:	64 ef       	ldi	r22, 0xF4	; 244
    59ec:	7a e0       	ldi	r23, 0x0A	; 10
    59ee:	ce 01       	movw	r24, r28
    59f0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'>" );
    59f4:	ce 01       	movw	r24, r28
    59f6:	6c e4       	ldi	r22, 0x4C	; 76
    59f8:	7b e0       	ldi	r23, 0x0B	; 11
    59fa:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='hidden' name='" );
    59fe:	ce 01       	movw	r24, r28
    5a00:	65 ea       	ldi	r22, 0xA5	; 165
    5a02:	7b e0       	ldi	r23, 0x0B	; 11
    5a04:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			//stream->write( "<input type='text' name='" ); // todo spowrotem zrobic hidden
			stream->write( restService->name );
    5a08:	d8 01       	movw	r26, r16
    5a0a:	13 96       	adiw	r26, 0x03	; 3
    5a0c:	6d 91       	ld	r22, X+
    5a0e:	7c 91       	ld	r23, X
    5a10:	14 97       	sbiw	r26, 0x04	; 4
    5a12:	ce 01       	movw	r24, r28
    5a14:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' value='" );
    5a18:	ce 01       	movw	r24, r28
    5a1a:	61 ec       	ldi	r22, 0xC1	; 193
    5a1c:	7b e0       	ldi	r23, 0x0B	; 11
    5a1e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( booleanValue ? "0" : "1" );
    5a22:	dd 20       	and	r13, r13
    5a24:	19 f0       	breq	.+6      	; 0x5a2c <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1be>
    5a26:	69 ef       	ldi	r22, 0xF9	; 249
    5a28:	7a e0       	ldi	r23, 0x0A	; 10
    5a2a:	02 c0       	rjmp	.+4      	; 0x5a30 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1c2>
    5a2c:	6b ef       	ldi	r22, 0xFB	; 251
    5a2e:	7a e0       	ldi	r23, 0x0A	; 10
    5a30:	ce 01       	movw	r24, r28
    5a32:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' />" );
    5a36:	ce 01       	movw	r24, r28
    5a38:	69 e6       	ldi	r22, 0x69	; 105
    5a3a:	7b e0       	ldi	r23, 0x0B	; 11
    5a3c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			//stream->write( "&nbsp;&nbsp;<input type='submit' value='Set123' /></form>" );

			stream->write( "<input type='submit' value='" );
    5a40:	ce 01       	movw	r24, r28
    5a42:	6b ec       	ldi	r22, 0xCB	; 203
    5a44:	7b e0       	ldi	r23, 0x0B	; 11
    5a46:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( booleanValue ? "OFF" : "ON" );
    5a4a:	dd 20       	and	r13, r13
    5a4c:	19 f0       	breq	.+6      	; 0x5a54 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1e6>
    5a4e:	68 e0       	ldi	r22, 0x08	; 8
    5a50:	7b e0       	ldi	r23, 0x0B	; 11
    5a52:	02 c0       	rjmp	.+4      	; 0x5a58 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x1ea>
    5a54:	6c e0       	ldi	r22, 0x0C	; 12
    5a56:	7b e0       	ldi	r23, 0x0B	; 11
    5a58:	ce 01       	movw	r24, r28
    5a5a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'" );
    5a5e:	ce 01       	movw	r24, r28
    5a60:	68 ee       	ldi	r22, 0xE8	; 232
    5a62:	7b e0       	ldi	r23, 0x0B	; 11
    5a64:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( " />" );
    5a68:	ce 01       	movw	r24, r28
    5a6a:	6a ee       	ldi	r22, 0xEA	; 234
    5a6c:	7b e0       	ldi	r23, 0x0B	; 11
    5a6e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "</form>" );
    5a72:	ce 01       	movw	r24, r28
    5a74:	6e ee       	ldi	r22, 0xEE	; 238
    5a76:	7b e0       	ldi	r23, 0x0B	; 11
    5a78:	97 c0       	rjmp	.+302    	; 0x5ba8 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33a>
		}
		else
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_INT )
    5a7a:	86 30       	cpi	r24, 0x06	; 6
    5a7c:	09 f0       	breq	.+2      	; 0x5a80 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x212>
    5a7e:	57 c0       	rjmp	.+174    	; 0x5b2e <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x2c0>
		{
			stream->write( "<form style='display:inline;' action='' method='" );
    5a80:	ce 01       	movw	r24, r28
    5a82:	6b e1       	ldi	r22, 0x1B	; 27
    5a84:	7b e0       	ldi	r23, 0x0B	; 11
    5a86:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( useGETHttpMethodInForms ? "GET" : "POST" );
    5a8a:	f7 01       	movw	r30, r14
    5a8c:	82 81       	ldd	r24, Z+2	; 0x02
    5a8e:	88 23       	and	r24, r24
    5a90:	19 f0       	breq	.+6      	; 0x5a98 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x22a>
    5a92:	60 ef       	ldi	r22, 0xF0	; 240
    5a94:	7a e0       	ldi	r23, 0x0A	; 10
    5a96:	02 c0       	rjmp	.+4      	; 0x5a9c <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x22e>
    5a98:	64 ef       	ldi	r22, 0xF4	; 244
    5a9a:	7a e0       	ldi	r23, 0x0A	; 10
    5a9c:	ce 01       	movw	r24, r28
    5a9e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'>" );
    5aa2:	ce 01       	movw	r24, r28
    5aa4:	6c e4       	ldi	r22, 0x4C	; 76
    5aa6:	7b e0       	ldi	r23, 0x0B	; 11
    5aa8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='text' name='" );
    5aac:	ce 01       	movw	r24, r28
    5aae:	6f e4       	ldi	r22, 0x4F	; 79
    5ab0:	7b e0       	ldi	r23, 0x0B	; 11
    5ab2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( restService->name );
    5ab6:	d8 01       	movw	r26, r16
    5ab8:	13 96       	adiw	r26, 0x03	; 3
    5aba:	6d 91       	ld	r22, X+
    5abc:	7c 91       	ld	r23, X
    5abe:	14 97       	sbiw	r26, 0x04	; 4
    5ac0:	ce 01       	movw	r24, r28
    5ac2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' />" );
    5ac6:	ce 01       	movw	r24, r28
    5ac8:	69 e6       	ldi	r22, 0x69	; 105
    5aca:	7b e0       	ldi	r23, 0x0B	; 11
    5acc:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "&nbsp;&nbsp;<input type='submit' value='Set' /></form>" );
    5ad0:	ce 01       	movw	r24, r28
    5ad2:	6e e6       	ldi	r22, 0x6E	; 110
    5ad4:	7b e0       	ldi	r23, 0x0B	; 11
    5ad6:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<br /><font size='-1'>(min: " );
    5ada:	ce 01       	movw	r24, r28
    5adc:	66 ef       	ldi	r22, 0xF6	; 246
    5ade:	7b e0       	ldi	r23, 0x0B	; 11
    5ae0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->print( restService->getIntMinValue() );
    5ae4:	d8 01       	movw	r26, r16
    5ae6:	ed 91       	ld	r30, X+
    5ae8:	fc 91       	ld	r31, X
    5aea:	04 84       	ldd	r0, Z+12	; 0x0c
    5aec:	f5 85       	ldd	r31, Z+13	; 0x0d
    5aee:	e0 2d       	mov	r30, r0
    5af0:	c8 01       	movw	r24, r16
    5af2:	19 95       	eicall
    5af4:	bc 01       	movw	r22, r24
    5af6:	ce 01       	movw	r24, r28
    5af8:	4a e0       	ldi	r20, 0x0A	; 10
    5afa:	50 e0       	ldi	r21, 0x00	; 0
    5afc:	0e 94 f7 45 	call	0x8bee	; 0x8bee <_ZN5Print5printEii>
			stream->write( ", max: " );
    5b00:	ce 01       	movw	r24, r28
    5b02:	63 e1       	ldi	r22, 0x13	; 19
    5b04:	7c e0       	ldi	r23, 0x0C	; 12
    5b06:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->print( restService->getIntMaxValue() );
    5b0a:	d8 01       	movw	r26, r16
    5b0c:	ed 91       	ld	r30, X+
    5b0e:	fc 91       	ld	r31, X
    5b10:	06 84       	ldd	r0, Z+14	; 0x0e
    5b12:	f7 85       	ldd	r31, Z+15	; 0x0f
    5b14:	e0 2d       	mov	r30, r0
    5b16:	c8 01       	movw	r24, r16
    5b18:	19 95       	eicall
    5b1a:	bc 01       	movw	r22, r24
    5b1c:	ce 01       	movw	r24, r28
    5b1e:	4a e0       	ldi	r20, 0x0A	; 10
    5b20:	50 e0       	ldi	r21, 0x00	; 0
    5b22:	0e 94 f7 45 	call	0x8bee	; 0x8bee <_ZN5Print5printEii>
			stream->write( ")</font>" );
    5b26:	ce 01       	movw	r24, r28
    5b28:	6b e1       	ldi	r22, 0x1B	; 27
    5b2a:	7c e0       	ldi	r23, 0x0C	; 12
    5b2c:	3d c0       	rjmp	.+122    	; 0x5ba8 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33a>
		}
		else
		if( restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONE_TIME_EXECUTION )
    5b2e:	85 30       	cpi	r24, 0x05	; 5
    5b30:	61 f5       	brne	.+88     	; 0x5b8a <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x31c>
		{
			stream->write( "<form style='display:inline;' action='' method='" );
    5b32:	ce 01       	movw	r24, r28
    5b34:	6b e1       	ldi	r22, 0x1B	; 27
    5b36:	7b e0       	ldi	r23, 0x0B	; 11
    5b38:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( useGETHttpMethodInForms ? "GET" : "POST" );
    5b3c:	f7 01       	movw	r30, r14
    5b3e:	82 81       	ldd	r24, Z+2	; 0x02
    5b40:	88 23       	and	r24, r24
    5b42:	19 f0       	breq	.+6      	; 0x5b4a <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x2dc>
    5b44:	60 ef       	ldi	r22, 0xF0	; 240
    5b46:	7a e0       	ldi	r23, 0x0A	; 10
    5b48:	02 c0       	rjmp	.+4      	; 0x5b4e <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x2e0>
    5b4a:	64 ef       	ldi	r22, 0xF4	; 244
    5b4c:	7a e0       	ldi	r23, 0x0A	; 10
    5b4e:	ce 01       	movw	r24, r28
    5b50:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "'>" );
    5b54:	ce 01       	movw	r24, r28
    5b56:	6c e4       	ldi	r22, 0x4C	; 76
    5b58:	7b e0       	ldi	r23, 0x0B	; 11
    5b5a:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='hidden' name='" );
    5b5e:	ce 01       	movw	r24, r28
    5b60:	65 ea       	ldi	r22, 0xA5	; 165
    5b62:	7b e0       	ldi	r23, 0x0B	; 11
    5b64:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( restService->name );
    5b68:	d8 01       	movw	r26, r16
    5b6a:	13 96       	adiw	r26, 0x03	; 3
    5b6c:	6d 91       	ld	r22, X+
    5b6e:	7c 91       	ld	r23, X
    5b70:	14 97       	sbiw	r26, 0x04	; 4
    5b72:	ce 01       	movw	r24, r28
    5b74:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->write( "' value='0'/>" );
    5b78:	ce 01       	movw	r24, r28
    5b7a:	64 e2       	ldi	r22, 0x24	; 36
    5b7c:	7c e0       	ldi	r23, 0x0C	; 12
    5b7e:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

			stream->write( "<input type='submit' value='EXECUTE' /></form>" );
    5b82:	ce 01       	movw	r24, r28
    5b84:	62 e3       	ldi	r22, 0x32	; 50
    5b86:	7c e0       	ldi	r23, 0x0C	; 12
    5b88:	0f c0       	rjmp	.+30     	; 0x5ba8 <_ZN28TableHTMLRestServiceRenderer17renderValueSetterEP6StreamP11RestService+0x33a>
		}
		else
		{
			stream->write( "<b>Unsupported updateable rest service type " );
    5b8a:	ce 01       	movw	r24, r28
    5b8c:	61 e6       	ldi	r22, 0x61	; 97
    5b8e:	7c e0       	ldi	r23, 0x0C	; 12
    5b90:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
			stream->print( restService->type );
    5b94:	ce 01       	movw	r24, r28
    5b96:	f8 01       	movw	r30, r16
    5b98:	65 81       	ldd	r22, Z+5	; 0x05
    5b9a:	4a e0       	ldi	r20, 0x0A	; 10
    5b9c:	50 e0       	ldi	r21, 0x00	; 0
    5b9e:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <_ZN5Print5printEhi>
			stream->write( "!</b>" );
    5ba2:	ce 01       	movw	r24, r28
    5ba4:	6e e8       	ldi	r22, 0x8E	; 142
    5ba6:	7c e0       	ldi	r23, 0x0C	; 12
    5ba8:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
		}
	}

	stream->write( "</td>" );
    5bac:	ce 01       	movw	r24, r28
    5bae:	64 e9       	ldi	r22, 0x94	; 148
    5bb0:	7c e0       	ldi	r23, 0x0C	; 12
    5bb2:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    5bb6:	df 91       	pop	r29
    5bb8:	cf 91       	pop	r28
    5bba:	1f 91       	pop	r17
    5bbc:	0f 91       	pop	r16
    5bbe:	ff 90       	pop	r15
    5bc0:	ef 90       	pop	r14
    5bc2:	df 90       	pop	r13
    5bc4:	08 95       	ret

00005bc6 <_ZN28TableHTMLRestServiceRenderer14renderGetValueEP6StreamP11RestService>:
}

// =================================================

void TableHTMLRestServiceRenderer::renderGetValue( Stream* stream , RestService* restService )
{
    5bc6:	cf 92       	push	r12
    5bc8:	df 92       	push	r13
    5bca:	ef 92       	push	r14
    5bcc:	ff 92       	push	r15
    5bce:	0f 93       	push	r16
    5bd0:	1f 93       	push	r17
    5bd2:	cf 93       	push	r28
    5bd4:	df 93       	push	r29
    5bd6:	eb 01       	movw	r28, r22
    5bd8:	8a 01       	movw	r16, r20
	stream->write( "<td style='text-align:center;font-weight:bold;'>" );
    5bda:	cb 01       	movw	r24, r22
    5bdc:	6a e9       	ldi	r22, 0x9A	; 154
    5bde:	7c e0       	ldi	r23, 0x0C	; 12
    5be0:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->print( restService->id );
    5be4:	ce 01       	movw	r24, r28
    5be6:	d8 01       	movw	r26, r16
    5be8:	12 96       	adiw	r26, 0x02	; 2
    5bea:	6c 91       	ld	r22, X
    5bec:	4a e0       	ldi	r20, 0x0A	; 10
    5bee:	50 e0       	ldi	r21, 0x00	; 0
    5bf0:	0e 94 b6 45 	call	0x8b6c	; 0x8b6c <_ZN5Print5printEhi>
	stream->write( "</td>" );
    5bf4:	84 e9       	ldi	r24, 0x94	; 148
    5bf6:	c8 2e       	mov	r12, r24
    5bf8:	8c e0       	ldi	r24, 0x0C	; 12
    5bfa:	d8 2e       	mov	r13, r24
    5bfc:	ce 01       	movw	r24, r28
    5bfe:	b6 01       	movw	r22, r12
    5c00:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<td>" );
    5c04:	9f e0       	ldi	r25, 0x0F	; 15
    5c06:	e9 2e       	mov	r14, r25
    5c08:	9b e0       	ldi	r25, 0x0B	; 11
    5c0a:	f9 2e       	mov	r15, r25
    5c0c:	ce 01       	movw	r24, r28
    5c0e:	b7 01       	movw	r22, r14
    5c10:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( restService->name );
    5c14:	f8 01       	movw	r30, r16
    5c16:	63 81       	ldd	r22, Z+3	; 0x03
    5c18:	74 81       	ldd	r23, Z+4	; 0x04
    5c1a:	ce 01       	movw	r24, r28
    5c1c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	stream->write( "</td>" );
    5c20:	ce 01       	movw	r24, r28
    5c22:	b6 01       	movw	r22, r12
    5c24:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	stream->write( "<td>" );
    5c28:	ce 01       	movw	r24, r28
    5c2a:	b7 01       	movw	r22, r14
    5c2c:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	restService->writeValueToStream(stream);
    5c30:	d8 01       	movw	r26, r16
    5c32:	ed 91       	ld	r30, X+
    5c34:	fc 91       	ld	r31, X
    5c36:	01 90       	ld	r0, Z+
    5c38:	f0 81       	ld	r31, Z
    5c3a:	e0 2d       	mov	r30, r0
    5c3c:	c8 01       	movw	r24, r16
    5c3e:	be 01       	movw	r22, r28
    5c40:	19 95       	eicall
	stream->write( "</td>" );
    5c42:	ce 01       	movw	r24, r28
    5c44:	b6 01       	movw	r22, r12
    5c46:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
}
    5c4a:	df 91       	pop	r29
    5c4c:	cf 91       	pop	r28
    5c4e:	1f 91       	pop	r17
    5c50:	0f 91       	pop	r16
    5c52:	ff 90       	pop	r15
    5c54:	ef 90       	pop	r14
    5c56:	df 90       	pop	r13
    5c58:	cf 90       	pop	r12
    5c5a:	08 95       	ret

00005c5c <_ZN28TableHTMLRestServiceRendererC1Eb>:

#include "TableHTMLRestServiceRenderer.h"

// =================================================

TableHTMLRestServiceRenderer::TableHTMLRestServiceRenderer( bool _useGETHttpMethodInForms )
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	89 e0       	ldi	r24, 0x09	; 9
    5c60:	9f e0       	ldi	r25, 0x0F	; 15
    5c62:	91 83       	std	Z+1, r25	; 0x01
    5c64:	80 83       	st	Z, r24
{
	useGETHttpMethodInForms = _useGETHttpMethodInForms;
    5c66:	62 83       	std	Z+2, r22	; 0x02
}
    5c68:	08 95       	ret

00005c6a <_ZN28DeterminateHttpMethodSubTask14getSubTaskNameEv>:
// =================================================

char* DeterminateHttpMethodSubTask::getSubTaskName()
{
	return "DeterminateHttpMethod-sub-task";
}
    5c6a:	8b ec       	ldi	r24, 0xCB	; 203
    5c6c:	9c e0       	ldi	r25, 0x0C	; 12
    5c6e:	08 95       	ret

00005c70 <_ZN28DeterminateHttpMethodSubTask18resetInternalStateEv>:

// =================================================

void DeterminateHttpMethodSubTask::resetInternalState() {}
    5c70:	08 95       	ret

00005c72 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream>:

// =================================================

RestServerSubTask* DeterminateHttpMethodSubTask::executeSubTask( Stream* stream )
{
    5c72:	0f 93       	push	r16
    5c74:	1f 93       	push	r17
    5c76:	cf 93       	push	r28
    5c78:	df 93       	push	r29
    5c7a:	8c 01       	movw	r16, r24
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "DeterminateHttpMethodSubTask:executeSubTask():";

	streamReadHttpMethod.setStreamAndResetInternalState( stream );
    5c7c:	ec 01       	movw	r28, r24
    5c7e:	2b 96       	adiw	r28, 0x0b	; 11
    5c80:	ce 01       	movw	r24, r28
    5c82:	0e 94 c6 38 	call	0x718c	; 0x718c <_ZN20StreamReadHttpMethod30setStreamAndResetInternalStateEP6Stream>

	int httpMethod = streamReadHttpMethod.read();
    5c86:	ce 01       	movw	r24, r28
    5c88:	0e 94 4a 38 	call	0x7094	; 0x7094 <_ZN20StreamReadHttpMethod4readEv>
    5c8c:	ec 01       	movw	r28, r24

	//info( p << prefix << "httpMethod read from streamReadHttpMethod = " << httpMethod << endl; )

	if( httpMethod == -1 )
    5c8e:	8f ef       	ldi	r24, 0xFF	; 255
    5c90:	cf 3f       	cpi	r28, 0xFF	; 255
    5c92:	d8 07       	cpc	r29, r24
    5c94:	e9 f0       	breq	.+58     	; 0x5cd0 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream+0x5e>
		return NULL;
	}
	else
	if( httpMethod == 2 )
	{
		return errorSubTask;
    5c96:	f8 01       	movw	r30, r16
	if( httpMethod == -1 )
	{
		return NULL;
	}
	else
	if( httpMethod == 2 )
    5c98:	c2 30       	cpi	r28, 0x02	; 2
    5c9a:	d1 05       	cpc	r29, r1
    5c9c:	19 f4       	brne	.+6      	; 0x5ca4 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream+0x32>
	{
		return errorSubTask;
    5c9e:	85 81       	ldd	r24, Z+5	; 0x05
    5ca0:	96 81       	ldd	r25, Z+6	; 0x06
    5ca2:	18 c0       	rjmp	.+48     	; 0x5cd4 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream+0x62>
	}
	else
	{
		readHttpPathSubTask->setWork( httpMethod == 0 );
    5ca4:	81 85       	ldd	r24, Z+9	; 0x09
    5ca6:	92 85       	ldd	r25, Z+10	; 0x0a
    5ca8:	61 e0       	ldi	r22, 0x01	; 1
    5caa:	20 97       	sbiw	r28, 0x00	; 0
    5cac:	09 f0       	breq	.+2      	; 0x5cb0 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream+0x3e>
    5cae:	60 e0       	ldi	r22, 0x00	; 0
    5cb0:	0e 94 42 32 	call	0x6484	; 0x6484 <_ZN19ReadHttpPathSubTask7setWorkEb>

		skipBytesUntilSequenceSubTask->setSkipBytesCountAndNextSubTask( 4+httpMethod , readHttpPathSubTask );
    5cb4:	be 01       	movw	r22, r28
    5cb6:	6c 5f       	subi	r22, 0xFC	; 252
    5cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    5cba:	f8 01       	movw	r30, r16
    5cbc:	41 85       	ldd	r20, Z+9	; 0x09
    5cbe:	52 85       	ldd	r21, Z+10	; 0x0a
    5cc0:	87 81       	ldd	r24, Z+7	; 0x07
    5cc2:	90 85       	ldd	r25, Z+8	; 0x08
    5cc4:	0e 94 a3 2a 	call	0x5546	; 0x5546 <_ZN29SkipBytesUntilSequenceSubTask31setSkipBytesCountAndNextSubTaskEjP17RestServerSubTask>
		return skipBytesUntilSequenceSubTask;
    5cc8:	f8 01       	movw	r30, r16
    5cca:	87 81       	ldd	r24, Z+7	; 0x07
    5ccc:	90 85       	ldd	r25, Z+8	; 0x08
    5cce:	02 c0       	rjmp	.+4      	; 0x5cd4 <_ZN28DeterminateHttpMethodSubTask14executeSubTaskEP6Stream+0x62>

	//info( p << prefix << "httpMethod read from streamReadHttpMethod = " << httpMethod << endl; )

	if( httpMethod == -1 )
	{
		return NULL;
    5cd0:	80 e0       	ldi	r24, 0x00	; 0
    5cd2:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return NULL;
	}*/
}
    5cd4:	df 91       	pop	r29
    5cd6:	cf 91       	pop	r28
    5cd8:	1f 91       	pop	r17
    5cda:	0f 91       	pop	r16
    5cdc:	08 95       	ret

00005cde <_ZN28DeterminateHttpMethodSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP19ReadHttpPathSubTask>:

#include "DeterminateHttpMethodSubTask.h"

// =================================================

DeterminateHttpMethodSubTask::DeterminateHttpMethodSubTask( RestServerSubTask* _errorSubTask , SkipBytesUntilSequenceSubTask* _skipBytesUntilSequenceSubTask , ReadHttpPathSubTask* _readHttpPathSubTask ) : dp( PSTR( "DeterminateHttpMethodSubTask" ) )//: p( _p )
    5cde:	cf 92       	push	r12
    5ce0:	df 92       	push	r13
    5ce2:	ef 92       	push	r14
    5ce4:	ff 92       	push	r15
    5ce6:	0f 93       	push	r16
    5ce8:	1f 93       	push	r17
    5cea:	cf 93       	push	r28
    5cec:	df 93       	push	r29
    5cee:	ec 01       	movw	r28, r24
    5cf0:	6b 01       	movw	r12, r22
    5cf2:	7a 01       	movw	r14, r20
    5cf4:	89 01       	movw	r16, r18
    5cf6:	27 e1       	ldi	r18, 0x17	; 23
    5cf8:	3f e0       	ldi	r19, 0x0F	; 15
    5cfa:	fc 01       	movw	r30, r24
    5cfc:	21 93       	st	Z+, r18
    5cfe:	31 93       	st	Z+, r19
    5d00:	cf 01       	movw	r24, r30
    5d02:	6e ea       	ldi	r22, 0xAE	; 174
    5d04:	7f e0       	ldi	r23, 0x0F	; 15
    5d06:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    5d0a:	ce 01       	movw	r24, r28
    5d0c:	0b 96       	adiw	r24, 0x0b	; 11
    5d0e:	0e 94 a7 38 	call	0x714e	; 0x714e <_ZN20StreamReadHttpMethodC1Ev>
{
	errorSubTask = _errorSubTask;
    5d12:	de 82       	std	Y+6, r13	; 0x06
    5d14:	cd 82       	std	Y+5, r12	; 0x05
	skipBytesUntilSequenceSubTask = _skipBytesUntilSequenceSubTask;
    5d16:	f8 86       	std	Y+8, r15	; 0x08
    5d18:	ef 82       	std	Y+7, r14	; 0x07
	readHttpPathSubTask = _readHttpPathSubTask;
    5d1a:	1a 87       	std	Y+10, r17	; 0x0a
    5d1c:	09 87       	std	Y+9, r16	; 0x09
}
    5d1e:	df 91       	pop	r29
    5d20:	cf 91       	pop	r28
    5d22:	1f 91       	pop	r17
    5d24:	0f 91       	pop	r16
    5d26:	ff 90       	pop	r15
    5d28:	ef 90       	pop	r14
    5d2a:	df 90       	pop	r13
    5d2c:	cf 90       	pop	r12
    5d2e:	08 95       	ret

00005d30 <_ZN12ErrorSubTask14getSubTaskNameEv>:
// =================================================

char* ErrorSubTask::getSubTaskName()
{
	return "Error-sub-task";
}
    5d30:	8a ee       	ldi	r24, 0xEA	; 234
    5d32:	9c e0       	ldi	r25, 0x0C	; 12
    5d34:	08 95       	ret

00005d36 <_ZN12ErrorSubTask18resetInternalStateEv>:

// =================================================

void ErrorSubTask::resetInternalState() {}
    5d36:	08 95       	ret

00005d38 <_ZN12ErrorSubTask14executeSubTaskEP6Stream>:
// =================================================

RestServerSubTask* ErrorSubTask::executeSubTask( Stream* stream )
{
	return NULL;
}
    5d38:	80 e0       	ldi	r24, 0x00	; 0
    5d3a:	90 e0       	ldi	r25, 0x00	; 0
    5d3c:	08 95       	ret

00005d3e <_ZN28ReadHttpParameterNameSubTask14getSubTaskNameEv>:
// =================================================

char* ReadHttpParameterNameSubTask::getSubTaskName()
{
	return "ReadHttpParameterName-sub-task";
}
    5d3e:	89 ef       	ldi	r24, 0xF9	; 249
    5d40:	9c e0       	ldi	r25, 0x0C	; 12
    5d42:	08 95       	ret

00005d44 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream>:
}

// =================================================

RestServerSubTask* ReadHttpParameterNameSubTask::executeSubTask( Stream* stream )
{
    5d44:	4f 92       	push	r4
    5d46:	5f 92       	push	r5
    5d48:	6f 92       	push	r6
    5d4a:	7f 92       	push	r7
    5d4c:	8f 92       	push	r8
    5d4e:	9f 92       	push	r9
    5d50:	af 92       	push	r10
    5d52:	bf 92       	push	r11
    5d54:	cf 92       	push	r12
    5d56:	df 92       	push	r13
    5d58:	ef 92       	push	r14
    5d5a:	ff 92       	push	r15
    5d5c:	0f 93       	push	r16
    5d5e:	1f 93       	push	r17
    5d60:	cf 93       	push	r28
    5d62:	df 93       	push	r29
    5d64:	ec 01       	movw	r28, r24
    5d66:	5b 01       	movw	r10, r22
				{
					if( serviceDescrptions[i]->restService->name[ letterIndex ] != readByte )
					{
						arrayForMatchServiceNames[i] = false;
						//all( p << prefix << "service '" << serviceDescrptions[i]->restService->name << "' not matching incomming http parameter name, setting as unselected" << endl; )
						aln( "service '%s' not matching incomming http parameter name, setting as unselected" , serviceDescrptions[i]->restService->name )
    5d68:	f2 e0       	ldi	r31, 0x02	; 2
    5d6a:	8f 2e       	mov	r8, r31
    5d6c:	91 2c       	mov	r9, r1
    5d6e:	88 0e       	add	r8, r24
    5d70:	99 1e       	adc	r9, r25
    5d72:	a7 ef       	ldi	r26, 0xF7	; 247
    5d74:	6a 2e       	mov	r6, r26
    5d76:	af e0       	ldi	r26, 0x0F	; 15
    5d78:	7a 2e       	mov	r7, r26
    5d7a:	be e8       	ldi	r27, 0x8E	; 142
    5d7c:	4b 2e       	mov	r4, r27
    5d7e:	b2 e1       	ldi	r27, 0x12	; 18
    5d80:	5b 2e       	mov	r5, r27
RestServerSubTask* ReadHttpParameterNameSubTask::executeSubTask( Stream* stream )
{
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "ReadHttpParameterNameSubTask:executeSubTask():";

	while( alreadyReadBytesCount < readingMaxBytesCount && ( millis() - startTime < readingMaxTime ) )
    5d82:	d2 c0       	rjmp	.+420    	; 0x5f28 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1e4>
	{
		if( stream->available() == 0 ) return NULL;

		int readByte = stream->read();
    5d84:	d5 01       	movw	r26, r10
    5d86:	ed 91       	ld	r30, X+
    5d88:	fc 91       	ld	r31, X
    5d8a:	06 80       	ldd	r0, Z+6	; 0x06
    5d8c:	f7 81       	ldd	r31, Z+7	; 0x07
    5d8e:	e0 2d       	mov	r30, r0
    5d90:	c5 01       	movw	r24, r10
    5d92:	19 95       	eicall
    5d94:	7c 01       	movw	r14, r24

		if( readByte == -1 ) return NULL;
    5d96:	bf ef       	ldi	r27, 0xFF	; 255
    5d98:	8f 3f       	cpi	r24, 0xFF	; 255
    5d9a:	9b 07       	cpc	r25, r27
    5d9c:	09 f4       	brne	.+2      	; 0x5da0 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x5c>
    5d9e:	eb c0       	rjmp	.+470    	; 0x5f76 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x232>

		alreadyReadBytesCount++;
    5da0:	88 8d       	ldd	r24, Y+24	; 0x18
    5da2:	99 8d       	ldd	r25, Y+25	; 0x19
    5da4:	01 96       	adiw	r24, 0x01	; 1
    5da6:	99 8f       	std	Y+25, r25	; 0x19
    5da8:	88 8f       	std	Y+24, r24	; 0x18

		if( readByte == ' ' )
    5daa:	e0 e2       	ldi	r30, 0x20	; 32
    5dac:	ee 16       	cp	r14, r30
    5dae:	f1 04       	cpc	r15, r1
    5db0:	19 f4       	brne	.+6      	; 0x5db8 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x74>
		{
			return subTaskAfterParsingAllParameters;
    5db2:	8f 81       	ldd	r24, Y+7	; 0x07
    5db4:	98 85       	ldd	r25, Y+8	; 0x08
    5db6:	e1 c0       	rjmp	.+450    	; 0x5f7a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x236>
		}
		else
		if( readByte == '=' )
    5db8:	fd e3       	ldi	r31, 0x3D	; 61
    5dba:	ef 16       	cp	r14, r31
    5dbc:	f1 04       	cpc	r15, r1
    5dbe:	09 f0       	breq	.+2      	; 0x5dc2 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x7e>
    5dc0:	a8 c0       	rjmp	.+336    	; 0x5f12 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1ce>
		{
			ServiceDescription* selectedService = NULL;

			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    5dc2:	69 89       	ldd	r22, Y+17	; 0x11
    5dc4:	70 e0       	ldi	r23, 0x00	; 0
    5dc6:	20 e0       	ldi	r18, 0x00	; 0
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	1f c0       	rjmp	.+62     	; 0x5e0a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0xc6>
			{
				if( arrayForMatchServiceNames[i] )
    5dcc:	ea 89       	ldd	r30, Y+18	; 0x12
    5dce:	fb 89       	ldd	r31, Y+19	; 0x13
    5dd0:	e2 0f       	add	r30, r18
    5dd2:	f3 1f       	adc	r31, r19
    5dd4:	80 81       	ld	r24, Z
    5dd6:	88 23       	and	r24, r24
    5dd8:	b1 f0       	breq	.+44     	; 0x5e06 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0xc2>
				{
					if( serviceDescrptions[i]->restService->name[ letterIndex ] == 0 )
    5dda:	c9 01       	movw	r24, r18
    5ddc:	88 0f       	add	r24, r24
    5dde:	99 1f       	adc	r25, r25
    5de0:	ef 85       	ldd	r30, Y+15	; 0x0f
    5de2:	f8 89       	ldd	r31, Y+16	; 0x10
    5de4:	e8 0f       	add	r30, r24
    5de6:	f9 1f       	adc	r31, r25
    5de8:	40 81       	ld	r20, Z
    5dea:	51 81       	ldd	r21, Z+1	; 0x01
    5dec:	da 01       	movw	r26, r20
    5dee:	ed 91       	ld	r30, X+
    5df0:	fc 91       	ld	r31, X
    5df2:	11 97       	sbiw	r26, 0x01	; 1
    5df4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5df6:	03 80       	ldd	r0, Z+3	; 0x03
    5df8:	f4 81       	ldd	r31, Z+4	; 0x04
    5dfa:	e0 2d       	mov	r30, r0
    5dfc:	e8 0f       	add	r30, r24
    5dfe:	f1 1d       	adc	r31, r1
    5e00:	80 81       	ld	r24, Z
    5e02:	88 23       	and	r24, r24
    5e04:	39 f0       	breq	.+14     	; 0x5e14 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0xd0>
		else
		if( readByte == '=' )
		{
			ServiceDescription* selectedService = NULL;

			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    5e06:	2f 5f       	subi	r18, 0xFF	; 255
    5e08:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0a:	26 17       	cp	r18, r22
    5e0c:	37 07       	cpc	r19, r23
    5e0e:	f4 f2       	brlt	.-68     	; 0x5dcc <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x88>
			return subTaskAfterParsingAllParameters;
		}
		else
		if( readByte == '=' )
		{
			ServiceDescription* selectedService = NULL;
    5e10:	40 e0       	ldi	r20, 0x00	; 0
    5e12:	50 e0       	ldi	r21, 0x00	; 0
					}
				}
			}

			// todo tego prawdopodobnie nie trzeba robic tutaj gdyz sie zrobi w resetInternalState()
			for( int i = 0 ; i < serviceDescrptionsCount ; i++ ) arrayForMatchServiceNames[i] = (serviceDescrptions[i]->restService->type != REST_SERVICE_TYPE_READ_ONLY );
    5e14:	20 e0       	ldi	r18, 0x00	; 0
    5e16:	30 e0       	ldi	r19, 0x00	; 0
    5e18:	19 c0       	rjmp	.+50     	; 0x5e4c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x108>
    5e1a:	aa 89       	ldd	r26, Y+18	; 0x12
    5e1c:	bb 89       	ldd	r27, Y+19	; 0x13
    5e1e:	a2 0f       	add	r26, r18
    5e20:	b3 1f       	adc	r27, r19
    5e22:	c9 01       	movw	r24, r18
    5e24:	88 0f       	add	r24, r24
    5e26:	99 1f       	adc	r25, r25
    5e28:	ef 85       	ldd	r30, Y+15	; 0x0f
    5e2a:	f8 89       	ldd	r31, Y+16	; 0x10
    5e2c:	e8 0f       	add	r30, r24
    5e2e:	f9 1f       	adc	r31, r25
    5e30:	01 90       	ld	r0, Z+
    5e32:	f0 81       	ld	r31, Z
    5e34:	e0 2d       	mov	r30, r0
    5e36:	01 90       	ld	r0, Z+
    5e38:	f0 81       	ld	r31, Z
    5e3a:	e0 2d       	mov	r30, r0
    5e3c:	81 e0       	ldi	r24, 0x01	; 1
    5e3e:	95 81       	ldd	r25, Z+5	; 0x05
    5e40:	99 23       	and	r25, r25
    5e42:	09 f4       	brne	.+2      	; 0x5e46 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x102>
    5e44:	80 e0       	ldi	r24, 0x00	; 0
    5e46:	8c 93       	st	X, r24
    5e48:	2f 5f       	subi	r18, 0xFF	; 255
    5e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e4c:	89 89       	ldd	r24, Y+17	; 0x11
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	28 17       	cp	r18, r24
    5e52:	39 07       	cpc	r19, r25
    5e54:	14 f3       	brlt	.-60     	; 0x5e1a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0xd6>

			readHttpParameterValueSubTask->setWork( subTaskAfterParsingAllParameters , selectedService , this );
    5e56:	6f 81       	ldd	r22, Y+7	; 0x07
    5e58:	78 85       	ldd	r23, Y+8	; 0x08
    5e5a:	89 85       	ldd	r24, Y+9	; 0x09
    5e5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e5e:	9e 01       	movw	r18, r28
    5e60:	0e 94 89 30 	call	0x6112	; 0x6112 <_ZN29ReadHttpParameterValueSubTask7setWorkEP17RestServerSubTaskP18ServiceDescriptionS1_>
			return readHttpParameterValueSubTask;
    5e64:	89 85       	ldd	r24, Y+9	; 0x09
    5e66:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e68:	88 c0       	rjmp	.+272    	; 0x5f7a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x236>
		}
		else
		{
			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
			{
				if( arrayForMatchServiceNames[i] )
    5e6a:	aa 89       	ldd	r26, Y+18	; 0x12
    5e6c:	bb 89       	ldd	r27, Y+19	; 0x13
    5e6e:	a0 0f       	add	r26, r16
    5e70:	b1 1f       	adc	r27, r17
    5e72:	8c 91       	ld	r24, X
    5e74:	88 23       	and	r24, r24
    5e76:	09 f4       	brne	.+2      	; 0x5e7a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x136>
    5e78:	49 c0       	rjmp	.+146    	; 0x5f0c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1c8>
	startTime = millis();
}

// =================================================

RestServerSubTask* ReadHttpParameterNameSubTask::executeSubTask( Stream* stream )
    5e7a:	68 01       	movw	r12, r16
    5e7c:	cc 0c       	add	r12, r12
    5e7e:	dd 1c       	adc	r13, r13
		{
			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
			{
				if( arrayForMatchServiceNames[i] )
				{
					if( serviceDescrptions[i]->restService->name[ letterIndex ] != readByte )
    5e80:	ef 85       	ldd	r30, Y+15	; 0x0f
    5e82:	f8 89       	ldd	r31, Y+16	; 0x10
    5e84:	ec 0d       	add	r30, r12
    5e86:	fd 1d       	adc	r31, r13
    5e88:	01 90       	ld	r0, Z+
    5e8a:	f0 81       	ld	r31, Z
    5e8c:	e0 2d       	mov	r30, r0
    5e8e:	01 90       	ld	r0, Z+
    5e90:	f0 81       	ld	r31, Z
    5e92:	e0 2d       	mov	r30, r0
    5e94:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5e96:	03 80       	ldd	r0, Z+3	; 0x03
    5e98:	f4 81       	ldd	r31, Z+4	; 0x04
    5e9a:	e0 2d       	mov	r30, r0
    5e9c:	e8 0f       	add	r30, r24
    5e9e:	f1 1d       	adc	r31, r1
    5ea0:	80 81       	ld	r24, Z
    5ea2:	99 27       	eor	r25, r25
    5ea4:	87 fd       	sbrc	r24, 7
    5ea6:	90 95       	com	r25
    5ea8:	8e 15       	cp	r24, r14
    5eaa:	9f 05       	cpc	r25, r15
    5eac:	79 f1       	breq	.+94     	; 0x5f0c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1c8>
					{
						arrayForMatchServiceNames[i] = false;
    5eae:	1c 92       	st	X, r1
						//all( p << prefix << "service '" << serviceDescrptions[i]->restService->name << "' not matching incomming http parameter name, setting as unselected" << endl; )
						aln( "service '%s' not matching incomming http parameter name, setting as unselected" , serviceDescrptions[i]->restService->name )
    5eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    5eb2:	8b 30       	cpi	r24, 0x0B	; 11
    5eb4:	58 f5       	brcc	.+86     	; 0x5f0c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1c8>
    5eb6:	c4 01       	movw	r24, r8
    5eb8:	6b e8       	ldi	r22, 0x8B	; 139
    5eba:	72 e1       	ldi	r23, 0x12	; 18
    5ebc:	48 ee       	ldi	r20, 0xE8	; 232
    5ebe:	5f e0       	ldi	r21, 0x0F	; 15
    5ec0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    5ec4:	00 d0       	rcall	.+0      	; 0x5ec6 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x182>
    5ec6:	0f 92       	push	r0
    5ec8:	ed b7       	in	r30, 0x3d	; 61
    5eca:	fe b7       	in	r31, 0x3e	; 62
    5ecc:	72 82       	std	Z+2, r7	; 0x02
    5ece:	61 82       	std	Z+1, r6	; 0x01
    5ed0:	ef 85       	ldd	r30, Y+15	; 0x0f
    5ed2:	f8 89       	ldd	r31, Y+16	; 0x10
    5ed4:	ec 0d       	add	r30, r12
    5ed6:	fd 1d       	adc	r31, r13
    5ed8:	01 90       	ld	r0, Z+
    5eda:	f0 81       	ld	r31, Z
    5edc:	e0 2d       	mov	r30, r0
    5ede:	01 90       	ld	r0, Z+
    5ee0:	f0 81       	ld	r31, Z
    5ee2:	e0 2d       	mov	r30, r0
    5ee4:	83 81       	ldd	r24, Z+3	; 0x03
    5ee6:	94 81       	ldd	r25, Z+4	; 0x04
    5ee8:	ad b7       	in	r26, 0x3d	; 61
    5eea:	be b7       	in	r27, 0x3e	; 62
    5eec:	14 96       	adiw	r26, 0x04	; 4
    5eee:	9c 93       	st	X, r25
    5ef0:	8e 93       	st	-X, r24
    5ef2:	13 97       	sbiw	r26, 0x03	; 3
    5ef4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    5ef8:	0f 90       	pop	r0
    5efa:	0f 90       	pop	r0
    5efc:	ed b7       	in	r30, 0x3d	; 61
    5efe:	fe b7       	in	r31, 0x3e	; 62
    5f00:	52 82       	std	Z+2, r5	; 0x02
    5f02:	41 82       	std	Z+1, r4	; 0x01
    5f04:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    5f08:	0f 90       	pop	r0
    5f0a:	0f 90       	pop	r0
			readHttpParameterValueSubTask->setWork( subTaskAfterParsingAllParameters , selectedService , this );
			return readHttpParameterValueSubTask;
		}
		else
		{
			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    5f0c:	0f 5f       	subi	r16, 0xFF	; 255
    5f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5f10:	02 c0       	rjmp	.+4      	; 0x5f16 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1d2>
		if( readByte == ' ' )
		{
			return subTaskAfterParsingAllParameters;
		}
		else
		if( readByte == '=' )
    5f12:	00 e0       	ldi	r16, 0x00	; 0
    5f14:	10 e0       	ldi	r17, 0x00	; 0
			readHttpParameterValueSubTask->setWork( subTaskAfterParsingAllParameters , selectedService , this );
			return readHttpParameterValueSubTask;
		}
		else
		{
			for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    5f16:	89 89       	ldd	r24, Y+17	; 0x11
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	08 17       	cp	r16, r24
    5f1c:	19 07       	cpc	r17, r25
    5f1e:	0c f4       	brge	.+2      	; 0x5f22 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x1de>
    5f20:	a4 cf       	rjmp	.-184    	; 0x5e6a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x126>
					}
				}

			}

			letterIndex++;
    5f22:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5f24:	8f 5f       	subi	r24, 0xFF	; 255
    5f26:	8a 8f       	std	Y+26, r24	; 0x1a
RestServerSubTask* ReadHttpParameterNameSubTask::executeSubTask( Stream* stream )
{
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "ReadHttpParameterNameSubTask:executeSubTask():";

	while( alreadyReadBytesCount < readingMaxBytesCount && ( millis() - startTime < readingMaxTime ) )
    5f28:	88 8d       	ldd	r24, Y+24	; 0x18
    5f2a:	99 8d       	ldd	r25, Y+25	; 0x19
    5f2c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f2e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f30:	82 17       	cp	r24, r18
    5f32:	93 07       	cpc	r25, r19
    5f34:	98 f5       	brcc	.+102    	; 0x5f9c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x258>
    5f36:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    5f3a:	ab 01       	movw	r20, r22
    5f3c:	bc 01       	movw	r22, r24
    5f3e:	8c 89       	ldd	r24, Y+20	; 0x14
    5f40:	9d 89       	ldd	r25, Y+21	; 0x15
    5f42:	ae 89       	ldd	r26, Y+22	; 0x16
    5f44:	bf 89       	ldd	r27, Y+23	; 0x17
    5f46:	48 1b       	sub	r20, r24
    5f48:	59 0b       	sbc	r21, r25
    5f4a:	6a 0b       	sbc	r22, r26
    5f4c:	7b 0b       	sbc	r23, r27
    5f4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5f50:	9c 85       	ldd	r25, Y+12	; 0x0c
    5f52:	a0 e0       	ldi	r26, 0x00	; 0
    5f54:	b0 e0       	ldi	r27, 0x00	; 0
    5f56:	48 17       	cp	r20, r24
    5f58:	59 07       	cpc	r21, r25
    5f5a:	6a 07       	cpc	r22, r26
    5f5c:	7b 07       	cpc	r23, r27
    5f5e:	f0 f4       	brcc	.+60     	; 0x5f9c <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x258>
	{
		if( stream->available() == 0 ) return NULL;
    5f60:	d5 01       	movw	r26, r10
    5f62:	ed 91       	ld	r30, X+
    5f64:	fc 91       	ld	r31, X
    5f66:	04 80       	ldd	r0, Z+4	; 0x04
    5f68:	f5 81       	ldd	r31, Z+5	; 0x05
    5f6a:	e0 2d       	mov	r30, r0
    5f6c:	c5 01       	movw	r24, r10
    5f6e:	19 95       	eicall
    5f70:	00 97       	sbiw	r24, 0x00	; 0
    5f72:	09 f0       	breq	.+2      	; 0x5f76 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x232>
    5f74:	07 cf       	rjmp	.-498    	; 0x5d84 <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x40>

		int readByte = stream->read();

		if( readByte == -1 ) return NULL;
    5f76:	80 e0       	ldi	r24, 0x00	; 0
    5f78:	90 e0       	ldi	r25, 0x00	; 0
			letterIndex++;
		}
	}

	return errorSubTask;
}
    5f7a:	df 91       	pop	r29
    5f7c:	cf 91       	pop	r28
    5f7e:	1f 91       	pop	r17
    5f80:	0f 91       	pop	r16
    5f82:	ff 90       	pop	r15
    5f84:	ef 90       	pop	r14
    5f86:	df 90       	pop	r13
    5f88:	cf 90       	pop	r12
    5f8a:	bf 90       	pop	r11
    5f8c:	af 90       	pop	r10
    5f8e:	9f 90       	pop	r9
    5f90:	8f 90       	pop	r8
    5f92:	7f 90       	pop	r7
    5f94:	6f 90       	pop	r6
    5f96:	5f 90       	pop	r5
    5f98:	4f 90       	pop	r4
    5f9a:	08 95       	ret

			letterIndex++;
		}
	}

	return errorSubTask;
    5f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5fa0:	ec cf       	rjmp	.-40     	; 0x5f7a <_ZN28ReadHttpParameterNameSubTask14executeSubTaskEP6Stream+0x236>

00005fa2 <_ZN28ReadHttpParameterNameSubTask18resetInternalStateEv>:
}

// =================================================

void ReadHttpParameterNameSubTask::resetInternalState()
{
    5fa2:	cf 93       	push	r28
    5fa4:	df 93       	push	r29
    5fa6:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "resetInternalState";
	//static const char* prefix = "ReadHttpParameterNameSubTask:resetInternalState():";

	alreadyReadBytesCount = 0;
    5fa8:	19 8e       	std	Y+25, r1	; 0x19
    5faa:	18 8e       	std	Y+24, r1	; 0x18
	letterIndex = 0;
    5fac:	1a 8e       	std	Y+26, r1	; 0x1a

	for( int i = 0 ; i < serviceDescrptionsCount ; i++ ) arrayForMatchServiceNames[i] = (serviceDescrptions[i]->restService->type != REST_SERVICE_TYPE_READ_ONLY );
    5fae:	20 e0       	ldi	r18, 0x00	; 0
    5fb0:	30 e0       	ldi	r19, 0x00	; 0
    5fb2:	19 c0       	rjmp	.+50     	; 0x5fe6 <_ZN28ReadHttpParameterNameSubTask18resetInternalStateEv+0x44>
    5fb4:	aa 89       	ldd	r26, Y+18	; 0x12
    5fb6:	bb 89       	ldd	r27, Y+19	; 0x13
    5fb8:	a2 0f       	add	r26, r18
    5fba:	b3 1f       	adc	r27, r19
    5fbc:	c9 01       	movw	r24, r18
    5fbe:	88 0f       	add	r24, r24
    5fc0:	99 1f       	adc	r25, r25
    5fc2:	ef 85       	ldd	r30, Y+15	; 0x0f
    5fc4:	f8 89       	ldd	r31, Y+16	; 0x10
    5fc6:	e8 0f       	add	r30, r24
    5fc8:	f9 1f       	adc	r31, r25
    5fca:	01 90       	ld	r0, Z+
    5fcc:	f0 81       	ld	r31, Z
    5fce:	e0 2d       	mov	r30, r0
    5fd0:	01 90       	ld	r0, Z+
    5fd2:	f0 81       	ld	r31, Z
    5fd4:	e0 2d       	mov	r30, r0
    5fd6:	81 e0       	ldi	r24, 0x01	; 1
    5fd8:	95 81       	ldd	r25, Z+5	; 0x05
    5fda:	99 23       	and	r25, r25
    5fdc:	09 f4       	brne	.+2      	; 0x5fe0 <_ZN28ReadHttpParameterNameSubTask18resetInternalStateEv+0x3e>
    5fde:	80 e0       	ldi	r24, 0x00	; 0
    5fe0:	8c 93       	st	X, r24
    5fe2:	2f 5f       	subi	r18, 0xFF	; 255
    5fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe6:	89 89       	ldd	r24, Y+17	; 0x11
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	28 17       	cp	r18, r24
    5fec:	39 07       	cpc	r19, r25
    5fee:	14 f3       	brlt	.-60     	; 0x5fb4 <_ZN28ReadHttpParameterNameSubTask18resetInternalStateEv+0x12>

	startTime = millis();
    5ff0:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    5ff4:	dc 01       	movw	r26, r24
    5ff6:	cb 01       	movw	r24, r22
    5ff8:	8c 8b       	std	Y+20, r24	; 0x14
    5ffa:	9d 8b       	std	Y+21, r25	; 0x15
    5ffc:	ae 8b       	std	Y+22, r26	; 0x16
    5ffe:	bf 8b       	std	Y+23, r27	; 0x17
}
    6000:	df 91       	pop	r29
    6002:	cf 91       	pop	r28
    6004:	08 95       	ret

00006006 <_ZN28ReadHttpParameterNameSubTaskC1EP17RestServerSubTaskjjPP18ServiceDescriptionhPbP29ReadHttpParameterValueSubTask>:

#include "ReadHttpParameterNameSubTask.h"

// =================================================

ReadHttpParameterNameSubTask::ReadHttpParameterNameSubTask( RestServerSubTask* _errorSubTask , unsigned int _readingMaxTime , unsigned int _readingMaxBytesCount , ServiceDescription** _serviceDescrptions , unsigned char _serviceDescrptionsCount , bool* _arrayForMatchServiceNames , ReadHttpParameterValueSubTask* _readHttpParameterValueSubTask ) : dp( PSTR( "ReadHttpParameterNameSubTask" ) ) // : p( _p )
    6006:	4f 92       	push	r4
    6008:	5f 92       	push	r5
    600a:	6f 92       	push	r6
    600c:	7f 92       	push	r7
    600e:	8f 92       	push	r8
    6010:	9f 92       	push	r9
    6012:	af 92       	push	r10
    6014:	bf 92       	push	r11
    6016:	cf 92       	push	r12
    6018:	df 92       	push	r13
    601a:	ef 92       	push	r14
    601c:	0f 93       	push	r16
    601e:	1f 93       	push	r17
    6020:	cf 93       	push	r28
    6022:	df 93       	push	r29
    6024:	ec 01       	movw	r28, r24
    6026:	2b 01       	movw	r4, r22
    6028:	3a 01       	movw	r6, r20
    602a:	49 01       	movw	r8, r18
    602c:	2b e2       	ldi	r18, 0x2B	; 43
    602e:	3f e0       	ldi	r19, 0x0F	; 15
    6030:	fc 01       	movw	r30, r24
    6032:	21 93       	st	Z+, r18
    6034:	31 93       	st	Z+, r19
    6036:	cf 01       	movw	r24, r30
    6038:	6b ec       	ldi	r22, 0xCB	; 203
    603a:	7f e0       	ldi	r23, 0x0F	; 15
    603c:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	errorSubTask = _errorSubTask;
    6040:	5e 82       	std	Y+6, r5	; 0x06
    6042:	4d 82       	std	Y+5, r4	; 0x05

	readingMaxTime = _readingMaxTime;
    6044:	7c 86       	std	Y+12, r7	; 0x0c
    6046:	6b 86       	std	Y+11, r6	; 0x0b
	readingMaxBytesCount = _readingMaxBytesCount;
    6048:	9e 86       	std	Y+14, r9	; 0x0e
    604a:	8d 86       	std	Y+13, r8	; 0x0d

	serviceDescrptions = _serviceDescrptions;
    604c:	18 8b       	std	Y+16, r17	; 0x10
    604e:	0f 87       	std	Y+15, r16	; 0x0f
	serviceDescrptionsCount = _serviceDescrptionsCount;
    6050:	e9 8a       	std	Y+17, r14	; 0x11

	arrayForMatchServiceNames = _arrayForMatchServiceNames;
    6052:	db 8a       	std	Y+19, r13	; 0x13
    6054:	ca 8a       	std	Y+18, r12	; 0x12

	readHttpParameterValueSubTask = _readHttpParameterValueSubTask;
    6056:	ba 86       	std	Y+10, r11	; 0x0a
    6058:	a9 86       	std	Y+9, r10	; 0x09
}
    605a:	df 91       	pop	r29
    605c:	cf 91       	pop	r28
    605e:	1f 91       	pop	r17
    6060:	0f 91       	pop	r16
    6062:	ef 90       	pop	r14
    6064:	df 90       	pop	r13
    6066:	cf 90       	pop	r12
    6068:	bf 90       	pop	r11
    606a:	af 90       	pop	r10
    606c:	9f 90       	pop	r9
    606e:	8f 90       	pop	r8
    6070:	7f 90       	pop	r7
    6072:	6f 90       	pop	r6
    6074:	5f 90       	pop	r5
    6076:	4f 90       	pop	r4
    6078:	08 95       	ret

0000607a <_ZN28ReadHttpParameterNameSubTask7setWorkEP17RestServerSubTask>:

// =================================================

void ReadHttpParameterNameSubTask::setWork( RestServerSubTask* _subTaskAfterParsingAllParameters )
{
	subTaskAfterParsingAllParameters = _subTaskAfterParsingAllParameters;
    607a:	fc 01       	movw	r30, r24
    607c:	70 87       	std	Z+8, r23	; 0x08
    607e:	67 83       	std	Z+7, r22	; 0x07
}
    6080:	08 95       	ret

00006082 <_ZN29ReadHttpParameterValueSubTask14getSubTaskNameEv>:
// =================================================

char* ReadHttpParameterValueSubTask::getSubTaskName()
{
	return "ReadHttpParameterValue-sub-task";
}
    6082:	88 e1       	ldi	r24, 0x18	; 24
    6084:	9d e0       	ldi	r25, 0x0D	; 13
    6086:	08 95       	ret

00006088 <_ZN29ReadHttpParameterValueSubTask18resetInternalStateEv>:

// =================================================

void ReadHttpParameterValueSubTask::resetInternalState()
{
    6088:	cf 93       	push	r28
    608a:	df 93       	push	r29
    608c:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "resetInternalState";
	//static const char* prefix = "ReadHttpParameterValueSubTask:resetInternalState():";

	letterIndex = 0;
    608e:	18 8e       	std	Y+24, r1	; 0x18

	for( int i = 0 ; i < arrayForValueBytesSize ; i++ ) arrayForValueBytes[i] = 0;
    6090:	80 e0       	ldi	r24, 0x00	; 0
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	06 c0       	rjmp	.+12     	; 0x60a2 <_ZN29ReadHttpParameterValueSubTask18resetInternalStateEv+0x1a>
    6096:	e9 85       	ldd	r30, Y+9	; 0x09
    6098:	fa 85       	ldd	r31, Y+10	; 0x0a
    609a:	e8 0f       	add	r30, r24
    609c:	f9 1f       	adc	r31, r25
    609e:	10 82       	st	Z, r1
    60a0:	01 96       	adiw	r24, 0x01	; 1
    60a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    60a4:	30 e0       	ldi	r19, 0x00	; 0
    60a6:	82 17       	cp	r24, r18
    60a8:	93 07       	cpc	r25, r19
    60aa:	ac f3       	brlt	.-22     	; 0x6096 <_ZN29ReadHttpParameterValueSubTask18resetInternalStateEv+0xe>

	startTime = millis();
    60ac:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    60b0:	dc 01       	movw	r26, r24
    60b2:	cb 01       	movw	r24, r22
    60b4:	8c 8b       	std	Y+20, r24	; 0x14
    60b6:	9d 8b       	std	Y+21, r25	; 0x15
    60b8:	ae 8b       	std	Y+22, r26	; 0x16
    60ba:	bf 8b       	std	Y+23, r27	; 0x17
}
    60bc:	df 91       	pop	r29
    60be:	cf 91       	pop	r28
    60c0:	08 95       	ret

000060c2 <_ZN29ReadHttpParameterValueSubTaskC1EP17RestServerSubTaskjPhh>:

#include "ReadHttpParameterValueSubTask.h"

// =================================================

ReadHttpParameterValueSubTask::ReadHttpParameterValueSubTask( RestServerSubTask* _errorSubTask , unsigned int _readingMaxTime , unsigned char* _arrayForValueBytes , unsigned char _arrayForValueBytesSize ) : dp( PSTR( "ReadHttpParameterValueSubTask" ) )//: p( _p )
    60c2:	af 92       	push	r10
    60c4:	bf 92       	push	r11
    60c6:	cf 92       	push	r12
    60c8:	df 92       	push	r13
    60ca:	ef 92       	push	r14
    60cc:	ff 92       	push	r15
    60ce:	0f 93       	push	r16
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	ec 01       	movw	r28, r24
    60d6:	5b 01       	movw	r10, r22
    60d8:	6a 01       	movw	r12, r20
    60da:	79 01       	movw	r14, r18
    60dc:	25 e3       	ldi	r18, 0x35	; 53
    60de:	3f e0       	ldi	r19, 0x0F	; 15
    60e0:	fc 01       	movw	r30, r24
    60e2:	21 93       	st	Z+, r18
    60e4:	31 93       	st	Z+, r19
    60e6:	cf 01       	movw	r24, r30
    60e8:	66 e4       	ldi	r22, 0x46	; 70
    60ea:	70 e1       	ldi	r23, 0x10	; 16
    60ec:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	errorSubTask = _errorSubTask;
    60f0:	be 82       	std	Y+6, r11	; 0x06
    60f2:	ad 82       	std	Y+5, r10	; 0x05

	readingMaxTime = _readingMaxTime;
    60f4:	d8 86       	std	Y+8, r13	; 0x08
    60f6:	cf 82       	std	Y+7, r12	; 0x07
	arrayForValueBytes = _arrayForValueBytes;
    60f8:	fa 86       	std	Y+10, r15	; 0x0a
    60fa:	e9 86       	std	Y+9, r14	; 0x09
	arrayForValueBytesSize = _arrayForValueBytesSize;
    60fc:	0b 87       	std	Y+11, r16	; 0x0b
}
    60fe:	df 91       	pop	r29
    6100:	cf 91       	pop	r28
    6102:	0f 91       	pop	r16
    6104:	ff 90       	pop	r15
    6106:	ef 90       	pop	r14
    6108:	df 90       	pop	r13
    610a:	cf 90       	pop	r12
    610c:	bf 90       	pop	r11
    610e:	af 90       	pop	r10
    6110:	08 95       	ret

00006112 <_ZN29ReadHttpParameterValueSubTask7setWorkEP17RestServerSubTaskP18ServiceDescriptionS1_>:

// =================================================

void ReadHttpParameterValueSubTask::setWork( RestServerSubTask* _subTaskAfterParsingAllParameters , ServiceDescription* _selectedServiceDescription , RestServerSubTask* _subTaskThatWillReadNextHttpParameterName )
{
    6112:	fc 01       	movw	r30, r24
	subTaskAfterParsingAllParameters = _subTaskAfterParsingAllParameters;
    6114:	77 87       	std	Z+15, r23	; 0x0f
    6116:	66 87       	std	Z+14, r22	; 0x0e
	selectedServiceDescription = _selectedServiceDescription;
    6118:	51 8b       	std	Z+17, r21	; 0x11
    611a:	40 8b       	std	Z+16, r20	; 0x10
	subTaskThatWillReadNextHttpParameterName = _subTaskThatWillReadNextHttpParameterName;
    611c:	33 8b       	std	Z+19, r19	; 0x13
    611e:	22 8b       	std	Z+18, r18	; 0x12
}
    6120:	08 95       	ret

00006122 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv>:
}

// =================================================

void ReadHttpParameterValueSubTask::parseReadParameterValue()
{
    6122:	cf 92       	push	r12
    6124:	df 92       	push	r13
    6126:	ef 92       	push	r14
    6128:	ff 92       	push	r15
    612a:	0f 93       	push	r16
    612c:	1f 93       	push	r17
    612e:	cf 93       	push	r28
    6130:	df 93       	push	r29
    6132:	8c 01       	movw	r16, r24
	static const PROGMEM prog_char functionName[] = "parseReadParameterValue";
	//static const char* prefix = "ReadHttpParameterValueSubTask:parseReadParameterValue():";

	if( selectedServiceDescription != NULL )
    6134:	dc 01       	movw	r26, r24
    6136:	50 96       	adiw	r26, 0x10	; 16
    6138:	8d 91       	ld	r24, X+
    613a:	9c 91       	ld	r25, X
    613c:	51 97       	sbiw	r26, 0x11	; 17
    613e:	00 97       	sbiw	r24, 0x00	; 0
    6140:	09 f4       	brne	.+2      	; 0x6144 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x22>
    6142:	d9 c0       	rjmp	.+434    	; 0x62f6 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x1d4>
	{
		//all( p << prefix << "for rest service '" << selectedServiceDescription->restService->name << "' incomming value = '" << (char*)arrayForValueBytes << "'" << endl; )
		aln( "for rest service '%s' incomming value = '%s'" , selectedServiceDescription->restService->name , arrayForValueBytes )
    6144:	14 96       	adiw	r26, 0x04	; 4
    6146:	8c 91       	ld	r24, X
    6148:	14 97       	sbiw	r26, 0x04	; 4
    614a:	8b 30       	cpi	r24, 0x0B	; 11
    614c:	98 f5       	brcc	.+102    	; 0x61b4 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x92>
    614e:	c8 01       	movw	r24, r16
    6150:	02 96       	adiw	r24, 0x02	; 2
    6152:	6b e8       	ldi	r22, 0x8B	; 139
    6154:	72 e1       	ldi	r23, 0x12	; 18
    6156:	44 e6       	ldi	r20, 0x64	; 100
    6158:	50 e1       	ldi	r21, 0x10	; 16
    615a:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    615e:	00 d0       	rcall	.+0      	; 0x6160 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x3e>
    6160:	00 d0       	rcall	.+0      	; 0x6162 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x40>
    6162:	ed b7       	in	r30, 0x3d	; 61
    6164:	fe b7       	in	r31, 0x3e	; 62
    6166:	31 96       	adiw	r30, 0x01	; 1
    6168:	8c e7       	ldi	r24, 0x7C	; 124
    616a:	90 e1       	ldi	r25, 0x10	; 16
    616c:	cd b7       	in	r28, 0x3d	; 61
    616e:	de b7       	in	r29, 0x3e	; 62
    6170:	9a 83       	std	Y+2, r25	; 0x02
    6172:	89 83       	std	Y+1, r24	; 0x01
    6174:	e8 01       	movw	r28, r16
    6176:	a8 89       	ldd	r26, Y+16	; 0x10
    6178:	b9 89       	ldd	r27, Y+17	; 0x11
    617a:	0d 90       	ld	r0, X+
    617c:	bc 91       	ld	r27, X
    617e:	a0 2d       	mov	r26, r0
    6180:	13 96       	adiw	r26, 0x03	; 3
    6182:	8d 91       	ld	r24, X+
    6184:	9c 91       	ld	r25, X
    6186:	14 97       	sbiw	r26, 0x04	; 4
    6188:	93 83       	std	Z+3, r25	; 0x03
    618a:	82 83       	std	Z+2, r24	; 0x02
    618c:	89 85       	ldd	r24, Y+9	; 0x09
    618e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6190:	95 83       	std	Z+5, r25	; 0x05
    6192:	84 83       	std	Z+4, r24	; 0x04
    6194:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6198:	0f 90       	pop	r0
    619a:	0f 90       	pop	r0
    619c:	0f 90       	pop	r0
    619e:	0f 90       	pop	r0
    61a0:	8e e8       	ldi	r24, 0x8E	; 142
    61a2:	92 e1       	ldi	r25, 0x12	; 18
    61a4:	ed b7       	in	r30, 0x3d	; 61
    61a6:	fe b7       	in	r31, 0x3e	; 62
    61a8:	92 83       	std	Z+2, r25	; 0x02
    61aa:	81 83       	std	Z+1, r24	; 0x01
    61ac:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    61b0:	0f 90       	pop	r0
    61b2:	0f 90       	pop	r0

		if( selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BY_MYSELF || selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_TEXT )
    61b4:	d8 01       	movw	r26, r16
    61b6:	50 96       	adiw	r26, 0x10	; 16
    61b8:	ed 91       	ld	r30, X+
    61ba:	fc 91       	ld	r31, X
    61bc:	51 97       	sbiw	r26, 0x11	; 17
    61be:	c0 81       	ld	r28, Z
    61c0:	d1 81       	ldd	r29, Z+1	; 0x01
    61c2:	8d 81       	ldd	r24, Y+5	; 0x05
    61c4:	98 2f       	mov	r25, r24
    61c6:	91 50       	subi	r25, 0x01	; 1
    61c8:	92 30       	cpi	r25, 0x02	; 2
    61ca:	60 f4       	brcc	.+24     	; 0x61e4 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0xc2>
		{
			selectedServiceDescription->restService->setTextValue( arrayForValueBytes );
    61cc:	e8 81       	ld	r30, Y
    61ce:	f9 81       	ldd	r31, Y+1	; 0x01
    61d0:	19 96       	adiw	r26, 0x09	; 9
    61d2:	6d 91       	ld	r22, X+
    61d4:	7c 91       	ld	r23, X
    61d6:	1a 97       	sbiw	r26, 0x0a	; 10
    61d8:	00 84       	ldd	r0, Z+8	; 0x08
    61da:	f1 85       	ldd	r31, Z+9	; 0x09
    61dc:	e0 2d       	mov	r30, r0
    61de:	ce 01       	movw	r24, r28
    61e0:	19 95       	eicall
    61e2:	89 c0       	rjmp	.+274    	; 0x62f6 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x1d4>
		}
		else
		if( selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN || selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF || selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONE_TIME_EXECUTION )
    61e4:	98 2f       	mov	r25, r24
    61e6:	93 50       	subi	r25, 0x03	; 3
    61e8:	93 30       	cpi	r25, 0x03	; 3
    61ea:	90 f4       	brcc	.+36     	; 0x6210 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0xee>
			//info( p << prefix << "newValue=" << newValue << endl; )
			//info( p << prefix << "current value=" << selectedServiceDescription->restService->getBooleanValue() << endl; )

			//bool prev = selectedServiceDescription->restService->getBooleanValue();

			selectedServiceDescription->restService->setBooleanValue( newValue );
    61ec:	28 81       	ld	r18, Y
    61ee:	39 81       	ldd	r19, Y+1	; 0x01
		if( selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN || selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONOFF || selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_BOOLEAN_ONE_TIME_EXECUTION )
		{
			//all( p << prefix << "for rest service '" << selectedServiceDescription->restService->name << "' incomming value = '" << (char*)arrayForValueBytes << "'" << endl; )
			//aln(  )

			bool newValue = arrayForValueBytes[0] - 48 == 1 ? true : false;
    61f0:	f8 01       	movw	r30, r16
    61f2:	a1 85       	ldd	r26, Z+9	; 0x09
    61f4:	b2 85       	ldd	r27, Z+10	; 0x0a
    61f6:	61 e0       	ldi	r22, 0x01	; 1
    61f8:	8c 91       	ld	r24, X
    61fa:	81 33       	cpi	r24, 0x31	; 49
    61fc:	09 f0       	breq	.+2      	; 0x6200 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0xde>
    61fe:	60 e0       	ldi	r22, 0x00	; 0
			//info( p << prefix << "newValue=" << newValue << endl; )
			//info( p << prefix << "current value=" << selectedServiceDescription->restService->getBooleanValue() << endl; )

			//bool prev = selectedServiceDescription->restService->getBooleanValue();

			selectedServiceDescription->restService->setBooleanValue( newValue );
    6200:	d9 01       	movw	r26, r18
    6202:	16 96       	adiw	r26, 0x06	; 6
    6204:	ed 91       	ld	r30, X+
    6206:	fc 91       	ld	r31, X
    6208:	17 97       	sbiw	r26, 0x07	; 7
    620a:	ce 01       	movw	r24, r28
    620c:	19 95       	eicall
    620e:	73 c0       	rjmp	.+230    	; 0x62f6 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x1d4>
		}
		else
		if( selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_INT )
		{
			// spr min max i zrownac do min max a potem przekazac
			int newValue = atoi( (char*)arrayForValueBytes );
    6210:	f8 01       	movw	r30, r16

			// todo usunac
			//info( p << prefix << "prev value=" << prev << ", current value=" << selectedServiceDescription->restService->getBooleanValue() << endl; )
		}
		else
		if( selectedServiceDescription->restService->type == REST_SERVICE_TYPE_UPDATEABLE_INT )
    6212:	86 30       	cpi	r24, 0x06	; 6
    6214:	c1 f5       	brne	.+112    	; 0x6286 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x164>
		{
			// spr min max i zrownac do min max a potem przekazac
			int newValue = atoi( (char*)arrayForValueBytes );
    6216:	81 85       	ldd	r24, Z+9	; 0x09
    6218:	92 85       	ldd	r25, Z+10	; 0x0a
    621a:	0e 94 e5 49 	call	0x93ca	; 0x93ca <atoi>
    621e:	7c 01       	movw	r14, r24

			//if( newValue < selectedServiceDescription->restService->getIntMinValue() ) newValue = selectedServiceDescription->restService->getIntMinValue();
			//if( newValue < selectedServiceDescription->restService->getIntMaxValue() ) newValue = selectedServiceDescription->restService->getIntMaxValue();

			selectedServiceDescription->restService->setIntValue( constrain( newValue , selectedServiceDescription->restService->getIntMinValue() , selectedServiceDescription->restService->getIntMaxValue() ) );
    6220:	e8 81       	ld	r30, Y
    6222:	f9 81       	ldd	r31, Y+1	; 0x01
    6224:	c2 84       	ldd	r12, Z+10	; 0x0a
    6226:	d3 84       	ldd	r13, Z+11	; 0x0b
    6228:	04 84       	ldd	r0, Z+12	; 0x0c
    622a:	f5 85       	ldd	r31, Z+13	; 0x0d
    622c:	e0 2d       	mov	r30, r0
    622e:	ce 01       	movw	r24, r28
    6230:	19 95       	eicall
    6232:	d8 01       	movw	r26, r16
    6234:	50 96       	adiw	r26, 0x10	; 16
    6236:	ed 91       	ld	r30, X+
    6238:	fc 91       	ld	r31, X
    623a:	51 97       	sbiw	r26, 0x11	; 17
    623c:	c0 81       	ld	r28, Z
    623e:	d1 81       	ldd	r29, Z+1	; 0x01
    6240:	e8 81       	ld	r30, Y
    6242:	f9 81       	ldd	r31, Y+1	; 0x01
    6244:	e8 16       	cp	r14, r24
    6246:	f9 06       	cpc	r15, r25
    6248:	24 f4       	brge	.+8      	; 0x6252 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x130>
    624a:	04 84       	ldd	r0, Z+12	; 0x0c
    624c:	f5 85       	ldd	r31, Z+13	; 0x0d
    624e:	e0 2d       	mov	r30, r0
    6250:	12 c0       	rjmp	.+36     	; 0x6276 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x154>
    6252:	06 84       	ldd	r0, Z+14	; 0x0e
    6254:	f7 85       	ldd	r31, Z+15	; 0x0f
    6256:	e0 2d       	mov	r30, r0
    6258:	ce 01       	movw	r24, r28
    625a:	19 95       	eicall
    625c:	8e 15       	cp	r24, r14
    625e:	9f 05       	cpc	r25, r15
    6260:	6c f4       	brge	.+26     	; 0x627c <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x15a>
    6262:	e8 01       	movw	r28, r16
    6264:	e8 89       	ldd	r30, Y+16	; 0x10
    6266:	f9 89       	ldd	r31, Y+17	; 0x11
    6268:	c0 81       	ld	r28, Z
    626a:	d1 81       	ldd	r29, Z+1	; 0x01
    626c:	e8 81       	ld	r30, Y
    626e:	f9 81       	ldd	r31, Y+1	; 0x01
    6270:	06 84       	ldd	r0, Z+14	; 0x0e
    6272:	f7 85       	ldd	r31, Z+15	; 0x0f
    6274:	e0 2d       	mov	r30, r0
    6276:	ce 01       	movw	r24, r28
    6278:	19 95       	eicall
    627a:	7c 01       	movw	r14, r24
    627c:	ce 01       	movw	r24, r28
    627e:	b7 01       	movw	r22, r14
    6280:	f6 01       	movw	r30, r12
    6282:	19 95       	eicall
    6284:	38 c0       	rjmp	.+112    	; 0x62f6 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x1d4>
		}
		else
		{
			//warning( p << prefix << "unsupported rest service type, tryed to set for service '" << selectedServiceDescription->restService->name << "' incomming value = '" << (char*)arrayForValueBytes << "'" << endl; )
			wln( "unsupported rest service type, tryed to set for service '%s' incomming value = '%s'" , selectedServiceDescription->restService->name , arrayForValueBytes )
    6286:	84 81       	ldd	r24, Z+4	; 0x04
    6288:	8f 31       	cpi	r24, 0x1F	; 31
    628a:	a8 f5       	brcc	.+106    	; 0x62f6 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x1d4>
    628c:	c8 01       	movw	r24, r16
    628e:	02 96       	adiw	r24, 0x02	; 2
    6290:	65 e8       	ldi	r22, 0x85	; 133
    6292:	72 e1       	ldi	r23, 0x12	; 18
    6294:	44 e6       	ldi	r20, 0x64	; 100
    6296:	50 e1       	ldi	r21, 0x10	; 16
    6298:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    629c:	00 d0       	rcall	.+0      	; 0x629e <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x17c>
    629e:	00 d0       	rcall	.+0      	; 0x62a0 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv+0x17e>
    62a0:	ed b7       	in	r30, 0x3d	; 61
    62a2:	fe b7       	in	r31, 0x3e	; 62
    62a4:	31 96       	adiw	r30, 0x01	; 1
    62a6:	89 ea       	ldi	r24, 0xA9	; 169
    62a8:	90 e1       	ldi	r25, 0x10	; 16
    62aa:	ad b7       	in	r26, 0x3d	; 61
    62ac:	be b7       	in	r27, 0x3e	; 62
    62ae:	12 96       	adiw	r26, 0x02	; 2
    62b0:	9c 93       	st	X, r25
    62b2:	8e 93       	st	-X, r24
    62b4:	11 97       	sbiw	r26, 0x01	; 1
    62b6:	e8 01       	movw	r28, r16
    62b8:	a8 89       	ldd	r26, Y+16	; 0x10
    62ba:	b9 89       	ldd	r27, Y+17	; 0x11
    62bc:	0d 90       	ld	r0, X+
    62be:	bc 91       	ld	r27, X
    62c0:	a0 2d       	mov	r26, r0
    62c2:	13 96       	adiw	r26, 0x03	; 3
    62c4:	8d 91       	ld	r24, X+
    62c6:	9c 91       	ld	r25, X
    62c8:	14 97       	sbiw	r26, 0x04	; 4
    62ca:	93 83       	std	Z+3, r25	; 0x03
    62cc:	82 83       	std	Z+2, r24	; 0x02
    62ce:	89 85       	ldd	r24, Y+9	; 0x09
    62d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d2:	95 83       	std	Z+5, r25	; 0x05
    62d4:	84 83       	std	Z+4, r24	; 0x04
    62d6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    62da:	0f 90       	pop	r0
    62dc:	0f 90       	pop	r0
    62de:	0f 90       	pop	r0
    62e0:	0f 90       	pop	r0
    62e2:	8e e8       	ldi	r24, 0x8E	; 142
    62e4:	92 e1       	ldi	r25, 0x12	; 18
    62e6:	ed b7       	in	r30, 0x3d	; 61
    62e8:	fe b7       	in	r31, 0x3e	; 62
    62ea:	92 83       	std	Z+2, r25	; 0x02
    62ec:	81 83       	std	Z+1, r24	; 0x01
    62ee:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    62f2:	0f 90       	pop	r0
    62f4:	0f 90       	pop	r0
		}
	}
}
    62f6:	df 91       	pop	r29
    62f8:	cf 91       	pop	r28
    62fa:	1f 91       	pop	r17
    62fc:	0f 91       	pop	r16
    62fe:	ff 90       	pop	r15
    6300:	ef 90       	pop	r14
    6302:	df 90       	pop	r13
    6304:	cf 90       	pop	r12
    6306:	08 95       	ret

00006308 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream>:
}

// =================================================

RestServerSubTask* ReadHttpParameterValueSubTask::executeSubTask( Stream* stream )
{
    6308:	0f 93       	push	r16
    630a:	1f 93       	push	r17
    630c:	cf 93       	push	r28
    630e:	df 93       	push	r29
    6310:	ec 01       	movw	r28, r24
    6312:	8b 01       	movw	r16, r22
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "ReadHttpParameterValueSubTask:executeSubTask():";

	while( letterIndex < arrayForValueBytesSize && ( millis() - startTime < readingMaxTime ) )
    6314:	28 c0       	rjmp	.+80     	; 0x6366 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0x5e>
	{
		if( stream->available() == 0 ) return NULL;

		int readByte = stream->read();
    6316:	d8 01       	movw	r26, r16
    6318:	ed 91       	ld	r30, X+
    631a:	fc 91       	ld	r31, X
    631c:	06 80       	ldd	r0, Z+6	; 0x06
    631e:	f7 81       	ldd	r31, Z+7	; 0x07
    6320:	e0 2d       	mov	r30, r0
    6322:	c8 01       	movw	r24, r16
    6324:	19 95       	eicall

		if( readByte == -1 ) return NULL;
    6326:	bf ef       	ldi	r27, 0xFF	; 255
    6328:	8f 3f       	cpi	r24, 0xFF	; 255
    632a:	9b 07       	cpc	r25, r27
    632c:	09 f4       	brne	.+2      	; 0x6330 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0x28>
    632e:	3f c0       	rjmp	.+126    	; 0x63ae <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xa6>

		if( readByte == ' ' )
    6330:	80 32       	cpi	r24, 0x20	; 32
    6332:	91 05       	cpc	r25, r1
    6334:	31 f4       	brne	.+12     	; 0x6342 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0x3a>
		{
			parseReadParameterValue();
    6336:	ce 01       	movw	r24, r28
    6338:	0e 94 91 30 	call	0x6122	; 0x6122 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv>

			//info( p << prefix << "przechodze do tasku 'subTaskAfterParsingAllParameters'" << endl; ) // todo usunac

			return subTaskAfterParsingAllParameters;
    633c:	8e 85       	ldd	r24, Y+14	; 0x0e
    633e:	9f 85       	ldd	r25, Y+15	; 0x0f
    6340:	38 c0       	rjmp	.+112    	; 0x63b2 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xaa>
		}
		else
		if( readByte == '&' )
    6342:	86 32       	cpi	r24, 0x26	; 38
    6344:	91 05       	cpc	r25, r1
    6346:	31 f4       	brne	.+12     	; 0x6354 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0x4c>
		{
			parseReadParameterValue();
    6348:	ce 01       	movw	r24, r28
    634a:	0e 94 91 30 	call	0x6122	; 0x6122 <_ZN29ReadHttpParameterValueSubTask23parseReadParameterValueEv>

			return subTaskThatWillReadNextHttpParameterName;
    634e:	8a 89       	ldd	r24, Y+18	; 0x12
    6350:	9b 89       	ldd	r25, Y+19	; 0x13
    6352:	2f c0       	rjmp	.+94     	; 0x63b2 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xaa>
		}
		else
		{
			arrayForValueBytes[letterIndex] = readByte;
    6354:	98 8d       	ldd	r25, Y+24	; 0x18
    6356:	e9 85       	ldd	r30, Y+9	; 0x09
    6358:	fa 85       	ldd	r31, Y+10	; 0x0a
    635a:	e9 0f       	add	r30, r25
    635c:	f1 1d       	adc	r31, r1
    635e:	80 83       	st	Z, r24
			letterIndex++;
    6360:	88 8d       	ldd	r24, Y+24	; 0x18
    6362:	8f 5f       	subi	r24, 0xFF	; 255
    6364:	88 8f       	std	Y+24, r24	; 0x18
RestServerSubTask* ReadHttpParameterValueSubTask::executeSubTask( Stream* stream )
{
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "ReadHttpParameterValueSubTask:executeSubTask():";

	while( letterIndex < arrayForValueBytesSize && ( millis() - startTime < readingMaxTime ) )
    6366:	98 8d       	ldd	r25, Y+24	; 0x18
    6368:	8b 85       	ldd	r24, Y+11	; 0x0b
    636a:	98 17       	cp	r25, r24
    636c:	38 f5       	brcc	.+78     	; 0x63bc <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xb4>
    636e:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    6372:	ab 01       	movw	r20, r22
    6374:	bc 01       	movw	r22, r24
    6376:	8c 89       	ldd	r24, Y+20	; 0x14
    6378:	9d 89       	ldd	r25, Y+21	; 0x15
    637a:	ae 89       	ldd	r26, Y+22	; 0x16
    637c:	bf 89       	ldd	r27, Y+23	; 0x17
    637e:	48 1b       	sub	r20, r24
    6380:	59 0b       	sbc	r21, r25
    6382:	6a 0b       	sbc	r22, r26
    6384:	7b 0b       	sbc	r23, r27
    6386:	8f 81       	ldd	r24, Y+7	; 0x07
    6388:	98 85       	ldd	r25, Y+8	; 0x08
    638a:	a0 e0       	ldi	r26, 0x00	; 0
    638c:	b0 e0       	ldi	r27, 0x00	; 0
    638e:	48 17       	cp	r20, r24
    6390:	59 07       	cpc	r21, r25
    6392:	6a 07       	cpc	r22, r26
    6394:	7b 07       	cpc	r23, r27
    6396:	90 f4       	brcc	.+36     	; 0x63bc <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xb4>
	{
		if( stream->available() == 0 ) return NULL;
    6398:	d8 01       	movw	r26, r16
    639a:	ed 91       	ld	r30, X+
    639c:	fc 91       	ld	r31, X
    639e:	04 80       	ldd	r0, Z+4	; 0x04
    63a0:	f5 81       	ldd	r31, Z+5	; 0x05
    63a2:	e0 2d       	mov	r30, r0
    63a4:	c8 01       	movw	r24, r16
    63a6:	19 95       	eicall
    63a8:	00 97       	sbiw	r24, 0x00	; 0
    63aa:	09 f0       	breq	.+2      	; 0x63ae <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xa6>
    63ac:	b4 cf       	rjmp	.-152    	; 0x6316 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xe>

		int readByte = stream->read();

		if( readByte == -1 ) return NULL;
    63ae:	80 e0       	ldi	r24, 0x00	; 0
    63b0:	90 e0       	ldi	r25, 0x00	; 0
			letterIndex++;
		}
	}

	return errorSubTask;
}
    63b2:	df 91       	pop	r29
    63b4:	cf 91       	pop	r28
    63b6:	1f 91       	pop	r17
    63b8:	0f 91       	pop	r16
    63ba:	08 95       	ret
			arrayForValueBytes[letterIndex] = readByte;
			letterIndex++;
		}
	}

	return errorSubTask;
    63bc:	8d 81       	ldd	r24, Y+5	; 0x05
    63be:	9e 81       	ldd	r25, Y+6	; 0x06
    63c0:	f8 cf       	rjmp	.-16     	; 0x63b2 <_ZN29ReadHttpParameterValueSubTask14executeSubTaskEP6Stream+0xaa>

000063c2 <_ZN19ReadHttpPathSubTask14getSubTaskNameEv>:
// =================================================

char* ReadHttpPathSubTask::getSubTaskName()
{
	return "ReadHttpPath-sub-task";
}
    63c2:	88 e3       	ldi	r24, 0x38	; 56
    63c4:	9d e0       	ldi	r25, 0x0D	; 13
    63c6:	08 95       	ret

000063c8 <_ZN19ReadHttpPathSubTask18resetInternalStateEv>:

// =================================================

void ReadHttpPathSubTask::resetInternalState()
{
    63c8:	cf 93       	push	r28
    63ca:	df 93       	push	r29
    63cc:	ec 01       	movw	r28, r24

	//alreadyReadBytesCount = 0;
	//letterIndex = 0;
	//thereWasAtLeastOneMatching = false;

	streamReadUntilByte.resetInternalState( (char*)stopBytes );
    63ce:	60 91 d7 0d 	lds	r22, 0x0DD7
    63d2:	70 91 d8 0d 	lds	r23, 0x0DD8
    63d6:	44 96       	adiw	r24, 0x14	; 20
    63d8:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN19StreamReadUntilByte18resetInternalStateEPc>

	selectedServicesArrayIndex = 0;
    63dc:	1a a6       	std	Y+42, r1	; 0x2a
	responseType = 0;
    63de:	19 a6       	std	Y+41, r1	; 0x29
	thereWasAtLeastOneMatching = false;
    63e0:	1b a6       	std	Y+43, r1	; 0x2b
		setSelected( i , true );
		setCompletelyMatched( i , false );
	}

	startTime = millis();*/
}
    63e2:	df 91       	pop	r29
    63e4:	cf 91       	pop	r28
    63e6:	08 95       	ret

000063e8 <_ZN19ReadHttpPathSubTaskC1EP17RestServerSubTaskP29SkipBytesUntilSequenceSubTaskP28ReadHttpParameterNameSubTaskP19SendResponseSubTaskPP18ServiceDescriptionhS9_bPch>:
const char* ReadHttpPathSubTask::stopBytes = " /?*";
const char* ReadHttpPathSubTask::endOfHttpHeader = "\r\n\r\n";

// =================================================

ReadHttpPathSubTask::ReadHttpPathSubTask( RestServerSubTask* _errorSubTask , SkipBytesUntilSequenceSubTask* _skipBytesUntilSequenceSubTask , ReadHttpParameterNameSubTask* _readHttpParameterNameSubTask , SendResponseSubTask* _sendResponseSubTask , ServiceDescription** _serviceDescrptions , unsigned char _serviceDescrptionsCount , ServiceDescription* _arrayForSelectdServices , bool _leaveLastByteOfHttpHeaderInStream , char* _buffer , unsigned char _bufferSize )
    63e8:	2f 92       	push	r2
    63ea:	3f 92       	push	r3
    63ec:	4f 92       	push	r4
    63ee:	5f 92       	push	r5
    63f0:	6f 92       	push	r6
    63f2:	7f 92       	push	r7
    63f4:	8f 92       	push	r8
    63f6:	af 92       	push	r10
    63f8:	bf 92       	push	r11
    63fa:	cf 92       	push	r12
    63fc:	ef 92       	push	r14
    63fe:	ff 92       	push	r15
    6400:	0f 93       	push	r16
    6402:	1f 93       	push	r17
    6404:	cf 93       	push	r28
    6406:	df 93       	push	r29
    6408:	0f 92       	push	r0
    640a:	0f 92       	push	r0
    640c:	cd b7       	in	r28, 0x3d	; 61
    640e:	de b7       	in	r29, 0x3e	; 62
    6410:	3c 01       	movw	r6, r24
    6412:	1b 01       	movw	r2, r22
    6414:	5a 83       	std	Y+2, r21	; 0x02
    6416:	49 83       	std	Y+1, r20	; 0x01
    6418:	29 01       	movw	r4, r18
	: dp( PSTR( "ReadHttpPathSubTask" ) ) ,
	  streamReadUntilByte( _buffer , _bufferSize )
    641a:	2f e3       	ldi	r18, 0x3F	; 63
    641c:	3f e0       	ldi	r19, 0x0F	; 15
    641e:	fc 01       	movw	r30, r24
    6420:	21 93       	st	Z+, r18
    6422:	31 93       	st	Z+, r19
    6424:	cf 01       	movw	r24, r30
    6426:	6d ef       	ldi	r22, 0xFD	; 253
    6428:	70 e1       	ldi	r23, 0x10	; 16
    642a:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
    642e:	c3 01       	movw	r24, r6
    6430:	44 96       	adiw	r24, 0x14	; 20
    6432:	6e 89       	ldd	r22, Y+22	; 0x16
    6434:	7f 89       	ldd	r23, Y+23	; 0x17
    6436:	48 8d       	ldd	r20, Y+24	; 0x18
    6438:	0e 94 5b 39 	call	0x72b6	; 0x72b6 <_ZN19StreamReadUntilByteC1EPch>
{
	errorSubTask = _errorSubTask;
    643c:	f3 01       	movw	r30, r6
    643e:	36 82       	std	Z+6, r3	; 0x06
    6440:	25 82       	std	Z+5, r2	; 0x05
	skipBytesUntilSequenceSubTask = _skipBytesUntilSequenceSubTask;
    6442:	89 81       	ldd	r24, Y+1	; 0x01
    6444:	9a 81       	ldd	r25, Y+2	; 0x02
    6446:	90 87       	std	Z+8, r25	; 0x08
    6448:	87 83       	std	Z+7, r24	; 0x07
	readHttpParameterNameSubTask = _readHttpParameterNameSubTask;
    644a:	52 86       	std	Z+10, r5	; 0x0a
    644c:	41 86       	std	Z+9, r4	; 0x09
	sendResponseSubTask = _sendResponseSubTask;
    644e:	14 87       	std	Z+12, r17	; 0x0c
    6450:	03 87       	std	Z+11, r16	; 0x0b

	//readingMaxTime = _readingMaxTime;
	//readingMaxBytesCount = _readingMaxBytesCount;

	serviceDescrptions = _serviceDescrptions;
    6452:	f6 86       	std	Z+14, r15	; 0x0e
    6454:	e5 86       	std	Z+13, r14	; 0x0d
	serviceDescrptionsCount = _serviceDescrptionsCount;
    6456:	c7 86       	std	Z+15, r12	; 0x0f

	arrayForSelectdServices = _arrayForSelectdServices;
    6458:	b1 8a       	std	Z+17, r11	; 0x11
    645a:	a0 8a       	std	Z+16, r10	; 0x10
	//arrayForMatchServiceNames = _arrayForMatchServiceNames;

	leaveLastByteOfHttpHeaderInStream = _leaveLastByteOfHttpHeaderInStream;
    645c:	82 8a       	std	Z+18, r8	; 0x12
}
    645e:	0f 90       	pop	r0
    6460:	0f 90       	pop	r0
    6462:	df 91       	pop	r29
    6464:	cf 91       	pop	r28
    6466:	1f 91       	pop	r17
    6468:	0f 91       	pop	r16
    646a:	ff 90       	pop	r15
    646c:	ef 90       	pop	r14
    646e:	cf 90       	pop	r12
    6470:	bf 90       	pop	r11
    6472:	af 90       	pop	r10
    6474:	8f 90       	pop	r8
    6476:	7f 90       	pop	r7
    6478:	6f 90       	pop	r6
    647a:	5f 90       	pop	r5
    647c:	4f 90       	pop	r4
    647e:	3f 90       	pop	r3
    6480:	2f 90       	pop	r2
    6482:	08 95       	ret

00006484 <_ZN19ReadHttpPathSubTask7setWorkEb>:

// =================================================

void ReadHttpPathSubTask::setWork( bool _isGETHttpMethod )
{
	isGETHttpMethod = _isGETHttpMethod;
    6484:	fc 01       	movw	r30, r24
    6486:	63 8b       	std	Z+19, r22	; 0x13
}
    6488:	08 95       	ret

0000648a <_ZN19ReadHttpPathSubTask37allAllServicesToSelectedServicesArrayEv>:
}

// =================================================

void ReadHttpPathSubTask::allAllServicesToSelectedServicesArray()
{
    648a:	cf 93       	push	r28
    648c:	df 93       	push	r29
    648e:	dc 01       	movw	r26, r24
	for( int i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    6490:	60 e0       	ldi	r22, 0x00	; 0
    6492:	70 e0       	ldi	r23, 0x00	; 0
    6494:	40 e0       	ldi	r20, 0x00	; 0
    6496:	50 e0       	ldi	r21, 0x00	; 0
    6498:	28 c0       	rjmp	.+80     	; 0x64ea <_ZN19ReadHttpPathSubTask37allAllServicesToSelectedServicesArrayEv+0x60>
	{
		arrayForSelectdServices[ i ].restServiceRenderers = serviceDescrptions[ i ]->restServiceRenderers;
    649a:	50 96       	adiw	r26, 0x10	; 16
    649c:	2d 91       	ld	r18, X+
    649e:	3c 91       	ld	r19, X
    64a0:	51 97       	sbiw	r26, 0x11	; 17
    64a2:	26 0f       	add	r18, r22
    64a4:	37 1f       	adc	r19, r23
	}
}

// =================================================

void ReadHttpPathSubTask::allAllServicesToSelectedServicesArray()
    64a6:	ca 01       	movw	r24, r20
    64a8:	88 0f       	add	r24, r24
    64aa:	99 1f       	adc	r25, r25
{
	for( int i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
	{
		arrayForSelectdServices[ i ].restServiceRenderers = serviceDescrptions[ i ]->restServiceRenderers;
    64ac:	1d 96       	adiw	r26, 0x0d	; 13
    64ae:	cd 91       	ld	r28, X+
    64b0:	dc 91       	ld	r29, X
    64b2:	1e 97       	sbiw	r26, 0x0e	; 14
    64b4:	c8 0f       	add	r28, r24
    64b6:	d9 1f       	adc	r29, r25
    64b8:	e8 81       	ld	r30, Y
    64ba:	f9 81       	ldd	r31, Y+1	; 0x01
    64bc:	82 81       	ldd	r24, Z+2	; 0x02
    64be:	93 81       	ldd	r25, Z+3	; 0x03
    64c0:	f9 01       	movw	r30, r18
    64c2:	93 83       	std	Z+3, r25	; 0x03
    64c4:	82 83       	std	Z+2, r24	; 0x02
		arrayForSelectdServices[ i ].restService = serviceDescrptions[ i ]->restService;
    64c6:	e8 81       	ld	r30, Y
    64c8:	f9 81       	ldd	r31, Y+1	; 0x01
    64ca:	80 81       	ld	r24, Z
    64cc:	91 81       	ldd	r25, Z+1	; 0x01
    64ce:	f9 01       	movw	r30, r18
    64d0:	91 83       	std	Z+1, r25	; 0x01
    64d2:	80 83       	st	Z, r24

		selectedServicesArrayIndex++;
    64d4:	9a 96       	adiw	r26, 0x2a	; 42
    64d6:	8c 91       	ld	r24, X
    64d8:	9a 97       	sbiw	r26, 0x2a	; 42
    64da:	8f 5f       	subi	r24, 0xFF	; 255
    64dc:	9a 96       	adiw	r26, 0x2a	; 42
    64de:	8c 93       	st	X, r24
    64e0:	9a 97       	sbiw	r26, 0x2a	; 42

// =================================================

void ReadHttpPathSubTask::allAllServicesToSelectedServicesArray()
{
	for( int i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    64e2:	4f 5f       	subi	r20, 0xFF	; 255
    64e4:	5f 4f       	sbci	r21, 0xFF	; 255
    64e6:	6c 5f       	subi	r22, 0xFC	; 252
    64e8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ea:	1f 96       	adiw	r26, 0x0f	; 15
    64ec:	2c 91       	ld	r18, X
    64ee:	1f 97       	sbiw	r26, 0x0f	; 15
    64f0:	82 2f       	mov	r24, r18
    64f2:	90 e0       	ldi	r25, 0x00	; 0
    64f4:	02 97       	sbiw	r24, 0x02	; 2
    64f6:	48 17       	cp	r20, r24
    64f8:	59 07       	cpc	r21, r25
    64fa:	7c f2       	brlt	.-98     	; 0x649a <_ZN19ReadHttpPathSubTask37allAllServicesToSelectedServicesArrayEv+0x10>
		arrayForSelectdServices[ i ].restService = serviceDescrptions[ i ]->restService;

		selectedServicesArrayIndex++;
	}

	selectedServicesArrayIndex = serviceDescrptionsCount - 2;
    64fc:	22 50       	subi	r18, 0x02	; 2
    64fe:	9a 96       	adiw	r26, 0x2a	; 42
    6500:	2c 93       	st	X, r18
    6502:	9a 97       	sbiw	r26, 0x2a	; 42
}
    6504:	df 91       	pop	r29
    6506:	cf 91       	pop	r28
    6508:	08 95       	ret

0000650a <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_>:

// =================================================

bool ReadHttpPathSubTask::isStringStartsWith( char* str , char* startsWith )
{
    650a:	ef 92       	push	r14
    650c:	ff 92       	push	r15
    650e:	0f 93       	push	r16
    6510:	1f 93       	push	r17
    6512:	cf 93       	push	r28
    6514:	df 93       	push	r29
    6516:	ec 01       	movw	r28, r24
    6518:	7b 01       	movw	r14, r22
    651a:	8a 01       	movw	r16, r20
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//all( wp( "isStringStartsWith():str = '%s', startsWith = '%s', result = " , str , startsWith ) )
	a( "isStringStartsWith():str = '%s', startsWith = '%s', result = " , str , startsWith )
    651c:	8c 81       	ldd	r24, Y+4	; 0x04
    651e:	8b 30       	cpi	r24, 0x0B	; 11
    6520:	18 f5       	brcc	.+70     	; 0x6568 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x5e>
    6522:	ce 01       	movw	r24, r28
    6524:	02 96       	adiw	r24, 0x02	; 2
    6526:	6b e8       	ldi	r22, 0x8B	; 139
    6528:	72 e1       	ldi	r23, 0x12	; 18
    652a:	47 ed       	ldi	r20, 0xD7	; 215
    652c:	51 e1       	ldi	r21, 0x11	; 17
    652e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6532:	00 d0       	rcall	.+0      	; 0x6534 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x2a>
    6534:	00 d0       	rcall	.+0      	; 0x6536 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x2c>
    6536:	ed b7       	in	r30, 0x3d	; 61
    6538:	fe b7       	in	r31, 0x3e	; 62
    653a:	31 96       	adiw	r30, 0x01	; 1
    653c:	86 ee       	ldi	r24, 0xE6	; 230
    653e:	91 e1       	ldi	r25, 0x11	; 17
    6540:	ad b7       	in	r26, 0x3d	; 61
    6542:	be b7       	in	r27, 0x3e	; 62
    6544:	12 96       	adiw	r26, 0x02	; 2
    6546:	9c 93       	st	X, r25
    6548:	8e 93       	st	-X, r24
    654a:	11 97       	sbiw	r26, 0x01	; 1
    654c:	f3 82       	std	Z+3, r15	; 0x03
    654e:	e2 82       	std	Z+2, r14	; 0x02
    6550:	15 83       	std	Z+5, r17	; 0x05
    6552:	04 83       	std	Z+4, r16	; 0x04
    6554:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6558:	ed b7       	in	r30, 0x3d	; 61
    655a:	fe b7       	in	r31, 0x3e	; 62
    655c:	36 96       	adiw	r30, 0x06	; 6
    655e:	0f b6       	in	r0, 0x3f	; 63
    6560:	f8 94       	cli
    6562:	fe bf       	out	0x3e, r31	; 62
    6564:	0f be       	out	0x3f, r0	; 63
    6566:	ed bf       	out	0x3d, r30	; 61

	for( unsigned char i = 0 ; startsWith[i] != 0 ; i++ )
    6568:	20 e0       	ldi	r18, 0x00	; 0
    656a:	2a c0       	rjmp	.+84     	; 0x65c0 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0xb6>
	{
		if( str[i] != startsWith[i] || str[i] == 0 )
    656c:	8e 0d       	add	r24, r14
    656e:	9f 1d       	adc	r25, r15
    6570:	dc 01       	movw	r26, r24
    6572:	8c 91       	ld	r24, X
    6574:	83 17       	cp	r24, r19
    6576:	19 f1       	breq	.+70     	; 0x65be <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0xb4>
		{
			//all( p << "ReadHttpPathSubTask::isStringStartsWith():str='" << str << "', startsWith='" << startsWith << "', result = false" << endl; )
			//all( wpln( "false" ) )
			aln( "false" )
    6578:	8c 81       	ldd	r24, Y+4	; 0x04
    657a:	8b 30       	cpi	r24, 0x0B	; 11
    657c:	08 f0       	brcs	.+2      	; 0x6580 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x76>
    657e:	4a c0       	rjmp	.+148    	; 0x6614 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x10a>
    6580:	ce 01       	movw	r24, r28
    6582:	02 96       	adiw	r24, 0x02	; 2
    6584:	6b e8       	ldi	r22, 0x8B	; 139
    6586:	72 e1       	ldi	r23, 0x12	; 18
    6588:	47 ed       	ldi	r20, 0xD7	; 215
    658a:	51 e1       	ldi	r21, 0x11	; 17
    658c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6590:	0f 92       	push	r0
    6592:	0f 92       	push	r0
    6594:	84 e2       	ldi	r24, 0x24	; 36
    6596:	92 e1       	ldi	r25, 0x12	; 18
    6598:	ed b7       	in	r30, 0x3d	; 61
    659a:	fe b7       	in	r31, 0x3e	; 62
    659c:	92 83       	std	Z+2, r25	; 0x02
    659e:	81 83       	std	Z+1, r24	; 0x01
    65a0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    65a4:	8e e8       	ldi	r24, 0x8E	; 142
    65a6:	92 e1       	ldi	r25, 0x12	; 18
    65a8:	ad b7       	in	r26, 0x3d	; 61
    65aa:	be b7       	in	r27, 0x3e	; 62
    65ac:	12 96       	adiw	r26, 0x02	; 2
    65ae:	9c 93       	st	X, r25
    65b0:	8e 93       	st	-X, r24
    65b2:	11 97       	sbiw	r26, 0x01	; 1
    65b4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    65b8:	0f 90       	pop	r0
    65ba:	0f 90       	pop	r0
    65bc:	2b c0       	rjmp	.+86     	; 0x6614 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x10a>
{
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//all( wp( "isStringStartsWith():str = '%s', startsWith = '%s', result = " , str , startsWith ) )
	a( "isStringStartsWith():str = '%s', startsWith = '%s', result = " , str , startsWith )

	for( unsigned char i = 0 ; startsWith[i] != 0 ; i++ )
    65be:	2f 5f       	subi	r18, 0xFF	; 255
    65c0:	82 2f       	mov	r24, r18
    65c2:	90 e0       	ldi	r25, 0x00	; 0
    65c4:	f8 01       	movw	r30, r16
    65c6:	e8 0f       	add	r30, r24
    65c8:	f9 1f       	adc	r31, r25
    65ca:	30 81       	ld	r19, Z
    65cc:	33 23       	and	r19, r19
    65ce:	71 f6       	brne	.-100    	; 0x656c <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x62>
		}
	}

	//all( p << "ReadHttpPathSubTask::isStringStartsWith():str='" << str << "', startsWith='" << startsWith << "', result = true" << endl; )
	//all( wpln( "true" ) )
	aln( "true" )
    65d0:	8c 81       	ldd	r24, Y+4	; 0x04
    65d2:	8b 30       	cpi	r24, 0x0B	; 11
    65d4:	08 f5       	brcc	.+66     	; 0x6618 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x10e>
    65d6:	ce 01       	movw	r24, r28
    65d8:	02 96       	adiw	r24, 0x02	; 2
    65da:	6b e8       	ldi	r22, 0x8B	; 139
    65dc:	72 e1       	ldi	r23, 0x12	; 18
    65de:	47 ed       	ldi	r20, 0xD7	; 215
    65e0:	51 e1       	ldi	r21, 0x11	; 17
    65e2:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    65e6:	0f 92       	push	r0
    65e8:	0f 92       	push	r0
    65ea:	8a e2       	ldi	r24, 0x2A	; 42
    65ec:	92 e1       	ldi	r25, 0x12	; 18
    65ee:	ed b7       	in	r30, 0x3d	; 61
    65f0:	fe b7       	in	r31, 0x3e	; 62
    65f2:	92 83       	std	Z+2, r25	; 0x02
    65f4:	81 83       	std	Z+1, r24	; 0x01
    65f6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    65fa:	8e e8       	ldi	r24, 0x8E	; 142
    65fc:	92 e1       	ldi	r25, 0x12	; 18
    65fe:	ad b7       	in	r26, 0x3d	; 61
    6600:	be b7       	in	r27, 0x3e	; 62
    6602:	12 96       	adiw	r26, 0x02	; 2
    6604:	9c 93       	st	X, r25
    6606:	8e 93       	st	-X, r24
    6608:	11 97       	sbiw	r26, 0x01	; 1
    660a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    660e:	0f 90       	pop	r0
    6610:	0f 90       	pop	r0
    6612:	02 c0       	rjmp	.+4      	; 0x6618 <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x10e>
		{
			//all( p << "ReadHttpPathSubTask::isStringStartsWith():str='" << str << "', startsWith='" << startsWith << "', result = false" << endl; )
			//all( wpln( "false" ) )
			aln( "false" )

			return false;
    6614:	80 e0       	ldi	r24, 0x00	; 0
    6616:	01 c0       	rjmp	.+2      	; 0x661a <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_+0x110>

	//all( p << "ReadHttpPathSubTask::isStringStartsWith():str='" << str << "', startsWith='" << startsWith << "', result = true" << endl; )
	//all( wpln( "true" ) )
	aln( "true" )

	return true;
    6618:	81 e0       	ldi	r24, 0x01	; 1
}
    661a:	df 91       	pop	r29
    661c:	cf 91       	pop	r28
    661e:	1f 91       	pop	r17
    6620:	0f 91       	pop	r16
    6622:	ff 90       	pop	r15
    6624:	ef 90       	pop	r14
    6626:	08 95       	ret

00006628 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_>:

// =================================================

bool ReadHttpPathSubTask::compareStrings( char* str1 , char* str2 )
{
    6628:	ef 92       	push	r14
    662a:	ff 92       	push	r15
    662c:	0f 93       	push	r16
    662e:	1f 93       	push	r17
    6630:	cf 93       	push	r28
    6632:	df 93       	push	r29
    6634:	ec 01       	movw	r28, r24
    6636:	8b 01       	movw	r16, r22
    6638:	7a 01       	movw	r14, r20
	static const PROGMEM prog_char functionName[] = "compareStrings";
	//all( wp( "isStringStartsWith():str1 = '%s', str2 = '%s', result = " , str1 , str2 ) )
	a( "isStringStartsWith():str1 = '%s', str2 = '%s', result = " , str1 , str2 )
    663a:	8c 81       	ldd	r24, Y+4	; 0x04
    663c:	8b 30       	cpi	r24, 0x0B	; 11
    663e:	18 f5       	brcc	.+70     	; 0x6686 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x5e>
    6640:	ce 01       	movw	r24, r28
    6642:	02 96       	adiw	r24, 0x02	; 2
    6644:	6b e8       	ldi	r22, 0x8B	; 139
    6646:	72 e1       	ldi	r23, 0x12	; 18
    6648:	4f e2       	ldi	r20, 0x2F	; 47
    664a:	52 e1       	ldi	r21, 0x12	; 18
    664c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6650:	00 d0       	rcall	.+0      	; 0x6652 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x2a>
    6652:	00 d0       	rcall	.+0      	; 0x6654 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x2c>
    6654:	ed b7       	in	r30, 0x3d	; 61
    6656:	fe b7       	in	r31, 0x3e	; 62
    6658:	31 96       	adiw	r30, 0x01	; 1
    665a:	8e e3       	ldi	r24, 0x3E	; 62
    665c:	92 e1       	ldi	r25, 0x12	; 18
    665e:	ad b7       	in	r26, 0x3d	; 61
    6660:	be b7       	in	r27, 0x3e	; 62
    6662:	12 96       	adiw	r26, 0x02	; 2
    6664:	9c 93       	st	X, r25
    6666:	8e 93       	st	-X, r24
    6668:	11 97       	sbiw	r26, 0x01	; 1
    666a:	13 83       	std	Z+3, r17	; 0x03
    666c:	02 83       	std	Z+2, r16	; 0x02
    666e:	f5 82       	std	Z+5, r15	; 0x05
    6670:	e4 82       	std	Z+4, r14	; 0x04
    6672:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6676:	ed b7       	in	r30, 0x3d	; 61
    6678:	fe b7       	in	r31, 0x3e	; 62
    667a:	36 96       	adiw	r30, 0x06	; 6
    667c:	0f b6       	in	r0, 0x3f	; 63
    667e:	f8 94       	cli
    6680:	fe bf       	out	0x3e, r31	; 62
    6682:	0f be       	out	0x3f, r0	; 63
    6684:	ed bf       	out	0x3d, r30	; 61

	unsigned char i = 0 ;
    6686:	20 e0       	ldi	r18, 0x00	; 0

	while(  true )
	{
		if( str1[i] != str2[i] )
    6688:	82 2f       	mov	r24, r18
    668a:	90 e0       	ldi	r25, 0x00	; 0
    668c:	f8 01       	movw	r30, r16
    668e:	e8 0f       	add	r30, r24
    6690:	f9 1f       	adc	r31, r25
    6692:	30 81       	ld	r19, Z
    6694:	8e 0d       	add	r24, r14
    6696:	9f 1d       	adc	r25, r15
    6698:	dc 01       	movw	r26, r24
    669a:	8c 91       	ld	r24, X
    669c:	38 17       	cp	r19, r24
    669e:	19 f1       	breq	.+70     	; 0x66e6 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0xbe>
		{
			//all( p << "ReadHttpPathSubTask::compareStrings():str1='" << str1 << "', str2='" << str2 << "', result = false" << endl; )
			//all( wpln( "false" ) )
			aln( "false" )
    66a0:	8c 81       	ldd	r24, Y+4	; 0x04
    66a2:	8b 30       	cpi	r24, 0x0B	; 11
    66a4:	08 f0       	brcs	.+2      	; 0x66a8 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x80>
    66a6:	45 c0       	rjmp	.+138    	; 0x6732 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x10a>
    66a8:	ce 01       	movw	r24, r28
    66aa:	02 96       	adiw	r24, 0x02	; 2
    66ac:	6b e8       	ldi	r22, 0x8B	; 139
    66ae:	72 e1       	ldi	r23, 0x12	; 18
    66b0:	4f e2       	ldi	r20, 0x2F	; 47
    66b2:	52 e1       	ldi	r21, 0x12	; 18
    66b4:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    66b8:	0f 92       	push	r0
    66ba:	0f 92       	push	r0
    66bc:	87 e7       	ldi	r24, 0x77	; 119
    66be:	92 e1       	ldi	r25, 0x12	; 18
    66c0:	ed b7       	in	r30, 0x3d	; 61
    66c2:	fe b7       	in	r31, 0x3e	; 62
    66c4:	92 83       	std	Z+2, r25	; 0x02
    66c6:	81 83       	std	Z+1, r24	; 0x01
    66c8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    66cc:	8e e8       	ldi	r24, 0x8E	; 142
    66ce:	92 e1       	ldi	r25, 0x12	; 18
    66d0:	ad b7       	in	r26, 0x3d	; 61
    66d2:	be b7       	in	r27, 0x3e	; 62
    66d4:	12 96       	adiw	r26, 0x02	; 2
    66d6:	9c 93       	st	X, r25
    66d8:	8e 93       	st	-X, r24
    66da:	11 97       	sbiw	r26, 0x01	; 1
    66dc:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    66e0:	0f 90       	pop	r0
    66e2:	0f 90       	pop	r0
    66e4:	26 c0       	rjmp	.+76     	; 0x6732 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x10a>

			return false;
		}

		if( str1[i] == 0 ) break;
    66e6:	33 23       	and	r19, r19
    66e8:	11 f0       	breq	.+4      	; 0x66ee <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0xc6>

		i++;
    66ea:	2f 5f       	subi	r18, 0xFF	; 255
	//all( wp( "isStringStartsWith():str1 = '%s', str2 = '%s', result = " , str1 , str2 ) )
	a( "isStringStartsWith():str1 = '%s', str2 = '%s', result = " , str1 , str2 )

	unsigned char i = 0 ;

	while(  true )
    66ec:	cd cf       	rjmp	.-102    	; 0x6688 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x60>
		i++;
	}

	//all( p << "ReadHttpPathSubTask::compareStrings():str1='" << str1 << "', str2='" << str2 << "', result = true" << endl; )
	//all( wpln( "true" ) )
	aln( "true" )
    66ee:	8c 81       	ldd	r24, Y+4	; 0x04
    66f0:	8b 30       	cpi	r24, 0x0B	; 11
    66f2:	08 f5       	brcc	.+66     	; 0x6736 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x10e>
    66f4:	ce 01       	movw	r24, r28
    66f6:	02 96       	adiw	r24, 0x02	; 2
    66f8:	6b e8       	ldi	r22, 0x8B	; 139
    66fa:	72 e1       	ldi	r23, 0x12	; 18
    66fc:	4f e2       	ldi	r20, 0x2F	; 47
    66fe:	52 e1       	ldi	r21, 0x12	; 18
    6700:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6704:	0f 92       	push	r0
    6706:	0f 92       	push	r0
    6708:	8d e7       	ldi	r24, 0x7D	; 125
    670a:	92 e1       	ldi	r25, 0x12	; 18
    670c:	ed b7       	in	r30, 0x3d	; 61
    670e:	fe b7       	in	r31, 0x3e	; 62
    6710:	92 83       	std	Z+2, r25	; 0x02
    6712:	81 83       	std	Z+1, r24	; 0x01
    6714:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6718:	8e e8       	ldi	r24, 0x8E	; 142
    671a:	92 e1       	ldi	r25, 0x12	; 18
    671c:	ad b7       	in	r26, 0x3d	; 61
    671e:	be b7       	in	r27, 0x3e	; 62
    6720:	12 96       	adiw	r26, 0x02	; 2
    6722:	9c 93       	st	X, r25
    6724:	8e 93       	st	-X, r24
    6726:	11 97       	sbiw	r26, 0x01	; 1
    6728:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    672c:	0f 90       	pop	r0
    672e:	0f 90       	pop	r0
    6730:	02 c0       	rjmp	.+4      	; 0x6736 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x10e>
		{
			//all( p << "ReadHttpPathSubTask::compareStrings():str1='" << str1 << "', str2='" << str2 << "', result = false" << endl; )
			//all( wpln( "false" ) )
			aln( "false" )

			return false;
    6732:	80 e0       	ldi	r24, 0x00	; 0
    6734:	01 c0       	rjmp	.+2      	; 0x6738 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_+0x110>

	//all( p << "ReadHttpPathSubTask::compareStrings():str1='" << str1 << "', str2='" << str2 << "', result = true" << endl; )
	//all( wpln( "true" ) )
	aln( "true" )

	return true;
    6736:	81 e0       	ldi	r24, 0x01	; 1
}
    6738:	df 91       	pop	r29
    673a:	cf 91       	pop	r28
    673c:	1f 91       	pop	r17
    673e:	0f 91       	pop	r16
    6740:	ff 90       	pop	r15
    6742:	ef 90       	pop	r14
    6744:	08 95       	ret

00006746 <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh>:

// =================================================

bool ReadHttpPathSubTask::isInSelectedServicesArray( unsigned char selectedServiceIndex )
{
    6746:	cf 93       	push	r28
    6748:	df 93       	push	r29
    674a:	ec 01       	movw	r28, r24
	for( unsigned char i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    674c:	4f 85       	ldd	r20, Y+15	; 0x0f
    674e:	50 e0       	ldi	r21, 0x00	; 0
    6750:	42 50       	subi	r20, 0x02	; 2
    6752:	50 40       	sbci	r21, 0x00	; 0
	{
		if( arrayForSelectdServices[ i ].restService == serviceDescrptions[ selectedServiceIndex ]->restService ) return true;
    6754:	70 e0       	ldi	r23, 0x00	; 0
    6756:	66 0f       	add	r22, r22
    6758:	77 1f       	adc	r23, r23

// =================================================

bool ReadHttpPathSubTask::isInSelectedServicesArray( unsigned char selectedServiceIndex )
{
	for( unsigned char i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    675a:	20 e0       	ldi	r18, 0x00	; 0
    675c:	18 c0       	rjmp	.+48     	; 0x678e <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh+0x48>
	{
		if( arrayForSelectdServices[ i ].restService == serviceDescrptions[ selectedServiceIndex ]->restService ) return true;
    675e:	88 0f       	add	r24, r24
    6760:	99 1f       	adc	r25, r25
    6762:	88 0f       	add	r24, r24
    6764:	99 1f       	adc	r25, r25
    6766:	a8 89       	ldd	r26, Y+16	; 0x10
    6768:	b9 89       	ldd	r27, Y+17	; 0x11
    676a:	a8 0f       	add	r26, r24
    676c:	b9 1f       	adc	r27, r25
    676e:	ed 85       	ldd	r30, Y+13	; 0x0d
    6770:	fe 85       	ldd	r31, Y+14	; 0x0e
    6772:	e6 0f       	add	r30, r22
    6774:	f7 1f       	adc	r31, r23
    6776:	01 90       	ld	r0, Z+
    6778:	f0 81       	ld	r31, Z
    677a:	e0 2d       	mov	r30, r0
    677c:	0d 90       	ld	r0, X+
    677e:	bc 91       	ld	r27, X
    6780:	a0 2d       	mov	r26, r0
    6782:	80 81       	ld	r24, Z
    6784:	91 81       	ldd	r25, Z+1	; 0x01
    6786:	a8 17       	cp	r26, r24
    6788:	b9 07       	cpc	r27, r25
    678a:	41 f0       	breq	.+16     	; 0x679c <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh+0x56>

// =================================================

bool ReadHttpPathSubTask::isInSelectedServicesArray( unsigned char selectedServiceIndex )
{
	for( unsigned char i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
    678c:	2f 5f       	subi	r18, 0xFF	; 255
    678e:	82 2f       	mov	r24, r18
    6790:	90 e0       	ldi	r25, 0x00	; 0
    6792:	84 17       	cp	r24, r20
    6794:	95 07       	cpc	r25, r21
    6796:	1c f3       	brlt	.-58     	; 0x675e <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh+0x18>
	{
		if( arrayForSelectdServices[ i ].restService == serviceDescrptions[ selectedServiceIndex ]->restService ) return true;
	}

	return false;
    6798:	80 e0       	ldi	r24, 0x00	; 0
    679a:	01 c0       	rjmp	.+2      	; 0x679e <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh+0x58>

bool ReadHttpPathSubTask::isInSelectedServicesArray( unsigned char selectedServiceIndex )
{
	for( unsigned char i = 0 ; i < serviceDescrptionsCount - 2 ; i++ )
	{
		if( arrayForSelectdServices[ i ].restService == serviceDescrptions[ selectedServiceIndex ]->restService ) return true;
    679c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return false;
}
    679e:	df 91       	pop	r29
    67a0:	cf 91       	pop	r28
    67a2:	08 95       	ret

000067a4 <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh>:

// =================================================

void ReadHttpPathSubTask::addToSelectedServicesArray( unsigned char selectedServiceIndex )
{
    67a4:	0f 93       	push	r16
    67a6:	1f 93       	push	r17
    67a8:	cf 93       	push	r28
    67aa:	df 93       	push	r29
    67ac:	ec 01       	movw	r28, r24
	if( selectedServiceIndex == serviceDescrptionsCount - 1 )
    67ae:	06 2f       	mov	r16, r22
    67b0:	10 e0       	ldi	r17, 0x00	; 0
    67b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	9c 01       	movw	r18, r24
    67b8:	21 50       	subi	r18, 0x01	; 1
    67ba:	30 40       	sbci	r19, 0x00	; 0
    67bc:	02 17       	cp	r16, r18
    67be:	13 07       	cpc	r17, r19
    67c0:	11 f4       	brne	.+4      	; 0x67c6 <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh+0x22>
	{
		responseType = 2;
    67c2:	82 e0       	ldi	r24, 0x02	; 2
    67c4:	05 c0       	rjmp	.+10     	; 0x67d0 <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh+0x2c>
	}
	else
	if( selectedServiceIndex == serviceDescrptionsCount - 2 )
    67c6:	02 97       	sbiw	r24, 0x02	; 2
    67c8:	08 17       	cp	r16, r24
    67ca:	19 07       	cpc	r17, r25
    67cc:	19 f4       	brne	.+6      	; 0x67d4 <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh+0x30>
	{
		responseType = 1;
    67ce:	81 e0       	ldi	r24, 0x01	; 1
    67d0:	89 a7       	std	Y+41, r24	; 0x29
    67d2:	34 c0       	rjmp	.+104    	; 0x683c <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh+0x98>
	}
	else
	{
		if( !isInSelectedServicesArray( selectedServiceIndex ) )
    67d4:	ce 01       	movw	r24, r28
    67d6:	0e 94 a3 33 	call	0x6746	; 0x6746 <_ZN19ReadHttpPathSubTask25isInSelectedServicesArrayEh>
    67da:	88 23       	and	r24, r24
    67dc:	79 f5       	brne	.+94     	; 0x683c <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh+0x98>
		{
			arrayForSelectdServices[ selectedServicesArrayIndex ].restServiceRenderers = serviceDescrptions[ selectedServiceIndex ]->restServiceRenderers;
    67de:	48 89       	ldd	r20, Y+16	; 0x10
    67e0:	59 89       	ldd	r21, Y+17	; 0x11
    67e2:	6a a5       	ldd	r22, Y+42	; 0x2a
    67e4:	c8 01       	movw	r24, r16
    67e6:	88 0f       	add	r24, r24
    67e8:	99 1f       	adc	r25, r25
    67ea:	2d 85       	ldd	r18, Y+13	; 0x0d
    67ec:	3e 85       	ldd	r19, Y+14	; 0x0e
    67ee:	28 0f       	add	r18, r24
    67f0:	39 1f       	adc	r19, r25
    67f2:	f9 01       	movw	r30, r18
    67f4:	a0 81       	ld	r26, Z
    67f6:	b1 81       	ldd	r27, Z+1	; 0x01
    67f8:	12 96       	adiw	r26, 0x02	; 2
    67fa:	8d 91       	ld	r24, X+
    67fc:	9c 91       	ld	r25, X
    67fe:	13 97       	sbiw	r26, 0x03	; 3
    6800:	e6 2f       	mov	r30, r22
    6802:	f0 e0       	ldi	r31, 0x00	; 0
    6804:	ee 0f       	add	r30, r30
    6806:	ff 1f       	adc	r31, r31
    6808:	ee 0f       	add	r30, r30
    680a:	ff 1f       	adc	r31, r31
    680c:	e4 0f       	add	r30, r20
    680e:	f5 1f       	adc	r31, r21
    6810:	93 83       	std	Z+3, r25	; 0x03
    6812:	82 83       	std	Z+2, r24	; 0x02
			arrayForSelectdServices[ selectedServicesArrayIndex ].restService = serviceDescrptions[ selectedServiceIndex ]->restService;
    6814:	6a a5       	ldd	r22, Y+42	; 0x2a
    6816:	f9 01       	movw	r30, r18
    6818:	a0 81       	ld	r26, Z
    681a:	b1 81       	ldd	r27, Z+1	; 0x01
    681c:	8d 91       	ld	r24, X+
    681e:	9c 91       	ld	r25, X
    6820:	11 97       	sbiw	r26, 0x01	; 1
    6822:	e6 2f       	mov	r30, r22
    6824:	f0 e0       	ldi	r31, 0x00	; 0
    6826:	ee 0f       	add	r30, r30
    6828:	ff 1f       	adc	r31, r31
    682a:	ee 0f       	add	r30, r30
    682c:	ff 1f       	adc	r31, r31
    682e:	e4 0f       	add	r30, r20
    6830:	f5 1f       	adc	r31, r21
    6832:	91 83       	std	Z+1, r25	; 0x01
    6834:	80 83       	st	Z, r24

			selectedServicesArrayIndex++;
    6836:	8a a5       	ldd	r24, Y+42	; 0x2a
    6838:	8f 5f       	subi	r24, 0xFF	; 255
    683a:	8a a7       	std	Y+42, r24	; 0x2a
		}
	}
}
    683c:	df 91       	pop	r29
    683e:	cf 91       	pop	r28
    6840:	1f 91       	pop	r17
    6842:	0f 91       	pop	r16
    6844:	08 95       	ret

00006846 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb>:
}

// =================================================

void ReadHttpPathSubTask::addMatchedServicesToSelectedServicesArray( bool matchByStartsWith )
{
    6846:	df 92       	push	r13
    6848:	ef 92       	push	r14
    684a:	ff 92       	push	r15
    684c:	0f 93       	push	r16
    684e:	1f 93       	push	r17
    6850:	cf 93       	push	r28
    6852:	df 93       	push	r29
    6854:	ec 01       	movw	r28, r24
    6856:	d6 2e       	mov	r13, r22
	for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    6858:	00 e0       	ldi	r16, 0x00	; 0
    685a:	10 e0       	ldi	r17, 0x00	; 0
    685c:	ee 24       	eor	r14, r14
    685e:	ff 24       	eor	r15, r15
    6860:	22 c0       	rjmp	.+68     	; 0x68a6 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb+0x60>
    6862:	8d 85       	ldd	r24, Y+13	; 0x0d
    6864:	9e 85       	ldd	r25, Y+14	; 0x0e
    6866:	48 a1       	ldd	r20, Y+32	; 0x20
    6868:	59 a1       	ldd	r21, Y+33	; 0x21
	{
		if( ( !matchByStartsWith && compareStrings( (char*)serviceDescrptions[i]->restService->name , streamReadUntilByte.buffer ) ) || ( matchByStartsWith && isStringStartsWith( (char*)serviceDescrptions[i]->restService->name , streamReadUntilByte.buffer ) ) )
    686a:	80 0f       	add	r24, r16
    686c:	91 1f       	adc	r25, r17
    686e:	dc 01       	movw	r26, r24
    6870:	ed 91       	ld	r30, X+
    6872:	fc 91       	ld	r31, X
    6874:	11 97       	sbiw	r26, 0x01	; 1
    6876:	01 90       	ld	r0, Z+
    6878:	f0 81       	ld	r31, Z
    687a:	e0 2d       	mov	r30, r0
    687c:	63 81       	ldd	r22, Z+3	; 0x03
    687e:	74 81       	ldd	r23, Z+4	; 0x04
    6880:	ce 01       	movw	r24, r28
    6882:	dd 20       	and	r13, r13
    6884:	19 f4       	brne	.+6      	; 0x688c <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb+0x46>
    6886:	0e 94 14 33 	call	0x6628	; 0x6628 <_ZN19ReadHttpPathSubTask14compareStringsEPcS0_>
    688a:	02 c0       	rjmp	.+4      	; 0x6890 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb+0x4a>
    688c:	0e 94 85 32 	call	0x650a	; 0x650a <_ZN19ReadHttpPathSubTask18isStringStartsWithEPcS0_>
    6890:	88 23       	and	r24, r24
    6892:	21 f0       	breq	.+8      	; 0x689c <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb+0x56>
		{
			addToSelectedServicesArray( i );
    6894:	ce 01       	movw	r24, r28
    6896:	6e 2d       	mov	r22, r14
    6898:	0e 94 d2 33 	call	0x67a4	; 0x67a4 <_ZN19ReadHttpPathSubTask26addToSelectedServicesArrayEh>

// =================================================

void ReadHttpPathSubTask::addMatchedServicesToSelectedServicesArray( bool matchByStartsWith )
{
	for( int i = 0 ; i < serviceDescrptionsCount ; i++ )
    689c:	08 94       	sec
    689e:	e1 1c       	adc	r14, r1
    68a0:	f1 1c       	adc	r15, r1
    68a2:	0e 5f       	subi	r16, 0xFE	; 254
    68a4:	1f 4f       	sbci	r17, 0xFF	; 255
    68a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	e8 16       	cp	r14, r24
    68ac:	f9 06       	cpc	r15, r25
    68ae:	cc f2       	brlt	.-78     	; 0x6862 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb+0x1c>
		else
		{
			//if( i < serviceDescrptionsCount - 2 ) thereWasAtLeastOneMatching = true; // todo potem to odblokowac i zakodowac poprawnie
		}
	}
}
    68b0:	df 91       	pop	r29
    68b2:	cf 91       	pop	r28
    68b4:	1f 91       	pop	r17
    68b6:	0f 91       	pop	r16
    68b8:	ff 90       	pop	r15
    68ba:	ef 90       	pop	r14
    68bc:	df 90       	pop	r13
    68be:	08 95       	ret

000068c0 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream>:
}

// =================================================

RestServerSubTask* ReadHttpPathSubTask::executeSubTask( Stream* stream )
{
    68c0:	cf 92       	push	r12
    68c2:	df 92       	push	r13
    68c4:	ef 92       	push	r14
    68c6:	0f 93       	push	r16
    68c8:	1f 93       	push	r17
    68ca:	cf 93       	push	r28
    68cc:	df 93       	push	r29
    68ce:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "executeSubTask";
	//static const char* prefix = "ReadHttpPathSubTask:executeSubTask():";

	streamReadUntilByte.setStream( stream );
    68d0:	8c 01       	movw	r16, r24
    68d2:	0c 5e       	subi	r16, 0xEC	; 236
    68d4:	1f 4f       	sbci	r17, 0xFF	; 255
    68d6:	c8 01       	movw	r24, r16
    68d8:	0e 94 46 39 	call	0x728c	; 0x728c <_ZN19StreamReadUntilByte9setStreamEP6Stream>

	int streamReadUntilResult;

	while( ( streamReadUntilResult = streamReadUntilByte.read() ) == 0 ){}
    68dc:	c8 01       	movw	r24, r16
    68de:	0e 94 00 39 	call	0x7200	; 0x7200 <_ZN19StreamReadUntilByte4readEv>
    68e2:	6c 01       	movw	r12, r24
    68e4:	00 97       	sbiw	r24, 0x00	; 0
    68e6:	d1 f3       	breq	.-12     	; 0x68dc <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1c>
    68e8:	8c 81       	ldd	r24, Y+4	; 0x04

	if( streamReadUntilResult == -1 )
    68ea:	9f ef       	ldi	r25, 0xFF	; 255
    68ec:	c9 16       	cp	r12, r25
    68ee:	9f ef       	ldi	r25, 0xFF	; 255
    68f0:	d9 06       	cpc	r13, r25
    68f2:	01 f5       	brne	.+64     	; 0x6934 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x74>
	{
		//info( p << prefix << "streamReadUntilResult = -1" << endl; )
		//info( wpln( "streamReadUntilResult = -1" ) )
		iln( "streamReadUntilResult = -1" )
    68f4:	85 31       	cpi	r24, 0x15	; 21
    68f6:	08 f0       	brcs	.+2      	; 0x68fa <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x3a>
    68f8:	e1 c0       	rjmp	.+450    	; 0x6abc <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1fc>
    68fa:	ce 01       	movw	r24, r28
    68fc:	02 96       	adiw	r24, 0x02	; 2
    68fe:	68 e8       	ldi	r22, 0x88	; 136
    6900:	72 e1       	ldi	r23, 0x12	; 18
    6902:	41 e1       	ldi	r20, 0x11	; 17
    6904:	51 e1       	ldi	r21, 0x11	; 17
    6906:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    690a:	0f 92       	push	r0
    690c:	0f 92       	push	r0
    690e:	80 e2       	ldi	r24, 0x20	; 32
    6910:	91 e1       	ldi	r25, 0x11	; 17
    6912:	ed b7       	in	r30, 0x3d	; 61
    6914:	fe b7       	in	r31, 0x3e	; 62
    6916:	92 83       	std	Z+2, r25	; 0x02
    6918:	81 83       	std	Z+1, r24	; 0x01
    691a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    691e:	8e e8       	ldi	r24, 0x8E	; 142
    6920:	92 e1       	ldi	r25, 0x12	; 18
    6922:	ed b7       	in	r30, 0x3d	; 61
    6924:	fe b7       	in	r31, 0x3e	; 62
    6926:	92 83       	std	Z+2, r25	; 0x02
    6928:	81 83       	std	Z+1, r24	; 0x01
    692a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    692e:	0f 90       	pop	r0
    6930:	0f 90       	pop	r0
    6932:	c4 c0       	rjmp	.+392    	; 0x6abc <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1fc>
	}
	else
	{
		//info( p << prefix << "streamReadUntilResult = '" << (char)streamReadUntilResult << "'" << endl; )
		//info( wpln( "streamReadUntilResult = '%s'" , streamReadUntilResult ) )
		iln( "streamReadUntilResult = '%c'" , streamReadUntilResult )
    6934:	85 31       	cpi	r24, 0x15	; 21
    6936:	00 f5       	brcc	.+64     	; 0x6978 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0xb8>
    6938:	ce 01       	movw	r24, r28
    693a:	02 96       	adiw	r24, 0x02	; 2
    693c:	68 e8       	ldi	r22, 0x88	; 136
    693e:	72 e1       	ldi	r23, 0x12	; 18
    6940:	41 e1       	ldi	r20, 0x11	; 17
    6942:	51 e1       	ldi	r21, 0x11	; 17
    6944:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6948:	00 d0       	rcall	.+0      	; 0x694a <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x8a>
    694a:	0f 92       	push	r0
    694c:	8b e3       	ldi	r24, 0x3B	; 59
    694e:	91 e1       	ldi	r25, 0x11	; 17
    6950:	ed b7       	in	r30, 0x3d	; 61
    6952:	fe b7       	in	r31, 0x3e	; 62
    6954:	92 83       	std	Z+2, r25	; 0x02
    6956:	81 83       	std	Z+1, r24	; 0x01
    6958:	d4 82       	std	Z+4, r13	; 0x04
    695a:	c3 82       	std	Z+3, r12	; 0x03
    695c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6960:	0f 90       	pop	r0
    6962:	0f 90       	pop	r0
    6964:	8e e8       	ldi	r24, 0x8E	; 142
    6966:	92 e1       	ldi	r25, 0x12	; 18
    6968:	ed b7       	in	r30, 0x3d	; 61
    696a:	fe b7       	in	r31, 0x3e	; 62
    696c:	92 83       	std	Z+2, r25	; 0x02
    696e:	81 83       	std	Z+1, r24	; 0x01
    6970:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6974:	0f 90       	pop	r0
    6976:	0f 90       	pop	r0

		if( streamReadUntilResult == ' ' || streamReadUntilResult == '?' )
    6978:	f0 e2       	ldi	r31, 0x20	; 32
    697a:	cf 16       	cp	r12, r31
    697c:	d1 04       	cpc	r13, r1
    697e:	29 f0       	breq	.+10     	; 0x698a <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0xca>
    6980:	8f e3       	ldi	r24, 0x3F	; 63
    6982:	c8 16       	cp	r12, r24
    6984:	d1 04       	cpc	r13, r1
    6986:	09 f0       	breq	.+2      	; 0x698a <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0xca>
    6988:	5c c0       	rjmp	.+184    	; 0x6a42 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x182>
		{
			addMatchedServicesToSelectedServicesArray( false );
    698a:	ce 01       	movw	r24, r28
    698c:	60 e0       	ldi	r22, 0x00	; 0
    698e:	0e 94 23 34 	call	0x6846	; 0x6846 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb>

			if( selectedServicesArrayIndex == 0 && !thereWasAtLeastOneMatching )
    6992:	8a a5       	ldd	r24, Y+42	; 0x2a
    6994:	88 23       	and	r24, r24
    6996:	29 f5       	brne	.+74     	; 0x69e2 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x122>
    6998:	8b a5       	ldd	r24, Y+43	; 0x2b
    699a:	88 23       	and	r24, r24
    699c:	11 f5       	brne	.+68     	; 0x69e2 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x122>
			{
				//info( p << prefix << "adding all services because there were no selected services" << endl; )
				//info( wpln( "adding all services because there were no selected services" ) )
				iln( "adding all services because there were no selected services" )
    699e:	8c 81       	ldd	r24, Y+4	; 0x04
    69a0:	85 31       	cpi	r24, 0x15	; 21
    69a2:	e0 f4       	brcc	.+56     	; 0x69dc <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x11c>
    69a4:	ce 01       	movw	r24, r28
    69a6:	02 96       	adiw	r24, 0x02	; 2
    69a8:	68 e8       	ldi	r22, 0x88	; 136
    69aa:	72 e1       	ldi	r23, 0x12	; 18
    69ac:	41 e1       	ldi	r20, 0x11	; 17
    69ae:	51 e1       	ldi	r21, 0x11	; 17
    69b0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    69b4:	0f 92       	push	r0
    69b6:	0f 92       	push	r0
    69b8:	88 e5       	ldi	r24, 0x58	; 88
    69ba:	91 e1       	ldi	r25, 0x11	; 17
    69bc:	ed b7       	in	r30, 0x3d	; 61
    69be:	fe b7       	in	r31, 0x3e	; 62
    69c0:	92 83       	std	Z+2, r25	; 0x02
    69c2:	81 83       	std	Z+1, r24	; 0x01
    69c4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    69c8:	8e e8       	ldi	r24, 0x8E	; 142
    69ca:	92 e1       	ldi	r25, 0x12	; 18
    69cc:	ed b7       	in	r30, 0x3d	; 61
    69ce:	fe b7       	in	r31, 0x3e	; 62
    69d0:	92 83       	std	Z+2, r25	; 0x02
    69d2:	81 83       	std	Z+1, r24	; 0x01
    69d4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    69d8:	0f 90       	pop	r0
    69da:	0f 90       	pop	r0

				allAllServicesToSelectedServicesArray();
    69dc:	ce 01       	movw	r24, r28
    69de:	0e 94 45 32 	call	0x648a	; 0x648a <_ZN19ReadHttpPathSubTask37allAllServicesToSelectedServicesArrayEv>
			}

			sendResponseSubTask->setWork( isGETHttpMethod , responseType == 1 , responseType == 2 , arrayForSelectdServices , selectedServicesArrayIndex );
    69e2:	39 a5       	ldd	r19, Y+41	; 0x29
    69e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    69e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    69e8:	41 e0       	ldi	r20, 0x01	; 1
    69ea:	31 30       	cpi	r19, 0x01	; 1
    69ec:	09 f0       	breq	.+2      	; 0x69f0 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x130>
    69ee:	40 e0       	ldi	r20, 0x00	; 0
    69f0:	21 e0       	ldi	r18, 0x01	; 1
    69f2:	32 30       	cpi	r19, 0x02	; 2
    69f4:	09 f0       	breq	.+2      	; 0x69f8 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x138>
    69f6:	20 e0       	ldi	r18, 0x00	; 0
    69f8:	08 89       	ldd	r16, Y+16	; 0x10
    69fa:	19 89       	ldd	r17, Y+17	; 0x11
    69fc:	6b 89       	ldd	r22, Y+19	; 0x13
    69fe:	ea a4       	ldd	r14, Y+42	; 0x2a
    6a00:	0e 94 fd 29 	call	0x53fa	; 0x53fa <_ZN19SendResponseSubTask7setWorkEbbbP18ServiceDescriptionh>
			//skipBytesUntilSequenceSubTask->setStopSequenceAndNextSubTask( "\r\n\r\n" , leaveLastByteOfHttpHeaderInStream , sendResponseSubTask );
			skipBytesUntilSequenceSubTask->setStopSequenceAndNextSubTask( (char*)endOfHttpHeader , leaveLastByteOfHttpHeaderInStream , sendResponseSubTask );
    6a04:	60 91 d5 0d 	lds	r22, 0x0DD5
    6a08:	70 91 d6 0d 	lds	r23, 0x0DD6
    6a0c:	2b 85       	ldd	r18, Y+11	; 0x0b
    6a0e:	3c 85       	ldd	r19, Y+12	; 0x0c
    6a10:	8f 81       	ldd	r24, Y+7	; 0x07
    6a12:	98 85       	ldd	r25, Y+8	; 0x08
    6a14:	4a 89       	ldd	r20, Y+18	; 0x12
    6a16:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_ZN29SkipBytesUntilSequenceSubTask29setStopSequenceAndNextSubTaskEPcbP17RestServerSubTask>
			//skipBytesUntilSequenceSubTask->setStopSequenceAndNextSubTask( "\r\n\r\n" , false , sendResponseSubTask ); // todo leaveLastByteOfHttpHeaderInStream !!

			if( streamReadUntilResult == ' ' )
    6a1a:	f0 e2       	ldi	r31, 0x20	; 32
    6a1c:	cf 16       	cp	r12, r31
    6a1e:	d1 04       	cpc	r13, r1
    6a20:	19 f4       	brne	.+6      	; 0x6a28 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x168>
			{
				return skipBytesUntilSequenceSubTask;
    6a22:	8f 81       	ldd	r24, Y+7	; 0x07
    6a24:	98 85       	ldd	r25, Y+8	; 0x08
    6a26:	4c c0       	rjmp	.+152    	; 0x6ac0 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x200>
			}
			else
			if( streamReadUntilResult == '?' )
    6a28:	8f e3       	ldi	r24, 0x3F	; 63
    6a2a:	c8 16       	cp	r12, r24
    6a2c:	d1 04       	cpc	r13, r1
    6a2e:	01 f5       	brne	.+64     	; 0x6a70 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1b0>
			{
				readHttpParameterNameSubTask->setWork( skipBytesUntilSequenceSubTask );
    6a30:	6f 81       	ldd	r22, Y+7	; 0x07
    6a32:	78 85       	ldd	r23, Y+8	; 0x08
    6a34:	89 85       	ldd	r24, Y+9	; 0x09
    6a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a38:	0e 94 3d 30 	call	0x607a	; 0x607a <_ZN28ReadHttpParameterNameSubTask7setWorkEP17RestServerSubTask>
				return readHttpParameterNameSubTask;
    6a3c:	89 85       	ldd	r24, Y+9	; 0x09
    6a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a40:	3f c0       	rjmp	.+126    	; 0x6ac0 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x200>
			}
		}
		else
		if( streamReadUntilResult == '/' )
    6a42:	9f e2       	ldi	r25, 0x2F	; 47
    6a44:	c9 16       	cp	r12, r25
    6a46:	d1 04       	cpc	r13, r1
    6a48:	19 f4       	brne	.+6      	; 0x6a50 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x190>
		{
			addMatchedServicesToSelectedServicesArray( false );
    6a4a:	ce 01       	movw	r24, r28
    6a4c:	60 e0       	ldi	r22, 0x00	; 0
    6a4e:	06 c0       	rjmp	.+12     	; 0x6a5c <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x19c>
			streamReadUntilByte.resetInternalState( (char*)stopBytes );
			return NULL;
		}
		else
		if( streamReadUntilResult == '*' )
    6a50:	ea e2       	ldi	r30, 0x2A	; 42
    6a52:	ce 16       	cp	r12, r30
    6a54:	d1 04       	cpc	r13, r1
    6a56:	61 f4       	brne	.+24     	; 0x6a70 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1b0>
		{
			addMatchedServicesToSelectedServicesArray( true );
    6a58:	ce 01       	movw	r24, r28
    6a5a:	61 e0       	ldi	r22, 0x01	; 1
    6a5c:	0e 94 23 34 	call	0x6846	; 0x6846 <_ZN19ReadHttpPathSubTask41addMatchedServicesToSelectedServicesArrayEb>
			streamReadUntilByte.resetInternalState( (char*)stopBytes );
    6a60:	60 91 d7 0d 	lds	r22, 0x0DD7
    6a64:	70 91 d8 0d 	lds	r23, 0x0DD8
    6a68:	c8 01       	movw	r24, r16
    6a6a:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN19StreamReadUntilByte18resetInternalStateEPc>
    6a6e:	26 c0       	rjmp	.+76     	; 0x6abc <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1fc>
		//}
	}

	//warning( p << prefix << "code should not never reach this place, streamReadUntilResult='" << (char)streamReadUntilResult << "'" << endl; )
	//warning( wpln( "code should not never reach this place, streamReadUntilResult='%s'" , streamReadUntilResult ) )
	wln( "code should not never reach this place, streamReadUntilResult='%s'" , streamReadUntilResult )
    6a70:	8c 81       	ldd	r24, Y+4	; 0x04
    6a72:	8f 31       	cpi	r24, 0x1F	; 31
    6a74:	00 f5       	brcc	.+64     	; 0x6ab6 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1f6>
    6a76:	ce 01       	movw	r24, r28
    6a78:	02 96       	adiw	r24, 0x02	; 2
    6a7a:	65 e8       	ldi	r22, 0x85	; 133
    6a7c:	72 e1       	ldi	r23, 0x12	; 18
    6a7e:	41 e1       	ldi	r20, 0x11	; 17
    6a80:	51 e1       	ldi	r21, 0x11	; 17
    6a82:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6a86:	00 d0       	rcall	.+0      	; 0x6a88 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x1c8>
    6a88:	0f 92       	push	r0
    6a8a:	84 e9       	ldi	r24, 0x94	; 148
    6a8c:	91 e1       	ldi	r25, 0x11	; 17
    6a8e:	ed b7       	in	r30, 0x3d	; 61
    6a90:	fe b7       	in	r31, 0x3e	; 62
    6a92:	92 83       	std	Z+2, r25	; 0x02
    6a94:	81 83       	std	Z+1, r24	; 0x01
    6a96:	d4 82       	std	Z+4, r13	; 0x04
    6a98:	c3 82       	std	Z+3, r12	; 0x03
    6a9a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6a9e:	0f 90       	pop	r0
    6aa0:	0f 90       	pop	r0
    6aa2:	8e e8       	ldi	r24, 0x8E	; 142
    6aa4:	92 e1       	ldi	r25, 0x12	; 18
    6aa6:	ed b7       	in	r30, 0x3d	; 61
    6aa8:	fe b7       	in	r31, 0x3e	; 62
    6aaa:	92 83       	std	Z+2, r25	; 0x02
    6aac:	81 83       	std	Z+1, r24	; 0x01
    6aae:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6ab2:	0f 90       	pop	r0
    6ab4:	0f 90       	pop	r0

	return errorSubTask;
    6ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    6ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    6aba:	02 c0       	rjmp	.+4      	; 0x6ac0 <_ZN19ReadHttpPathSubTask14executeSubTaskEP6Stream+0x200>
	{
		//info( p << prefix << "streamReadUntilResult = -1" << endl; )
		//info( wpln( "streamReadUntilResult = -1" ) )
		iln( "streamReadUntilResult = -1" )

		return NULL;
    6abc:	80 e0       	ldi	r24, 0x00	; 0
    6abe:	90 e0       	ldi	r25, 0x00	; 0
		}
	}

	return errorSubTask;
	*/
}
    6ac0:	df 91       	pop	r29
    6ac2:	cf 91       	pop	r28
    6ac4:	1f 91       	pop	r17
    6ac6:	0f 91       	pop	r16
    6ac8:	ef 90       	pop	r14
    6aca:	df 90       	pop	r13
    6acc:	cf 90       	pop	r12
    6ace:	08 95       	ret

00006ad0 <_ZN12DebugPrinterC1EPKc>:
const PROGMEM prog_char DebugPrinter::debugLevelPrefixForWARNING[] = "W:";
const PROGMEM prog_char DebugPrinter::debugLevelPrefixForERROR[] = "E:";

// =================================================

DebugPrinter::DebugPrinter( const prog_char* _className ) //: level( CURRENT_DEBUG_LEVEL )
    6ad0:	fc 01       	movw	r30, r24
{
	className = _className;
    6ad2:	71 83       	std	Z+1, r23	; 0x01
    6ad4:	60 83       	st	Z, r22
	level = CURRENT_DEBUG_LEVEL;
    6ad6:	84 e1       	ldi	r24, 0x14	; 20
    6ad8:	82 83       	std	Z+2, r24	; 0x02
}
    6ada:	08 95       	ret

00006adc <_ZN12DebugPrinterC1EPKch>:

// =================================================

DebugPrinter::DebugPrinter( const prog_char* _className , const byte _level ) //: level( _level )
    6adc:	fc 01       	movw	r30, r24
{
	className = _className;
    6ade:	71 83       	std	Z+1, r23	; 0x01
    6ae0:	60 83       	st	Z, r22
	level = _level;
    6ae2:	42 83       	std	Z+2, r20	; 0x02
}
    6ae4:	08 95       	ret

00006ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>:
}

// =================================================

void DebugPrinter::preMacro( const prog_char* debugLevelPrefix , const prog_char* functionName )
{
    6ae6:	0f 93       	push	r16
    6ae8:	1f 93       	push	r17
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	ec 01       	movw	r28, r24
    6af0:	8a 01       	movw	r16, r20
	printf_P( debugLevelPrefix );
    6af2:	0f 92       	push	r0
    6af4:	0f 92       	push	r0
    6af6:	ed b7       	in	r30, 0x3d	; 61
    6af8:	fe b7       	in	r31, 0x3e	; 62
    6afa:	72 83       	std	Z+2, r23	; 0x02
    6afc:	61 83       	std	Z+1, r22	; 0x01
    6afe:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>

	printf_P( className );
    6b02:	88 81       	ld	r24, Y
    6b04:	99 81       	ldd	r25, Y+1	; 0x01
    6b06:	ed b7       	in	r30, 0x3d	; 61
    6b08:	fe b7       	in	r31, 0x3e	; 62
    6b0a:	92 83       	std	Z+2, r25	; 0x02
    6b0c:	81 83       	std	Z+1, r24	; 0x01
    6b0e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>

	printf_P( classNameAndFunctionNameSpacer );
    6b12:	85 e9       	ldi	r24, 0x95	; 149
    6b14:	92 e1       	ldi	r25, 0x12	; 18
    6b16:	ed b7       	in	r30, 0x3d	; 61
    6b18:	fe b7       	in	r31, 0x3e	; 62
    6b1a:	92 83       	std	Z+2, r25	; 0x02
    6b1c:	81 83       	std	Z+1, r24	; 0x01
    6b1e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>

	printf_P( functionName );
    6b22:	ed b7       	in	r30, 0x3d	; 61
    6b24:	fe b7       	in	r31, 0x3e	; 62
    6b26:	12 83       	std	Z+2, r17	; 0x02
    6b28:	01 83       	std	Z+1, r16	; 0x01
    6b2a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>

	printf_P( functionNamePostfix );
    6b2e:	81 e9       	ldi	r24, 0x91	; 145
    6b30:	92 e1       	ldi	r25, 0x12	; 18
    6b32:	ed b7       	in	r30, 0x3d	; 61
    6b34:	fe b7       	in	r31, 0x3e	; 62
    6b36:	92 83       	std	Z+2, r25	; 0x02
    6b38:	81 83       	std	Z+1, r24	; 0x01
    6b3a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6b3e:	0f 90       	pop	r0
    6b40:	0f 90       	pop	r0
}
    6b42:	df 91       	pop	r29
    6b44:	cf 91       	pop	r28
    6b46:	1f 91       	pop	r17
    6b48:	0f 91       	pop	r16
    6b4a:	08 95       	ret

00006b4c <freeRamMemory>:
extern void *__brkval;

#include "MemoryFree.h"

int freeRamMemory()
{
    6b4c:	cf 93       	push	r28
    6b4e:	df 93       	push	r29
    6b50:	0f 92       	push	r0
    6b52:	0f 92       	push	r0
    6b54:	cd b7       	in	r28, 0x3d	; 61
    6b56:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if((int)__brkval == 0)
    6b58:	80 91 63 19 	lds	r24, 0x1963
    6b5c:	90 91 64 19 	lds	r25, 0x1964
    6b60:	9e 01       	movw	r18, r28
    6b62:	2f 5f       	subi	r18, 0xFF	; 255
    6b64:	3f 4f       	sbci	r19, 0xFF	; 255
    6b66:	00 97       	sbiw	r24, 0x00	; 0
    6b68:	19 f4       	brne	.+6      	; 0x6b70 <freeRamMemory+0x24>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
    6b6a:	2d 56       	subi	r18, 0x6D	; 109
    6b6c:	39 41       	sbci	r19, 0x19	; 25
    6b6e:	02 c0       	rjmp	.+4      	; 0x6b74 <freeRamMemory+0x28>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
    6b70:	28 1b       	sub	r18, r24
    6b72:	39 0b       	sbc	r19, r25
    6b74:	3a 83       	std	Y+2, r19	; 0x02
    6b76:	29 83       	std	Y+1, r18	; 0x01

  return free_memory;
}
    6b78:	89 81       	ldd	r24, Y+1	; 0x01
    6b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    6b7c:	0f 90       	pop	r0
    6b7e:	0f 90       	pop	r0
    6b80:	df 91       	pop	r29
    6b82:	cf 91       	pop	r28
    6b84:	08 95       	ret

00006b86 <_ZThn2_N18PinHighLowRunnable6getPinEv>:
    6b86:	02 97       	sbiw	r24, 0x02	; 2
    6b88:	0e 94 c7 35 	call	0x6b8e	; 0x6b8e <_ZN18PinHighLowRunnable6getPinEv>
    6b8c:	08 95       	ret

00006b8e <_ZN18PinHighLowRunnable6getPinEv>:
// =================================================

unsigned char PinHighLowRunnable::getPin()
{
	return pin;
}
    6b8e:	fc 01       	movw	r30, r24
    6b90:	87 81       	ldd	r24, Z+7	; 0x07
    6b92:	08 95       	ret

00006b94 <_ZN18PinHighLowRunnable3runEv>:
}

// =================================================

void PinHighLowRunnable::run()
{
    6b94:	cf 93       	push	r28
    6b96:	df 93       	push	r29
    6b98:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "sendReceiveDataRequest";

	//all( p << "PinHighLowRunnable:run(): changing state of pin " << pin << " from " << ( state ? "HIGH" : "LOW" ) << " to " << ( state ? "LOW" : "HIGH" ) << endl; )
	//all( wpln( "changing state of pin %u from %u to %u" , pin , state , !state ) )
	aln( "changing state of pin %u from %u to %u" , pin , state , !state )
    6b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    6b9c:	8b 30       	cpi	r24, 0x0B	; 11
    6b9e:	e8 f5       	brcc	.+122    	; 0x6c1a <_ZN18PinHighLowRunnable3runEv+0x86>
    6ba0:	ce 01       	movw	r24, r28
    6ba2:	04 96       	adiw	r24, 0x04	; 4
    6ba4:	6b e8       	ldi	r22, 0x8B	; 139
    6ba6:	72 e1       	ldi	r23, 0x12	; 18
    6ba8:	4b ea       	ldi	r20, 0xAB	; 171
    6baa:	52 e1       	ldi	r21, 0x12	; 18
    6bac:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6bb0:	28 85       	ldd	r18, Y+8	; 0x08
    6bb2:	39 85       	ldd	r19, Y+9	; 0x09
    6bb4:	8d b7       	in	r24, 0x3d	; 61
    6bb6:	9e b7       	in	r25, 0x3e	; 62
    6bb8:	08 97       	sbiw	r24, 0x08	; 8
    6bba:	0f b6       	in	r0, 0x3f	; 63
    6bbc:	f8 94       	cli
    6bbe:	9e bf       	out	0x3e, r25	; 62
    6bc0:	0f be       	out	0x3f, r0	; 63
    6bc2:	8d bf       	out	0x3d, r24	; 61
    6bc4:	ed b7       	in	r30, 0x3d	; 61
    6bc6:	fe b7       	in	r31, 0x3e	; 62
    6bc8:	31 96       	adiw	r30, 0x01	; 1
    6bca:	82 ec       	ldi	r24, 0xC2	; 194
    6bcc:	92 e1       	ldi	r25, 0x12	; 18
    6bce:	ad b7       	in	r26, 0x3d	; 61
    6bd0:	be b7       	in	r27, 0x3e	; 62
    6bd2:	12 96       	adiw	r26, 0x02	; 2
    6bd4:	9c 93       	st	X, r25
    6bd6:	8e 93       	st	-X, r24
    6bd8:	11 97       	sbiw	r26, 0x01	; 1
    6bda:	8f 81       	ldd	r24, Y+7	; 0x07
    6bdc:	82 83       	std	Z+2, r24	; 0x02
    6bde:	13 82       	std	Z+3, r1	; 0x03
    6be0:	35 83       	std	Z+5, r19	; 0x05
    6be2:	24 83       	std	Z+4, r18	; 0x04
    6be4:	81 e0       	ldi	r24, 0x01	; 1
    6be6:	90 e0       	ldi	r25, 0x00	; 0
    6be8:	21 15       	cp	r18, r1
    6bea:	31 05       	cpc	r19, r1
    6bec:	11 f0       	breq	.+4      	; 0x6bf2 <_ZN18PinHighLowRunnable3runEv+0x5e>
    6bee:	80 e0       	ldi	r24, 0x00	; 0
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	97 83       	std	Z+7, r25	; 0x07
    6bf4:	86 83       	std	Z+6, r24	; 0x06
    6bf6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6bfa:	ed b7       	in	r30, 0x3d	; 61
    6bfc:	fe b7       	in	r31, 0x3e	; 62
    6bfe:	36 96       	adiw	r30, 0x06	; 6
    6c00:	0f b6       	in	r0, 0x3f	; 63
    6c02:	f8 94       	cli
    6c04:	fe bf       	out	0x3e, r31	; 62
    6c06:	0f be       	out	0x3f, r0	; 63
    6c08:	ed bf       	out	0x3d, r30	; 61
    6c0a:	8e e8       	ldi	r24, 0x8E	; 142
    6c0c:	92 e1       	ldi	r25, 0x12	; 18
    6c0e:	92 83       	std	Z+2, r25	; 0x02
    6c10:	81 83       	std	Z+1, r24	; 0x01
    6c12:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6c16:	0f 90       	pop	r0
    6c18:	0f 90       	pop	r0

	if( state == HIGH )
    6c1a:	88 85       	ldd	r24, Y+8	; 0x08
    6c1c:	99 85       	ldd	r25, Y+9	; 0x09
    6c1e:	81 30       	cpi	r24, 0x01	; 1
    6c20:	91 05       	cpc	r25, r1
    6c22:	19 f4       	brne	.+6      	; 0x6c2a <_ZN18PinHighLowRunnable3runEv+0x96>
		state = LOW;
    6c24:	19 86       	std	Y+9, r1	; 0x09
    6c26:	18 86       	std	Y+8, r1	; 0x08
    6c28:	04 c0       	rjmp	.+8      	; 0x6c32 <_ZN18PinHighLowRunnable3runEv+0x9e>
	else
		state = HIGH;
    6c2a:	81 e0       	ldi	r24, 0x01	; 1
    6c2c:	90 e0       	ldi	r25, 0x00	; 0
    6c2e:	99 87       	std	Y+9, r25	; 0x09
    6c30:	88 87       	std	Y+8, r24	; 0x08

	digitalWrite( pin , state );
    6c32:	8f 81       	ldd	r24, Y+7	; 0x07
    6c34:	68 85       	ldd	r22, Y+8	; 0x08
    6c36:	0e 94 09 48 	call	0x9012	; 0x9012 <digitalWrite>
}
    6c3a:	df 91       	pop	r29
    6c3c:	cf 91       	pop	r28
    6c3e:	08 95       	ret

00006c40 <_ZThn2_N18PinHighLowRunnable6setPinEh>:
    6c40:	02 97       	sbiw	r24, 0x02	; 2
    6c42:	0e 94 24 36 	call	0x6c48	; 0x6c48 <_ZN18PinHighLowRunnable6setPinEh>
    6c46:	08 95       	ret

00006c48 <_ZN18PinHighLowRunnable6setPinEh>:
}

// =================================================

void PinHighLowRunnable::setPin( unsigned char newPin )
{
    6c48:	1f 93       	push	r17
    6c4a:	cf 93       	push	r28
    6c4c:	df 93       	push	r29
    6c4e:	ec 01       	movw	r28, r24
    6c50:	16 2f       	mov	r17, r22
	static const PROGMEM prog_char functionName[] = "setPin";

	//warning( p << "PinHighLowRunnable:setPin(): this function is not implemented yet! could not set current pin (" << pin << ") to new pin " << newPin << endl; )
	//warning( wpln( "this function is not implemented yet! could not set current pin (%u) to new pin %u" , pin , newPin ) )
	wln( "this function is not implemented yet! could not set current pin (%u) to new pin %u" , pin , newPin )
    6c52:	8e 81       	ldd	r24, Y+6	; 0x06
    6c54:	8f 31       	cpi	r24, 0x1F	; 31
    6c56:	50 f5       	brcc	.+84     	; 0x6cac <_ZN18PinHighLowRunnable6setPinEh+0x64>
    6c58:	ce 01       	movw	r24, r28
    6c5a:	04 96       	adiw	r24, 0x04	; 4
    6c5c:	65 e8       	ldi	r22, 0x85	; 133
    6c5e:	72 e1       	ldi	r23, 0x12	; 18
    6c60:	49 ee       	ldi	r20, 0xE9	; 233
    6c62:	52 e1       	ldi	r21, 0x12	; 18
    6c64:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    6c68:	00 d0       	rcall	.+0      	; 0x6c6a <_ZN18PinHighLowRunnable6setPinEh+0x22>
    6c6a:	00 d0       	rcall	.+0      	; 0x6c6c <_ZN18PinHighLowRunnable6setPinEh+0x24>
    6c6c:	ed b7       	in	r30, 0x3d	; 61
    6c6e:	fe b7       	in	r31, 0x3e	; 62
    6c70:	31 96       	adiw	r30, 0x01	; 1
    6c72:	80 ef       	ldi	r24, 0xF0	; 240
    6c74:	92 e1       	ldi	r25, 0x12	; 18
    6c76:	ad b7       	in	r26, 0x3d	; 61
    6c78:	be b7       	in	r27, 0x3e	; 62
    6c7a:	12 96       	adiw	r26, 0x02	; 2
    6c7c:	9c 93       	st	X, r25
    6c7e:	8e 93       	st	-X, r24
    6c80:	11 97       	sbiw	r26, 0x01	; 1
    6c82:	8f 81       	ldd	r24, Y+7	; 0x07
    6c84:	82 83       	std	Z+2, r24	; 0x02
    6c86:	13 82       	std	Z+3, r1	; 0x03
    6c88:	14 83       	std	Z+4, r17	; 0x04
    6c8a:	15 82       	std	Z+5, r1	; 0x05
    6c8c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6c90:	0f 90       	pop	r0
    6c92:	0f 90       	pop	r0
    6c94:	0f 90       	pop	r0
    6c96:	0f 90       	pop	r0
    6c98:	8e e8       	ldi	r24, 0x8E	; 142
    6c9a:	92 e1       	ldi	r25, 0x12	; 18
    6c9c:	ed b7       	in	r30, 0x3d	; 61
    6c9e:	fe b7       	in	r31, 0x3e	; 62
    6ca0:	92 83       	std	Z+2, r25	; 0x02
    6ca2:	81 83       	std	Z+1, r24	; 0x01
    6ca4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    6ca8:	0f 90       	pop	r0
    6caa:	0f 90       	pop	r0
}
    6cac:	df 91       	pop	r29
    6cae:	cf 91       	pop	r28
    6cb0:	1f 91       	pop	r17
    6cb2:	08 95       	ret

00006cb4 <_ZN18PinHighLowRunnableC1Ehb>:

//const PROGMEM prog_char PinHighLowRunnable::className[] = "PinHighLowRunnable";

// =================================================

PinHighLowRunnable::PinHighLowRunnable( unsigned char _pin , bool isStartStateHigh ) : dp( PSTR( "PinHighLowRunnable" ) )//: p(_p)
    6cb4:	ef 92       	push	r14
    6cb6:	ff 92       	push	r15
    6cb8:	1f 93       	push	r17
    6cba:	cf 93       	push	r28
    6cbc:	df 93       	push	r29
    6cbe:	0f 92       	push	r0
    6cc0:	cd b7       	in	r28, 0x3d	; 61
    6cc2:	de b7       	in	r29, 0x3e	; 62
    6cc4:	7c 01       	movw	r14, r24
    6cc6:	16 2f       	mov	r17, r22
    6cc8:	89 e4       	ldi	r24, 0x49	; 73
    6cca:	9f e0       	ldi	r25, 0x0F	; 15
    6ccc:	f7 01       	movw	r30, r14
    6cce:	91 83       	std	Z+1, r25	; 0x01
    6cd0:	80 83       	st	Z, r24
    6cd2:	0a 96       	adiw	r24, 0x0a	; 10
    6cd4:	93 83       	std	Z+3, r25	; 0x03
    6cd6:	82 83       	std	Z+2, r24	; 0x02
    6cd8:	c7 01       	movw	r24, r14
    6cda:	04 96       	adiw	r24, 0x04	; 4
    6cdc:	68 e9       	ldi	r22, 0x98	; 152
    6cde:	72 e1       	ldi	r23, 0x12	; 18
    6ce0:	49 83       	std	Y+1, r20	; 0x01
    6ce2:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	pin = _pin;
    6ce6:	f7 01       	movw	r30, r14
    6ce8:	17 83       	std	Z+7, r17	; 0x07

	if( isStartStateHigh )
    6cea:	49 81       	ldd	r20, Y+1	; 0x01
    6cec:	44 23       	and	r20, r20
    6cee:	29 f0       	breq	.+10     	; 0x6cfa <_ZN18PinHighLowRunnableC1Ehb+0x46>
		state = HIGH;
    6cf0:	81 e0       	ldi	r24, 0x01	; 1
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	91 87       	std	Z+9, r25	; 0x09
    6cf6:	80 87       	std	Z+8, r24	; 0x08
    6cf8:	03 c0       	rjmp	.+6      	; 0x6d00 <_ZN18PinHighLowRunnableC1Ehb+0x4c>
	else
		state = LOW;
    6cfa:	f7 01       	movw	r30, r14
    6cfc:	11 86       	std	Z+9, r1	; 0x09
    6cfe:	10 86       	std	Z+8, r1	; 0x08

	pinMode( pin , OUTPUT );
    6d00:	81 2f       	mov	r24, r17
    6d02:	61 e0       	ldi	r22, 0x01	; 1
    6d04:	0e 94 e8 47 	call	0x8fd0	; 0x8fd0 <pinMode>
	digitalWrite( pin , state );
    6d08:	f7 01       	movw	r30, r14
    6d0a:	87 81       	ldd	r24, Z+7	; 0x07
    6d0c:	60 85       	ldd	r22, Z+8	; 0x08
    6d0e:	0e 94 09 48 	call	0x9012	; 0x9012 <digitalWrite>
}
    6d12:	0f 90       	pop	r0
    6d14:	df 91       	pop	r29
    6d16:	cf 91       	pop	r28
    6d18:	1f 91       	pop	r17
    6d1a:	ff 90       	pop	r15
    6d1c:	ef 90       	pop	r14
    6d1e:	08 95       	ret

00006d20 <_ZN33StreamHttpChunkedTransferEncoding5writeEh>:
}

// =================================================

size_t StreamHttpChunkedTransferEncoding::write( uint8_t b )
{
    6d20:	0f 93       	push	r16
    6d22:	1f 93       	push	r17
    6d24:	cf 93       	push	r28
    6d26:	df 93       	push	r29
    6d28:	0f 92       	push	r0
    6d2a:	cd b7       	in	r28, 0x3d	; 61
    6d2c:	de b7       	in	r29, 0x3e	; 62
    6d2e:	8c 01       	movw	r16, r24
	{
		return 0;
	}
	*/

	if( buffer->getRemaining() == 0 ) flush();
    6d30:	dc 01       	movw	r26, r24
    6d32:	1e 96       	adiw	r26, 0x0e	; 14
    6d34:	ed 91       	ld	r30, X+
    6d36:	fc 91       	ld	r31, X
    6d38:	1f 97       	sbiw	r26, 0x0f	; 15
    6d3a:	94 81       	ldd	r25, Z+4	; 0x04
    6d3c:	83 81       	ldd	r24, Z+3	; 0x03
    6d3e:	98 17       	cp	r25, r24
    6d40:	49 f4       	brne	.+18     	; 0x6d54 <_ZN33StreamHttpChunkedTransferEncoding5writeEh+0x34>
    6d42:	ed 91       	ld	r30, X+
    6d44:	fc 91       	ld	r31, X
    6d46:	02 84       	ldd	r0, Z+10	; 0x0a
    6d48:	f3 85       	ldd	r31, Z+11	; 0x0b
    6d4a:	e0 2d       	mov	r30, r0
    6d4c:	c8 01       	movw	r24, r16
    6d4e:	69 83       	std	Y+1, r22	; 0x01
    6d50:	19 95       	eicall
    6d52:	69 81       	ldd	r22, Y+1	; 0x01

	if( buffer->getRemaining() > 0 )
    6d54:	d8 01       	movw	r26, r16
    6d56:	1e 96       	adiw	r26, 0x0e	; 14
    6d58:	ed 91       	ld	r30, X+
    6d5a:	fc 91       	ld	r31, X
    6d5c:	1f 97       	sbiw	r26, 0x0f	; 15
// =================================================

int StreamHttpChunkedTransferEncoding::peek()
{
	return underlyingStream->peek();
}
    6d5e:	83 81       	ldd	r24, Z+3	; 0x03
	}
	*/

	if( buffer->getRemaining() == 0 ) flush();

	if( buffer->getRemaining() > 0 )
    6d60:	94 81       	ldd	r25, Z+4	; 0x04
    6d62:	98 17       	cp	r25, r24
    6d64:	51 f0       	breq	.+20     	; 0x6d7a <_ZN33StreamHttpChunkedTransferEncoding5writeEh+0x5a>
	{
		buffer->array[ buffer->position++ ] = b;
    6d66:	a0 81       	ld	r26, Z
    6d68:	b1 81       	ldd	r27, Z+1	; 0x01
    6d6a:	a8 0f       	add	r26, r24
    6d6c:	b1 1d       	adc	r27, r1
    6d6e:	6c 93       	st	X, r22
    6d70:	8f 5f       	subi	r24, 0xFF	; 255
    6d72:	83 83       	std	Z+3, r24	; 0x03
		return 1;
    6d74:	81 e0       	ldi	r24, 0x01	; 1
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	02 c0       	rjmp	.+4      	; 0x6d7e <_ZN33StreamHttpChunkedTransferEncoding5writeEh+0x5e>
	}
	else
	{
		return 0;
    6d7a:	80 e0       	ldi	r24, 0x00	; 0
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    6d7e:	0f 90       	pop	r0
    6d80:	df 91       	pop	r29
    6d82:	cf 91       	pop	r28
    6d84:	1f 91       	pop	r17
    6d86:	0f 91       	pop	r16
    6d88:	08 95       	ret

00006d8a <_ZN33StreamHttpChunkedTransferEncoding5writeEPKhj>:

// =================================================

size_t StreamHttpChunkedTransferEncoding::write( const uint8_t* buff , size_t size )
{
    6d8a:	cf 92       	push	r12
    6d8c:	df 92       	push	r13
    6d8e:	ef 92       	push	r14
    6d90:	ff 92       	push	r15
    6d92:	0f 93       	push	r16
    6d94:	1f 93       	push	r17
    6d96:	cf 93       	push	r28
    6d98:	df 93       	push	r29
    6d9a:	7c 01       	movw	r14, r24
    6d9c:	6a 01       	movw	r12, r20

	//size_t sendBytesCount = 0;
	for( size_t i = 0 ; i < size ; i++ )
    6d9e:	8b 01       	movw	r16, r22
    6da0:	c0 e0       	ldi	r28, 0x00	; 0
    6da2:	d0 e0       	ldi	r29, 0x00	; 0
    6da4:	0c c0       	rjmp	.+24     	; 0x6dbe <_ZN33StreamHttpChunkedTransferEncoding5writeEPKhj+0x34>
	{
		write( buff[i] );
    6da6:	d8 01       	movw	r26, r16
    6da8:	6d 91       	ld	r22, X+
    6daa:	8d 01       	movw	r16, r26
    6dac:	d7 01       	movw	r26, r14
    6dae:	ed 91       	ld	r30, X+
    6db0:	fc 91       	ld	r31, X
    6db2:	01 90       	ld	r0, Z+
    6db4:	f0 81       	ld	r31, Z
    6db6:	e0 2d       	mov	r30, r0
    6db8:	c7 01       	movw	r24, r14
    6dba:	19 95       	eicall

size_t StreamHttpChunkedTransferEncoding::write( const uint8_t* buff , size_t size )
{

	//size_t sendBytesCount = 0;
	for( size_t i = 0 ; i < size ; i++ )
    6dbc:	21 96       	adiw	r28, 0x01	; 1
    6dbe:	cc 15       	cp	r28, r12
    6dc0:	dd 05       	cpc	r29, r13
    6dc2:	89 f7       	brne	.-30     	; 0x6da6 <_ZN33StreamHttpChunkedTransferEncoding5writeEPKhj+0x1c>
	else
	{
		return writeArrayToUnderlyingStream( (uint8_t*)buff , size );
	}*/

}
    6dc4:	ce 01       	movw	r24, r28
    6dc6:	df 91       	pop	r29
    6dc8:	cf 91       	pop	r28
    6dca:	1f 91       	pop	r17
    6dcc:	0f 91       	pop	r16
    6dce:	ff 90       	pop	r15
    6dd0:	ef 90       	pop	r14
    6dd2:	df 90       	pop	r13
    6dd4:	cf 90       	pop	r12
    6dd6:	08 95       	ret

00006dd8 <_ZN33StreamHttpChunkedTransferEncoding9availableEv>:

// =================================================

int StreamHttpChunkedTransferEncoding::available()
{
	return underlyingStream->available();
    6dd8:	dc 01       	movw	r26, r24
    6dda:	1c 96       	adiw	r26, 0x0c	; 12
    6ddc:	8d 91       	ld	r24, X+
    6dde:	9c 91       	ld	r25, X
    6de0:	1d 97       	sbiw	r26, 0x0d	; 13
    6de2:	dc 01       	movw	r26, r24
    6de4:	ed 91       	ld	r30, X+
    6de6:	fc 91       	ld	r31, X
    6de8:	04 80       	ldd	r0, Z+4	; 0x04
    6dea:	f5 81       	ldd	r31, Z+5	; 0x05
    6dec:	e0 2d       	mov	r30, r0
    6dee:	19 95       	eicall
}
    6df0:	08 95       	ret

00006df2 <_ZN33StreamHttpChunkedTransferEncoding4readEv>:

// =================================================

int StreamHttpChunkedTransferEncoding::read()
{
	return underlyingStream->read();
    6df2:	dc 01       	movw	r26, r24
    6df4:	1c 96       	adiw	r26, 0x0c	; 12
    6df6:	8d 91       	ld	r24, X+
    6df8:	9c 91       	ld	r25, X
    6dfa:	1d 97       	sbiw	r26, 0x0d	; 13
    6dfc:	dc 01       	movw	r26, r24
    6dfe:	ed 91       	ld	r30, X+
    6e00:	fc 91       	ld	r31, X
    6e02:	06 80       	ldd	r0, Z+6	; 0x06
    6e04:	f7 81       	ldd	r31, Z+7	; 0x07
    6e06:	e0 2d       	mov	r30, r0
    6e08:	19 95       	eicall
}
    6e0a:	08 95       	ret

00006e0c <_ZN33StreamHttpChunkedTransferEncoding4peekEv>:

// =================================================

int StreamHttpChunkedTransferEncoding::peek()
{
	return underlyingStream->peek();
    6e0c:	dc 01       	movw	r26, r24
    6e0e:	1c 96       	adiw	r26, 0x0c	; 12
    6e10:	8d 91       	ld	r24, X+
    6e12:	9c 91       	ld	r25, X
    6e14:	1d 97       	sbiw	r26, 0x0d	; 13
    6e16:	dc 01       	movw	r26, r24
    6e18:	ed 91       	ld	r30, X+
    6e1a:	fc 91       	ld	r31, X
    6e1c:	00 84       	ldd	r0, Z+8	; 0x08
    6e1e:	f1 85       	ldd	r31, Z+9	; 0x09
    6e20:	e0 2d       	mov	r30, r0
    6e22:	19 95       	eicall
}
    6e24:	08 95       	ret

00006e26 <_ZN33StreamHttpChunkedTransferEncoding9setStreamEP6Stream>:

// =================================================

void StreamHttpChunkedTransferEncoding::setStream( Stream* _underlyingStream )
{
	underlyingStream = _underlyingStream;
    6e26:	fc 01       	movw	r30, r24
    6e28:	75 87       	std	Z+13, r23	; 0x0d
    6e2a:	64 87       	std	Z+12, r22	; 0x0c
}
    6e2c:	08 95       	ret

00006e2e <_ZN33StreamHttpChunkedTransferEncoding18resetInternalStateEv>:

// =================================================

void StreamHttpChunkedTransferEncoding::resetInternalState()
{
	buffer->setPositionAndLimit( 0 , buffer->capacity );
    6e2e:	dc 01       	movw	r26, r24
    6e30:	1e 96       	adiw	r26, 0x0e	; 14
    6e32:	ed 91       	ld	r30, X+
    6e34:	fc 91       	ld	r31, X
    6e36:	1f 97       	sbiw	r26, 0x0f	; 15
// =================================================

template< typename DataType , typename SizeType >
void AnyBuffer<DataType,SizeType>::setLimit( SizeType _limit )
{
	limit = _limit < 0 ? 0 : ( _limit > capacity ? capacity : _limit );
    6e38:	82 81       	ldd	r24, Z+2	; 0x02
    6e3a:	84 83       	std	Z+4, r24	; 0x04
// =================================================

template< typename DataType , typename SizeType >
void AnyBuffer<DataType,SizeType>::setPosition( SizeType _position )
{
	position = _position > limit ? limit : ( _position < 0 ? 0 : _position );
    6e3c:	13 82       	std	Z+3, r1	; 0x03
}
    6e3e:	08 95       	ret

00006e40 <_ZN33StreamHttpChunkedTransferEncodingC1EP9AnyBufferIhhEP6Stream>:

#include "StreamHttpChunkedTransferEncoding.h"

// =================================================

StreamHttpChunkedTransferEncoding::StreamHttpChunkedTransferEncoding( AnyBuffer< byte , byte >* _buffer , Stream* _underlyingStream )
    6e40:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    6e42:	13 82       	std	Z+3, r1	; 0x03
    6e44:	12 82       	std	Z+2, r1	; 0x02
    6e46:	88 ee       	ldi	r24, 0xE8	; 232
    6e48:	93 e0       	ldi	r25, 0x03	; 3
    6e4a:	a0 e0       	ldi	r26, 0x00	; 0
    6e4c:	b0 e0       	ldi	r27, 0x00	; 0
    6e4e:	84 83       	std	Z+4, r24	; 0x04
    6e50:	95 83       	std	Z+5, r25	; 0x05
    6e52:	a6 83       	std	Z+6, r26	; 0x06
    6e54:	b7 83       	std	Z+7, r27	; 0x07
    6e56:	8b e5       	ldi	r24, 0x5B	; 91
    6e58:	9f e0       	ldi	r25, 0x0F	; 15
    6e5a:	91 83       	std	Z+1, r25	; 0x01
    6e5c:	80 83       	st	Z, r24
{
	buffer = _buffer;
    6e5e:	77 87       	std	Z+15, r23	; 0x0f
    6e60:	66 87       	std	Z+14, r22	; 0x0e

// =================================================

void StreamHttpChunkedTransferEncoding::setStream( Stream* _underlyingStream )
{
	underlyingStream = _underlyingStream;
    6e62:	55 87       	std	Z+13, r21	; 0x0d
    6e64:	44 87       	std	Z+12, r20	; 0x0c
StreamHttpChunkedTransferEncoding::StreamHttpChunkedTransferEncoding( AnyBuffer< byte , byte >* _buffer , Stream* _underlyingStream )
{
	buffer = _buffer;

	setStream( _underlyingStream );
	resetInternalState();
    6e66:	cf 01       	movw	r24, r30
    6e68:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <_ZN33StreamHttpChunkedTransferEncoding18resetInternalStateEv>
}
    6e6c:	08 95       	ret

00006e6e <_ZN33StreamHttpChunkedTransferEncoding28writeArrayToUnderlyingStreamEPhj>:
}

// =================================================

size_t StreamHttpChunkedTransferEncoding::writeArrayToUnderlyingStream( uint8_t* buff , size_t size )
{
    6e6e:	af 92       	push	r10
    6e70:	bf 92       	push	r11
    6e72:	df 92       	push	r13
    6e74:	ef 92       	push	r14
    6e76:	ff 92       	push	r15
    6e78:	0f 93       	push	r16
    6e7a:	1f 93       	push	r17
    6e7c:	cf 93       	push	r28
    6e7e:	df 93       	push	r29
    6e80:	ec 01       	movw	r28, r24
    6e82:	5b 01       	movw	r10, r22
    6e84:	8a 01       	movw	r16, r20
	byte wroteBytesCount = underlyingStream->print( size , HEX );
    6e86:	8c 85       	ldd	r24, Y+12	; 0x0c
    6e88:	9d 85       	ldd	r25, Y+13	; 0x0d
    6e8a:	ba 01       	movw	r22, r20
    6e8c:	40 e1       	ldi	r20, 0x10	; 16
    6e8e:	50 e0       	ldi	r21, 0x00	; 0
    6e90:	0e 94 af 45 	call	0x8b5e	; 0x8b5e <_ZN5Print5printEji>
    6e94:	d8 2e       	mov	r13, r24
	underlyingStream->write( "\r\n" );
    6e96:	88 e5       	ldi	r24, 0x58	; 88
    6e98:	e8 2e       	mov	r14, r24
    6e9a:	8d e0       	ldi	r24, 0x0D	; 13
    6e9c:	f8 2e       	mov	r15, r24
    6e9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ea0:	9d 85       	ldd	r25, Y+13	; 0x0d
    6ea2:	b7 01       	movw	r22, r14
    6ea4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	underlyingStream->write( buff , size );
    6ea8:	8c 85       	ldd	r24, Y+12	; 0x0c
    6eaa:	9d 85       	ldd	r25, Y+13	; 0x0d
    6eac:	dc 01       	movw	r26, r24
    6eae:	ed 91       	ld	r30, X+
    6eb0:	fc 91       	ld	r31, X
    6eb2:	02 80       	ldd	r0, Z+2	; 0x02
    6eb4:	f3 81       	ldd	r31, Z+3	; 0x03
    6eb6:	e0 2d       	mov	r30, r0
    6eb8:	b5 01       	movw	r22, r10
    6eba:	a8 01       	movw	r20, r16
    6ebc:	19 95       	eicall
	underlyingStream->write( "\r\n" );
    6ebe:	8c 85       	ldd	r24, Y+12	; 0x0c
    6ec0:	9d 85       	ldd	r25, Y+13	; 0x0d
    6ec2:	b7 01       	movw	r22, r14
    6ec4:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>

	return size + 4 + wroteBytesCount;
    6ec8:	c8 01       	movw	r24, r16
    6eca:	04 96       	adiw	r24, 0x04	; 4
    6ecc:	8d 0d       	add	r24, r13
    6ece:	91 1d       	adc	r25, r1
}
    6ed0:	df 91       	pop	r29
    6ed2:	cf 91       	pop	r28
    6ed4:	1f 91       	pop	r17
    6ed6:	0f 91       	pop	r16
    6ed8:	ff 90       	pop	r15
    6eda:	ef 90       	pop	r14
    6edc:	df 90       	pop	r13
    6ede:	bf 90       	pop	r11
    6ee0:	af 90       	pop	r10
    6ee2:	08 95       	ret

00006ee4 <_ZN33StreamHttpChunkedTransferEncoding5flushEv>:
//}

// =================================================

void StreamHttpChunkedTransferEncoding::flush()
{
    6ee4:	cf 93       	push	r28
    6ee6:	df 93       	push	r29
    6ee8:	ec 01       	movw	r28, r24
	if( buffer->position > 0 )
    6eea:	ee 85       	ldd	r30, Y+14	; 0x0e
    6eec:	ff 85       	ldd	r31, Y+15	; 0x0f
    6eee:	43 81       	ldd	r20, Z+3	; 0x03
    6ef0:	44 23       	and	r20, r20
    6ef2:	89 f0       	breq	.+34     	; 0x6f16 <_ZN33StreamHttpChunkedTransferEncoding5flushEv+0x32>
		underlyingStream->flush();

		//setWriteError( underlyingStream->getWriteError() );
		*/

		writeArrayToUnderlyingStream( buffer->array , buffer->position );
    6ef4:	60 81       	ld	r22, Z
    6ef6:	71 81       	ldd	r23, Z+1	; 0x01
    6ef8:	50 e0       	ldi	r21, 0x00	; 0
    6efa:	0e 94 37 37 	call	0x6e6e	; 0x6e6e <_ZN33StreamHttpChunkedTransferEncoding28writeArrayToUnderlyingStreamEPhj>
		underlyingStream->flush();
    6efe:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f00:	9d 85       	ldd	r25, Y+13	; 0x0d
    6f02:	dc 01       	movw	r26, r24
    6f04:	ed 91       	ld	r30, X+
    6f06:	fc 91       	ld	r31, X
    6f08:	02 84       	ldd	r0, Z+10	; 0x0a
    6f0a:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f0c:	e0 2d       	mov	r30, r0
    6f0e:	19 95       	eicall

		buffer->setPosition( 0 );
    6f10:	ee 85       	ldd	r30, Y+14	; 0x0e
    6f12:	ff 85       	ldd	r31, Y+15	; 0x0f
    6f14:	13 82       	std	Z+3, r1	; 0x03
	}
}
    6f16:	df 91       	pop	r29
    6f18:	cf 91       	pop	r28
    6f1a:	08 95       	ret

00006f1c <_ZN33StreamHttpChunkedTransferEncoding25finishChunkedTransmissionEv>:
}*/

// =================================================

void StreamHttpChunkedTransferEncoding::finishChunkedTransmission()
{
    6f1c:	cf 93       	push	r28
    6f1e:	df 93       	push	r29
    6f20:	ec 01       	movw	r28, r24
	flush();
    6f22:	e8 81       	ld	r30, Y
    6f24:	f9 81       	ldd	r31, Y+1	; 0x01
    6f26:	02 84       	ldd	r0, Z+10	; 0x0a
    6f28:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f2a:	e0 2d       	mov	r30, r0
    6f2c:	19 95       	eicall
	underlyingStream->write( "0\r\n\r\n" );
    6f2e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f30:	9d 85       	ldd	r25, Y+13	; 0x0d
    6f32:	6b e5       	ldi	r22, 0x5B	; 91
    6f34:	7d e0       	ldi	r23, 0x0D	; 13
    6f36:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <_ZN5Print5writeEPKc>
	underlyingStream->flush();
    6f3a:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f3c:	9d 85       	ldd	r25, Y+13	; 0x0d
    6f3e:	dc 01       	movw	r26, r24
    6f40:	ed 91       	ld	r30, X+
    6f42:	fc 91       	ld	r31, X
    6f44:	02 84       	ldd	r0, Z+10	; 0x0a
    6f46:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f48:	e0 2d       	mov	r30, r0
    6f4a:	19 95       	eicall

	//write( (const uint8_t*)"0\r\n\r\n" , 5 );

	//setWriteError( underlyingStream->getWriteError() );
}
    6f4c:	df 91       	pop	r29
    6f4e:	cf 91       	pop	r28
    6f50:	08 95       	ret

00006f52 <_ZN23StreamReadBytesCounting4readEv>:
}

// =================================================

int StreamReadBytesCounting::read()
{
    6f52:	cf 93       	push	r28
    6f54:	df 93       	push	r29
    6f56:	ec 01       	movw	r28, r24
	int readByte = mainStream->read();
    6f58:	8c 85       	ldd	r24, Y+12	; 0x0c
    6f5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    6f5c:	dc 01       	movw	r26, r24
    6f5e:	ed 91       	ld	r30, X+
    6f60:	fc 91       	ld	r31, X
    6f62:	06 80       	ldd	r0, Z+6	; 0x06
    6f64:	f7 81       	ldd	r31, Z+7	; 0x07
    6f66:	e0 2d       	mov	r30, r0
    6f68:	19 95       	eicall

	if( readByte == -1 )
    6f6a:	bf ef       	ldi	r27, 0xFF	; 255
    6f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f6e:	9b 07       	cpc	r25, r27
    6f70:	31 f0       	breq	.+12     	; 0x6f7e <_ZN23StreamReadBytesCounting4readEv+0x2c>
		return -1;
	else
	{
		readBytesCount++;
    6f72:	2e 85       	ldd	r18, Y+14	; 0x0e
    6f74:	3f 85       	ldd	r19, Y+15	; 0x0f
    6f76:	2f 5f       	subi	r18, 0xFF	; 255
    6f78:	3f 4f       	sbci	r19, 0xFF	; 255
    6f7a:	3f 87       	std	Y+15, r19	; 0x0f
    6f7c:	2e 87       	std	Y+14, r18	; 0x0e
		return readByte;
	}
}
    6f7e:	df 91       	pop	r29
    6f80:	cf 91       	pop	r28
    6f82:	08 95       	ret

00006f84 <_ZN23StreamReadBytesCounting4peekEv>:

// =================================================

int StreamReadBytesCounting::peek()
{
	return mainStream->peek();
    6f84:	dc 01       	movw	r26, r24
    6f86:	1c 96       	adiw	r26, 0x0c	; 12
    6f88:	8d 91       	ld	r24, X+
    6f8a:	9c 91       	ld	r25, X
    6f8c:	1d 97       	sbiw	r26, 0x0d	; 13
    6f8e:	dc 01       	movw	r26, r24
    6f90:	ed 91       	ld	r30, X+
    6f92:	fc 91       	ld	r31, X
    6f94:	00 84       	ldd	r0, Z+8	; 0x08
    6f96:	f1 85       	ldd	r31, Z+9	; 0x09
    6f98:	e0 2d       	mov	r30, r0
    6f9a:	19 95       	eicall
}
    6f9c:	08 95       	ret

00006f9e <_ZN23StreamReadBytesCounting5flushEv>:

// =================================================

void StreamReadBytesCounting::flush()
{
	mainStream->flush();
    6f9e:	dc 01       	movw	r26, r24
    6fa0:	1c 96       	adiw	r26, 0x0c	; 12
    6fa2:	8d 91       	ld	r24, X+
    6fa4:	9c 91       	ld	r25, X
    6fa6:	1d 97       	sbiw	r26, 0x0d	; 13
    6fa8:	dc 01       	movw	r26, r24
    6faa:	ed 91       	ld	r30, X+
    6fac:	fc 91       	ld	r31, X
    6fae:	02 84       	ldd	r0, Z+10	; 0x0a
    6fb0:	f3 85       	ldd	r31, Z+11	; 0x0b
    6fb2:	e0 2d       	mov	r30, r0
    6fb4:	19 95       	eicall
}
    6fb6:	08 95       	ret

00006fb8 <_ZN23StreamReadBytesCounting5writeEh>:

// =================================================

size_t StreamReadBytesCounting::write( uint8_t b )
{
	return mainStream->write( b );
    6fb8:	dc 01       	movw	r26, r24
    6fba:	1c 96       	adiw	r26, 0x0c	; 12
    6fbc:	8d 91       	ld	r24, X+
    6fbe:	9c 91       	ld	r25, X
    6fc0:	1d 97       	sbiw	r26, 0x0d	; 13
    6fc2:	dc 01       	movw	r26, r24
    6fc4:	ed 91       	ld	r30, X+
    6fc6:	fc 91       	ld	r31, X
    6fc8:	01 90       	ld	r0, Z+
    6fca:	f0 81       	ld	r31, Z
    6fcc:	e0 2d       	mov	r30, r0
    6fce:	19 95       	eicall
}
    6fd0:	08 95       	ret

00006fd2 <_ZN23StreamReadBytesCounting9availableEv>:

// =================================================

int StreamReadBytesCounting::available()
{
	return mainStream->available();
    6fd2:	dc 01       	movw	r26, r24
    6fd4:	1c 96       	adiw	r26, 0x0c	; 12
    6fd6:	8d 91       	ld	r24, X+
    6fd8:	9c 91       	ld	r25, X
    6fda:	1d 97       	sbiw	r26, 0x0d	; 13
    6fdc:	dc 01       	movw	r26, r24
    6fde:	ed 91       	ld	r30, X+
    6fe0:	fc 91       	ld	r31, X
    6fe2:	04 80       	ldd	r0, Z+4	; 0x04
    6fe4:	f5 81       	ldd	r31, Z+5	; 0x05
    6fe6:	e0 2d       	mov	r30, r0
    6fe8:	19 95       	eicall
}
    6fea:	08 95       	ret

00006fec <_ZN23StreamReadBytesCountingC1Ev>:

#include "StreamReadBytesCounting.h"

// =================================================

StreamReadBytesCounting::StreamReadBytesCounting()
    6fec:	fc 01       	movw	r30, r24
    6fee:	13 82       	std	Z+3, r1	; 0x03
    6ff0:	12 82       	std	Z+2, r1	; 0x02
    6ff2:	48 ee       	ldi	r20, 0xE8	; 232
    6ff4:	53 e0       	ldi	r21, 0x03	; 3
    6ff6:	60 e0       	ldi	r22, 0x00	; 0
    6ff8:	70 e0       	ldi	r23, 0x00	; 0
    6ffa:	44 83       	std	Z+4, r20	; 0x04
    6ffc:	55 83       	std	Z+5, r21	; 0x05
    6ffe:	66 83       	std	Z+6, r22	; 0x06
    7000:	77 83       	std	Z+7, r23	; 0x07
    7002:	8b e6       	ldi	r24, 0x6B	; 107
    7004:	9f e0       	ldi	r25, 0x0F	; 15
    7006:	91 83       	std	Z+1, r25	; 0x01
    7008:	80 83       	st	Z, r24

// =================================================

void StreamReadBytesCounting::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    700a:	15 86       	std	Z+13, r1	; 0x0d
    700c:	14 86       	std	Z+12, r1	; 0x0c

// =================================================

void StreamReadBytesCounting::resetInternalState()
{
	readBytesCount = 0;
    700e:	17 86       	std	Z+15, r1	; 0x0f
    7010:	16 86       	std	Z+14, r1	; 0x0e

StreamReadBytesCounting::StreamReadBytesCounting()
{
	setStream( NULL );
	resetInternalState();
}
    7012:	08 95       	ret

00007014 <_ZN23StreamReadBytesCounting9setStreamEP6Stream>:

// =================================================

void StreamReadBytesCounting::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    7014:	fc 01       	movw	r30, r24
    7016:	75 87       	std	Z+13, r23	; 0x0d
    7018:	64 87       	std	Z+12, r22	; 0x0c
}
    701a:	08 95       	ret

0000701c <_ZN23StreamReadBytesCounting18resetInternalStateEv>:

// =================================================

void StreamReadBytesCounting::resetInternalState()
{
	readBytesCount = 0;
    701c:	fc 01       	movw	r30, r24
    701e:	17 86       	std	Z+15, r1	; 0x0f
    7020:	16 86       	std	Z+14, r1	; 0x0e
}
    7022:	08 95       	ret

00007024 <_ZN23StreamReadBytesCounting17getReadBytesCountEv>:
}

// =================================================

unsigned int StreamReadBytesCounting::getReadBytesCount()
{
    7024:	fc 01       	movw	r30, r24
	return readBytesCount;
}
    7026:	86 85       	ldd	r24, Z+14	; 0x0e
    7028:	97 85       	ldd	r25, Z+15	; 0x0f
    702a:	08 95       	ret

0000702c <_ZN20StreamReadHttpMethod4peekEv>:

// =================================================

int StreamReadHttpMethod::peek()
{
	return mainStream->peek();
    702c:	dc 01       	movw	r26, r24
    702e:	1c 96       	adiw	r26, 0x0c	; 12
    7030:	8d 91       	ld	r24, X+
    7032:	9c 91       	ld	r25, X
    7034:	1d 97       	sbiw	r26, 0x0d	; 13
    7036:	dc 01       	movw	r26, r24
    7038:	ed 91       	ld	r30, X+
    703a:	fc 91       	ld	r31, X
    703c:	00 84       	ldd	r0, Z+8	; 0x08
    703e:	f1 85       	ldd	r31, Z+9	; 0x09
    7040:	e0 2d       	mov	r30, r0
    7042:	19 95       	eicall
}
    7044:	08 95       	ret

00007046 <_ZN20StreamReadHttpMethod5flushEv>:

// =================================================

void StreamReadHttpMethod::flush()
{
	mainStream->flush();
    7046:	dc 01       	movw	r26, r24
    7048:	1c 96       	adiw	r26, 0x0c	; 12
    704a:	8d 91       	ld	r24, X+
    704c:	9c 91       	ld	r25, X
    704e:	1d 97       	sbiw	r26, 0x0d	; 13
    7050:	dc 01       	movw	r26, r24
    7052:	ed 91       	ld	r30, X+
    7054:	fc 91       	ld	r31, X
    7056:	02 84       	ldd	r0, Z+10	; 0x0a
    7058:	f3 85       	ldd	r31, Z+11	; 0x0b
    705a:	e0 2d       	mov	r30, r0
    705c:	19 95       	eicall
}
    705e:	08 95       	ret

00007060 <_ZN20StreamReadHttpMethod5writeEh>:

// =================================================

size_t StreamReadHttpMethod::write( uint8_t b )
{
	return mainStream->write( b );
    7060:	dc 01       	movw	r26, r24
    7062:	1c 96       	adiw	r26, 0x0c	; 12
    7064:	8d 91       	ld	r24, X+
    7066:	9c 91       	ld	r25, X
    7068:	1d 97       	sbiw	r26, 0x0d	; 13
    706a:	dc 01       	movw	r26, r24
    706c:	ed 91       	ld	r30, X+
    706e:	fc 91       	ld	r31, X
    7070:	01 90       	ld	r0, Z+
    7072:	f0 81       	ld	r31, Z
    7074:	e0 2d       	mov	r30, r0
    7076:	19 95       	eicall
}
    7078:	08 95       	ret

0000707a <_ZN20StreamReadHttpMethod9availableEv>:

// =================================================

int StreamReadHttpMethod::available()
{
	return mainStream->available();
    707a:	dc 01       	movw	r26, r24
    707c:	1c 96       	adiw	r26, 0x0c	; 12
    707e:	8d 91       	ld	r24, X+
    7080:	9c 91       	ld	r25, X
    7082:	1d 97       	sbiw	r26, 0x0d	; 13
    7084:	dc 01       	movw	r26, r24
    7086:	ed 91       	ld	r30, X+
    7088:	fc 91       	ld	r31, X
    708a:	04 80       	ldd	r0, Z+4	; 0x04
    708c:	f5 81       	ldd	r31, Z+5	; 0x05
    708e:	e0 2d       	mov	r30, r0
    7090:	19 95       	eicall
}
    7092:	08 95       	ret

00007094 <_ZN20StreamReadHttpMethod4readEv>:
}

// =================================================

int StreamReadHttpMethod::read()
{
    7094:	cf 93       	push	r28
    7096:	df 93       	push	r29
    7098:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "read";

	if( httpMethod == -1 )
    709a:	8e 85       	ldd	r24, Y+14	; 0x0e
    709c:	8f 3f       	cpi	r24, 0xFF	; 255
    709e:	29 f5       	brne	.+74     	; 0x70ea <_ZN20StreamReadHttpMethod4readEv+0x56>
	{
		if( mainStream->available() > 0 )
    70a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    70a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    70a4:	dc 01       	movw	r26, r24
    70a6:	ed 91       	ld	r30, X+
    70a8:	fc 91       	ld	r31, X
    70aa:	04 80       	ldd	r0, Z+4	; 0x04
    70ac:	f5 81       	ldd	r31, Z+5	; 0x05
    70ae:	e0 2d       	mov	r30, r0
    70b0:	19 95       	eicall
    70b2:	18 16       	cp	r1, r24
    70b4:	19 06       	cpc	r1, r25
    70b6:	cc f4       	brge	.+50     	; 0x70ea <_ZN20StreamReadHttpMethod4readEv+0x56>
		{
			int readByte = mainStream->read();
    70b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    70ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    70bc:	dc 01       	movw	r26, r24
    70be:	ed 91       	ld	r30, X+
    70c0:	fc 91       	ld	r31, X
    70c2:	06 80       	ldd	r0, Z+6	; 0x06
    70c4:	f7 81       	ldd	r31, Z+7	; 0x07
    70c6:	e0 2d       	mov	r30, r0
    70c8:	19 95       	eicall

			if( readByte == -1 )
    70ca:	bf ef       	ldi	r27, 0xFF	; 255
    70cc:	8f 3f       	cpi	r24, 0xFF	; 255
    70ce:	9b 07       	cpc	r25, r27
    70d0:	61 f0       	breq	.+24     	; 0x70ea <_ZN20StreamReadHttpMethod4readEv+0x56>
			{
				//return -1;
			}
			else
			if( readByte == 'G' )
    70d2:	87 34       	cpi	r24, 0x47	; 71
    70d4:	91 05       	cpc	r25, r1
    70d6:	11 f4       	brne	.+4      	; 0x70dc <_ZN20StreamReadHttpMethod4readEv+0x48>
			{
				httpMethod = 0;
    70d8:	1e 86       	std	Y+14, r1	; 0x0e
    70da:	07 c0       	rjmp	.+14     	; 0x70ea <_ZN20StreamReadHttpMethod4readEv+0x56>
			}
			else
			if( readByte == 'P' )
    70dc:	80 35       	cpi	r24, 0x50	; 80
    70de:	91 05       	cpc	r25, r1
    70e0:	11 f4       	brne	.+4      	; 0x70e6 <_ZN20StreamReadHttpMethod4readEv+0x52>
			{
				httpMethod = 1;
    70e2:	81 e0       	ldi	r24, 0x01	; 1
    70e4:	01 c0       	rjmp	.+2      	; 0x70e8 <_ZN20StreamReadHttpMethod4readEv+0x54>
			}
			else
			{
				httpMethod = 2;
    70e6:	82 e0       	ldi	r24, 0x02	; 2
    70e8:	8e 87       	std	Y+14, r24	; 0x0e
		}
		//else
		//	return -1;
	}

	aln( "returning httpMethod=%i" , httpMethod )
    70ea:	89 89       	ldd	r24, Y+17	; 0x11
    70ec:	8b 30       	cpi	r24, 0x0B	; 11
    70ee:	30 f5       	brcc	.+76     	; 0x713c <_ZN20StreamReadHttpMethod4readEv+0xa8>
    70f0:	ce 01       	movw	r24, r28
    70f2:	0f 96       	adiw	r24, 0x0f	; 15
    70f4:	6b e8       	ldi	r22, 0x8B	; 139
    70f6:	72 e1       	ldi	r23, 0x12	; 18
    70f8:	48 e5       	ldi	r20, 0x58	; 88
    70fa:	53 e1       	ldi	r21, 0x13	; 19
    70fc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7100:	00 d0       	rcall	.+0      	; 0x7102 <_ZN20StreamReadHttpMethod4readEv+0x6e>
    7102:	0f 92       	push	r0
    7104:	8d e5       	ldi	r24, 0x5D	; 93
    7106:	93 e1       	ldi	r25, 0x13	; 19
    7108:	ed b7       	in	r30, 0x3d	; 61
    710a:	fe b7       	in	r31, 0x3e	; 62
    710c:	92 83       	std	Z+2, r25	; 0x02
    710e:	81 83       	std	Z+1, r24	; 0x01
    7110:	8e 85       	ldd	r24, Y+14	; 0x0e
    7112:	99 27       	eor	r25, r25
    7114:	87 fd       	sbrc	r24, 7
    7116:	90 95       	com	r25
    7118:	94 83       	std	Z+4, r25	; 0x04
    711a:	83 83       	std	Z+3, r24	; 0x03
    711c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7120:	0f 90       	pop	r0
    7122:	0f 90       	pop	r0
    7124:	8e e8       	ldi	r24, 0x8E	; 142
    7126:	92 e1       	ldi	r25, 0x12	; 18
    7128:	ad b7       	in	r26, 0x3d	; 61
    712a:	be b7       	in	r27, 0x3e	; 62
    712c:	12 96       	adiw	r26, 0x02	; 2
    712e:	9c 93       	st	X, r25
    7130:	8e 93       	st	-X, r24
    7132:	11 97       	sbiw	r26, 0x01	; 1
    7134:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7138:	0f 90       	pop	r0
    713a:	0f 90       	pop	r0

	return httpMethod;
    713c:	8e 85       	ldd	r24, Y+14	; 0x0e
    713e:	28 2f       	mov	r18, r24
    7140:	33 27       	eor	r19, r19
    7142:	27 fd       	sbrc	r18, 7
    7144:	30 95       	com	r19
}
    7146:	93 2f       	mov	r25, r19
    7148:	df 91       	pop	r29
    714a:	cf 91       	pop	r28
    714c:	08 95       	ret

0000714e <_ZN20StreamReadHttpMethodC1Ev>:

#include "StreamReadHttpMethod.h"

// =================================================

StreamReadHttpMethod::StreamReadHttpMethod() : dp( PSTR( "StreamReadHttpMethod" ) , DEBUG_LEVEL_ALL )
    714e:	cf 93       	push	r28
    7150:	df 93       	push	r29
    7152:	ec 01       	movw	r28, r24
    7154:	1b 82       	std	Y+3, r1	; 0x03
    7156:	1a 82       	std	Y+2, r1	; 0x02
    7158:	88 ee       	ldi	r24, 0xE8	; 232
    715a:	93 e0       	ldi	r25, 0x03	; 3
    715c:	a0 e0       	ldi	r26, 0x00	; 0
    715e:	b0 e0       	ldi	r27, 0x00	; 0
    7160:	8c 83       	std	Y+4, r24	; 0x04
    7162:	9d 83       	std	Y+5, r25	; 0x05
    7164:	ae 83       	std	Y+6, r26	; 0x06
    7166:	bf 83       	std	Y+7, r27	; 0x07
    7168:	8b e7       	ldi	r24, 0x7B	; 123
    716a:	9f e0       	ldi	r25, 0x0F	; 15
    716c:	99 83       	std	Y+1, r25	; 0x01
    716e:	88 83       	st	Y, r24
    7170:	ce 01       	movw	r24, r28
    7172:	0f 96       	adiw	r24, 0x0f	; 15
    7174:	63 e4       	ldi	r22, 0x43	; 67
    7176:	73 e1       	ldi	r23, 0x13	; 19
    7178:	4a e0       	ldi	r20, 0x0A	; 10
    717a:	0e 94 6e 35 	call	0x6adc	; 0x6adc <_ZN12DebugPrinterC1EPKch>

// =================================================

void StreamReadHttpMethod::setStreamAndResetInternalState( Stream* _mainStream )
{
	mainStream = _mainStream;
    717e:	1d 86       	std	Y+13, r1	; 0x0d
    7180:	1c 86       	std	Y+12, r1	; 0x0c
	httpMethod = -1;
    7182:	8f ef       	ldi	r24, 0xFF	; 255
    7184:	8e 87       	std	Y+14, r24	; 0x0e
// =================================================

StreamReadHttpMethod::StreamReadHttpMethod() : dp( PSTR( "StreamReadHttpMethod" ) , DEBUG_LEVEL_ALL )
{
	setStreamAndResetInternalState( NULL );
}
    7186:	df 91       	pop	r29
    7188:	cf 91       	pop	r28
    718a:	08 95       	ret

0000718c <_ZN20StreamReadHttpMethod30setStreamAndResetInternalStateEP6Stream>:

// =================================================

void StreamReadHttpMethod::setStreamAndResetInternalState( Stream* _mainStream )
{
    718c:	fc 01       	movw	r30, r24
	mainStream = _mainStream;
    718e:	75 87       	std	Z+13, r23	; 0x0d
    7190:	64 87       	std	Z+12, r22	; 0x0c
	httpMethod = -1;
    7192:	8f ef       	ldi	r24, 0xFF	; 255
    7194:	86 87       	std	Z+14, r24	; 0x0e
}
    7196:	08 95       	ret

00007198 <_ZN19StreamReadUntilByte4peekEv>:

// =================================================

int StreamReadUntilByte::peek()
{
	return mainStream->peek();
    7198:	dc 01       	movw	r26, r24
    719a:	1e 96       	adiw	r26, 0x0e	; 14
    719c:	8d 91       	ld	r24, X+
    719e:	9c 91       	ld	r25, X
    71a0:	1f 97       	sbiw	r26, 0x0f	; 15
    71a2:	dc 01       	movw	r26, r24
    71a4:	ed 91       	ld	r30, X+
    71a6:	fc 91       	ld	r31, X
    71a8:	00 84       	ldd	r0, Z+8	; 0x08
    71aa:	f1 85       	ldd	r31, Z+9	; 0x09
    71ac:	e0 2d       	mov	r30, r0
    71ae:	19 95       	eicall
}
    71b0:	08 95       	ret

000071b2 <_ZN19StreamReadUntilByte5flushEv>:

// =================================================

void StreamReadUntilByte::flush()
{
	mainStream->flush();
    71b2:	dc 01       	movw	r26, r24
    71b4:	1e 96       	adiw	r26, 0x0e	; 14
    71b6:	8d 91       	ld	r24, X+
    71b8:	9c 91       	ld	r25, X
    71ba:	1f 97       	sbiw	r26, 0x0f	; 15
    71bc:	dc 01       	movw	r26, r24
    71be:	ed 91       	ld	r30, X+
    71c0:	fc 91       	ld	r31, X
    71c2:	02 84       	ldd	r0, Z+10	; 0x0a
    71c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    71c6:	e0 2d       	mov	r30, r0
    71c8:	19 95       	eicall
}
    71ca:	08 95       	ret

000071cc <_ZN19StreamReadUntilByte5writeEh>:

// =================================================

size_t StreamReadUntilByte::write( uint8_t b )
{
	return mainStream->write( b );
    71cc:	dc 01       	movw	r26, r24
    71ce:	1e 96       	adiw	r26, 0x0e	; 14
    71d0:	8d 91       	ld	r24, X+
    71d2:	9c 91       	ld	r25, X
    71d4:	1f 97       	sbiw	r26, 0x0f	; 15
    71d6:	dc 01       	movw	r26, r24
    71d8:	ed 91       	ld	r30, X+
    71da:	fc 91       	ld	r31, X
    71dc:	01 90       	ld	r0, Z+
    71de:	f0 81       	ld	r31, Z
    71e0:	e0 2d       	mov	r30, r0
    71e2:	19 95       	eicall
}
    71e4:	08 95       	ret

000071e6 <_ZN19StreamReadUntilByte9availableEv>:

// =================================================

int StreamReadUntilByte::available()
{
	return mainStream->available();
    71e6:	dc 01       	movw	r26, r24
    71e8:	1e 96       	adiw	r26, 0x0e	; 14
    71ea:	8d 91       	ld	r24, X+
    71ec:	9c 91       	ld	r25, X
    71ee:	1f 97       	sbiw	r26, 0x0f	; 15
    71f0:	dc 01       	movw	r26, r24
    71f2:	ed 91       	ld	r30, X+
    71f4:	fc 91       	ld	r31, X
    71f6:	04 80       	ldd	r0, Z+4	; 0x04
    71f8:	f5 81       	ldd	r31, Z+5	; 0x05
    71fa:	e0 2d       	mov	r30, r0
    71fc:	19 95       	eicall
}
    71fe:	08 95       	ret

00007200 <_ZN19StreamReadUntilByte4readEv>:
}

// =================================================

int StreamReadUntilByte::read()
{
    7200:	1f 93       	push	r17
    7202:	cf 93       	push	r28
    7204:	df 93       	push	r29
    7206:	ec 01       	movw	r28, r24
	if( foundByte != 0 ) return foundByte;
    7208:	8c 89       	ldd	r24, Y+20	; 0x14
    720a:	88 23       	and	r24, r24
    720c:	d1 f5       	brne	.+116    	; 0x7282 <_ZN19StreamReadUntilByte4readEv+0x82>
    720e:	10 e0       	ldi	r17, 0x00	; 0
    7210:	01 c0       	rjmp	.+2      	; 0x7214 <_ZN19StreamReadUntilByte4readEv+0x14>
				return 0;
			else
				return -1;
		}

		thereWereDataRead = true;
    7212:	11 e0       	ldi	r17, 0x01	; 1

	bool thereWereDataRead = false;

	while( true )
	{
		int readByte = mainStream->read();
    7214:	8e 85       	ldd	r24, Y+14	; 0x0e
    7216:	9f 85       	ldd	r25, Y+15	; 0x0f
    7218:	dc 01       	movw	r26, r24
    721a:	ed 91       	ld	r30, X+
    721c:	fc 91       	ld	r31, X
    721e:	06 80       	ldd	r0, Z+6	; 0x06
    7220:	f7 81       	ldd	r31, Z+7	; 0x07
    7222:	e0 2d       	mov	r30, r0
    7224:	19 95       	eicall
    7226:	9c 01       	movw	r18, r24

		if( readByte == -1 )// break;
    7228:	bf ef       	ldi	r27, 0xFF	; 255
    722a:	8f 3f       	cpi	r24, 0xFF	; 255
    722c:	9b 07       	cpc	r25, r27
    722e:	21 f0       	breq	.+8      	; 0x7238 <_ZN19StreamReadUntilByte4readEv+0x38>
				return -1;
		}

		thereWereDataRead = true;

		for( unsigned char i = 0 ; stopBytes[i] != 0 ; i++ )
    7230:	49 89       	ldd	r20, Y+17	; 0x11
    7232:	5a 89       	ldd	r21, Y+18	; 0x12
    7234:	60 e0       	ldi	r22, 0x00	; 0
    7236:	0f c0       	rjmp	.+30     	; 0x7256 <_ZN19StreamReadUntilByte4readEv+0x56>
	{
		int readByte = mainStream->read();

		if( readByte == -1 )// break;
		{
			if( thereWereDataRead > 0 )
    7238:	11 23       	and	r17, r17
    723a:	01 f5       	brne	.+64     	; 0x727c <_ZN19StreamReadUntilByte4readEv+0x7c>
				return 0;
			else
				return -1;
    723c:	8f ef       	ldi	r24, 0xFF	; 255
    723e:	9f ef       	ldi	r25, 0xFF	; 255
    7240:	21 c0       	rjmp	.+66     	; 0x7284 <_ZN19StreamReadUntilByte4readEv+0x84>

		thereWereDataRead = true;

		for( unsigned char i = 0 ; stopBytes[i] != 0 ; i++ )
		{
			if( readByte == stopBytes[i] )
    7242:	99 27       	eor	r25, r25
    7244:	87 fd       	sbrc	r24, 7
    7246:	90 95       	com	r25
    7248:	28 17       	cp	r18, r24
    724a:	39 07       	cpc	r19, r25
    724c:	19 f4       	brne	.+6      	; 0x7254 <_ZN19StreamReadUntilByte4readEv+0x54>
			{
				foundByte = readByte;
    724e:	2c 8b       	std	Y+20, r18	; 0x14
				//break;
				return foundByte;
    7250:	82 2f       	mov	r24, r18
    7252:	17 c0       	rjmp	.+46     	; 0x7282 <_ZN19StreamReadUntilByte4readEv+0x82>
				return -1;
		}

		thereWereDataRead = true;

		for( unsigned char i = 0 ; stopBytes[i] != 0 ; i++ )
    7254:	6f 5f       	subi	r22, 0xFF	; 255
    7256:	fa 01       	movw	r30, r20
    7258:	e6 0f       	add	r30, r22
    725a:	f1 1d       	adc	r31, r1
    725c:	80 81       	ld	r24, Z
    725e:	88 23       	and	r24, r24
    7260:	81 f7       	brne	.-32     	; 0x7242 <_ZN19StreamReadUntilByte4readEv+0x42>
				//break;
				return foundByte;
			}
		}

		if( foundByte == 0 )
    7262:	8c 89       	ldd	r24, Y+20	; 0x14
    7264:	88 23       	and	r24, r24
    7266:	a9 f6       	brne	.-86     	; 0x7212 <_ZN19StreamReadUntilByte4readEv+0x12>
		{
			buffer[ alreadyReadLetterIndex ] = readByte;
    7268:	8b 89       	ldd	r24, Y+19	; 0x13
    726a:	ec 85       	ldd	r30, Y+12	; 0x0c
    726c:	fd 85       	ldd	r31, Y+13	; 0x0d
    726e:	e8 0f       	add	r30, r24
    7270:	f1 1d       	adc	r31, r1
    7272:	20 83       	st	Z, r18
			alreadyReadLetterIndex++;
    7274:	8b 89       	ldd	r24, Y+19	; 0x13
    7276:	8f 5f       	subi	r24, 0xFF	; 255
    7278:	8b 8b       	std	Y+19, r24	; 0x13
    727a:	cb cf       	rjmp	.-106    	; 0x7212 <_ZN19StreamReadUntilByte4readEv+0x12>
		int readByte = mainStream->read();

		if( readByte == -1 )// break;
		{
			if( thereWereDataRead > 0 )
				return 0;
    727c:	80 e0       	ldi	r24, 0x00	; 0
    727e:	90 e0       	ldi	r25, 0x00	; 0
    7280:	01 c0       	rjmp	.+2      	; 0x7284 <_ZN19StreamReadUntilByte4readEv+0x84>

// =================================================

int StreamReadUntilByte::read()
{
	if( foundByte != 0 ) return foundByte;
    7282:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
	{
		return 0;
	}*/
}
    7284:	df 91       	pop	r29
    7286:	cf 91       	pop	r28
    7288:	1f 91       	pop	r17
    728a:	08 95       	ret

0000728c <_ZN19StreamReadUntilByte9setStreamEP6Stream>:

// =================================================

void StreamReadUntilByte::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    728c:	fc 01       	movw	r30, r24
    728e:	77 87       	std	Z+15, r23	; 0x0f
    7290:	66 87       	std	Z+14, r22	; 0x0e
}
    7292:	08 95       	ret

00007294 <_ZN19StreamReadUntilByte18resetInternalStateEPc>:

// =================================================

void StreamReadUntilByte::resetInternalState( char* _stopBytes )
{
    7294:	fc 01       	movw	r30, r24
	stopBytes = _stopBytes;
    7296:	72 8b       	std	Z+18, r23	; 0x12
    7298:	61 8b       	std	Z+17, r22	; 0x11

	for( unsigned char i = 0 ; i < bufferSize ; i++ ) buffer[i] = 0;
    729a:	80 e0       	ldi	r24, 0x00	; 0
    729c:	06 c0       	rjmp	.+12     	; 0x72aa <_ZN19StreamReadUntilByte18resetInternalStateEPc+0x16>
    729e:	a4 85       	ldd	r26, Z+12	; 0x0c
    72a0:	b5 85       	ldd	r27, Z+13	; 0x0d
    72a2:	a8 0f       	add	r26, r24
    72a4:	b1 1d       	adc	r27, r1
    72a6:	1c 92       	st	X, r1
    72a8:	8f 5f       	subi	r24, 0xFF	; 255
    72aa:	90 89       	ldd	r25, Z+16	; 0x10
    72ac:	89 17       	cp	r24, r25
    72ae:	b8 f3       	brcs	.-18     	; 0x729e <_ZN19StreamReadUntilByte18resetInternalStateEPc+0xa>
	alreadyReadLetterIndex = 0;
    72b0:	13 8a       	std	Z+19, r1	; 0x13
	foundByte = 0;
    72b2:	14 8a       	std	Z+20, r1	; 0x14
}
    72b4:	08 95       	ret

000072b6 <_ZN19StreamReadUntilByteC1EPch>:

#include "StreamReadUntilByte.h"

// =================================================

StreamReadUntilByte::StreamReadUntilByte( char* _buffer , unsigned char _bufferSize )
    72b6:	fc 01       	movw	r30, r24
    72b8:	13 82       	std	Z+3, r1	; 0x03
    72ba:	12 82       	std	Z+2, r1	; 0x02
    72bc:	88 ee       	ldi	r24, 0xE8	; 232
    72be:	93 e0       	ldi	r25, 0x03	; 3
    72c0:	a0 e0       	ldi	r26, 0x00	; 0
    72c2:	b0 e0       	ldi	r27, 0x00	; 0
    72c4:	84 83       	std	Z+4, r24	; 0x04
    72c6:	95 83       	std	Z+5, r25	; 0x05
    72c8:	a6 83       	std	Z+6, r26	; 0x06
    72ca:	b7 83       	std	Z+7, r27	; 0x07
    72cc:	8b e8       	ldi	r24, 0x8B	; 139
    72ce:	9f e0       	ldi	r25, 0x0F	; 15
    72d0:	91 83       	std	Z+1, r25	; 0x01
    72d2:	80 83       	st	Z, r24
{
	buffer = _buffer;
    72d4:	75 87       	std	Z+13, r23	; 0x0d
    72d6:	64 87       	std	Z+12, r22	; 0x0c
	bufferSize = _bufferSize;
    72d8:	40 8b       	std	Z+16, r20	; 0x10

// =================================================

void StreamReadUntilByte::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    72da:	17 86       	std	Z+15, r1	; 0x0f
    72dc:	16 86       	std	Z+14, r1	; 0x0e
{
	buffer = _buffer;
	bufferSize = _bufferSize;

	setStream( NULL );
	resetInternalState( NULL );
    72de:	cf 01       	movw	r24, r30
    72e0:	60 e0       	ldi	r22, 0x00	; 0
    72e2:	70 e0       	ldi	r23, 0x00	; 0
    72e4:	0e 94 4a 39 	call	0x7294	; 0x7294 <_ZN19StreamReadUntilByte18resetInternalStateEPc>
}
    72e8:	08 95       	ret

000072ea <_ZN15StreamSkipBytes4peekEv>:

// =================================================

int StreamSkipBytes::peek()
{
	return mainStream->peek();
    72ea:	dc 01       	movw	r26, r24
    72ec:	1c 96       	adiw	r26, 0x0c	; 12
    72ee:	8d 91       	ld	r24, X+
    72f0:	9c 91       	ld	r25, X
    72f2:	1d 97       	sbiw	r26, 0x0d	; 13
    72f4:	dc 01       	movw	r26, r24
    72f6:	ed 91       	ld	r30, X+
    72f8:	fc 91       	ld	r31, X
    72fa:	00 84       	ldd	r0, Z+8	; 0x08
    72fc:	f1 85       	ldd	r31, Z+9	; 0x09
    72fe:	e0 2d       	mov	r30, r0
    7300:	19 95       	eicall
}
    7302:	08 95       	ret

00007304 <_ZN15StreamSkipBytes5flushEv>:

// =================================================

void StreamSkipBytes::flush()
{
	mainStream->flush();
    7304:	dc 01       	movw	r26, r24
    7306:	1c 96       	adiw	r26, 0x0c	; 12
    7308:	8d 91       	ld	r24, X+
    730a:	9c 91       	ld	r25, X
    730c:	1d 97       	sbiw	r26, 0x0d	; 13
    730e:	dc 01       	movw	r26, r24
    7310:	ed 91       	ld	r30, X+
    7312:	fc 91       	ld	r31, X
    7314:	02 84       	ldd	r0, Z+10	; 0x0a
    7316:	f3 85       	ldd	r31, Z+11	; 0x0b
    7318:	e0 2d       	mov	r30, r0
    731a:	19 95       	eicall
}
    731c:	08 95       	ret

0000731e <_ZN15StreamSkipBytes5writeEh>:

// =================================================

size_t StreamSkipBytes::write( uint8_t b )
{
	return mainStream->write( b );
    731e:	dc 01       	movw	r26, r24
    7320:	1c 96       	adiw	r26, 0x0c	; 12
    7322:	8d 91       	ld	r24, X+
    7324:	9c 91       	ld	r25, X
    7326:	1d 97       	sbiw	r26, 0x0d	; 13
    7328:	dc 01       	movw	r26, r24
    732a:	ed 91       	ld	r30, X+
    732c:	fc 91       	ld	r31, X
    732e:	01 90       	ld	r0, Z+
    7330:	f0 81       	ld	r31, Z
    7332:	e0 2d       	mov	r30, r0
    7334:	19 95       	eicall
}
    7336:	08 95       	ret

00007338 <_ZN15StreamSkipBytes9availableEv>:

// =================================================

int StreamSkipBytes::available()
{
	return mainStream->available();
    7338:	dc 01       	movw	r26, r24
    733a:	1c 96       	adiw	r26, 0x0c	; 12
    733c:	8d 91       	ld	r24, X+
    733e:	9c 91       	ld	r25, X
    7340:	1d 97       	sbiw	r26, 0x0d	; 13
    7342:	dc 01       	movw	r26, r24
    7344:	ed 91       	ld	r30, X+
    7346:	fc 91       	ld	r31, X
    7348:	04 80       	ldd	r0, Z+4	; 0x04
    734a:	f5 81       	ldd	r31, Z+5	; 0x05
    734c:	e0 2d       	mov	r30, r0
    734e:	19 95       	eicall
}
    7350:	08 95       	ret

00007352 <_ZN15StreamSkipBytes4readEv>:
}

// =================================================

int StreamSkipBytes::read()
{
    7352:	8f 92       	push	r8
    7354:	9f 92       	push	r9
    7356:	af 92       	push	r10
    7358:	bf 92       	push	r11
    735a:	cf 92       	push	r12
    735c:	df 92       	push	r13
    735e:	ff 92       	push	r15
    7360:	0f 93       	push	r16
    7362:	1f 93       	push	r17
    7364:	cf 93       	push	r28
    7366:	df 93       	push	r29
    7368:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "read";

	if( workAsByteCountSkipper )
    736a:	89 89       	ldd	r24, Y+17	; 0x11
    736c:	88 23       	and	r24, r24
    736e:	b9 f4       	brne	.+46     	; 0x739e <_ZN15StreamSkipBytes4readEv+0x4c>
    7370:	ff 24       	eor	r15, r15

			int peekByte = mainStream->peek();

			//p << "StreamSkipBytes::read():peekByte = " << (char)peekByte << ", alreadyMatchedBytesCount=" << alreadyMatchedBytesCount << endl;
			//info( wpln( "peekByte = %i, alreadyMatchedBytesCount = %u" , peekByte , alreadyMatchedBytesCount ) )
			iln( "peekByte = %c (%u), alreadyMatchedBytesCount = %u" , peekByte , peekByte , alreadyMatchedBytesCount )
    7372:	8e e0       	ldi	r24, 0x0E	; 14
    7374:	c8 2e       	mov	r12, r24
    7376:	d1 2c       	mov	r13, r1
    7378:	cc 0e       	add	r12, r28
    737a:	dd 1e       	adc	r13, r29
    737c:	9b ee       	ldi	r25, 0xEB	; 235
    737e:	a9 2e       	mov	r10, r25
    7380:	93 e1       	ldi	r25, 0x13	; 19
    7382:	b9 2e       	mov	r11, r25
    7384:	2e e8       	ldi	r18, 0x8E	; 142
    7386:	82 2e       	mov	r8, r18
    7388:	22 e1       	ldi	r18, 0x12	; 18
    738a:	92 2e       	mov	r9, r18
    738c:	3d c0       	rjmp	.+122    	; 0x7408 <_ZN15StreamSkipBytes4readEv+0xb6>

			//p << (char)readByte;

			if( readByte == -1 ) break;

			skippedBytesCount++;
    738e:	0f 5f       	subi	r16, 0xFF	; 255
    7390:	1f 4f       	sbci	r17, 0xFF	; 255

			skipBytesCount--;
    7392:	8a 89       	ldd	r24, Y+18	; 0x12
    7394:	9b 89       	ldd	r25, Y+19	; 0x13
    7396:	01 97       	sbiw	r24, 0x01	; 1
    7398:	9b 8b       	std	Y+19, r25	; 0x13
    739a:	8a 8b       	std	Y+18, r24	; 0x12
    739c:	02 c0       	rjmp	.+4      	; 0x73a2 <_ZN15StreamSkipBytes4readEv+0x50>

int StreamSkipBytes::read()
{
	static const PROGMEM prog_char functionName[] = "read";

	if( workAsByteCountSkipper )
    739e:	00 e0       	ldi	r16, 0x00	; 0
    73a0:	10 e0       	ldi	r17, 0x00	; 0
	{
		unsigned int skippedBytesCount = 0;

		while( skipBytesCount > 0 && mainStream->available() > 0 )
    73a2:	8a 89       	ldd	r24, Y+18	; 0x12
    73a4:	9b 89       	ldd	r25, Y+19	; 0x13
    73a6:	00 97       	sbiw	r24, 0x00	; 0
    73a8:	c9 f0       	breq	.+50     	; 0x73dc <_ZN15StreamSkipBytes4readEv+0x8a>
    73aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    73ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    73ae:	dc 01       	movw	r26, r24
    73b0:	ed 91       	ld	r30, X+
    73b2:	fc 91       	ld	r31, X
    73b4:	04 80       	ldd	r0, Z+4	; 0x04
    73b6:	f5 81       	ldd	r31, Z+5	; 0x05
    73b8:	e0 2d       	mov	r30, r0
    73ba:	19 95       	eicall
    73bc:	18 16       	cp	r1, r24
    73be:	19 06       	cpc	r1, r25
    73c0:	6c f4       	brge	.+26     	; 0x73dc <_ZN15StreamSkipBytes4readEv+0x8a>
		{
			int readByte = mainStream->read();
    73c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    73c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    73c6:	dc 01       	movw	r26, r24
    73c8:	ed 91       	ld	r30, X+
    73ca:	fc 91       	ld	r31, X
    73cc:	06 80       	ldd	r0, Z+6	; 0x06
    73ce:	f7 81       	ldd	r31, Z+7	; 0x07
    73d0:	e0 2d       	mov	r30, r0
    73d2:	19 95       	eicall

			//p << (char)readByte;

			if( readByte == -1 ) break;
    73d4:	bf ef       	ldi	r27, 0xFF	; 255
    73d6:	8f 3f       	cpi	r24, 0xFF	; 255
    73d8:	9b 07       	cpc	r25, r27
    73da:	c9 f6       	brne	.-78     	; 0x738e <_ZN15StreamSkipBytes4readEv+0x3c>
			skippedBytesCount++;

			skipBytesCount--;
		}

		if( skipBytesCount == 0 )
    73dc:	8a 89       	ldd	r24, Y+18	; 0x12
    73de:	9b 89       	ldd	r25, Y+19	; 0x13
    73e0:	00 97       	sbiw	r24, 0x00	; 0
    73e2:	09 f4       	brne	.+2      	; 0x73e6 <_ZN15StreamSkipBytes4readEv+0x94>
    73e4:	f8 c0       	rjmp	.+496    	; 0x75d6 <_ZN15StreamSkipBytes4readEv+0x284>
		{
			return 1;
		}
		else
		if( mainStream->available() == 0 )
    73e6:	8c 85       	ldd	r24, Y+12	; 0x0c
    73e8:	9d 85       	ldd	r25, Y+13	; 0x0d
    73ea:	dc 01       	movw	r26, r24
    73ec:	ed 91       	ld	r30, X+
    73ee:	fc 91       	ld	r31, X
    73f0:	04 80       	ldd	r0, Z+4	; 0x04
    73f2:	f5 81       	ldd	r31, Z+5	; 0x05
    73f4:	e0 2d       	mov	r30, r0
    73f6:	19 95       	eicall
    73f8:	00 97       	sbiw	r24, 0x00	; 0
    73fa:	09 f0       	breq	.+2      	; 0x73fe <_ZN15StreamSkipBytes4readEv+0xac>
    73fc:	e9 c0       	rjmp	.+466    	; 0x75d0 <_ZN15StreamSkipBytes4readEv+0x27e>
		{
			if( skippedBytesCount > 0 )
    73fe:	01 15       	cp	r16, r1
    7400:	11 05       	cpc	r17, r1
    7402:	09 f0       	breq	.+2      	; 0x7406 <_ZN15StreamSkipBytes4readEv+0xb4>
    7404:	e5 c0       	rjmp	.+458    	; 0x75d0 <_ZN15StreamSkipBytes4readEv+0x27e>
    7406:	e1 c0       	rjmp	.+450    	; 0x75ca <_ZN15StreamSkipBytes4readEv+0x278>
		bool thereWereDataRead = false;

		//while( mainStream->available() > 0 )
		while( true )
		{
			if( mainStream->available() == 0 )
    7408:	8c 85       	ldd	r24, Y+12	; 0x0c
    740a:	9d 85       	ldd	r25, Y+13	; 0x0d
    740c:	dc 01       	movw	r26, r24
    740e:	ed 91       	ld	r30, X+
    7410:	fc 91       	ld	r31, X
    7412:	04 80       	ldd	r0, Z+4	; 0x04
    7414:	f5 81       	ldd	r31, Z+5	; 0x05
    7416:	e0 2d       	mov	r30, r0
    7418:	19 95       	eicall
    741a:	00 97       	sbiw	r24, 0x00	; 0
    741c:	11 f5       	brne	.+68     	; 0x7462 <_ZN15StreamSkipBytes4readEv+0x110>
			{
				if( thereWereDataRead )
    741e:	ff 20       	and	r15, r15
    7420:	09 f4       	brne	.+2      	; 0x7424 <_ZN15StreamSkipBytes4readEv+0xd2>
    7422:	d3 c0       	rjmp	.+422    	; 0x75ca <_ZN15StreamSkipBytes4readEv+0x278>
				{
					//p << "StreamSkipBytes::read(): mainStream->available()==0, returning 0 (there were read and now there is no data in the stream)" << endl;
					//info( wpln( "mainStream->available()==0, returning 0 (there were read and now there is no data in the stream)" ) )
					iln( "mainStream->available()==0, returning 0 (there were read and now there is no data in the stream)" )
    7424:	88 89       	ldd	r24, Y+16	; 0x10
    7426:	85 31       	cpi	r24, 0x15	; 21
    7428:	08 f0       	brcs	.+2      	; 0x742c <_ZN15StreamSkipBytes4readEv+0xda>
    742a:	d2 c0       	rjmp	.+420    	; 0x75d0 <_ZN15StreamSkipBytes4readEv+0x27e>
    742c:	ce 01       	movw	r24, r28
    742e:	0e 96       	adiw	r24, 0x0e	; 14
    7430:	68 e8       	ldi	r22, 0x88	; 136
    7432:	72 e1       	ldi	r23, 0x12	; 18
    7434:	45 e8       	ldi	r20, 0x85	; 133
    7436:	53 e1       	ldi	r21, 0x13	; 19
    7438:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    743c:	0f 92       	push	r0
    743e:	0f 92       	push	r0
    7440:	8a e8       	ldi	r24, 0x8A	; 138
    7442:	93 e1       	ldi	r25, 0x13	; 19
    7444:	ed b7       	in	r30, 0x3d	; 61
    7446:	fe b7       	in	r31, 0x3e	; 62
    7448:	92 83       	std	Z+2, r25	; 0x02
    744a:	81 83       	std	Z+1, r24	; 0x01
    744c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7450:	8e e8       	ldi	r24, 0x8E	; 142
    7452:	92 e1       	ldi	r25, 0x12	; 18
    7454:	ad b7       	in	r26, 0x3d	; 61
    7456:	be b7       	in	r27, 0x3e	; 62
    7458:	12 96       	adiw	r26, 0x02	; 2
    745a:	9c 93       	st	X, r25
    745c:	8e 93       	st	-X, r24
    745e:	11 97       	sbiw	r26, 0x01	; 1
    7460:	5f c0       	rjmp	.+190    	; 0x7520 <_ZN15StreamSkipBytes4readEv+0x1ce>
					//p << "StreamSkipBytes::read():returning -1" << endl;
					return -1;
				}
			}

			int peekByte = mainStream->peek();
    7462:	8c 85       	ldd	r24, Y+12	; 0x0c
    7464:	9d 85       	ldd	r25, Y+13	; 0x0d
    7466:	dc 01       	movw	r26, r24
    7468:	ed 91       	ld	r30, X+
    746a:	fc 91       	ld	r31, X
    746c:	00 84       	ldd	r0, Z+8	; 0x08
    746e:	f1 85       	ldd	r31, Z+9	; 0x09
    7470:	e0 2d       	mov	r30, r0
    7472:	19 95       	eicall
    7474:	8c 01       	movw	r16, r24

			//p << "StreamSkipBytes::read():peekByte = " << (char)peekByte << ", alreadyMatchedBytesCount=" << alreadyMatchedBytesCount << endl;
			//info( wpln( "peekByte = %i, alreadyMatchedBytesCount = %u" , peekByte , alreadyMatchedBytesCount ) )
			iln( "peekByte = %c (%u), alreadyMatchedBytesCount = %u" , peekByte , peekByte , alreadyMatchedBytesCount )
    7476:	88 89       	ldd	r24, Y+16	; 0x10
    7478:	85 31       	cpi	r24, 0x15	; 21
    747a:	68 f5       	brcc	.+90     	; 0x74d6 <_ZN15StreamSkipBytes4readEv+0x184>
    747c:	c6 01       	movw	r24, r12
    747e:	68 e8       	ldi	r22, 0x88	; 136
    7480:	72 e1       	ldi	r23, 0x12	; 18
    7482:	45 e8       	ldi	r20, 0x85	; 133
    7484:	53 e1       	ldi	r21, 0x13	; 19
    7486:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    748a:	ed b7       	in	r30, 0x3d	; 61
    748c:	fe b7       	in	r31, 0x3e	; 62
    748e:	38 97       	sbiw	r30, 0x08	; 8
    7490:	0f b6       	in	r0, 0x3f	; 63
    7492:	f8 94       	cli
    7494:	fe bf       	out	0x3e, r31	; 62
    7496:	0f be       	out	0x3f, r0	; 63
    7498:	ed bf       	out	0x3d, r30	; 61
    749a:	31 96       	adiw	r30, 0x01	; 1
    749c:	ad b7       	in	r26, 0x3d	; 61
    749e:	be b7       	in	r27, 0x3e	; 62
    74a0:	12 96       	adiw	r26, 0x02	; 2
    74a2:	bc 92       	st	X, r11
    74a4:	ae 92       	st	-X, r10
    74a6:	11 97       	sbiw	r26, 0x01	; 1
    74a8:	13 83       	std	Z+3, r17	; 0x03
    74aa:	02 83       	std	Z+2, r16	; 0x02
    74ac:	15 83       	std	Z+5, r17	; 0x05
    74ae:	04 83       	std	Z+4, r16	; 0x04
    74b0:	8f 89       	ldd	r24, Y+23	; 0x17
    74b2:	86 83       	std	Z+6, r24	; 0x06
    74b4:	17 82       	std	Z+7, r1	; 0x07
    74b6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    74ba:	ed b7       	in	r30, 0x3d	; 61
    74bc:	fe b7       	in	r31, 0x3e	; 62
    74be:	36 96       	adiw	r30, 0x06	; 6
    74c0:	0f b6       	in	r0, 0x3f	; 63
    74c2:	f8 94       	cli
    74c4:	fe bf       	out	0x3e, r31	; 62
    74c6:	0f be       	out	0x3f, r0	; 63
    74c8:	ed bf       	out	0x3d, r30	; 61
    74ca:	92 82       	std	Z+2, r9	; 0x02
    74cc:	81 82       	std	Z+1, r8	; 0x01
    74ce:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    74d2:	0f 90       	pop	r0
    74d4:	0f 90       	pop	r0

			if( peekByte == -1 ) //break;
    74d6:	ff ef       	ldi	r31, 0xFF	; 255
    74d8:	0f 3f       	cpi	r16, 0xFF	; 255
    74da:	1f 07       	cpc	r17, r31
    74dc:	31 f5       	brne	.+76     	; 0x752a <_ZN15StreamSkipBytes4readEv+0x1d8>
			{
				//mainStream->read();

				if( thereWereDataRead )
    74de:	ff 20       	and	r15, r15
    74e0:	09 f4       	brne	.+2      	; 0x74e4 <_ZN15StreamSkipBytes4readEv+0x192>
    74e2:	73 c0       	rjmp	.+230    	; 0x75ca <_ZN15StreamSkipBytes4readEv+0x278>
				{
					//p << "StreamSkipBytes::read():peekByte == -1, returning 0 (there were read and now there is no data in the stream)" << endl;
					//info( wpln( "peekByte == -1, returning 0 (there were read and now there is no data in the stream)" ) )
					iln( "peekByte == -1, returning 0 (there were read and now there is no data in the stream)" )
    74e4:	88 89       	ldd	r24, Y+16	; 0x10
    74e6:	85 31       	cpi	r24, 0x15	; 21
    74e8:	08 f0       	brcs	.+2      	; 0x74ec <_ZN15StreamSkipBytes4readEv+0x19a>
    74ea:	72 c0       	rjmp	.+228    	; 0x75d0 <_ZN15StreamSkipBytes4readEv+0x27e>
    74ec:	ce 01       	movw	r24, r28
    74ee:	0e 96       	adiw	r24, 0x0e	; 14
    74f0:	68 e8       	ldi	r22, 0x88	; 136
    74f2:	72 e1       	ldi	r23, 0x12	; 18
    74f4:	45 e8       	ldi	r20, 0x85	; 133
    74f6:	53 e1       	ldi	r21, 0x13	; 19
    74f8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    74fc:	0f 92       	push	r0
    74fe:	0f 92       	push	r0
    7500:	8d e1       	ldi	r24, 0x1D	; 29
    7502:	94 e1       	ldi	r25, 0x14	; 20
    7504:	ad b7       	in	r26, 0x3d	; 61
    7506:	be b7       	in	r27, 0x3e	; 62
    7508:	12 96       	adiw	r26, 0x02	; 2
    750a:	9c 93       	st	X, r25
    750c:	8e 93       	st	-X, r24
    750e:	11 97       	sbiw	r26, 0x01	; 1
    7510:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7514:	8e e8       	ldi	r24, 0x8E	; 142
    7516:	92 e1       	ldi	r25, 0x12	; 18
    7518:	ed b7       	in	r30, 0x3d	; 61
    751a:	fe b7       	in	r31, 0x3e	; 62
    751c:	92 83       	std	Z+2, r25	; 0x02
    751e:	81 83       	std	Z+1, r24	; 0x01
    7520:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7524:	0f 90       	pop	r0
    7526:	0f 90       	pop	r0
    7528:	53 c0       	rjmp	.+166    	; 0x75d0 <_ZN15StreamSkipBytes4readEv+0x27e>
				}
			}

			thereWereDataRead = true;

			if( stopSequence[alreadyMatchedBytesCount] == peekByte )
    752a:	2d 89       	ldd	r18, Y+21	; 0x15
    752c:	3e 89       	ldd	r19, Y+22	; 0x16
    752e:	4f 89       	ldd	r20, Y+23	; 0x17
    7530:	f9 01       	movw	r30, r18
    7532:	e4 0f       	add	r30, r20
    7534:	f1 1d       	adc	r31, r1
    7536:	80 81       	ld	r24, Z
    7538:	99 27       	eor	r25, r25
    753a:	87 fd       	sbrc	r24, 7
    753c:	90 95       	com	r25
    753e:	80 17       	cp	r24, r16
    7540:	91 07       	cpc	r25, r17
    7542:	b1 f5       	brne	.+108    	; 0x75b0 <_ZN15StreamSkipBytes4readEv+0x25e>
			{
				alreadyMatchedBytesCount++;
    7544:	4f 5f       	subi	r20, 0xFF	; 255
    7546:	4f 8b       	std	Y+23, r20	; 0x17

				if( stopSequence[alreadyMatchedBytesCount] == 0 )
    7548:	f9 01       	movw	r30, r18
    754a:	e4 0f       	add	r30, r20
    754c:	f1 1d       	adc	r31, r1
    754e:	80 81       	ld	r24, Z
    7550:	88 23       	and	r24, r24
    7552:	79 f5       	brne	.+94     	; 0x75b2 <_ZN15StreamSkipBytes4readEv+0x260>
				{
					if( !leaveLastByteInStream ) mainStream->read();
    7554:	8c 89       	ldd	r24, Y+20	; 0x14
    7556:	88 23       	and	r24, r24
    7558:	49 f4       	brne	.+18     	; 0x756c <_ZN15StreamSkipBytes4readEv+0x21a>
    755a:	8c 85       	ldd	r24, Y+12	; 0x0c
    755c:	9d 85       	ldd	r25, Y+13	; 0x0d
    755e:	dc 01       	movw	r26, r24
    7560:	ed 91       	ld	r30, X+
    7562:	fc 91       	ld	r31, X
    7564:	06 80       	ldd	r0, Z+6	; 0x06
    7566:	f7 81       	ldd	r31, Z+7	; 0x07
    7568:	e0 2d       	mov	r30, r0
    756a:	19 95       	eicall

					//p << "StreamSkipBytes::read():returning 1" << endl;
					//info( wpln( "returning 1" ) )
					iln( "returning 1" )
    756c:	88 89       	ldd	r24, Y+16	; 0x10
    756e:	85 31       	cpi	r24, 0x15	; 21
    7570:	90 f5       	brcc	.+100    	; 0x75d6 <_ZN15StreamSkipBytes4readEv+0x284>
    7572:	ce 01       	movw	r24, r28
    7574:	0e 96       	adiw	r24, 0x0e	; 14
    7576:	68 e8       	ldi	r22, 0x88	; 136
    7578:	72 e1       	ldi	r23, 0x12	; 18
    757a:	45 e8       	ldi	r20, 0x85	; 133
    757c:	53 e1       	ldi	r21, 0x13	; 19
    757e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7582:	0f 92       	push	r0
    7584:	0f 92       	push	r0
    7586:	82 e7       	ldi	r24, 0x72	; 114
    7588:	94 e1       	ldi	r25, 0x14	; 20
    758a:	ed b7       	in	r30, 0x3d	; 61
    758c:	fe b7       	in	r31, 0x3e	; 62
    758e:	92 83       	std	Z+2, r25	; 0x02
    7590:	81 83       	std	Z+1, r24	; 0x01
    7592:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7596:	8e e8       	ldi	r24, 0x8E	; 142
    7598:	92 e1       	ldi	r25, 0x12	; 18
    759a:	ad b7       	in	r26, 0x3d	; 61
    759c:	be b7       	in	r27, 0x3e	; 62
    759e:	12 96       	adiw	r26, 0x02	; 2
    75a0:	9c 93       	st	X, r25
    75a2:	8e 93       	st	-X, r24
    75a4:	11 97       	sbiw	r26, 0x01	; 1
    75a6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    75aa:	0f 90       	pop	r0
    75ac:	0f 90       	pop	r0
    75ae:	13 c0       	rjmp	.+38     	; 0x75d6 <_ZN15StreamSkipBytes4readEv+0x284>
					return 1;
				}
			}
			else
			{
				alreadyMatchedBytesCount = 0;
    75b0:	1f 8a       	std	Y+23, r1	; 0x17
			}

			mainStream->read();
    75b2:	8c 85       	ldd	r24, Y+12	; 0x0c
    75b4:	9d 85       	ldd	r25, Y+13	; 0x0d
    75b6:	dc 01       	movw	r26, r24
    75b8:	ed 91       	ld	r30, X+
    75ba:	fc 91       	ld	r31, X
    75bc:	06 80       	ldd	r0, Z+6	; 0x06
    75be:	f7 81       	ldd	r31, Z+7	; 0x07
    75c0:	e0 2d       	mov	r30, r0
    75c2:	19 95       	eicall
					//p << "StreamSkipBytes::read():returning -1" << endl;
					return -1;
				}
			}

			thereWereDataRead = true;
    75c4:	ff 24       	eor	r15, r15
    75c6:	f3 94       	inc	r15
	else
	{
		bool thereWereDataRead = false;

		//while( mainStream->available() > 0 )
		while( true )
    75c8:	1f cf       	rjmp	.-450    	; 0x7408 <_ZN15StreamSkipBytes4readEv+0xb6>
					return 0;
				}
				else
				{
					//p << "StreamSkipBytes::read():returning -1" << endl;
					return -1;
    75ca:	8f ef       	ldi	r24, 0xFF	; 255
    75cc:	9f ef       	ldi	r25, 0xFF	; 255
    75ce:	05 c0       	rjmp	.+10     	; 0x75da <_ZN15StreamSkipBytes4readEv+0x288>
				{
					//p << "StreamSkipBytes::read():peekByte == -1, returning 0 (there were read and now there is no data in the stream)" << endl;
					//info( wpln( "peekByte == -1, returning 0 (there were read and now there is no data in the stream)" ) )
					iln( "peekByte == -1, returning 0 (there were read and now there is no data in the stream)" )

					return 0;
    75d0:	80 e0       	ldi	r24, 0x00	; 0
    75d2:	90 e0       	ldi	r25, 0x00	; 0
    75d4:	02 c0       	rjmp	.+4      	; 0x75da <_ZN15StreamSkipBytes4readEv+0x288>

					//p << "StreamSkipBytes::read():returning 1" << endl;
					//info( wpln( "returning 1" ) )
					iln( "returning 1" )

					return 1;
    75d6:	81 e0       	ldi	r24, 0x01	; 1
    75d8:	90 e0       	ldi	r25, 0x00	; 0
		{
			p << "StreamSkipBytes::read():returning 0" << endl;
			return 0;
		}*/
	}
}
    75da:	df 91       	pop	r29
    75dc:	cf 91       	pop	r28
    75de:	1f 91       	pop	r17
    75e0:	0f 91       	pop	r16
    75e2:	ff 90       	pop	r15
    75e4:	df 90       	pop	r13
    75e6:	cf 90       	pop	r12
    75e8:	bf 90       	pop	r11
    75ea:	af 90       	pop	r10
    75ec:	9f 90       	pop	r9
    75ee:	8f 90       	pop	r8
    75f0:	08 95       	ret

000075f2 <_ZN15StreamSkipBytesC1Ev>:

//const PROGMEM prog_char StreamSkipBytes::className[] = "StreamSkipBytes";

// =================================================

StreamSkipBytes::StreamSkipBytes(): dp( PSTR( "StreamSkipBytes" ) )//( Print& _p ) : p( _p )
    75f2:	cf 93       	push	r28
    75f4:	df 93       	push	r29
    75f6:	ec 01       	movw	r28, r24
    75f8:	1b 82       	std	Y+3, r1	; 0x03
    75fa:	1a 82       	std	Y+2, r1	; 0x02
    75fc:	88 ee       	ldi	r24, 0xE8	; 232
    75fe:	93 e0       	ldi	r25, 0x03	; 3
    7600:	a0 e0       	ldi	r26, 0x00	; 0
    7602:	b0 e0       	ldi	r27, 0x00	; 0
    7604:	8c 83       	std	Y+4, r24	; 0x04
    7606:	9d 83       	std	Y+5, r25	; 0x05
    7608:	ae 83       	std	Y+6, r26	; 0x06
    760a:	bf 83       	std	Y+7, r27	; 0x07
    760c:	8b e9       	ldi	r24, 0x9B	; 155
    760e:	9f e0       	ldi	r25, 0x0F	; 15
    7610:	99 83       	std	Y+1, r25	; 0x01
    7612:	88 83       	st	Y, r24
    7614:	ce 01       	movw	r24, r28
    7616:	0e 96       	adiw	r24, 0x0e	; 14
    7618:	65 e7       	ldi	r22, 0x75	; 117
    761a:	73 e1       	ldi	r23, 0x13	; 19
    761c:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>

// =================================================

void StreamSkipBytes::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    7620:	1d 86       	std	Y+13, r1	; 0x0d
    7622:	1c 86       	std	Y+12, r1	; 0x0c

// =================================================

void StreamSkipBytes::resetInternalState( unsigned int _skipBytesCount )
{
	skipBytesCount = _skipBytesCount;
    7624:	1b 8a       	std	Y+19, r1	; 0x13
    7626:	1a 8a       	std	Y+18, r1	; 0x12

	workAsByteCountSkipper = true;
    7628:	81 e0       	ldi	r24, 0x01	; 1
    762a:	89 8b       	std	Y+17, r24	; 0x11

StreamSkipBytes::StreamSkipBytes(): dp( PSTR( "StreamSkipBytes" ) )//( Print& _p ) : p( _p )
{
	setStream( NULL );
	resetInternalState( 0 );
}
    762c:	df 91       	pop	r29
    762e:	cf 91       	pop	r28
    7630:	08 95       	ret

00007632 <_ZN15StreamSkipBytes9setStreamEP6Stream>:

// =================================================

void StreamSkipBytes::setStream( Stream* _mainStream )
{
	mainStream = _mainStream;
    7632:	fc 01       	movw	r30, r24
    7634:	75 87       	std	Z+13, r23	; 0x0d
    7636:	64 87       	std	Z+12, r22	; 0x0c
}
    7638:	08 95       	ret

0000763a <_ZN15StreamSkipBytes18resetInternalStateEj>:

// =================================================

void StreamSkipBytes::resetInternalState( unsigned int _skipBytesCount )
{
    763a:	fc 01       	movw	r30, r24
	skipBytesCount = _skipBytesCount;
    763c:	73 8b       	std	Z+19, r23	; 0x13
    763e:	62 8b       	std	Z+18, r22	; 0x12

	workAsByteCountSkipper = true;
    7640:	81 e0       	ldi	r24, 0x01	; 1
    7642:	81 8b       	std	Z+17, r24	; 0x11
}
    7644:	08 95       	ret

00007646 <_ZN15StreamSkipBytes18resetInternalStateEPcb>:

// =================================================

void StreamSkipBytes::resetInternalState( char* _stopSequence , bool _leaveLastByteInStream )
{
    7646:	fc 01       	movw	r30, r24
	stopSequence = _stopSequence;
    7648:	76 8b       	std	Z+22, r23	; 0x16
    764a:	65 8b       	std	Z+21, r22	; 0x15
	alreadyMatchedBytesCount = 0;
    764c:	17 8a       	std	Z+23, r1	; 0x17
	leaveLastByteInStream = _leaveLastByteInStream;
    764e:	44 8b       	std	Z+20, r20	; 0x14

	workAsByteCountSkipper = false;
    7650:	11 8a       	std	Z+17, r1	; 0x11
}
    7652:	08 95       	ret

00007654 <_ZN15TimeMeasurement8saveTimeEv>:
#include "TimeMeasurement.h"

// =================================================

void TimeMeasurement::saveTime()
{
    7654:	cf 93       	push	r28
    7656:	df 93       	push	r29
    7658:	ec 01       	movw	r28, r24
	savedTime = millis();
    765a:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    765e:	dc 01       	movw	r26, r24
    7660:	cb 01       	movw	r24, r22
    7662:	88 83       	st	Y, r24
    7664:	99 83       	std	Y+1, r25	; 0x01
    7666:	aa 83       	std	Y+2, r26	; 0x02
    7668:	bb 83       	std	Y+3, r27	; 0x03
}
    766a:	df 91       	pop	r29
    766c:	cf 91       	pop	r28
    766e:	08 95       	ret

00007670 <_ZN15TimeMeasurement13getTimePeriodEv>:

// =================================================

unsigned long TimeMeasurement::getTimePeriod()
{
    7670:	0f 93       	push	r16
    7672:	1f 93       	push	r17
    7674:	cf 93       	push	r28
    7676:	df 93       	push	r29
    7678:	ec 01       	movw	r28, r24
	return millis() - savedTime;
    767a:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    767e:	8b 01       	movw	r16, r22
    7680:	9c 01       	movw	r18, r24
    7682:	88 81       	ld	r24, Y
    7684:	99 81       	ldd	r25, Y+1	; 0x01
    7686:	aa 81       	ldd	r26, Y+2	; 0x02
    7688:	bb 81       	ldd	r27, Y+3	; 0x03
    768a:	08 1b       	sub	r16, r24
    768c:	19 0b       	sbc	r17, r25
    768e:	2a 0b       	sbc	r18, r26
    7690:	3b 0b       	sbc	r19, r27
}
    7692:	b8 01       	movw	r22, r16
    7694:	c9 01       	movw	r24, r18
    7696:	df 91       	pop	r29
    7698:	cf 91       	pop	r28
    769a:	1f 91       	pop	r17
    769c:	0f 91       	pop	r16
    769e:	08 95       	ret

000076a0 <_ZN25BasicTaskManagerScheduler10canExecuteEv>:
// =================================================

bool BasicTaskManagerScheduler::canExecute()
{
	return canExecuteValue;
}
    76a0:	fc 01       	movw	r30, r24
    76a2:	82 81       	ldd	r24, Z+2	; 0x02
    76a4:	08 95       	ret

000076a6 <_ZN25BasicTaskManagerScheduler24canRemoveFromTaskManagerEv>:
// =================================================

bool BasicTaskManagerScheduler::canRemoveFromTaskManager()
{
	return canRemoveFromTaskManagerValue;
}
    76a6:	fc 01       	movw	r30, r24
    76a8:	83 81       	ldd	r24, Z+3	; 0x03
    76aa:	08 95       	ret

000076ac <_ZN25BasicTaskManagerSchedulerC1Ebb>:

#include "BasicTaskManagerScheduler.h"

// =================================================

BasicTaskManagerScheduler::BasicTaskManagerScheduler( bool _canExecute , bool _canRemoveFromTaskManager )
    76ac:	fc 01       	movw	r30, r24
    76ae:	8b ea       	ldi	r24, 0xAB	; 171
    76b0:	9f e0       	ldi	r25, 0x0F	; 15
    76b2:	91 83       	std	Z+1, r25	; 0x01
    76b4:	80 83       	st	Z, r24
{
	canExecuteValue = _canExecute;
    76b6:	62 83       	std	Z+2, r22	; 0x02
	canRemoveFromTaskManagerValue = _canRemoveFromTaskManager;
    76b8:	43 83       	std	Z+3, r20	; 0x03
}
    76ba:	08 95       	ret

000076bc <_ZN18SampleTaskRunnable3runEv>:
}

// =================================================

void SampleTaskRunnable::run()
{
    76bc:	cf 93       	push	r28
    76be:	df 93       	push	r29
    76c0:	ec 01       	movw	r28, r24

	//info( printf_P( PSTR( className ) ); printf_P( PSTR( "::" ) ); printf_P( PSTR( functionName ) ); printf_P( PSTR( "():" ) ); printf( str ); printf_P( PSTR( "\r\n" ) ); )

	if( dp.level <= DEBUG_LEVEL_INFO || CURRENT_DEBUG_LEVEL <= DEBUG_LEVEL_INFO  )
	{
		dp.preMacro( dp.debugLevelPrefixForINFO , functionName );
    76c2:	02 96       	adiw	r24, 0x02	; 2
    76c4:	68 e8       	ldi	r22, 0x88	; 136
    76c6:	72 e1       	ldi	r23, 0x12	; 18
    76c8:	41 e9       	ldi	r20, 0x91	; 145
    76ca:	54 e1       	ldi	r21, 0x14	; 20
    76cc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>

		//printf_P( dp.className );
		//printf_P( PSTR( "::" ) );
		//printf_P( functionName );
		//printf_P( PSTR( "():" ) );
		printf_P( str );
    76d0:	0f 92       	push	r0
    76d2:	0f 92       	push	r0
    76d4:	8d 81       	ldd	r24, Y+5	; 0x05
    76d6:	9e 81       	ldd	r25, Y+6	; 0x06
    76d8:	ed b7       	in	r30, 0x3d	; 61
    76da:	fe b7       	in	r31, 0x3e	; 62
    76dc:	92 83       	std	Z+2, r25	; 0x02
    76de:	81 83       	std	Z+1, r24	; 0x01
    76e0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
		//printf_P( PSTR( "\r\n" ) );

		printf_P( dp.newLine );
    76e4:	8e e8       	ldi	r24, 0x8E	; 142
    76e6:	92 e1       	ldi	r25, 0x12	; 18
    76e8:	ed b7       	in	r30, 0x3d	; 61
    76ea:	fe b7       	in	r31, 0x3e	; 62
    76ec:	92 83       	std	Z+2, r25	; 0x02
    76ee:	81 83       	std	Z+1, r24	; 0x01
    76f0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
	}

	delay( sleepInMs );
    76f4:	0f 90       	pop	r0
    76f6:	0f 90       	pop	r0
    76f8:	6f 81       	ldd	r22, Y+7	; 0x07
    76fa:	78 85       	ldd	r23, Y+8	; 0x08
    76fc:	80 e0       	ldi	r24, 0x00	; 0
    76fe:	90 e0       	ldi	r25, 0x00	; 0
    7700:	0e 94 e9 46 	call	0x8dd2	; 0x8dd2 <delay>
}
    7704:	df 91       	pop	r29
    7706:	cf 91       	pop	r28
    7708:	08 95       	ret

0000770a <_ZN18SampleTaskRunnableC1EPKct>:

//const PROGMEM prog_char SampleTaskRunnable::className[] = "SampleTaskRunnable";

// =================================================

SampleTaskRunnable::SampleTaskRunnable( const PROGMEM prog_char* _str , unsigned short _sleepInMs ) : dp( PSTR( "SampleTaskRunnable" ) )//: p(_p)
    770a:	ef 92       	push	r14
    770c:	ff 92       	push	r15
    770e:	0f 93       	push	r16
    7710:	1f 93       	push	r17
    7712:	cf 93       	push	r28
    7714:	df 93       	push	r29
    7716:	ec 01       	movw	r28, r24
    7718:	7b 01       	movw	r14, r22
    771a:	8a 01       	movw	r16, r20
    771c:	23 eb       	ldi	r18, 0xB3	; 179
    771e:	3f e0       	ldi	r19, 0x0F	; 15
    7720:	fc 01       	movw	r30, r24
    7722:	21 93       	st	Z+, r18
    7724:	31 93       	st	Z+, r19
    7726:	cf 01       	movw	r24, r30
    7728:	6e e7       	ldi	r22, 0x7E	; 126
    772a:	74 e1       	ldi	r23, 0x14	; 20
    772c:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	str =  _str;
    7730:	fe 82       	std	Y+6, r15	; 0x06
    7732:	ed 82       	std	Y+5, r14	; 0x05
	sleepInMs = _sleepInMs;
    7734:	18 87       	std	Y+8, r17	; 0x08
    7736:	0f 83       	std	Y+7, r16	; 0x07
}
    7738:	df 91       	pop	r29
    773a:	cf 91       	pop	r28
    773c:	1f 91       	pop	r17
    773e:	0f 91       	pop	r16
    7740:	ff 90       	pop	r15
    7742:	ef 90       	pop	r14
    7744:	08 95       	ret

00007746 <_ZN11TaskManagerD1Ev>:
	iln( "previous tasks count=%u, new tasks cound=%u" , prevCurrentTasksCount , currentTasksCount )
}

// =================================================

TaskManager::~TaskManager() {}
    7746:	29 eb       	ldi	r18, 0xB9	; 185
    7748:	3f e0       	ldi	r19, 0x0F	; 15
    774a:	fc 01       	movw	r30, r24
    774c:	31 83       	std	Z+1, r19	; 0x01
    774e:	20 83       	st	Z, r18
    7750:	08 95       	ret

00007752 <_ZN11TaskManagerD0Ev>:
    7752:	29 eb       	ldi	r18, 0xB9	; 185
    7754:	3f e0       	ldi	r19, 0x0F	; 15
    7756:	fc 01       	movw	r30, r24
    7758:	31 83       	std	Z+1, r19	; 0x01
    775a:	20 83       	st	Z, r18
    775c:	0e 94 60 46 	call	0x8cc0	; 0x8cc0 <_ZdlPv>
    7760:	08 95       	ret

00007762 <_ZN11TaskManagerC1EjPPK17TaskManagerRecord>:

//const PROGMEM prog_char TaskManager::className[] = "TaskManager";

// =================================================

TaskManager::TaskManager( unsigned int _maxTasksCount , const TaskManagerRecord** _tasksArray ) : dp( PSTR( "TaskManager" ) )// , Print& _p ) //: p( _p )
    7762:	ef 92       	push	r14
    7764:	ff 92       	push	r15
    7766:	0f 93       	push	r16
    7768:	1f 93       	push	r17
    776a:	cf 93       	push	r28
    776c:	df 93       	push	r29
    776e:	ec 01       	movw	r28, r24
    7770:	7b 01       	movw	r14, r22
    7772:	8a 01       	movw	r16, r20
    7774:	29 eb       	ldi	r18, 0xB9	; 185
    7776:	3f e0       	ldi	r19, 0x0F	; 15
    7778:	fc 01       	movw	r30, r24
    777a:	21 93       	st	Z+, r18
    777c:	31 93       	st	Z+, r19
    777e:	cf 01       	movw	r24, r30
    7780:	65 e9       	ldi	r22, 0x95	; 149
    7782:	74 e1       	ldi	r23, 0x14	; 20
    7784:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	maxTasksCount = _maxTasksCount;
    7788:	fe 82       	std	Y+6, r15	; 0x06
    778a:	ed 82       	std	Y+5, r14	; 0x05
	tasksArray = _tasksArray;
    778c:	1a 87       	std	Y+10, r17	; 0x0a
    778e:	09 87       	std	Y+9, r16	; 0x09

	currentTasksCount = 0;
    7790:	18 86       	std	Y+8, r1	; 0x08
    7792:	1f 82       	std	Y+7, r1	; 0x07
	executeFunction_executeRecompactTaskArray = 0;
    7794:	1d 86       	std	Y+13, r1	; 0x0d
}
    7796:	df 91       	pop	r29
    7798:	cf 91       	pop	r28
    779a:	1f 91       	pop	r17
    779c:	0f 91       	pop	r16
    779e:	ff 90       	pop	r15
    77a0:	ef 90       	pop	r14
    77a2:	08 95       	ret

000077a4 <_ZN11TaskManager3addEP17TaskManagerRecord>:

// =================================================

bool TaskManager::add( TaskManagerRecord* taskManagerRecord )
{
    77a4:	0f 93       	push	r16
    77a6:	1f 93       	push	r17
    77a8:	cf 93       	push	r28
    77aa:	df 93       	push	r29
    77ac:	ec 01       	movw	r28, r24
    77ae:	8b 01       	movw	r16, r22
	static const PROGMEM prog_char functionName[] = "add";
	//static const char prefix[] = "TaskManager:add():";

	if( taskManagerRecord == NULL || taskManagerRecord->runnable == NULL )
    77b0:	61 15       	cp	r22, r1
    77b2:	71 05       	cpc	r23, r1
    77b4:	39 f0       	breq	.+14     	; 0x77c4 <_ZN11TaskManager3addEP17TaskManagerRecord+0x20>
    77b6:	db 01       	movw	r26, r22
    77b8:	12 96       	adiw	r26, 0x02	; 2
    77ba:	8d 91       	ld	r24, X+
    77bc:	9c 91       	ld	r25, X
    77be:	13 97       	sbiw	r26, 0x03	; 3
    77c0:	00 97       	sbiw	r24, 0x00	; 0
    77c2:	f9 f4       	brne	.+62     	; 0x7802 <_ZN11TaskManager3addEP17TaskManagerRecord+0x5e>
	{
		//warning( p << prefix << "cannot add task because taskManagerRecord or taskManagerRecord->runnable is NULL " << endl; )
		//warning( wpln( "cannot add task because taskManagerRecord or taskManagerRecord->runnable is NULL" ) )
		wln( "cannot add task because taskManagerRecord or taskManagerRecord->runnable is NULL" )
    77c4:	8c 81       	ldd	r24, Y+4	; 0x04
    77c6:	8f 31       	cpi	r24, 0x1F	; 31
    77c8:	08 f0       	brcs	.+2      	; 0x77cc <_ZN11TaskManager3addEP17TaskManagerRecord+0x28>
    77ca:	8f c0       	rjmp	.+286    	; 0x78ea <_ZN11TaskManager3addEP17TaskManagerRecord+0x146>
    77cc:	ce 01       	movw	r24, r28
    77ce:	02 96       	adiw	r24, 0x02	; 2
    77d0:	65 e8       	ldi	r22, 0x85	; 133
    77d2:	72 e1       	ldi	r23, 0x12	; 18
    77d4:	41 ea       	ldi	r20, 0xA1	; 161
    77d6:	54 e1       	ldi	r21, 0x14	; 20
    77d8:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    77dc:	0f 92       	push	r0
    77de:	0f 92       	push	r0
    77e0:	85 ea       	ldi	r24, 0xA5	; 165
    77e2:	94 e1       	ldi	r25, 0x14	; 20
    77e4:	ed b7       	in	r30, 0x3d	; 61
    77e6:	fe b7       	in	r31, 0x3e	; 62
    77e8:	92 83       	std	Z+2, r25	; 0x02
    77ea:	81 83       	std	Z+1, r24	; 0x01
    77ec:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    77f0:	8e e8       	ldi	r24, 0x8E	; 142
    77f2:	92 e1       	ldi	r25, 0x12	; 18
    77f4:	ad b7       	in	r26, 0x3d	; 61
    77f6:	be b7       	in	r27, 0x3e	; 62
    77f8:	12 96       	adiw	r26, 0x02	; 2
    77fa:	9c 93       	st	X, r25
    77fc:	8e 93       	st	-X, r24
    77fe:	11 97       	sbiw	r26, 0x01	; 1
    7800:	32 c0       	rjmp	.+100    	; 0x7866 <_ZN11TaskManager3addEP17TaskManagerRecord+0xc2>

		return false;
	}
	else
	{
		if( currentTasksCount >= maxTasksCount )
    7802:	2f 81       	ldd	r18, Y+7	; 0x07
    7804:	38 85       	ldd	r19, Y+8	; 0x08
    7806:	8d 81       	ldd	r24, Y+5	; 0x05
    7808:	9e 81       	ldd	r25, Y+6	; 0x06
    780a:	4c 81       	ldd	r20, Y+4	; 0x04
    780c:	28 17       	cp	r18, r24
    780e:	39 07       	cpc	r19, r25
    7810:	78 f1       	brcs	.+94     	; 0x7870 <_ZN11TaskManager3addEP17TaskManagerRecord+0xcc>
		{
			//warning( p << prefix << "cannot add task, array is full, current tasks count " << currentTasksCount << ", taskManagerRecord* = " << (int)taskManagerRecord << endl; )
			//warning( wpln( "cannot add task, array is full, current tasks count  %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord ) )
			wln( "cannot add task, array is full, current tasks count  %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord )
    7812:	4f 31       	cpi	r20, 0x1F	; 31
    7814:	08 f0       	brcs	.+2      	; 0x7818 <_ZN11TaskManager3addEP17TaskManagerRecord+0x74>
    7816:	69 c0       	rjmp	.+210    	; 0x78ea <_ZN11TaskManager3addEP17TaskManagerRecord+0x146>
    7818:	ce 01       	movw	r24, r28
    781a:	02 96       	adiw	r24, 0x02	; 2
    781c:	65 e8       	ldi	r22, 0x85	; 133
    781e:	72 e1       	ldi	r23, 0x12	; 18
    7820:	41 ea       	ldi	r20, 0xA1	; 161
    7822:	54 e1       	ldi	r21, 0x14	; 20
    7824:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7828:	00 d0       	rcall	.+0      	; 0x782a <_ZN11TaskManager3addEP17TaskManagerRecord+0x86>
    782a:	00 d0       	rcall	.+0      	; 0x782c <_ZN11TaskManager3addEP17TaskManagerRecord+0x88>
    782c:	ed b7       	in	r30, 0x3d	; 61
    782e:	fe b7       	in	r31, 0x3e	; 62
    7830:	31 96       	adiw	r30, 0x01	; 1
    7832:	86 ef       	ldi	r24, 0xF6	; 246
    7834:	94 e1       	ldi	r25, 0x14	; 20
    7836:	ad b7       	in	r26, 0x3d	; 61
    7838:	be b7       	in	r27, 0x3e	; 62
    783a:	12 96       	adiw	r26, 0x02	; 2
    783c:	9c 93       	st	X, r25
    783e:	8e 93       	st	-X, r24
    7840:	11 97       	sbiw	r26, 0x01	; 1
    7842:	8f 81       	ldd	r24, Y+7	; 0x07
    7844:	98 85       	ldd	r25, Y+8	; 0x08
    7846:	93 83       	std	Z+3, r25	; 0x03
    7848:	82 83       	std	Z+2, r24	; 0x02
    784a:	15 83       	std	Z+5, r17	; 0x05
    784c:	04 83       	std	Z+4, r16	; 0x04
    784e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7852:	0f 90       	pop	r0
    7854:	0f 90       	pop	r0
    7856:	0f 90       	pop	r0
    7858:	0f 90       	pop	r0
    785a:	8e e8       	ldi	r24, 0x8E	; 142
    785c:	92 e1       	ldi	r25, 0x12	; 18
    785e:	ed b7       	in	r30, 0x3d	; 61
    7860:	fe b7       	in	r31, 0x3e	; 62
    7862:	92 83       	std	Z+2, r25	; 0x02
    7864:	81 83       	std	Z+1, r24	; 0x01
    7866:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    786a:	0f 90       	pop	r0
    786c:	0f 90       	pop	r0
    786e:	3d c0       	rjmp	.+122    	; 0x78ea <_ZN11TaskManager3addEP17TaskManagerRecord+0x146>
		}
		else
		{
			//info( p <<  prefix << "adding task under index " << currentTasksCount << ", taskManagerRecord* = " << (int)taskManagerRecord << endl; )
			//info( wpln( "adding task under index %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord ) )
			iln( "adding task under index %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord )
    7870:	45 31       	cpi	r20, 0x15	; 21
    7872:	58 f5       	brcc	.+86     	; 0x78ca <_ZN11TaskManager3addEP17TaskManagerRecord+0x126>
    7874:	ce 01       	movw	r24, r28
    7876:	02 96       	adiw	r24, 0x02	; 2
    7878:	68 e8       	ldi	r22, 0x88	; 136
    787a:	72 e1       	ldi	r23, 0x12	; 18
    787c:	41 ea       	ldi	r20, 0xA1	; 161
    787e:	54 e1       	ldi	r21, 0x14	; 20
    7880:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7884:	00 d0       	rcall	.+0      	; 0x7886 <_ZN11TaskManager3addEP17TaskManagerRecord+0xe2>
    7886:	00 d0       	rcall	.+0      	; 0x7888 <_ZN11TaskManager3addEP17TaskManagerRecord+0xe4>
    7888:	ed b7       	in	r30, 0x3d	; 61
    788a:	fe b7       	in	r31, 0x3e	; 62
    788c:	31 96       	adiw	r30, 0x01	; 1
    788e:	87 e4       	ldi	r24, 0x47	; 71
    7890:	95 e1       	ldi	r25, 0x15	; 21
    7892:	ad b7       	in	r26, 0x3d	; 61
    7894:	be b7       	in	r27, 0x3e	; 62
    7896:	12 96       	adiw	r26, 0x02	; 2
    7898:	9c 93       	st	X, r25
    789a:	8e 93       	st	-X, r24
    789c:	11 97       	sbiw	r26, 0x01	; 1
    789e:	8f 81       	ldd	r24, Y+7	; 0x07
    78a0:	98 85       	ldd	r25, Y+8	; 0x08
    78a2:	93 83       	std	Z+3, r25	; 0x03
    78a4:	82 83       	std	Z+2, r24	; 0x02
    78a6:	15 83       	std	Z+5, r17	; 0x05
    78a8:	04 83       	std	Z+4, r16	; 0x04
    78aa:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    78ae:	0f 90       	pop	r0
    78b0:	0f 90       	pop	r0
    78b2:	0f 90       	pop	r0
    78b4:	0f 90       	pop	r0
    78b6:	8e e8       	ldi	r24, 0x8E	; 142
    78b8:	92 e1       	ldi	r25, 0x12	; 18
    78ba:	ed b7       	in	r30, 0x3d	; 61
    78bc:	fe b7       	in	r31, 0x3e	; 62
    78be:	92 83       	std	Z+2, r25	; 0x02
    78c0:	81 83       	std	Z+1, r24	; 0x01
    78c2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    78c6:	0f 90       	pop	r0
    78c8:	0f 90       	pop	r0

			tasksArray[currentTasksCount] = taskManagerRecord;
    78ca:	8f 81       	ldd	r24, Y+7	; 0x07
    78cc:	98 85       	ldd	r25, Y+8	; 0x08
    78ce:	9c 01       	movw	r18, r24
    78d0:	22 0f       	add	r18, r18
    78d2:	33 1f       	adc	r19, r19
    78d4:	e9 85       	ldd	r30, Y+9	; 0x09
    78d6:	fa 85       	ldd	r31, Y+10	; 0x0a
    78d8:	e2 0f       	add	r30, r18
    78da:	f3 1f       	adc	r31, r19
    78dc:	11 83       	std	Z+1, r17	; 0x01
    78de:	00 83       	st	Z, r16

			currentTasksCount++;
    78e0:	01 96       	adiw	r24, 0x01	; 1
    78e2:	98 87       	std	Y+8, r25	; 0x08
    78e4:	8f 83       	std	Y+7, r24	; 0x07

			return true;
    78e6:	81 e0       	ldi	r24, 0x01	; 1
    78e8:	01 c0       	rjmp	.+2      	; 0x78ec <_ZN11TaskManager3addEP17TaskManagerRecord+0x148>
		{
			//warning( p << prefix << "cannot add task, array is full, current tasks count " << currentTasksCount << ", taskManagerRecord* = " << (int)taskManagerRecord << endl; )
			//warning( wpln( "cannot add task, array is full, current tasks count  %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord ) )
			wln( "cannot add task, array is full, current tasks count  %u, taskManagerRecord* = %u" , currentTasksCount , taskManagerRecord )

			return false;
    78ea:	80 e0       	ldi	r24, 0x00	; 0
			currentTasksCount++;

			return true;
		}
	}
}
    78ec:	df 91       	pop	r29
    78ee:	cf 91       	pop	r28
    78f0:	1f 91       	pop	r17
    78f2:	0f 91       	pop	r16
    78f4:	08 95       	ret

000078f6 <_ZN11TaskManager15printTasksArrayEv>:
}

// =================================================

void TaskManager::printTasksArray()
{
    78f6:	af 92       	push	r10
    78f8:	bf 92       	push	r11
    78fa:	cf 92       	push	r12
    78fc:	df 92       	push	r13
    78fe:	ef 92       	push	r14
    7900:	ff 92       	push	r15
    7902:	0f 93       	push	r16
    7904:	1f 93       	push	r17
    7906:	cf 93       	push	r28
    7908:	df 93       	push	r29
    790a:	ec 01       	movw	r28, r24
		wpln( "" )
	)*/

	//info( wp( "" ) )
	//info( wp( "" ) )
	i( "" )
    790c:	8c 81       	ldd	r24, Y+4	; 0x04
    790e:	85 31       	cpi	r24, 0x15	; 21
    7910:	a0 f4       	brcc	.+40     	; 0x793a <_ZN11TaskManager15printTasksArrayEv+0x44>
    7912:	ce 01       	movw	r24, r28
    7914:	02 96       	adiw	r24, 0x02	; 2
    7916:	68 e8       	ldi	r22, 0x88	; 136
    7918:	72 e1       	ldi	r23, 0x12	; 18
    791a:	4c e6       	ldi	r20, 0x6C	; 108
    791c:	57 e1       	ldi	r21, 0x17	; 23
    791e:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7922:	0f 92       	push	r0
    7924:	0f 92       	push	r0
    7926:	8c e7       	ldi	r24, 0x7C	; 124
    7928:	97 e1       	ldi	r25, 0x17	; 23
    792a:	ed b7       	in	r30, 0x3d	; 61
    792c:	fe b7       	in	r31, 0x3e	; 62
    792e:	92 83       	std	Z+2, r25	; 0x02
    7930:	81 83       	std	Z+1, r24	; 0x01
    7932:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7936:	0f 90       	pop	r0
    7938:	0f 90       	pop	r0
}

// =================================================

void TaskManager::printTasksArray()
{
    793a:	00 e0       	ldi	r16, 0x00	; 0
    793c:	10 e0       	ldi	r17, 0x00	; 0

	for( unsigned int i = 0 ; i < maxTasksCount ; i++ )
	{
		//info( p << " [" << i << "]=" << (int)tasksArray[i]; )
		//info( wp( "[%u]=%u" , i , tasksArray[i] ) )
		iln( "[%u]=%u" , i , tasksArray[i] )
    793e:	32 e0       	ldi	r19, 0x02	; 2
    7940:	e3 2e       	mov	r14, r19
    7942:	f1 2c       	mov	r15, r1
    7944:	ec 0e       	add	r14, r28
    7946:	fd 1e       	adc	r15, r29
    7948:	4d e7       	ldi	r20, 0x7D	; 125
    794a:	c4 2e       	mov	r12, r20
    794c:	47 e1       	ldi	r20, 0x17	; 23
    794e:	d4 2e       	mov	r13, r20
    7950:	5e e8       	ldi	r21, 0x8E	; 142
    7952:	a5 2e       	mov	r10, r21
    7954:	52 e1       	ldi	r21, 0x12	; 18
    7956:	b5 2e       	mov	r11, r21
    7958:	33 c0       	rjmp	.+102    	; 0x79c0 <_ZN11TaskManager15printTasksArrayEv+0xca>
    795a:	25 31       	cpi	r18, 0x15	; 21
    795c:	78 f5       	brcc	.+94     	; 0x79bc <_ZN11TaskManager15printTasksArrayEv+0xc6>
    795e:	c7 01       	movw	r24, r14
    7960:	68 e8       	ldi	r22, 0x88	; 136
    7962:	72 e1       	ldi	r23, 0x12	; 18
    7964:	4c e6       	ldi	r20, 0x6C	; 108
    7966:	57 e1       	ldi	r21, 0x17	; 23
    7968:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    796c:	00 d0       	rcall	.+0      	; 0x796e <_ZN11TaskManager15printTasksArrayEv+0x78>
    796e:	00 d0       	rcall	.+0      	; 0x7970 <_ZN11TaskManager15printTasksArrayEv+0x7a>
    7970:	ad b7       	in	r26, 0x3d	; 61
    7972:	be b7       	in	r27, 0x3e	; 62
    7974:	11 96       	adiw	r26, 0x01	; 1
    7976:	ed b7       	in	r30, 0x3d	; 61
    7978:	fe b7       	in	r31, 0x3e	; 62
    797a:	d2 82       	std	Z+2, r13	; 0x02
    797c:	c1 82       	std	Z+1, r12	; 0x01
    797e:	13 96       	adiw	r26, 0x03	; 3
    7980:	1c 93       	st	X, r17
    7982:	0e 93       	st	-X, r16
    7984:	12 97       	sbiw	r26, 0x02	; 2
    7986:	c8 01       	movw	r24, r16
    7988:	88 0f       	add	r24, r24
    798a:	99 1f       	adc	r25, r25
    798c:	e9 85       	ldd	r30, Y+9	; 0x09
    798e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7990:	e8 0f       	add	r30, r24
    7992:	f9 1f       	adc	r31, r25
    7994:	80 81       	ld	r24, Z
    7996:	91 81       	ldd	r25, Z+1	; 0x01
    7998:	15 96       	adiw	r26, 0x05	; 5
    799a:	9c 93       	st	X, r25
    799c:	8e 93       	st	-X, r24
    799e:	14 97       	sbiw	r26, 0x04	; 4
    79a0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    79a4:	0f 90       	pop	r0
    79a6:	0f 90       	pop	r0
    79a8:	0f 90       	pop	r0
    79aa:	0f 90       	pop	r0
    79ac:	ed b7       	in	r30, 0x3d	; 61
    79ae:	fe b7       	in	r31, 0x3e	; 62
    79b0:	b2 82       	std	Z+2, r11	; 0x02
    79b2:	a1 82       	std	Z+1, r10	; 0x01
    79b4:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    79b8:	0f 90       	pop	r0
    79ba:	0f 90       	pop	r0

	//info( wp( "" ) )
	//info( wp( "" ) )
	i( "" )

	for( unsigned int i = 0 ; i < maxTasksCount ; i++ )
    79bc:	0f 5f       	subi	r16, 0xFF	; 255
    79be:	1f 4f       	sbci	r17, 0xFF	; 255
    79c0:	8d 81       	ldd	r24, Y+5	; 0x05
    79c2:	9e 81       	ldd	r25, Y+6	; 0x06
    79c4:	2c 81       	ldd	r18, Y+4	; 0x04
    79c6:	08 17       	cp	r16, r24
    79c8:	19 07       	cpc	r17, r25
    79ca:	38 f2       	brcs	.-114    	; 0x795a <_ZN11TaskManager15printTasksArrayEv+0x64>
		iln( "[%u]=%u" , i , tasksArray[i] )
	}

	//info( p << endl; )
	//info( wpln( "" ) )
	iln( "" )
    79cc:	25 31       	cpi	r18, 0x15	; 21
    79ce:	e0 f4       	brcc	.+56     	; 0x7a08 <_ZN11TaskManager15printTasksArrayEv+0x112>
    79d0:	ce 01       	movw	r24, r28
    79d2:	02 96       	adiw	r24, 0x02	; 2
    79d4:	68 e8       	ldi	r22, 0x88	; 136
    79d6:	72 e1       	ldi	r23, 0x12	; 18
    79d8:	4c e6       	ldi	r20, 0x6C	; 108
    79da:	57 e1       	ldi	r21, 0x17	; 23
    79dc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    79e0:	0f 92       	push	r0
    79e2:	0f 92       	push	r0
    79e4:	85 e8       	ldi	r24, 0x85	; 133
    79e6:	97 e1       	ldi	r25, 0x17	; 23
    79e8:	ed b7       	in	r30, 0x3d	; 61
    79ea:	fe b7       	in	r31, 0x3e	; 62
    79ec:	92 83       	std	Z+2, r25	; 0x02
    79ee:	81 83       	std	Z+1, r24	; 0x01
    79f0:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    79f4:	8e e8       	ldi	r24, 0x8E	; 142
    79f6:	92 e1       	ldi	r25, 0x12	; 18
    79f8:	ed b7       	in	r30, 0x3d	; 61
    79fa:	fe b7       	in	r31, 0x3e	; 62
    79fc:	92 83       	std	Z+2, r25	; 0x02
    79fe:	81 83       	std	Z+1, r24	; 0x01
    7a00:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7a04:	0f 90       	pop	r0
    7a06:	0f 90       	pop	r0
	{
		info( p << " [" << i << "]=" << (int)tasksArray[i]; )
	}

	info( p << endl; )*/
}
    7a08:	df 91       	pop	r29
    7a0a:	cf 91       	pop	r28
    7a0c:	1f 91       	pop	r17
    7a0e:	0f 91       	pop	r16
    7a10:	ff 90       	pop	r15
    7a12:	ef 90       	pop	r14
    7a14:	df 90       	pop	r13
    7a16:	cf 90       	pop	r12
    7a18:	bf 90       	pop	r11
    7a1a:	af 90       	pop	r10
    7a1c:	08 95       	ret

00007a1e <_ZN11TaskManager18recompactTaskArrayEv>:

// =================================================

void TaskManager::recompactTaskArray()
{
    7a1e:	6f 92       	push	r6
    7a20:	7f 92       	push	r7
    7a22:	8f 92       	push	r8
    7a24:	9f 92       	push	r9
    7a26:	af 92       	push	r10
    7a28:	bf 92       	push	r11
    7a2a:	cf 92       	push	r12
    7a2c:	df 92       	push	r13
    7a2e:	ef 92       	push	r14
    7a30:	ff 92       	push	r15
    7a32:	0f 93       	push	r16
    7a34:	1f 93       	push	r17
    7a36:	cf 93       	push	r28
    7a38:	df 93       	push	r29
    7a3a:	cd b7       	in	r28, 0x3d	; 61
    7a3c:	de b7       	in	r29, 0x3e	; 62
    7a3e:	8c 01       	movw	r16, r24
	printTasksArray();

	//info( p << prefix << "previous tasks count=" << prevCurrentTasksCount << ", new=" << currentTasksCount << endl; )
	//info( wpln( "previous tasks count=%u, new tasks cound=%u" , prevCurrentTasksCount , currentTasksCount ) )
	iln( "previous tasks count=%u, new tasks cound=%u" , prevCurrentTasksCount , currentTasksCount )
}
    7a40:	8d b6       	in	r8, 0x3d	; 61
    7a42:	9e b6       	in	r9, 0x3e	; 62
	static const PROGMEM prog_char functionName[] = "recompactTaskArray";
	//static const char prefix[] = "TaskManager:recompactTaskArray():";

	//info( p << prefix << "recompacting taskArray" << endl; )
	//info( wpln( "recompacting taskArray" ) )
	iln( "recompacting taskArray" )
    7a44:	dc 01       	movw	r26, r24
    7a46:	14 96       	adiw	r26, 0x04	; 4
    7a48:	8c 91       	ld	r24, X
    7a4a:	14 97       	sbiw	r26, 0x04	; 4
    7a4c:	85 31       	cpi	r24, 0x15	; 21
    7a4e:	f0 f4       	brcc	.+60     	; 0x7a8c <_ZN11TaskManager18recompactTaskArrayEv+0x6e>
    7a50:	c8 01       	movw	r24, r16
    7a52:	02 96       	adiw	r24, 0x02	; 2
    7a54:	68 e8       	ldi	r22, 0x88	; 136
    7a56:	72 e1       	ldi	r23, 0x12	; 18
    7a58:	46 e8       	ldi	r20, 0x86	; 134
    7a5a:	57 e1       	ldi	r21, 0x17	; 23
    7a5c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7a60:	0f 92       	push	r0
    7a62:	0f 92       	push	r0
    7a64:	89 e9       	ldi	r24, 0x99	; 153
    7a66:	97 e1       	ldi	r25, 0x17	; 23
    7a68:	ed b7       	in	r30, 0x3d	; 61
    7a6a:	fe b7       	in	r31, 0x3e	; 62
    7a6c:	92 83       	std	Z+2, r25	; 0x02
    7a6e:	81 83       	std	Z+1, r24	; 0x01
    7a70:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7a74:	8e e8       	ldi	r24, 0x8E	; 142
    7a76:	92 e1       	ldi	r25, 0x12	; 18
    7a78:	ad b7       	in	r26, 0x3d	; 61
    7a7a:	be b7       	in	r27, 0x3e	; 62
    7a7c:	12 96       	adiw	r26, 0x02	; 2
    7a7e:	9c 93       	st	X, r25
    7a80:	8e 93       	st	-X, r24
    7a82:	11 97       	sbiw	r26, 0x01	; 1
    7a84:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7a88:	0f 90       	pop	r0
    7a8a:	0f 90       	pop	r0

	//info( p << prefix << "old taskArray:" << endl; )
	//info( wpln( "old taskArray:" ) )
	iln( "old taskArray:" )
    7a8c:	f8 01       	movw	r30, r16
    7a8e:	84 81       	ldd	r24, Z+4	; 0x04
    7a90:	85 31       	cpi	r24, 0x15	; 21
    7a92:	f0 f4       	brcc	.+60     	; 0x7ad0 <_ZN11TaskManager18recompactTaskArrayEv+0xb2>
    7a94:	c8 01       	movw	r24, r16
    7a96:	02 96       	adiw	r24, 0x02	; 2
    7a98:	68 e8       	ldi	r22, 0x88	; 136
    7a9a:	72 e1       	ldi	r23, 0x12	; 18
    7a9c:	46 e8       	ldi	r20, 0x86	; 134
    7a9e:	57 e1       	ldi	r21, 0x17	; 23
    7aa0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7aa4:	0f 92       	push	r0
    7aa6:	0f 92       	push	r0
    7aa8:	80 eb       	ldi	r24, 0xB0	; 176
    7aaa:	97 e1       	ldi	r25, 0x17	; 23
    7aac:	ad b7       	in	r26, 0x3d	; 61
    7aae:	be b7       	in	r27, 0x3e	; 62
    7ab0:	12 96       	adiw	r26, 0x02	; 2
    7ab2:	9c 93       	st	X, r25
    7ab4:	8e 93       	st	-X, r24
    7ab6:	11 97       	sbiw	r26, 0x01	; 1
    7ab8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7abc:	8e e8       	ldi	r24, 0x8E	; 142
    7abe:	92 e1       	ldi	r25, 0x12	; 18
    7ac0:	ed b7       	in	r30, 0x3d	; 61
    7ac2:	fe b7       	in	r31, 0x3e	; 62
    7ac4:	92 83       	std	Z+2, r25	; 0x02
    7ac6:	81 83       	std	Z+1, r24	; 0x01
    7ac8:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7acc:	0f 90       	pop	r0
    7ace:	0f 90       	pop	r0

	printTasksArray();
    7ad0:	c8 01       	movw	r24, r16
    7ad2:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <_ZN11TaskManager15printTasksArrayEv>

	const TaskManagerRecord* newTasksArray[maxTasksCount];
    7ad6:	d8 01       	movw	r26, r16
    7ad8:	15 96       	adiw	r26, 0x05	; 5
    7ada:	ed 90       	ld	r14, X+
    7adc:	fc 90       	ld	r15, X
    7ade:	16 97       	sbiw	r26, 0x06	; 6
    7ae0:	c7 01       	movw	r24, r14
    7ae2:	88 0f       	add	r24, r24
    7ae4:	99 1f       	adc	r25, r25
    7ae6:	ed b7       	in	r30, 0x3d	; 61
    7ae8:	fe b7       	in	r31, 0x3e	; 62
    7aea:	e8 1b       	sub	r30, r24
    7aec:	f9 0b       	sbc	r31, r25
    7aee:	0f b6       	in	r0, 0x3f	; 63
    7af0:	f8 94       	cli
    7af2:	fe bf       	out	0x3e, r31	; 62
    7af4:	0f be       	out	0x3f, r0	; 63
    7af6:	ed bf       	out	0x3d, r30	; 61
    7af8:	6d b6       	in	r6, 0x3d	; 61
    7afa:	7e b6       	in	r7, 0x3e	; 62
    7afc:	08 94       	sec
    7afe:	61 1c       	adc	r6, r1
    7b00:	71 1c       	adc	r7, r1

	int ii = 0;
	for( unsigned int i = 0 ; i < maxTasksCount ; i++ )
    7b02:	20 e0       	ldi	r18, 0x00	; 0
    7b04:	30 e0       	ldi	r19, 0x00	; 0

	printTasksArray();

	const TaskManagerRecord* newTasksArray[maxTasksCount];

	int ii = 0;
    7b06:	40 e0       	ldi	r20, 0x00	; 0
    7b08:	50 e0       	ldi	r21, 0x00	; 0
	for( unsigned int i = 0 ; i < maxTasksCount ; i++ )
    7b0a:	19 c0       	rjmp	.+50     	; 0x7b3e <_ZN11TaskManager18recompactTaskArrayEv+0x120>
	{
		if( tasksArray[ i ] != NULL )
    7b0c:	c9 01       	movw	r24, r18
    7b0e:	88 0f       	add	r24, r24
    7b10:	99 1f       	adc	r25, r25
    7b12:	d8 01       	movw	r26, r16
    7b14:	19 96       	adiw	r26, 0x09	; 9
    7b16:	ed 91       	ld	r30, X+
    7b18:	fc 91       	ld	r31, X
    7b1a:	1a 97       	sbiw	r26, 0x0a	; 10
    7b1c:	e8 0f       	add	r30, r24
    7b1e:	f9 1f       	adc	r31, r25
    7b20:	80 81       	ld	r24, Z
    7b22:	91 81       	ldd	r25, Z+1	; 0x01
    7b24:	00 97       	sbiw	r24, 0x00	; 0
    7b26:	49 f0       	breq	.+18     	; 0x7b3a <_ZN11TaskManager18recompactTaskArrayEv+0x11c>
		{
			newTasksArray[ ii ] = tasksArray[ i ];
    7b28:	fa 01       	movw	r30, r20
    7b2a:	ee 0f       	add	r30, r30
    7b2c:	ff 1f       	adc	r31, r31
    7b2e:	e6 0d       	add	r30, r6
    7b30:	f7 1d       	adc	r31, r7
    7b32:	91 83       	std	Z+1, r25	; 0x01
    7b34:	80 83       	st	Z, r24
			ii++;
    7b36:	4f 5f       	subi	r20, 0xFF	; 255
    7b38:	5f 4f       	sbci	r21, 0xFF	; 255
	printTasksArray();

	const TaskManagerRecord* newTasksArray[maxTasksCount];

	int ii = 0;
	for( unsigned int i = 0 ; i < maxTasksCount ; i++ )
    7b3a:	2f 5f       	subi	r18, 0xFF	; 255
    7b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    7b3e:	2e 15       	cp	r18, r14
    7b40:	3f 05       	cpc	r19, r15
    7b42:	21 f7       	brne	.-56     	; 0x7b0c <_ZN11TaskManager18recompactTaskArrayEv+0xee>
			newTasksArray[ ii ] = tasksArray[ i ];
			ii++;
		}
	}

	int prevCurrentTasksCount = currentTasksCount;
    7b44:	f8 01       	movw	r30, r16
    7b46:	a7 80       	ldd	r10, Z+7	; 0x07
    7b48:	b0 84       	ldd	r11, Z+8	; 0x08
	currentTasksCount = ii;
    7b4a:	ba 01       	movw	r22, r20
    7b4c:	50 87       	std	Z+8, r21	; 0x08
    7b4e:	47 83       	std	Z+7, r20	; 0x07

	for( unsigned int i = 0 ; i < currentTasksCount ; i++ ) tasksArray[ i ] = newTasksArray[ i ];
    7b50:	80 e0       	ldi	r24, 0x00	; 0
    7b52:	90 e0       	ldi	r25, 0x00	; 0
    7b54:	11 c0       	rjmp	.+34     	; 0x7b78 <_ZN11TaskManager18recompactTaskArrayEv+0x15a>
    7b56:	d3 01       	movw	r26, r6
    7b58:	cd 90       	ld	r12, X+
    7b5a:	dd 90       	ld	r13, X+
    7b5c:	3d 01       	movw	r6, r26
    7b5e:	9c 01       	movw	r18, r24
    7b60:	22 0f       	add	r18, r18
    7b62:	33 1f       	adc	r19, r19
    7b64:	d8 01       	movw	r26, r16
    7b66:	19 96       	adiw	r26, 0x09	; 9
    7b68:	ed 91       	ld	r30, X+
    7b6a:	fc 91       	ld	r31, X
    7b6c:	1a 97       	sbiw	r26, 0x0a	; 10
    7b6e:	e2 0f       	add	r30, r18
    7b70:	f3 1f       	adc	r31, r19
    7b72:	d1 82       	std	Z+1, r13	; 0x01
    7b74:	c0 82       	st	Z, r12
    7b76:	01 96       	adiw	r24, 0x01	; 1
    7b78:	84 17       	cp	r24, r20
    7b7a:	95 07       	cpc	r25, r21
    7b7c:	61 f7       	brne	.-40     	; 0x7b56 <_ZN11TaskManager18recompactTaskArrayEv+0x138>
    7b7e:	88 0f       	add	r24, r24
    7b80:	99 1f       	adc	r25, r25
    7b82:	0c c0       	rjmp	.+24     	; 0x7b9c <_ZN11TaskManager18recompactTaskArrayEv+0x17e>
	for( unsigned int i = currentTasksCount ; i < maxTasksCount ; i++ ) tasksArray[ i ] = NULL;
    7b84:	d8 01       	movw	r26, r16
    7b86:	19 96       	adiw	r26, 0x09	; 9
    7b88:	ed 91       	ld	r30, X+
    7b8a:	fc 91       	ld	r31, X
    7b8c:	1a 97       	sbiw	r26, 0x0a	; 10
    7b8e:	e8 0f       	add	r30, r24
    7b90:	f9 1f       	adc	r31, r25
    7b92:	11 82       	std	Z+1, r1	; 0x01
    7b94:	10 82       	st	Z, r1
    7b96:	6f 5f       	subi	r22, 0xFF	; 255
    7b98:	7f 4f       	sbci	r23, 0xFF	; 255
    7b9a:	02 96       	adiw	r24, 0x02	; 2
    7b9c:	6e 15       	cp	r22, r14
    7b9e:	7f 05       	cpc	r23, r15
    7ba0:	88 f3       	brcs	.-30     	; 0x7b84 <_ZN11TaskManager18recompactTaskArrayEv+0x166>

	//info( p << prefix << "new taskArray:" << endl; )
	//info( wpln( "new taskArray:" ) )
	iln( "new taskArray:" )
    7ba2:	f8 01       	movw	r30, r16
    7ba4:	84 81       	ldd	r24, Z+4	; 0x04
    7ba6:	85 31       	cpi	r24, 0x15	; 21
    7ba8:	f0 f4       	brcc	.+60     	; 0x7be6 <_ZN11TaskManager18recompactTaskArrayEv+0x1c8>
    7baa:	c8 01       	movw	r24, r16
    7bac:	02 96       	adiw	r24, 0x02	; 2
    7bae:	68 e8       	ldi	r22, 0x88	; 136
    7bb0:	72 e1       	ldi	r23, 0x12	; 18
    7bb2:	46 e8       	ldi	r20, 0x86	; 134
    7bb4:	57 e1       	ldi	r21, 0x17	; 23
    7bb6:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7bba:	0f 92       	push	r0
    7bbc:	0f 92       	push	r0
    7bbe:	8f eb       	ldi	r24, 0xBF	; 191
    7bc0:	97 e1       	ldi	r25, 0x17	; 23
    7bc2:	ad b7       	in	r26, 0x3d	; 61
    7bc4:	be b7       	in	r27, 0x3e	; 62
    7bc6:	12 96       	adiw	r26, 0x02	; 2
    7bc8:	9c 93       	st	X, r25
    7bca:	8e 93       	st	-X, r24
    7bcc:	11 97       	sbiw	r26, 0x01	; 1
    7bce:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7bd2:	8e e8       	ldi	r24, 0x8E	; 142
    7bd4:	92 e1       	ldi	r25, 0x12	; 18
    7bd6:	ed b7       	in	r30, 0x3d	; 61
    7bd8:	fe b7       	in	r31, 0x3e	; 62
    7bda:	92 83       	std	Z+2, r25	; 0x02
    7bdc:	81 83       	std	Z+1, r24	; 0x01
    7bde:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7be2:	0f 90       	pop	r0
    7be4:	0f 90       	pop	r0

	printTasksArray();
    7be6:	c8 01       	movw	r24, r16
    7be8:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <_ZN11TaskManager15printTasksArrayEv>

	//info( p << prefix << "previous tasks count=" << prevCurrentTasksCount << ", new=" << currentTasksCount << endl; )
	//info( wpln( "previous tasks count=%u, new tasks cound=%u" , prevCurrentTasksCount , currentTasksCount ) )
	iln( "previous tasks count=%u, new tasks cound=%u" , prevCurrentTasksCount , currentTasksCount )
    7bec:	d8 01       	movw	r26, r16
    7bee:	14 96       	adiw	r26, 0x04	; 4
    7bf0:	8c 91       	ld	r24, X
    7bf2:	14 97       	sbiw	r26, 0x04	; 4
    7bf4:	85 31       	cpi	r24, 0x15	; 21
    7bf6:	70 f5       	brcc	.+92     	; 0x7c54 <_ZN11TaskManager18recompactTaskArrayEv+0x236>
    7bf8:	c8 01       	movw	r24, r16
    7bfa:	02 96       	adiw	r24, 0x02	; 2
    7bfc:	68 e8       	ldi	r22, 0x88	; 136
    7bfe:	72 e1       	ldi	r23, 0x12	; 18
    7c00:	46 e8       	ldi	r20, 0x86	; 134
    7c02:	57 e1       	ldi	r21, 0x17	; 23
    7c04:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7c08:	00 d0       	rcall	.+0      	; 0x7c0a <_ZN11TaskManager18recompactTaskArrayEv+0x1ec>
    7c0a:	00 d0       	rcall	.+0      	; 0x7c0c <_ZN11TaskManager18recompactTaskArrayEv+0x1ee>
    7c0c:	ed b7       	in	r30, 0x3d	; 61
    7c0e:	fe b7       	in	r31, 0x3e	; 62
    7c10:	31 96       	adiw	r30, 0x01	; 1
    7c12:	8e ec       	ldi	r24, 0xCE	; 206
    7c14:	97 e1       	ldi	r25, 0x17	; 23
    7c16:	ad b7       	in	r26, 0x3d	; 61
    7c18:	be b7       	in	r27, 0x3e	; 62
    7c1a:	12 96       	adiw	r26, 0x02	; 2
    7c1c:	9c 93       	st	X, r25
    7c1e:	8e 93       	st	-X, r24
    7c20:	11 97       	sbiw	r26, 0x01	; 1
    7c22:	b3 82       	std	Z+3, r11	; 0x03
    7c24:	a2 82       	std	Z+2, r10	; 0x02
    7c26:	d8 01       	movw	r26, r16
    7c28:	17 96       	adiw	r26, 0x07	; 7
    7c2a:	8d 91       	ld	r24, X+
    7c2c:	9c 91       	ld	r25, X
    7c2e:	18 97       	sbiw	r26, 0x08	; 8
    7c30:	95 83       	std	Z+5, r25	; 0x05
    7c32:	84 83       	std	Z+4, r24	; 0x04
    7c34:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7c38:	0f 90       	pop	r0
    7c3a:	0f 90       	pop	r0
    7c3c:	0f 90       	pop	r0
    7c3e:	0f 90       	pop	r0
    7c40:	8e e8       	ldi	r24, 0x8E	; 142
    7c42:	92 e1       	ldi	r25, 0x12	; 18
    7c44:	ed b7       	in	r30, 0x3d	; 61
    7c46:	fe b7       	in	r31, 0x3e	; 62
    7c48:	92 83       	std	Z+2, r25	; 0x02
    7c4a:	81 83       	std	Z+1, r24	; 0x01
    7c4c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7c50:	0f 90       	pop	r0
    7c52:	0f 90       	pop	r0
}
    7c54:	0f b6       	in	r0, 0x3f	; 63
    7c56:	f8 94       	cli
    7c58:	9e be       	out	0x3e, r9	; 62
    7c5a:	0f be       	out	0x3f, r0	; 63
    7c5c:	8d be       	out	0x3d, r8	; 61
    7c5e:	df 91       	pop	r29
    7c60:	cf 91       	pop	r28
    7c62:	1f 91       	pop	r17
    7c64:	0f 91       	pop	r16
    7c66:	ff 90       	pop	r15
    7c68:	ef 90       	pop	r14
    7c6a:	df 90       	pop	r13
    7c6c:	cf 90       	pop	r12
    7c6e:	bf 90       	pop	r11
    7c70:	af 90       	pop	r10
    7c72:	9f 90       	pop	r9
    7c74:	8f 90       	pop	r8
    7c76:	7f 90       	pop	r7
    7c78:	6f 90       	pop	r6
    7c7a:	08 95       	ret

00007c7c <_ZN11TaskManager7executeEv>:
// =================================================

//const char TaskManager::executeFunctionPrefix[] = "TaskManager:execute():";

void TaskManager::execute()
{
    7c7c:	2f 92       	push	r2
    7c7e:	3f 92       	push	r3
    7c80:	4f 92       	push	r4
    7c82:	5f 92       	push	r5
    7c84:	6f 92       	push	r6
    7c86:	7f 92       	push	r7
    7c88:	8f 92       	push	r8
    7c8a:	9f 92       	push	r9
    7c8c:	bf 92       	push	r11
    7c8e:	cf 92       	push	r12
    7c90:	df 92       	push	r13
    7c92:	ef 92       	push	r14
    7c94:	ff 92       	push	r15
    7c96:	0f 93       	push	r16
    7c98:	1f 93       	push	r17
    7c9a:	cf 93       	push	r28
    7c9c:	df 93       	push	r29
    7c9e:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "execute";

	for( executeFunction_forLoopCounter = 0 ; executeFunction_forLoopCounter < currentTasksCount ; executeFunction_forLoopCounter++ )
    7ca0:	1c 86       	std	Y+12, r1	; 0x0c
    7ca2:	1b 86       	std	Y+11, r1	; 0x0b
		{
			//warning( p << executeFunctionPrefix << "cannot execute task with index " << executeFunction_forLoopCounter << " in tasksArray, task is null" << endl; )
			//warning( wpln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter ) )
			wln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter )

			executeFunction_executeRecompactTaskArray = true;
    7ca4:	bb 24       	eor	r11, r11
    7ca6:	b3 94       	inc	r11
		}
		else
		{
			//warning( p << executeFunctionPrefix << "cannot execute task with index " << executeFunction_forLoopCounter << " in tasksArray, task is null" << endl; )
			//warning( wpln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter ) )
			wln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter )
    7ca8:	62 e0       	ldi	r22, 0x02	; 2
    7caa:	e6 2e       	mov	r14, r22
    7cac:	f1 2c       	mov	r15, r1
    7cae:	e8 0e       	add	r14, r24
    7cb0:	f9 1e       	adc	r15, r25
    7cb2:	7e e2       	ldi	r23, 0x2E	; 46
    7cb4:	87 2e       	mov	r8, r23
    7cb6:	77 e1       	ldi	r23, 0x17	; 23
    7cb8:	97 2e       	mov	r9, r23
    7cba:	ee e8       	ldi	r30, 0x8E	; 142
    7cbc:	ce 2e       	mov	r12, r30
    7cbe:	e2 e1       	ldi	r30, 0x12	; 18
    7cc0:	de 2e       	mov	r13, r30
				if( executeFunction_forLoopCounter == currentTasksCount-1 )
				{
					currentTasksCount--;
					//all( p << executeFunctionPrefix << "task under index " << executeFunction_forLoopCounter << " was removed, currentTasksCount was decreased to " << currentTasksCount << endl; )
					//all( wpln( "task under index %u was removed, currentTasksCount was decreased to %u" , executeFunction_forLoopCounter , currentTasksCount ) )
					aln( "task under index %u was removed, currentTasksCount was decreased to %u" , executeFunction_forLoopCounter , currentTasksCount )
    7cc2:	f7 ee       	ldi	r31, 0xE7	; 231
    7cc4:	6f 2e       	mov	r6, r31
    7cc6:	f6 e1       	ldi	r31, 0x16	; 22
    7cc8:	7f 2e       	mov	r7, r31
			{
				//p << "### executeFunction_forLoopCounter=" << executeFunction_forLoopCounter << ", currentTasksCount=" << currentTasksCount << ", ptr*=" << (int)taskManagerRecord << endl;

				//info( p << executeFunctionPrefix << "task under index " << executeFunction_forLoopCounter << " wanted to be removed from TaskManager (ptr*=" << (int)taskManagerRecord << "), will be removed" << endl; )
				//info( wpln( "task under index %u wanted to be removed from TaskManager (ptr*=%u), will be removed" , executeFunction_forLoopCounter , taskManagerRecord ) )
				iln( "task under index %u wanted to be removed from TaskManager (ptr*=%u), will be removed" , executeFunction_forLoopCounter , taskManagerRecord )
    7cca:	a2 e9       	ldi	r26, 0x92	; 146
    7ccc:	4a 2e       	mov	r4, r26
    7cce:	a6 e1       	ldi	r26, 0x16	; 22
    7cd0:	5a 2e       	mov	r5, r26

		if( taskManagerRecord != NULL )
		{
			//all( p << executeFunctionPrefix << "executing task under index " << executeFunction_forLoopCounter << ", taskManagerRecord* = " << (int)taskManagerRecord << ", currentTasksCount = " << currentTasksCount << endl; )
			//all( wpln( "executing task under index %u, taskManagerRecord* = %u, currentTasksCount = %u" , executeFunction_forLoopCounter , taskManagerRecord , currentTasksCount ) )
			aln( "executing task under index %u, taskManagerRecord* = %u, currentTasksCount = %u" , executeFunction_forLoopCounter , taskManagerRecord , currentTasksCount )
    7cd2:	b3 e4       	ldi	r27, 0x43	; 67
    7cd4:	2b 2e       	mov	r2, r27
    7cd6:	b6 e1       	ldi	r27, 0x16	; 22
    7cd8:	3b 2e       	mov	r3, r27

void TaskManager::execute()
{
	static const PROGMEM prog_char functionName[] = "execute";

	for( executeFunction_forLoopCounter = 0 ; executeFunction_forLoopCounter < currentTasksCount ; executeFunction_forLoopCounter++ )
    7cda:	fd c0       	rjmp	.+506    	; 0x7ed6 <_ZN11TaskManager7executeEv+0x25a>
	{
		const TaskManagerRecord* taskManagerRecord = tasksArray[ executeFunction_forLoopCounter ];
    7cdc:	88 0f       	add	r24, r24
    7cde:	99 1f       	adc	r25, r25
    7ce0:	e9 85       	ldd	r30, Y+9	; 0x09
    7ce2:	fa 85       	ldd	r31, Y+10	; 0x0a
    7ce4:	e8 0f       	add	r30, r24
    7ce6:	f9 1f       	adc	r31, r25
    7ce8:	00 81       	ld	r16, Z
    7cea:	11 81       	ldd	r17, Z+1	; 0x01
    7cec:	8c 81       	ldd	r24, Y+4	; 0x04

		if( taskManagerRecord != NULL )
    7cee:	01 15       	cp	r16, r1
    7cf0:	11 05       	cpc	r17, r1
    7cf2:	09 f4       	brne	.+2      	; 0x7cf6 <_ZN11TaskManager7executeEv+0x7a>
    7cf4:	c7 c0       	rjmp	.+398    	; 0x7e84 <_ZN11TaskManager7executeEv+0x208>
		{
			//all( p << executeFunctionPrefix << "executing task under index " << executeFunction_forLoopCounter << ", taskManagerRecord* = " << (int)taskManagerRecord << ", currentTasksCount = " << currentTasksCount << endl; )
			//all( wpln( "executing task under index %u, taskManagerRecord* = %u, currentTasksCount = %u" , executeFunction_forLoopCounter , taskManagerRecord , currentTasksCount ) )
			aln( "executing task under index %u, taskManagerRecord* = %u, currentTasksCount = %u" , executeFunction_forLoopCounter , taskManagerRecord , currentTasksCount )
    7cf6:	8b 30       	cpi	r24, 0x0B	; 11
    7cf8:	90 f5       	brcc	.+100    	; 0x7d5e <_ZN11TaskManager7executeEv+0xe2>
    7cfa:	c7 01       	movw	r24, r14
    7cfc:	6b e8       	ldi	r22, 0x8B	; 139
    7cfe:	72 e1       	ldi	r23, 0x12	; 18
    7d00:	4b e3       	ldi	r20, 0x3B	; 59
    7d02:	56 e1       	ldi	r21, 0x16	; 22
    7d04:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7d08:	8d b7       	in	r24, 0x3d	; 61
    7d0a:	9e b7       	in	r25, 0x3e	; 62
    7d0c:	08 97       	sbiw	r24, 0x08	; 8
    7d0e:	0f b6       	in	r0, 0x3f	; 63
    7d10:	f8 94       	cli
    7d12:	9e bf       	out	0x3e, r25	; 62
    7d14:	0f be       	out	0x3f, r0	; 63
    7d16:	8d bf       	out	0x3d, r24	; 61
    7d18:	ed b7       	in	r30, 0x3d	; 61
    7d1a:	fe b7       	in	r31, 0x3e	; 62
    7d1c:	31 96       	adiw	r30, 0x01	; 1
    7d1e:	ad b7       	in	r26, 0x3d	; 61
    7d20:	be b7       	in	r27, 0x3e	; 62
    7d22:	12 96       	adiw	r26, 0x02	; 2
    7d24:	3c 92       	st	X, r3
    7d26:	2e 92       	st	-X, r2
    7d28:	11 97       	sbiw	r26, 0x01	; 1
    7d2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    7d2c:	9c 85       	ldd	r25, Y+12	; 0x0c
    7d2e:	93 83       	std	Z+3, r25	; 0x03
    7d30:	82 83       	std	Z+2, r24	; 0x02
    7d32:	15 83       	std	Z+5, r17	; 0x05
    7d34:	04 83       	std	Z+4, r16	; 0x04
    7d36:	8f 81       	ldd	r24, Y+7	; 0x07
    7d38:	98 85       	ldd	r25, Y+8	; 0x08
    7d3a:	97 83       	std	Z+7, r25	; 0x07
    7d3c:	86 83       	std	Z+6, r24	; 0x06
    7d3e:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7d42:	ed b7       	in	r30, 0x3d	; 61
    7d44:	fe b7       	in	r31, 0x3e	; 62
    7d46:	36 96       	adiw	r30, 0x06	; 6
    7d48:	0f b6       	in	r0, 0x3f	; 63
    7d4a:	f8 94       	cli
    7d4c:	fe bf       	out	0x3e, r31	; 62
    7d4e:	0f be       	out	0x3f, r0	; 63
    7d50:	ed bf       	out	0x3d, r30	; 61
    7d52:	d2 82       	std	Z+2, r13	; 0x02
    7d54:	c1 82       	std	Z+1, r12	; 0x01
    7d56:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7d5a:	0f 90       	pop	r0
    7d5c:	0f 90       	pop	r0

			if( taskManagerRecord->scheduler == NULL || taskManagerRecord->scheduler->canExecute() ) taskManagerRecord->runnable->run();
    7d5e:	d8 01       	movw	r26, r16
    7d60:	8d 91       	ld	r24, X+
    7d62:	9c 91       	ld	r25, X
    7d64:	11 97       	sbiw	r26, 0x01	; 1
    7d66:	00 97       	sbiw	r24, 0x00	; 0
    7d68:	49 f0       	breq	.+18     	; 0x7d7c <_ZN11TaskManager7executeEv+0x100>
    7d6a:	dc 01       	movw	r26, r24
    7d6c:	ed 91       	ld	r30, X+
    7d6e:	fc 91       	ld	r31, X
    7d70:	01 90       	ld	r0, Z+
    7d72:	f0 81       	ld	r31, Z
    7d74:	e0 2d       	mov	r30, r0
    7d76:	19 95       	eicall
    7d78:	88 23       	and	r24, r24
    7d7a:	51 f0       	breq	.+20     	; 0x7d90 <_ZN11TaskManager7executeEv+0x114>
    7d7c:	f8 01       	movw	r30, r16
    7d7e:	82 81       	ldd	r24, Z+2	; 0x02
    7d80:	93 81       	ldd	r25, Z+3	; 0x03
    7d82:	dc 01       	movw	r26, r24
    7d84:	ed 91       	ld	r30, X+
    7d86:	fc 91       	ld	r31, X
    7d88:	01 90       	ld	r0, Z+
    7d8a:	f0 81       	ld	r31, Z
    7d8c:	e0 2d       	mov	r30, r0
    7d8e:	19 95       	eicall

			if( taskManagerRecord->scheduler != NULL && taskManagerRecord->scheduler->canRemoveFromTaskManager() )
    7d90:	f8 01       	movw	r30, r16
    7d92:	80 81       	ld	r24, Z
    7d94:	91 81       	ldd	r25, Z+1	; 0x01
    7d96:	00 97       	sbiw	r24, 0x00	; 0
    7d98:	09 f4       	brne	.+2      	; 0x7d9c <_ZN11TaskManager7executeEv+0x120>
    7d9a:	98 c0       	rjmp	.+304    	; 0x7ecc <_ZN11TaskManager7executeEv+0x250>
    7d9c:	dc 01       	movw	r26, r24
    7d9e:	ed 91       	ld	r30, X+
    7da0:	fc 91       	ld	r31, X
    7da2:	02 80       	ldd	r0, Z+2	; 0x02
    7da4:	f3 81       	ldd	r31, Z+3	; 0x03
    7da6:	e0 2d       	mov	r30, r0
    7da8:	19 95       	eicall
    7daa:	88 23       	and	r24, r24
    7dac:	09 f4       	brne	.+2      	; 0x7db0 <_ZN11TaskManager7executeEv+0x134>
    7dae:	8e c0       	rjmp	.+284    	; 0x7ecc <_ZN11TaskManager7executeEv+0x250>
			{
				//p << "### executeFunction_forLoopCounter=" << executeFunction_forLoopCounter << ", currentTasksCount=" << currentTasksCount << ", ptr*=" << (int)taskManagerRecord << endl;

				//info( p << executeFunctionPrefix << "task under index " << executeFunction_forLoopCounter << " wanted to be removed from TaskManager (ptr*=" << (int)taskManagerRecord << "), will be removed" << endl; )
				//info( wpln( "task under index %u wanted to be removed from TaskManager (ptr*=%u), will be removed" , executeFunction_forLoopCounter , taskManagerRecord ) )
				iln( "task under index %u wanted to be removed from TaskManager (ptr*=%u), will be removed" , executeFunction_forLoopCounter , taskManagerRecord )
    7db0:	8c 81       	ldd	r24, Y+4	; 0x04
    7db2:	85 31       	cpi	r24, 0x15	; 21
    7db4:	30 f5       	brcc	.+76     	; 0x7e02 <_ZN11TaskManager7executeEv+0x186>
    7db6:	c7 01       	movw	r24, r14
    7db8:	68 e8       	ldi	r22, 0x88	; 136
    7dba:	72 e1       	ldi	r23, 0x12	; 18
    7dbc:	4b e3       	ldi	r20, 0x3B	; 59
    7dbe:	56 e1       	ldi	r21, 0x16	; 22
    7dc0:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7dc4:	00 d0       	rcall	.+0      	; 0x7dc6 <_ZN11TaskManager7executeEv+0x14a>
    7dc6:	00 d0       	rcall	.+0      	; 0x7dc8 <_ZN11TaskManager7executeEv+0x14c>
    7dc8:	ed b7       	in	r30, 0x3d	; 61
    7dca:	fe b7       	in	r31, 0x3e	; 62
    7dcc:	31 96       	adiw	r30, 0x01	; 1
    7dce:	ad b7       	in	r26, 0x3d	; 61
    7dd0:	be b7       	in	r27, 0x3e	; 62
    7dd2:	12 96       	adiw	r26, 0x02	; 2
    7dd4:	5c 92       	st	X, r5
    7dd6:	4e 92       	st	-X, r4
    7dd8:	11 97       	sbiw	r26, 0x01	; 1
    7dda:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ddc:	9c 85       	ldd	r25, Y+12	; 0x0c
    7dde:	93 83       	std	Z+3, r25	; 0x03
    7de0:	82 83       	std	Z+2, r24	; 0x02
    7de2:	15 83       	std	Z+5, r17	; 0x05
    7de4:	04 83       	std	Z+4, r16	; 0x04
    7de6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7dea:	0f 90       	pop	r0
    7dec:	0f 90       	pop	r0
    7dee:	0f 90       	pop	r0
    7df0:	0f 90       	pop	r0
    7df2:	ed b7       	in	r30, 0x3d	; 61
    7df4:	fe b7       	in	r31, 0x3e	; 62
    7df6:	d2 82       	std	Z+2, r13	; 0x02
    7df8:	c1 82       	std	Z+1, r12	; 0x01
    7dfa:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7dfe:	0f 90       	pop	r0
    7e00:	0f 90       	pop	r0

				tasksArray[ executeFunction_forLoopCounter ] = NULL;
    7e02:	2b 85       	ldd	r18, Y+11	; 0x0b
    7e04:	3c 85       	ldd	r19, Y+12	; 0x0c
    7e06:	c9 01       	movw	r24, r18
    7e08:	88 0f       	add	r24, r24
    7e0a:	99 1f       	adc	r25, r25
    7e0c:	e9 85       	ldd	r30, Y+9	; 0x09
    7e0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    7e10:	e8 0f       	add	r30, r24
    7e12:	f9 1f       	adc	r31, r25
    7e14:	11 82       	std	Z+1, r1	; 0x01
    7e16:	10 82       	st	Z, r1
				//executeFunction_executeRecompactTaskArray = true;

				//all( p << "### executeFunction_forLoopCounter=" << executeFunction_forLoopCounter << ", currentTasksCount=" << currentTasksCount << endl; )


				if( executeFunction_forLoopCounter == currentTasksCount-1 )
    7e18:	8f 81       	ldd	r24, Y+7	; 0x07
    7e1a:	98 85       	ldd	r25, Y+8	; 0x08
    7e1c:	01 97       	sbiw	r24, 0x01	; 1
    7e1e:	28 17       	cp	r18, r24
    7e20:	39 07       	cpc	r19, r25
    7e22:	09 f0       	breq	.+2      	; 0x7e26 <_ZN11TaskManager7executeEv+0x1aa>
    7e24:	52 c0       	rjmp	.+164    	; 0x7eca <_ZN11TaskManager7executeEv+0x24e>
				{
					currentTasksCount--;
    7e26:	38 87       	std	Y+8, r19	; 0x08
    7e28:	2f 83       	std	Y+7, r18	; 0x07
					//all( p << executeFunctionPrefix << "task under index " << executeFunction_forLoopCounter << " was removed, currentTasksCount was decreased to " << currentTasksCount << endl; )
					//all( wpln( "task under index %u was removed, currentTasksCount was decreased to %u" , executeFunction_forLoopCounter , currentTasksCount ) )
					aln( "task under index %u was removed, currentTasksCount was decreased to %u" , executeFunction_forLoopCounter , currentTasksCount )
    7e2a:	8c 81       	ldd	r24, Y+4	; 0x04
    7e2c:	8b 30       	cpi	r24, 0x0B	; 11
    7e2e:	08 f0       	brcs	.+2      	; 0x7e32 <_ZN11TaskManager7executeEv+0x1b6>
    7e30:	4d c0       	rjmp	.+154    	; 0x7ecc <_ZN11TaskManager7executeEv+0x250>
    7e32:	c7 01       	movw	r24, r14
    7e34:	6b e8       	ldi	r22, 0x8B	; 139
    7e36:	72 e1       	ldi	r23, 0x12	; 18
    7e38:	4b e3       	ldi	r20, 0x3B	; 59
    7e3a:	56 e1       	ldi	r21, 0x16	; 22
    7e3c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7e40:	00 d0       	rcall	.+0      	; 0x7e42 <_ZN11TaskManager7executeEv+0x1c6>
    7e42:	00 d0       	rcall	.+0      	; 0x7e44 <_ZN11TaskManager7executeEv+0x1c8>
    7e44:	ed b7       	in	r30, 0x3d	; 61
    7e46:	fe b7       	in	r31, 0x3e	; 62
    7e48:	31 96       	adiw	r30, 0x01	; 1
    7e4a:	ad b7       	in	r26, 0x3d	; 61
    7e4c:	be b7       	in	r27, 0x3e	; 62
    7e4e:	12 96       	adiw	r26, 0x02	; 2
    7e50:	7c 92       	st	X, r7
    7e52:	6e 92       	st	-X, r6
    7e54:	11 97       	sbiw	r26, 0x01	; 1
    7e56:	8b 85       	ldd	r24, Y+11	; 0x0b
    7e58:	9c 85       	ldd	r25, Y+12	; 0x0c
    7e5a:	93 83       	std	Z+3, r25	; 0x03
    7e5c:	82 83       	std	Z+2, r24	; 0x02
    7e5e:	8f 81       	ldd	r24, Y+7	; 0x07
    7e60:	98 85       	ldd	r25, Y+8	; 0x08
    7e62:	95 83       	std	Z+5, r25	; 0x05
    7e64:	84 83       	std	Z+4, r24	; 0x04
    7e66:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7e6a:	0f 90       	pop	r0
    7e6c:	0f 90       	pop	r0
    7e6e:	0f 90       	pop	r0
    7e70:	0f 90       	pop	r0
    7e72:	ed b7       	in	r30, 0x3d	; 61
    7e74:	fe b7       	in	r31, 0x3e	; 62
    7e76:	d2 82       	std	Z+2, r13	; 0x02
    7e78:	c1 82       	std	Z+1, r12	; 0x01
    7e7a:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7e7e:	0f 90       	pop	r0
    7e80:	0f 90       	pop	r0
    7e82:	24 c0       	rjmp	.+72     	; 0x7ecc <_ZN11TaskManager7executeEv+0x250>
		}
		else
		{
			//warning( p << executeFunctionPrefix << "cannot execute task with index " << executeFunction_forLoopCounter << " in tasksArray, task is null" << endl; )
			//warning( wpln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter ) )
			wln( "cannot execute task with index %d in tasksArray, task is null" , executeFunction_forLoopCounter )
    7e84:	8f 31       	cpi	r24, 0x1F	; 31
    7e86:	08 f5       	brcc	.+66     	; 0x7eca <_ZN11TaskManager7executeEv+0x24e>
    7e88:	c7 01       	movw	r24, r14
    7e8a:	65 e8       	ldi	r22, 0x85	; 133
    7e8c:	72 e1       	ldi	r23, 0x12	; 18
    7e8e:	4b e3       	ldi	r20, 0x3B	; 59
    7e90:	56 e1       	ldi	r21, 0x16	; 22
    7e92:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7e96:	00 d0       	rcall	.+0      	; 0x7e98 <_ZN11TaskManager7executeEv+0x21c>
    7e98:	0f 92       	push	r0
    7e9a:	ad b7       	in	r26, 0x3d	; 61
    7e9c:	be b7       	in	r27, 0x3e	; 62
    7e9e:	12 96       	adiw	r26, 0x02	; 2
    7ea0:	9c 92       	st	X, r9
    7ea2:	8e 92       	st	-X, r8
    7ea4:	11 97       	sbiw	r26, 0x01	; 1
    7ea6:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ea8:	9c 85       	ldd	r25, Y+12	; 0x0c
    7eaa:	14 96       	adiw	r26, 0x04	; 4
    7eac:	9c 93       	st	X, r25
    7eae:	8e 93       	st	-X, r24
    7eb0:	13 97       	sbiw	r26, 0x03	; 3
    7eb2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7eb6:	0f 90       	pop	r0
    7eb8:	0f 90       	pop	r0
    7eba:	ed b7       	in	r30, 0x3d	; 61
    7ebc:	fe b7       	in	r31, 0x3e	; 62
    7ebe:	d2 82       	std	Z+2, r13	; 0x02
    7ec0:	c1 82       	std	Z+1, r12	; 0x01
    7ec2:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7ec6:	0f 90       	pop	r0
    7ec8:	0f 90       	pop	r0

			executeFunction_executeRecompactTaskArray = true;
    7eca:	bd 86       	std	Y+13, r11	; 0x0d

void TaskManager::execute()
{
	static const PROGMEM prog_char functionName[] = "execute";

	for( executeFunction_forLoopCounter = 0 ; executeFunction_forLoopCounter < currentTasksCount ; executeFunction_forLoopCounter++ )
    7ecc:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ece:	9c 85       	ldd	r25, Y+12	; 0x0c
    7ed0:	01 96       	adiw	r24, 0x01	; 1
    7ed2:	9c 87       	std	Y+12, r25	; 0x0c
    7ed4:	8b 87       	std	Y+11, r24	; 0x0b
    7ed6:	8b 85       	ldd	r24, Y+11	; 0x0b
    7ed8:	9c 85       	ldd	r25, Y+12	; 0x0c
    7eda:	2f 81       	ldd	r18, Y+7	; 0x07
    7edc:	38 85       	ldd	r19, Y+8	; 0x08
    7ede:	82 17       	cp	r24, r18
    7ee0:	93 07       	cpc	r25, r19
    7ee2:	08 f4       	brcc	.+2      	; 0x7ee6 <_ZN11TaskManager7executeEv+0x26a>
    7ee4:	fb ce       	rjmp	.-522    	; 0x7cdc <_ZN11TaskManager7executeEv+0x60>

			executeFunction_executeRecompactTaskArray = true;
		}
	}

	if( executeFunction_executeRecompactTaskArray )
    7ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
    7ee8:	88 23       	and	r24, r24
    7eea:	21 f0       	breq	.+8      	; 0x7ef4 <_ZN11TaskManager7executeEv+0x278>
	{
		executeFunction_executeRecompactTaskArray = false;
    7eec:	1d 86       	std	Y+13, r1	; 0x0d
		recompactTaskArray();
    7eee:	ce 01       	movw	r24, r28
    7ef0:	0e 94 0f 3d 	call	0x7a1e	; 0x7a1e <_ZN11TaskManager18recompactTaskArrayEv>
	}
}
    7ef4:	df 91       	pop	r29
    7ef6:	cf 91       	pop	r28
    7ef8:	1f 91       	pop	r17
    7efa:	0f 91       	pop	r16
    7efc:	ff 90       	pop	r15
    7efe:	ef 90       	pop	r14
    7f00:	df 90       	pop	r13
    7f02:	cf 90       	pop	r12
    7f04:	bf 90       	pop	r11
    7f06:	9f 90       	pop	r9
    7f08:	8f 90       	pop	r8
    7f0a:	7f 90       	pop	r7
    7f0c:	6f 90       	pop	r6
    7f0e:	5f 90       	pop	r5
    7f10:	4f 90       	pop	r4
    7f12:	3f 90       	pop	r3
    7f14:	2f 90       	pop	r2
    7f16:	08 95       	ret

00007f18 <_ZN17TaskManagerRecordC1EP20TaskManagerSchedulerP8Runnable>:

#include "TaskManagerRecord.h"

// =================================================

TaskManagerRecord::TaskManagerRecord( TaskManagerScheduler* _scheduler , Runnable* _runnable )
    7f18:	fc 01       	movw	r30, r24
{
	scheduler = _scheduler;
    7f1a:	71 83       	std	Z+1, r23	; 0x01
    7f1c:	60 83       	st	Z, r22
	runnable = _runnable;
    7f1e:	53 83       	std	Z+3, r21	; 0x03
    7f20:	42 83       	std	Z+2, r20	; 0x02
}
    7f22:	08 95       	ret

00007f24 <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv>:
}

// =================================================

bool TaskManagerSchedulerTimeIntervals::canRemoveFromTaskManager()
{
    7f24:	cf 93       	push	r28
    7f26:	df 93       	push	r29
    7f28:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "canRemoveFromTaskManager";

	//all( p << "TaskManagerSchedulerTimeIntervals:canRemoveFromTaskManager(): returning " << wasAllTasksExecuted << endl; )
	//all( wpln( "returning %u" , wasAllTasksExecuted ) )
	aln( "returning %u" , wasAllTasksExecuted )
    7f2a:	88 85       	ldd	r24, Y+8	; 0x08
    7f2c:	8b 30       	cpi	r24, 0x0B	; 11
    7f2e:	30 f5       	brcc	.+76     	; 0x7f7c <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv+0x58>
    7f30:	ce 01       	movw	r24, r28
    7f32:	06 96       	adiw	r24, 0x06	; 6
    7f34:	6b e8       	ldi	r22, 0x8B	; 139
    7f36:	72 e1       	ldi	r23, 0x12	; 18
    7f38:	40 ea       	ldi	r20, 0xA0	; 160
    7f3a:	58 e1       	ldi	r21, 0x18	; 24
    7f3c:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    7f40:	00 d0       	rcall	.+0      	; 0x7f42 <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv+0x1e>
    7f42:	0f 92       	push	r0
    7f44:	ed b7       	in	r30, 0x3d	; 61
    7f46:	fe b7       	in	r31, 0x3e	; 62
    7f48:	31 96       	adiw	r30, 0x01	; 1
    7f4a:	89 eb       	ldi	r24, 0xB9	; 185
    7f4c:	98 e1       	ldi	r25, 0x18	; 24
    7f4e:	ad b7       	in	r26, 0x3d	; 61
    7f50:	be b7       	in	r27, 0x3e	; 62
    7f52:	12 96       	adiw	r26, 0x02	; 2
    7f54:	9c 93       	st	X, r25
    7f56:	8e 93       	st	-X, r24
    7f58:	11 97       	sbiw	r26, 0x01	; 1
    7f5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    7f5c:	82 83       	std	Z+2, r24	; 0x02
    7f5e:	13 82       	std	Z+3, r1	; 0x03
    7f60:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7f64:	0f 90       	pop	r0
    7f66:	0f 90       	pop	r0
    7f68:	8e e8       	ldi	r24, 0x8E	; 142
    7f6a:	92 e1       	ldi	r25, 0x12	; 18
    7f6c:	ed b7       	in	r30, 0x3d	; 61
    7f6e:	fe b7       	in	r31, 0x3e	; 62
    7f70:	92 83       	std	Z+2, r25	; 0x02
    7f72:	81 83       	std	Z+1, r24	; 0x01
    7f74:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    7f78:	0f 90       	pop	r0
    7f7a:	0f 90       	pop	r0

	if( wasAllTasksExecuted )
    7f7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    7f7e:	88 23       	and	r24, r24
    7f80:	49 f0       	breq	.+18     	; 0x7f94 <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv+0x70>

// =================================================

void TaskManagerSchedulerTimeIntervals::resetState()
{
	lastExecutionTime = 0;
    7f82:	19 86       	std	Y+9, r1	; 0x09
    7f84:	1a 86       	std	Y+10, r1	; 0x0a
    7f86:	1b 86       	std	Y+11, r1	; 0x0b
    7f88:	1c 86       	std	Y+12, r1	; 0x0c
	executionTaskCounter = -1;
    7f8a:	8f ef       	ldi	r24, 0xFF	; 255
    7f8c:	8d 87       	std	Y+13, r24	; 0x0d
	wasAllTasksExecuted = false;
    7f8e:	1e 86       	std	Y+14, r1	; 0x0e
	aln( "returning %u" , wasAllTasksExecuted )

	if( wasAllTasksExecuted )
	{
		resetState();
		return true;
    7f90:	81 e0       	ldi	r24, 0x01	; 1
    7f92:	01 c0       	rjmp	.+2      	; 0x7f96 <_ZN33TaskManagerSchedulerTimeIntervals24canRemoveFromTaskManagerEv+0x72>
	}
	else
		return false;
    7f94:	80 e0       	ldi	r24, 0x00	; 0
}
    7f96:	df 91       	pop	r29
    7f98:	cf 91       	pop	r28
    7f9a:	08 95       	ret

00007f9c <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv>:
}

// =================================================

bool TaskManagerSchedulerTimeIntervals::canExecute()
{
    7f9c:	ff 92       	push	r15
    7f9e:	0f 93       	push	r16
    7fa0:	1f 93       	push	r17
    7fa2:	cf 93       	push	r28
    7fa4:	df 93       	push	r29
    7fa6:	ec 01       	movw	r28, r24
	static const PROGMEM prog_char functionName[] = "canExecute";

	unsigned long currentMillis = millis();
    7fa8:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    7fac:	ab 01       	movw	r20, r22
    7fae:	bc 01       	movw	r22, r24

	if( executionTaskCounter < 0 || currentMillis - lastExecutionTime >= timeIntervalsInMs[ executionTaskCounter ] )
    7fb0:	fd 84       	ldd	r15, Y+13	; 0x0d
    7fb2:	f7 fc       	sbrc	r15, 7
    7fb4:	20 c0       	rjmp	.+64     	; 0x7ff6 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x5a>
    7fb6:	89 85       	ldd	r24, Y+9	; 0x09
    7fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    7fba:	ab 85       	ldd	r26, Y+11	; 0x0b
    7fbc:	bc 85       	ldd	r27, Y+12	; 0x0c
    7fbe:	8a 01       	movw	r16, r20
    7fc0:	9b 01       	movw	r18, r22
    7fc2:	08 1b       	sub	r16, r24
    7fc4:	19 0b       	sbc	r17, r25
    7fc6:	2a 0b       	sbc	r18, r26
    7fc8:	3b 0b       	sbc	r19, r27
    7fca:	8f 2d       	mov	r24, r15
    7fcc:	99 27       	eor	r25, r25
    7fce:	87 fd       	sbrc	r24, 7
    7fd0:	90 95       	com	r25
    7fd2:	88 0f       	add	r24, r24
    7fd4:	99 1f       	adc	r25, r25
    7fd6:	88 0f       	add	r24, r24
    7fd8:	99 1f       	adc	r25, r25
    7fda:	ea 81       	ldd	r30, Y+2	; 0x02
    7fdc:	fb 81       	ldd	r31, Y+3	; 0x03
    7fde:	e8 0f       	add	r30, r24
    7fe0:	f9 1f       	adc	r31, r25
    7fe2:	80 81       	ld	r24, Z
    7fe4:	91 81       	ldd	r25, Z+1	; 0x01
    7fe6:	a2 81       	ldd	r26, Z+2	; 0x02
    7fe8:	b3 81       	ldd	r27, Z+3	; 0x03
    7fea:	08 17       	cp	r16, r24
    7fec:	19 07       	cpc	r17, r25
    7fee:	2a 07       	cpc	r18, r26
    7ff0:	3b 07       	cpc	r19, r27
    7ff2:	08 f4       	brcc	.+2      	; 0x7ff6 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x5a>
    7ff4:	9a c0       	rjmp	.+308    	; 0x812a <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x18e>
	{
		lastExecutionTime = currentMillis;
    7ff6:	49 87       	std	Y+9, r20	; 0x09
    7ff8:	5a 87       	std	Y+10, r21	; 0x0a
    7ffa:	6b 87       	std	Y+11, r22	; 0x0b
    7ffc:	7c 87       	std	Y+12, r23	; 0x0c

		executionTaskCounter++;
    7ffe:	f3 94       	inc	r15
    8000:	fd 86       	std	Y+13, r15	; 0x0d

		if( executionTaskCounter >= timeIntervalsCount )
    8002:	2f 2d       	mov	r18, r15
    8004:	33 27       	eor	r19, r19
    8006:	27 fd       	sbrc	r18, 7
    8008:	30 95       	com	r19
    800a:	8c 81       	ldd	r24, Y+4	; 0x04
    800c:	90 e0       	ldi	r25, 0x00	; 0
    800e:	28 17       	cp	r18, r24
    8010:	39 07       	cpc	r19, r25
    8012:	34 f0       	brlt	.+12     	; 0x8020 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x84>
		{
			executionTaskCounter = 0;
    8014:	1d 86       	std	Y+13, r1	; 0x0d

			if( !isCyclic ) wasAllTasksExecuted = true;
    8016:	8d 81       	ldd	r24, Y+5	; 0x05
    8018:	88 23       	and	r24, r24
    801a:	11 f4       	brne	.+4      	; 0x8020 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x84>
    801c:	81 e0       	ldi	r24, 0x01	; 1
    801e:	8e 87       	std	Y+14, r24	; 0x0e

		//all( p << "TaskManagerSchedulerTimeIntervals:canExecute(): returning TRUE, next execution in " << timeIntervalsInMs[ executionTaskCounter ] << "ms, (wasAllTasksExecuted=" << wasAllTasksExecuted << ")" << endl )

		//all( p << "TaskManagerSchedulerTimeIntervals:canExecute(): returning TRUE, "; )
		//all( wp( "returning TRUE," )  )
		a( "returning TRUE," )
    8020:	88 85       	ldd	r24, Y+8	; 0x08
    8022:	8b 30       	cpi	r24, 0x0B	; 11
    8024:	a0 f4       	brcc	.+40     	; 0x804e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xb2>
    8026:	ce 01       	movw	r24, r28
    8028:	06 96       	adiw	r24, 0x06	; 6
    802a:	6b e8       	ldi	r22, 0x8B	; 139
    802c:	72 e1       	ldi	r23, 0x12	; 18
    802e:	4c e1       	ldi	r20, 0x1C	; 28
    8030:	58 e1       	ldi	r21, 0x18	; 24
    8032:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    8036:	0f 92       	push	r0
    8038:	0f 92       	push	r0
    803a:	87 e2       	ldi	r24, 0x27	; 39
    803c:	98 e1       	ldi	r25, 0x18	; 24
    803e:	ed b7       	in	r30, 0x3d	; 61
    8040:	fe b7       	in	r31, 0x3e	; 62
    8042:	92 83       	std	Z+2, r25	; 0x02
    8044:	81 83       	std	Z+1, r24	; 0x01
    8046:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    804a:	0f 90       	pop	r0
    804c:	0f 90       	pop	r0

			//p << "TaskManagerSchedulerTimeIntervals:canExecute(): returning TRUE, ";

			if( wasAllTasksExecuted )
    804e:	9e 85       	ldd	r25, Y+14	; 0x0e
    8050:	88 85       	ldd	r24, Y+8	; 0x08
    8052:	99 23       	and	r25, r25
    8054:	c1 f0       	breq	.+48     	; 0x8086 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xea>
			{
				//all( p << "will not be executed again, will request to be removed from TaskManager"; )
				//all( wp( "will not be executed again, will request to be removed from TaskManager" )  )
				a( "will not be executed again, will request to be removed from TaskManager" )
    8056:	8b 30       	cpi	r24, 0x0B	; 11
    8058:	08 f0       	brcs	.+2      	; 0x805c <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0xc0>
    805a:	47 c0       	rjmp	.+142    	; 0x80ea <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x14e>
    805c:	ce 01       	movw	r24, r28
    805e:	06 96       	adiw	r24, 0x06	; 6
    8060:	6b e8       	ldi	r22, 0x8B	; 139
    8062:	72 e1       	ldi	r23, 0x12	; 18
    8064:	4c e1       	ldi	r20, 0x1C	; 28
    8066:	58 e1       	ldi	r21, 0x18	; 24
    8068:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    806c:	0f 92       	push	r0
    806e:	0f 92       	push	r0
    8070:	87 e3       	ldi	r24, 0x37	; 55
    8072:	98 e1       	ldi	r25, 0x18	; 24
    8074:	ed b7       	in	r30, 0x3d	; 61
    8076:	fe b7       	in	r31, 0x3e	; 62
    8078:	92 83       	std	Z+2, r25	; 0x02
    807a:	81 83       	std	Z+1, r24	; 0x01
    807c:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    8080:	0f 90       	pop	r0
    8082:	0f 90       	pop	r0
    8084:	32 c0       	rjmp	.+100    	; 0x80ea <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x14e>
			}
			else
			{
				//all( p << " will be executed again in " << timeIntervalsInMs[ executionTaskCounter ] << "ms"; )
				//all( wp( " will be executed again in %ums" , timeIntervalsInMs[ executionTaskCounter ] )  )
				a( " will be executed again in %ums" , timeIntervalsInMs[ executionTaskCounter ] )
    8086:	8b 30       	cpi	r24, 0x0B	; 11
    8088:	80 f5       	brcc	.+96     	; 0x80ea <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x14e>
    808a:	ce 01       	movw	r24, r28
    808c:	06 96       	adiw	r24, 0x06	; 6
    808e:	6b e8       	ldi	r22, 0x8B	; 139
    8090:	72 e1       	ldi	r23, 0x12	; 18
    8092:	4c e1       	ldi	r20, 0x1C	; 28
    8094:	58 e1       	ldi	r21, 0x18	; 24
    8096:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    809a:	8d 85       	ldd	r24, Y+13	; 0x0d
    809c:	00 d0       	rcall	.+0      	; 0x809e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x102>
    809e:	00 d0       	rcall	.+0      	; 0x80a0 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x104>
    80a0:	2f e7       	ldi	r18, 0x7F	; 127
    80a2:	38 e1       	ldi	r19, 0x18	; 24
    80a4:	ed b7       	in	r30, 0x3d	; 61
    80a6:	fe b7       	in	r31, 0x3e	; 62
    80a8:	32 83       	std	Z+2, r19	; 0x02
    80aa:	21 83       	std	Z+1, r18	; 0x01
    80ac:	99 27       	eor	r25, r25
    80ae:	87 fd       	sbrc	r24, 7
    80b0:	90 95       	com	r25
    80b2:	88 0f       	add	r24, r24
    80b4:	99 1f       	adc	r25, r25
    80b6:	88 0f       	add	r24, r24
    80b8:	99 1f       	adc	r25, r25
    80ba:	ea 81       	ldd	r30, Y+2	; 0x02
    80bc:	fb 81       	ldd	r31, Y+3	; 0x03
    80be:	e8 0f       	add	r30, r24
    80c0:	f9 1f       	adc	r31, r25
    80c2:	80 81       	ld	r24, Z
    80c4:	91 81       	ldd	r25, Z+1	; 0x01
    80c6:	a2 81       	ldd	r26, Z+2	; 0x02
    80c8:	b3 81       	ldd	r27, Z+3	; 0x03
    80ca:	ed b7       	in	r30, 0x3d	; 61
    80cc:	fe b7       	in	r31, 0x3e	; 62
    80ce:	83 83       	std	Z+3, r24	; 0x03
    80d0:	94 83       	std	Z+4, r25	; 0x04
    80d2:	a5 83       	std	Z+5, r26	; 0x05
    80d4:	b6 83       	std	Z+6, r27	; 0x06
    80d6:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    80da:	8d b7       	in	r24, 0x3d	; 61
    80dc:	9e b7       	in	r25, 0x3e	; 62
    80de:	06 96       	adiw	r24, 0x06	; 6
    80e0:	0f b6       	in	r0, 0x3f	; 63
    80e2:	f8 94       	cli
    80e4:	9e bf       	out	0x3e, r25	; 62
    80e6:	0f be       	out	0x3f, r0	; 63
    80e8:	8d bf       	out	0x3d, r24	; 61
			}

		//{};
			//all( p << endl; )
			//all( wpln( "" )  )
			aln( "" )
    80ea:	88 85       	ldd	r24, Y+8	; 0x08
    80ec:	8b 30       	cpi	r24, 0x0B	; 11
    80ee:	f8 f4       	brcc	.+62     	; 0x812e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x192>
    80f0:	ce 01       	movw	r24, r28
    80f2:	06 96       	adiw	r24, 0x06	; 6
    80f4:	6b e8       	ldi	r22, 0x8B	; 139
    80f6:	72 e1       	ldi	r23, 0x12	; 18
    80f8:	4c e1       	ldi	r20, 0x1C	; 28
    80fa:	58 e1       	ldi	r21, 0x18	; 24
    80fc:	0e 94 73 35 	call	0x6ae6	; 0x6ae6 <_ZN12DebugPrinter8preMacroEPKcS1_>
    8100:	0f 92       	push	r0
    8102:	0f 92       	push	r0
    8104:	8f e9       	ldi	r24, 0x9F	; 159
    8106:	98 e1       	ldi	r25, 0x18	; 24
    8108:	ed b7       	in	r30, 0x3d	; 61
    810a:	fe b7       	in	r31, 0x3e	; 62
    810c:	92 83       	std	Z+2, r25	; 0x02
    810e:	81 83       	std	Z+1, r24	; 0x01
    8110:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    8114:	8e e8       	ldi	r24, 0x8E	; 142
    8116:	92 e1       	ldi	r25, 0x12	; 18
    8118:	ed b7       	in	r30, 0x3d	; 61
    811a:	fe b7       	in	r31, 0x3e	; 62
    811c:	92 83       	std	Z+2, r25	; 0x02
    811e:	81 83       	std	Z+1, r24	; 0x01
    8120:	0e 94 0b 4a 	call	0x9416	; 0x9416 <printf_P>
    8124:	0f 90       	pop	r0
    8126:	0f 90       	pop	r0
    8128:	02 c0       	rjmp	.+4      	; 0x812e <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x192>
		//all( p << endl )

		return true;
	}
	else
		return false;
    812a:	80 e0       	ldi	r24, 0x00	; 0
    812c:	01 c0       	rjmp	.+2      	; 0x8130 <_ZN33TaskManagerSchedulerTimeIntervals10canExecuteEv+0x194>

		//all( p << ( wasAllTasksExecuted ? ( " will not be executed again, will request to be removed from TaskManager" ) : ( " will be executed again in " << timeIntervalsInMs[ executionTaskCounter ] << "ms" ) ) )

		//all( p << endl )

		return true;
    812e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return false;
}
    8130:	df 91       	pop	r29
    8132:	cf 91       	pop	r28
    8134:	1f 91       	pop	r17
    8136:	0f 91       	pop	r16
    8138:	ff 90       	pop	r15
    813a:	08 95       	ret

0000813c <_ZN33TaskManagerSchedulerTimeIntervalsC1EPmhb>:

//const PROGMEM prog_char TaskManagerSchedulerTimeIntervals::className[] = "TaskManagerSchedulerTimeIntervals";

// =================================================

TaskManagerSchedulerTimeIntervals::TaskManagerSchedulerTimeIntervals( unsigned long* _timeIntervalsInMs , unsigned char _timeIntervalsCount , bool _isCyclic ) : dp( PSTR( "TaskManagerSchedulerTimeIntervals" ) )//: p(_p)
    813c:	ef 92       	push	r14
    813e:	ff 92       	push	r15
    8140:	0f 93       	push	r16
    8142:	1f 93       	push	r17
    8144:	cf 93       	push	r28
    8146:	df 93       	push	r29
    8148:	0f 92       	push	r0
    814a:	0f 92       	push	r0
    814c:	cd b7       	in	r28, 0x3d	; 61
    814e:	de b7       	in	r29, 0x3e	; 62
    8150:	7c 01       	movw	r14, r24
    8152:	8b 01       	movw	r16, r22
    8154:	81 ec       	ldi	r24, 0xC1	; 193
    8156:	9f e0       	ldi	r25, 0x0F	; 15
    8158:	f7 01       	movw	r30, r14
    815a:	91 83       	std	Z+1, r25	; 0x01
    815c:	80 83       	st	Z, r24
    815e:	c7 01       	movw	r24, r14
    8160:	06 96       	adiw	r24, 0x06	; 6
    8162:	6a ef       	ldi	r22, 0xFA	; 250
    8164:	77 e1       	ldi	r23, 0x17	; 23
    8166:	2a 83       	std	Y+2, r18	; 0x02
    8168:	49 83       	std	Y+1, r20	; 0x01
    816a:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <_ZN12DebugPrinterC1EPKc>
{
	timeIntervalsInMs = _timeIntervalsInMs;
    816e:	f7 01       	movw	r30, r14
    8170:	13 83       	std	Z+3, r17	; 0x03
    8172:	02 83       	std	Z+2, r16	; 0x02
	timeIntervalsCount = _timeIntervalsCount;
    8174:	49 81       	ldd	r20, Y+1	; 0x01
    8176:	44 83       	std	Z+4, r20	; 0x04
	isCyclic = _isCyclic;
    8178:	2a 81       	ldd	r18, Y+2	; 0x02
    817a:	25 83       	std	Z+5, r18	; 0x05

// =================================================

void TaskManagerSchedulerTimeIntervals::resetState()
{
	lastExecutionTime = 0;
    817c:	11 86       	std	Z+9, r1	; 0x09
    817e:	12 86       	std	Z+10, r1	; 0x0a
    8180:	13 86       	std	Z+11, r1	; 0x0b
    8182:	14 86       	std	Z+12, r1	; 0x0c
	executionTaskCounter = -1;
    8184:	8f ef       	ldi	r24, 0xFF	; 255
    8186:	85 87       	std	Z+13, r24	; 0x0d
	wasAllTasksExecuted = false;
    8188:	16 86       	std	Z+14, r1	; 0x0e
	timeIntervalsInMs = _timeIntervalsInMs;
	timeIntervalsCount = _timeIntervalsCount;
	isCyclic = _isCyclic;

	resetState();
}
    818a:	0f 90       	pop	r0
    818c:	0f 90       	pop	r0
    818e:	df 91       	pop	r29
    8190:	cf 91       	pop	r28
    8192:	1f 91       	pop	r17
    8194:	0f 91       	pop	r16
    8196:	ff 90       	pop	r15
    8198:	ef 90       	pop	r14
    819a:	08 95       	ret

0000819c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    819c:	fc 01       	movw	r30, r24
    819e:	24 85       	ldd	r18, Z+12	; 0x0c
    81a0:	35 85       	ldd	r19, Z+13	; 0x0d
    81a2:	f9 01       	movw	r30, r18
    81a4:	e0 58       	subi	r30, 0x80	; 128
    81a6:	ff 4f       	sbci	r31, 0xFF	; 255
    81a8:	80 81       	ld	r24, Z
    81aa:	91 81       	ldd	r25, Z+1	; 0x01
    81ac:	2e 57       	subi	r18, 0x7E	; 126
    81ae:	3f 4f       	sbci	r19, 0xFF	; 255
    81b0:	f9 01       	movw	r30, r18
    81b2:	20 81       	ld	r18, Z
    81b4:	31 81       	ldd	r19, Z+1	; 0x01
    81b6:	82 1b       	sub	r24, r18
    81b8:	93 0b       	sbc	r25, r19
    81ba:	8f 77       	andi	r24, 0x7F	; 127
    81bc:	90 70       	andi	r25, 0x00	; 0
}
    81be:	08 95       	ret

000081c0 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    81c0:	fc 01       	movw	r30, r24
    81c2:	44 85       	ldd	r20, Z+12	; 0x0c
    81c4:	55 85       	ldd	r21, Z+13	; 0x0d
    81c6:	fa 01       	movw	r30, r20
    81c8:	e0 58       	subi	r30, 0x80	; 128
    81ca:	ff 4f       	sbci	r31, 0xFF	; 255
    81cc:	80 81       	ld	r24, Z
    81ce:	91 81       	ldd	r25, Z+1	; 0x01
    81d0:	fa 01       	movw	r30, r20
    81d2:	ee 57       	subi	r30, 0x7E	; 126
    81d4:	ff 4f       	sbci	r31, 0xFF	; 255
    81d6:	20 81       	ld	r18, Z
    81d8:	31 81       	ldd	r19, Z+1	; 0x01
    81da:	82 17       	cp	r24, r18
    81dc:	93 07       	cpc	r25, r19
    81de:	41 f0       	breq	.+16     	; 0x81f0 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    81e0:	01 90       	ld	r0, Z+
    81e2:	f0 81       	ld	r31, Z
    81e4:	e0 2d       	mov	r30, r0
    81e6:	e4 0f       	add	r30, r20
    81e8:	f5 1f       	adc	r31, r21
    81ea:	80 81       	ld	r24, Z
    81ec:	90 e0       	ldi	r25, 0x00	; 0
    81ee:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    81f0:	8f ef       	ldi	r24, 0xFF	; 255
    81f2:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    81f4:	08 95       	ret

000081f6 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    81f6:	fc 01       	movw	r30, r24
    81f8:	44 85       	ldd	r20, Z+12	; 0x0c
    81fa:	55 85       	ldd	r21, Z+13	; 0x0d
    81fc:	fa 01       	movw	r30, r20
    81fe:	e0 58       	subi	r30, 0x80	; 128
    8200:	ff 4f       	sbci	r31, 0xFF	; 255
    8202:	20 81       	ld	r18, Z
    8204:	31 81       	ldd	r19, Z+1	; 0x01
    8206:	fa 01       	movw	r30, r20
    8208:	ee 57       	subi	r30, 0x7E	; 126
    820a:	ff 4f       	sbci	r31, 0xFF	; 255
    820c:	80 81       	ld	r24, Z
    820e:	91 81       	ldd	r25, Z+1	; 0x01
    8210:	28 17       	cp	r18, r24
    8212:	39 07       	cpc	r19, r25
    8214:	79 f0       	breq	.+30     	; 0x8234 <_ZN14HardwareSerial4readEv+0x3e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    8216:	a0 81       	ld	r26, Z
    8218:	b1 81       	ldd	r27, Z+1	; 0x01
    821a:	a4 0f       	add	r26, r20
    821c:	b5 1f       	adc	r27, r21
    821e:	8c 91       	ld	r24, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    8220:	20 81       	ld	r18, Z
    8222:	31 81       	ldd	r19, Z+1	; 0x01
    8224:	2f 5f       	subi	r18, 0xFF	; 255
    8226:	3f 4f       	sbci	r19, 0xFF	; 255
    8228:	2f 77       	andi	r18, 0x7F	; 127
    822a:	30 70       	andi	r19, 0x00	; 0
    822c:	31 83       	std	Z+1, r19	; 0x01
    822e:	20 83       	st	Z, r18
    return c;
    8230:	90 e0       	ldi	r25, 0x00	; 0
    8232:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    8234:	8f ef       	ldi	r24, 0xFF	; 255
    8236:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    8238:	08 95       	ret

0000823a <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    823a:	dc 01       	movw	r26, r24
    823c:	1e 96       	adiw	r26, 0x0e	; 14
    823e:	ed 91       	ld	r30, X+
    8240:	fc 91       	ld	r31, X
    8242:	1f 97       	sbiw	r26, 0x0f	; 15
    8244:	df 01       	movw	r26, r30
    8246:	a0 58       	subi	r26, 0x80	; 128
    8248:	bf 4f       	sbci	r27, 0xFF	; 255
    824a:	ee 57       	subi	r30, 0x7E	; 126
    824c:	ff 4f       	sbci	r31, 0xFF	; 255
    824e:	2d 91       	ld	r18, X+
    8250:	3c 91       	ld	r19, X
    8252:	11 97       	sbiw	r26, 0x01	; 1
    8254:	80 81       	ld	r24, Z
    8256:	91 81       	ldd	r25, Z+1	; 0x01
    8258:	28 17       	cp	r18, r24
    825a:	39 07       	cpc	r19, r25
    825c:	c1 f7       	brne	.-16     	; 0x824e <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    825e:	08 95       	ret

00008260 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    8260:	ef 92       	push	r14
    8262:	ff 92       	push	r15
    8264:	0f 93       	push	r16
    8266:	1f 93       	push	r17
    8268:	cf 93       	push	r28
    826a:	df 93       	push	r29
    826c:	ec 01       	movw	r28, r24
    826e:	26 2f       	mov	r18, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    8270:	0e 85       	ldd	r16, Y+14	; 0x0e
    8272:	1f 85       	ldd	r17, Y+15	; 0x0f
    8274:	30 e8       	ldi	r19, 0x80	; 128
    8276:	e3 2e       	mov	r14, r19
    8278:	f1 2c       	mov	r15, r1
    827a:	e0 0e       	add	r14, r16
    827c:	f1 1e       	adc	r15, r17
    827e:	d7 01       	movw	r26, r14
    8280:	8d 91       	ld	r24, X+
    8282:	9c 91       	ld	r25, X
    8284:	11 97       	sbiw	r26, 0x01	; 1
    8286:	01 96       	adiw	r24, 0x01	; 1
    8288:	60 e8       	ldi	r22, 0x80	; 128
    828a:	70 e0       	ldi	r23, 0x00	; 0
    828c:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__divmodhi4>
    8290:	ac 01       	movw	r20, r24
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    8292:	f8 01       	movw	r30, r16
    8294:	ee 57       	subi	r30, 0x7E	; 126
    8296:	ff 4f       	sbci	r31, 0xFF	; 255
    8298:	80 81       	ld	r24, Z
    829a:	91 81       	ldd	r25, Z+1	; 0x01
    829c:	48 17       	cp	r20, r24
    829e:	59 07       	cpc	r21, r25
    82a0:	d9 f3       	breq	.-10     	; 0x8298 <_ZN14HardwareSerial5writeEh+0x38>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    82a2:	d7 01       	movw	r26, r14
    82a4:	ed 91       	ld	r30, X+
    82a6:	fc 91       	ld	r31, X
    82a8:	11 97       	sbiw	r26, 0x01	; 1
    82aa:	e0 0f       	add	r30, r16
    82ac:	f1 1f       	adc	r31, r17
    82ae:	20 83       	st	Z, r18
  _tx_buffer->head = i;
    82b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    82b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    82b4:	e0 58       	subi	r30, 0x80	; 128
    82b6:	ff 4f       	sbci	r31, 0xFF	; 255
    82b8:	51 83       	std	Z+1, r21	; 0x01
    82ba:	40 83       	st	Z, r20
	
  sbi(*_ucsrb, _udrie);
    82bc:	ee 89       	ldd	r30, Y+22	; 0x16
    82be:	ff 89       	ldd	r31, Y+23	; 0x17
    82c0:	20 81       	ld	r18, Z
    82c2:	81 e0       	ldi	r24, 0x01	; 1
    82c4:	90 e0       	ldi	r25, 0x00	; 0
    82c6:	0d 8c       	ldd	r0, Y+29	; 0x1d
    82c8:	02 c0       	rjmp	.+4      	; 0x82ce <_ZN14HardwareSerial5writeEh+0x6e>
    82ca:	88 0f       	add	r24, r24
    82cc:	99 1f       	adc	r25, r25
    82ce:	0a 94       	dec	r0
    82d0:	e2 f7       	brpl	.-8      	; 0x82ca <_ZN14HardwareSerial5writeEh+0x6a>
    82d2:	28 2b       	or	r18, r24
    82d4:	20 83       	st	Z, r18
  
  return 1;
}
    82d6:	81 e0       	ldi	r24, 0x01	; 1
    82d8:	90 e0       	ldi	r25, 0x00	; 0
    82da:	df 91       	pop	r29
    82dc:	cf 91       	pop	r28
    82de:	1f 91       	pop	r17
    82e0:	0f 91       	pop	r16
    82e2:	ff 90       	pop	r15
    82e4:	ef 90       	pop	r14
    82e6:	08 95       	ret

000082e8 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    82e8:	db 01       	movw	r26, r22
    82ea:	a0 58       	subi	r26, 0x80	; 128
    82ec:	bf 4f       	sbci	r27, 0xFF	; 255
    82ee:	2d 91       	ld	r18, X+
    82f0:	3c 91       	ld	r19, X
    82f2:	11 97       	sbiw	r26, 0x01	; 1
    82f4:	2f 5f       	subi	r18, 0xFF	; 255
    82f6:	3f 4f       	sbci	r19, 0xFF	; 255
    82f8:	2f 77       	andi	r18, 0x7F	; 127
    82fa:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    82fc:	fb 01       	movw	r30, r22
    82fe:	ee 57       	subi	r30, 0x7E	; 126
    8300:	ff 4f       	sbci	r31, 0xFF	; 255
    8302:	40 81       	ld	r20, Z
    8304:	51 81       	ldd	r21, Z+1	; 0x01
    8306:	24 17       	cp	r18, r20
    8308:	35 07       	cpc	r19, r21
    830a:	49 f0       	breq	.+18     	; 0x831e <_Z10store_charhP11ring_buffer+0x36>
    buffer->buffer[buffer->head] = c;
    830c:	ed 91       	ld	r30, X+
    830e:	fc 91       	ld	r31, X
    8310:	11 97       	sbiw	r26, 0x01	; 1
    8312:	e6 0f       	add	r30, r22
    8314:	f7 1f       	adc	r31, r23
    8316:	80 83       	st	Z, r24
    buffer->head = i;
    8318:	11 96       	adiw	r26, 0x01	; 1
    831a:	3c 93       	st	X, r19
    831c:	2e 93       	st	-X, r18
    831e:	08 95       	ret

00008320 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    8320:	08 95       	ret

00008322 <__vector_25>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    8322:	1f 92       	push	r1
    8324:	0f 92       	push	r0
    8326:	0f b6       	in	r0, 0x3f	; 63
    8328:	0f 92       	push	r0
    832a:	0b b6       	in	r0, 0x3b	; 59
    832c:	0f 92       	push	r0
    832e:	11 24       	eor	r1, r1
    8330:	2f 93       	push	r18
    8332:	3f 93       	push	r19
    8334:	4f 93       	push	r20
    8336:	5f 93       	push	r21
    8338:	6f 93       	push	r22
    833a:	7f 93       	push	r23
    833c:	8f 93       	push	r24
    833e:	9f 93       	push	r25
    8340:	af 93       	push	r26
    8342:	bf 93       	push	r27
    8344:	ef 93       	push	r30
    8346:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    8348:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    834c:	66 ed       	ldi	r22, 0xD6	; 214
    834e:	78 e1       	ldi	r23, 0x18	; 24
    8350:	0e 94 74 41 	call	0x82e8	; 0x82e8 <_Z10store_charhP11ring_buffer>
  }
    8354:	ff 91       	pop	r31
    8356:	ef 91       	pop	r30
    8358:	bf 91       	pop	r27
    835a:	af 91       	pop	r26
    835c:	9f 91       	pop	r25
    835e:	8f 91       	pop	r24
    8360:	7f 91       	pop	r23
    8362:	6f 91       	pop	r22
    8364:	5f 91       	pop	r21
    8366:	4f 91       	pop	r20
    8368:	3f 91       	pop	r19
    836a:	2f 91       	pop	r18
    836c:	0f 90       	pop	r0
    836e:	0b be       	out	0x3b, r0	; 59
    8370:	0f 90       	pop	r0
    8372:	0f be       	out	0x3f, r0	; 63
    8374:	0f 90       	pop	r0
    8376:	1f 90       	pop	r1
    8378:	18 95       	reti

0000837a <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
    837a:	08 95       	ret

0000837c <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    837c:	1f 92       	push	r1
    837e:	0f 92       	push	r0
    8380:	0f b6       	in	r0, 0x3f	; 63
    8382:	0f 92       	push	r0
    8384:	0b b6       	in	r0, 0x3b	; 59
    8386:	0f 92       	push	r0
    8388:	11 24       	eor	r1, r1
    838a:	2f 93       	push	r18
    838c:	3f 93       	push	r19
    838e:	4f 93       	push	r20
    8390:	5f 93       	push	r21
    8392:	6f 93       	push	r22
    8394:	7f 93       	push	r23
    8396:	8f 93       	push	r24
    8398:	9f 93       	push	r25
    839a:	af 93       	push	r26
    839c:	bf 93       	push	r27
    839e:	ef 93       	push	r30
    83a0:	ff 93       	push	r31
    unsigned char c = UDR1;
    83a2:	80 91 ce 00 	lds	r24, 0x00CE
    store_char(c, &rx_buffer1);
    83a6:	6e ec       	ldi	r22, 0xCE	; 206
    83a8:	77 e1       	ldi	r23, 0x17	; 23
    83aa:	0e 94 74 41 	call	0x82e8	; 0x82e8 <_Z10store_charhP11ring_buffer>
  }
    83ae:	ff 91       	pop	r31
    83b0:	ef 91       	pop	r30
    83b2:	bf 91       	pop	r27
    83b4:	af 91       	pop	r26
    83b6:	9f 91       	pop	r25
    83b8:	8f 91       	pop	r24
    83ba:	7f 91       	pop	r23
    83bc:	6f 91       	pop	r22
    83be:	5f 91       	pop	r21
    83c0:	4f 91       	pop	r20
    83c2:	3f 91       	pop	r19
    83c4:	2f 91       	pop	r18
    83c6:	0f 90       	pop	r0
    83c8:	0b be       	out	0x3b, r0	; 59
    83ca:	0f 90       	pop	r0
    83cc:	0f be       	out	0x3f, r0	; 63
    83ce:	0f 90       	pop	r0
    83d0:	1f 90       	pop	r1
    83d2:	18 95       	reti

000083d4 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
    83d4:	08 95       	ret

000083d6 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    83d6:	1f 92       	push	r1
    83d8:	0f 92       	push	r0
    83da:	0f b6       	in	r0, 0x3f	; 63
    83dc:	0f 92       	push	r0
    83de:	0b b6       	in	r0, 0x3b	; 59
    83e0:	0f 92       	push	r0
    83e2:	11 24       	eor	r1, r1
    83e4:	2f 93       	push	r18
    83e6:	3f 93       	push	r19
    83e8:	4f 93       	push	r20
    83ea:	5f 93       	push	r21
    83ec:	6f 93       	push	r22
    83ee:	7f 93       	push	r23
    83f0:	8f 93       	push	r24
    83f2:	9f 93       	push	r25
    83f4:	af 93       	push	r26
    83f6:	bf 93       	push	r27
    83f8:	ef 93       	push	r30
    83fa:	ff 93       	push	r31
    unsigned char c = UDR2;
    83fc:	80 91 d6 00 	lds	r24, 0x00D6
    store_char(c, &rx_buffer2);
    8400:	66 ec       	ldi	r22, 0xC6	; 198
    8402:	76 e1       	ldi	r23, 0x16	; 22
    8404:	0e 94 74 41 	call	0x82e8	; 0x82e8 <_Z10store_charhP11ring_buffer>
  }
    8408:	ff 91       	pop	r31
    840a:	ef 91       	pop	r30
    840c:	bf 91       	pop	r27
    840e:	af 91       	pop	r26
    8410:	9f 91       	pop	r25
    8412:	8f 91       	pop	r24
    8414:	7f 91       	pop	r23
    8416:	6f 91       	pop	r22
    8418:	5f 91       	pop	r21
    841a:	4f 91       	pop	r20
    841c:	3f 91       	pop	r19
    841e:	2f 91       	pop	r18
    8420:	0f 90       	pop	r0
    8422:	0b be       	out	0x3b, r0	; 59
    8424:	0f 90       	pop	r0
    8426:	0f be       	out	0x3f, r0	; 63
    8428:	0f 90       	pop	r0
    842a:	1f 90       	pop	r1
    842c:	18 95       	reti

0000842e <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
    842e:	08 95       	ret

00008430 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    8430:	1f 92       	push	r1
    8432:	0f 92       	push	r0
    8434:	0f b6       	in	r0, 0x3f	; 63
    8436:	0f 92       	push	r0
    8438:	0b b6       	in	r0, 0x3b	; 59
    843a:	0f 92       	push	r0
    843c:	11 24       	eor	r1, r1
    843e:	2f 93       	push	r18
    8440:	3f 93       	push	r19
    8442:	4f 93       	push	r20
    8444:	5f 93       	push	r21
    8446:	6f 93       	push	r22
    8448:	7f 93       	push	r23
    844a:	8f 93       	push	r24
    844c:	9f 93       	push	r25
    844e:	af 93       	push	r26
    8450:	bf 93       	push	r27
    8452:	ef 93       	push	r30
    8454:	ff 93       	push	r31
    unsigned char c = UDR3;
    8456:	80 91 36 01 	lds	r24, 0x0136
    store_char(c, &rx_buffer3);
    845a:	6e eb       	ldi	r22, 0xBE	; 190
    845c:	75 e1       	ldi	r23, 0x15	; 21
    845e:	0e 94 74 41 	call	0x82e8	; 0x82e8 <_Z10store_charhP11ring_buffer>
  }
    8462:	ff 91       	pop	r31
    8464:	ef 91       	pop	r30
    8466:	bf 91       	pop	r27
    8468:	af 91       	pop	r26
    846a:	9f 91       	pop	r25
    846c:	8f 91       	pop	r24
    846e:	7f 91       	pop	r23
    8470:	6f 91       	pop	r22
    8472:	5f 91       	pop	r21
    8474:	4f 91       	pop	r20
    8476:	3f 91       	pop	r19
    8478:	2f 91       	pop	r18
    847a:	0f 90       	pop	r0
    847c:	0b be       	out	0x3b, r0	; 59
    847e:	0f 90       	pop	r0
    8480:	0f be       	out	0x3f, r0	; 63
    8482:	0f 90       	pop	r0
    8484:	1f 90       	pop	r1
    8486:	18 95       	reti

00008488 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    8488:	8b e1       	ldi	r24, 0x1B	; 27
    848a:	95 e1       	ldi	r25, 0x15	; 21
    848c:	0e 94 ce 40 	call	0x819c	; 0x819c <_ZN14HardwareSerial9availableEv>
    8490:	00 97       	sbiw	r24, 0x00	; 0
    8492:	11 f0       	breq	.+4      	; 0x8498 <_Z14serialEventRunv+0x10>
    8494:	0e 94 90 41 	call	0x8320	; 0x8320 <_Z11serialEventv>
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
    8498:	8c ef       	ldi	r24, 0xFC	; 252
    849a:	94 e1       	ldi	r25, 0x14	; 20
    849c:	0e 94 ce 40 	call	0x819c	; 0x819c <_ZN14HardwareSerial9availableEv>
    84a0:	00 97       	sbiw	r24, 0x00	; 0
    84a2:	11 f0       	breq	.+4      	; 0x84a8 <_Z14serialEventRunv+0x20>
    84a4:	0e 94 bd 41 	call	0x837a	; 0x837a <_Z12serialEvent1v>
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
    84a8:	8d ed       	ldi	r24, 0xDD	; 221
    84aa:	94 e1       	ldi	r25, 0x14	; 20
    84ac:	0e 94 ce 40 	call	0x819c	; 0x819c <_ZN14HardwareSerial9availableEv>
    84b0:	00 97       	sbiw	r24, 0x00	; 0
    84b2:	11 f0       	breq	.+4      	; 0x84b8 <_Z14serialEventRunv+0x30>
    84b4:	0e 94 ea 41 	call	0x83d4	; 0x83d4 <_Z12serialEvent2v>
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
    84b8:	8e eb       	ldi	r24, 0xBE	; 190
    84ba:	94 e1       	ldi	r25, 0x14	; 20
    84bc:	0e 94 ce 40 	call	0x819c	; 0x819c <_ZN14HardwareSerial9availableEv>
    84c0:	00 97       	sbiw	r24, 0x00	; 0
    84c2:	11 f0       	breq	.+4      	; 0x84c8 <_Z14serialEventRunv+0x40>
    84c4:	0e 94 17 42 	call	0x842e	; 0x842e <_Z12serialEvent3v>
    84c8:	08 95       	ret

000084ca <__vector_26>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    84ca:	1f 92       	push	r1
    84cc:	0f 92       	push	r0
    84ce:	0f b6       	in	r0, 0x3f	; 63
    84d0:	0f 92       	push	r0
    84d2:	0b b6       	in	r0, 0x3b	; 59
    84d4:	0f 92       	push	r0
    84d6:	11 24       	eor	r1, r1
    84d8:	2f 93       	push	r18
    84da:	3f 93       	push	r19
    84dc:	5f 93       	push	r21
    84de:	6f 93       	push	r22
    84e0:	7f 93       	push	r23
    84e2:	8f 93       	push	r24
    84e4:	9f 93       	push	r25
    84e6:	af 93       	push	r26
    84e8:	bf 93       	push	r27
    84ea:	ef 93       	push	r30
    84ec:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    84ee:	20 91 d2 18 	lds	r18, 0x18D2
    84f2:	30 91 d3 18 	lds	r19, 0x18D3
    84f6:	80 91 d4 18 	lds	r24, 0x18D4
    84fa:	90 91 d5 18 	lds	r25, 0x18D5
    84fe:	28 17       	cp	r18, r24
    8500:	39 07       	cpc	r19, r25
    8502:	31 f4       	brne	.+12     	; 0x8510 <__vector_26+0x46>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    8504:	80 91 c1 00 	lds	r24, 0x00C1
    8508:	8f 7d       	andi	r24, 0xDF	; 223
    850a:	80 93 c1 00 	sts	0x00C1, r24
    850e:	16 c0       	rjmp	.+44     	; 0x853c <__vector_26+0x72>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    8510:	e0 91 d4 18 	lds	r30, 0x18D4
    8514:	f0 91 d5 18 	lds	r31, 0x18D5
    8518:	ee 5a       	subi	r30, 0xAE	; 174
    851a:	f7 4e       	sbci	r31, 0xE7	; 231
    851c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    851e:	80 91 d4 18 	lds	r24, 0x18D4
    8522:	90 91 d5 18 	lds	r25, 0x18D5
    8526:	01 96       	adiw	r24, 0x01	; 1
    8528:	60 e8       	ldi	r22, 0x80	; 128
    852a:	70 e0       	ldi	r23, 0x00	; 0
    852c:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__divmodhi4>
    8530:	90 93 d5 18 	sts	0x18D5, r25
    8534:	80 93 d4 18 	sts	0x18D4, r24
	
  #if defined(UDR0)
    UDR0 = c;
    8538:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    853c:	ff 91       	pop	r31
    853e:	ef 91       	pop	r30
    8540:	bf 91       	pop	r27
    8542:	af 91       	pop	r26
    8544:	9f 91       	pop	r25
    8546:	8f 91       	pop	r24
    8548:	7f 91       	pop	r23
    854a:	6f 91       	pop	r22
    854c:	5f 91       	pop	r21
    854e:	3f 91       	pop	r19
    8550:	2f 91       	pop	r18
    8552:	0f 90       	pop	r0
    8554:	0b be       	out	0x3b, r0	; 59
    8556:	0f 90       	pop	r0
    8558:	0f be       	out	0x3f, r0	; 63
    855a:	0f 90       	pop	r0
    855c:	1f 90       	pop	r1
    855e:	18 95       	reti

00008560 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
{
    8560:	1f 92       	push	r1
    8562:	0f 92       	push	r0
    8564:	0f b6       	in	r0, 0x3f	; 63
    8566:	0f 92       	push	r0
    8568:	0b b6       	in	r0, 0x3b	; 59
    856a:	0f 92       	push	r0
    856c:	11 24       	eor	r1, r1
    856e:	2f 93       	push	r18
    8570:	3f 93       	push	r19
    8572:	5f 93       	push	r21
    8574:	6f 93       	push	r22
    8576:	7f 93       	push	r23
    8578:	8f 93       	push	r24
    857a:	9f 93       	push	r25
    857c:	af 93       	push	r26
    857e:	bf 93       	push	r27
    8580:	ef 93       	push	r30
    8582:	ff 93       	push	r31
  if (tx_buffer1.head == tx_buffer1.tail) {
    8584:	20 91 ca 17 	lds	r18, 0x17CA
    8588:	30 91 cb 17 	lds	r19, 0x17CB
    858c:	80 91 cc 17 	lds	r24, 0x17CC
    8590:	90 91 cd 17 	lds	r25, 0x17CD
    8594:	28 17       	cp	r18, r24
    8596:	39 07       	cpc	r19, r25
    8598:	31 f4       	brne	.+12     	; 0x85a6 <__vector_37+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
    859a:	80 91 c9 00 	lds	r24, 0x00C9
    859e:	8f 7d       	andi	r24, 0xDF	; 223
    85a0:	80 93 c9 00 	sts	0x00C9, r24
    85a4:	16 c0       	rjmp	.+44     	; 0x85d2 <__vector_37+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
    85a6:	e0 91 cc 17 	lds	r30, 0x17CC
    85aa:	f0 91 cd 17 	lds	r31, 0x17CD
    85ae:	e6 5b       	subi	r30, 0xB6	; 182
    85b0:	f8 4e       	sbci	r31, 0xE8	; 232
    85b2:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
    85b4:	80 91 cc 17 	lds	r24, 0x17CC
    85b8:	90 91 cd 17 	lds	r25, 0x17CD
    85bc:	01 96       	adiw	r24, 0x01	; 1
    85be:	60 e8       	ldi	r22, 0x80	; 128
    85c0:	70 e0       	ldi	r23, 0x00	; 0
    85c2:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__divmodhi4>
    85c6:	90 93 cd 17 	sts	0x17CD, r25
    85ca:	80 93 cc 17 	sts	0x17CC, r24
	
    UDR1 = c;
    85ce:	20 93 ce 00 	sts	0x00CE, r18
  }
}
    85d2:	ff 91       	pop	r31
    85d4:	ef 91       	pop	r30
    85d6:	bf 91       	pop	r27
    85d8:	af 91       	pop	r26
    85da:	9f 91       	pop	r25
    85dc:	8f 91       	pop	r24
    85de:	7f 91       	pop	r23
    85e0:	6f 91       	pop	r22
    85e2:	5f 91       	pop	r21
    85e4:	3f 91       	pop	r19
    85e6:	2f 91       	pop	r18
    85e8:	0f 90       	pop	r0
    85ea:	0b be       	out	0x3b, r0	; 59
    85ec:	0f 90       	pop	r0
    85ee:	0f be       	out	0x3f, r0	; 63
    85f0:	0f 90       	pop	r0
    85f2:	1f 90       	pop	r1
    85f4:	18 95       	reti

000085f6 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
{
    85f6:	1f 92       	push	r1
    85f8:	0f 92       	push	r0
    85fa:	0f b6       	in	r0, 0x3f	; 63
    85fc:	0f 92       	push	r0
    85fe:	0b b6       	in	r0, 0x3b	; 59
    8600:	0f 92       	push	r0
    8602:	11 24       	eor	r1, r1
    8604:	2f 93       	push	r18
    8606:	3f 93       	push	r19
    8608:	5f 93       	push	r21
    860a:	6f 93       	push	r22
    860c:	7f 93       	push	r23
    860e:	8f 93       	push	r24
    8610:	9f 93       	push	r25
    8612:	af 93       	push	r26
    8614:	bf 93       	push	r27
    8616:	ef 93       	push	r30
    8618:	ff 93       	push	r31
  if (tx_buffer2.head == tx_buffer2.tail) {
    861a:	20 91 c2 16 	lds	r18, 0x16C2
    861e:	30 91 c3 16 	lds	r19, 0x16C3
    8622:	80 91 c4 16 	lds	r24, 0x16C4
    8626:	90 91 c5 16 	lds	r25, 0x16C5
    862a:	28 17       	cp	r18, r24
    862c:	39 07       	cpc	r19, r25
    862e:	31 f4       	brne	.+12     	; 0x863c <__vector_52+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
    8630:	80 91 d1 00 	lds	r24, 0x00D1
    8634:	8f 7d       	andi	r24, 0xDF	; 223
    8636:	80 93 d1 00 	sts	0x00D1, r24
    863a:	16 c0       	rjmp	.+44     	; 0x8668 <__vector_52+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
    863c:	e0 91 c4 16 	lds	r30, 0x16C4
    8640:	f0 91 c5 16 	lds	r31, 0x16C5
    8644:	ee 5b       	subi	r30, 0xBE	; 190
    8646:	f9 4e       	sbci	r31, 0xE9	; 233
    8648:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
    864a:	80 91 c4 16 	lds	r24, 0x16C4
    864e:	90 91 c5 16 	lds	r25, 0x16C5
    8652:	01 96       	adiw	r24, 0x01	; 1
    8654:	60 e8       	ldi	r22, 0x80	; 128
    8656:	70 e0       	ldi	r23, 0x00	; 0
    8658:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__divmodhi4>
    865c:	90 93 c5 16 	sts	0x16C5, r25
    8660:	80 93 c4 16 	sts	0x16C4, r24
	
    UDR2 = c;
    8664:	20 93 d6 00 	sts	0x00D6, r18
  }
}
    8668:	ff 91       	pop	r31
    866a:	ef 91       	pop	r30
    866c:	bf 91       	pop	r27
    866e:	af 91       	pop	r26
    8670:	9f 91       	pop	r25
    8672:	8f 91       	pop	r24
    8674:	7f 91       	pop	r23
    8676:	6f 91       	pop	r22
    8678:	5f 91       	pop	r21
    867a:	3f 91       	pop	r19
    867c:	2f 91       	pop	r18
    867e:	0f 90       	pop	r0
    8680:	0b be       	out	0x3b, r0	; 59
    8682:	0f 90       	pop	r0
    8684:	0f be       	out	0x3f, r0	; 63
    8686:	0f 90       	pop	r0
    8688:	1f 90       	pop	r1
    868a:	18 95       	reti

0000868c <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
{
    868c:	1f 92       	push	r1
    868e:	0f 92       	push	r0
    8690:	0f b6       	in	r0, 0x3f	; 63
    8692:	0f 92       	push	r0
    8694:	0b b6       	in	r0, 0x3b	; 59
    8696:	0f 92       	push	r0
    8698:	11 24       	eor	r1, r1
    869a:	2f 93       	push	r18
    869c:	3f 93       	push	r19
    869e:	5f 93       	push	r21
    86a0:	6f 93       	push	r22
    86a2:	7f 93       	push	r23
    86a4:	8f 93       	push	r24
    86a6:	9f 93       	push	r25
    86a8:	af 93       	push	r26
    86aa:	bf 93       	push	r27
    86ac:	ef 93       	push	r30
    86ae:	ff 93       	push	r31
  if (tx_buffer3.head == tx_buffer3.tail) {
    86b0:	20 91 ba 15 	lds	r18, 0x15BA
    86b4:	30 91 bb 15 	lds	r19, 0x15BB
    86b8:	80 91 bc 15 	lds	r24, 0x15BC
    86bc:	90 91 bd 15 	lds	r25, 0x15BD
    86c0:	28 17       	cp	r18, r24
    86c2:	39 07       	cpc	r19, r25
    86c4:	31 f4       	brne	.+12     	; 0x86d2 <__vector_55+0x46>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
    86c6:	80 91 31 01 	lds	r24, 0x0131
    86ca:	8f 7d       	andi	r24, 0xDF	; 223
    86cc:	80 93 31 01 	sts	0x0131, r24
    86d0:	16 c0       	rjmp	.+44     	; 0x86fe <__vector_55+0x72>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
    86d2:	e0 91 bc 15 	lds	r30, 0x15BC
    86d6:	f0 91 bd 15 	lds	r31, 0x15BD
    86da:	e6 5c       	subi	r30, 0xC6	; 198
    86dc:	fa 4e       	sbci	r31, 0xEA	; 234
    86de:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
    86e0:	80 91 bc 15 	lds	r24, 0x15BC
    86e4:	90 91 bd 15 	lds	r25, 0x15BD
    86e8:	01 96       	adiw	r24, 0x01	; 1
    86ea:	60 e8       	ldi	r22, 0x80	; 128
    86ec:	70 e0       	ldi	r23, 0x00	; 0
    86ee:	0e 94 7d 48 	call	0x90fa	; 0x90fa <__divmodhi4>
    86f2:	90 93 bd 15 	sts	0x15BD, r25
    86f6:	80 93 bc 15 	sts	0x15BC, r24
	
    UDR3 = c;
    86fa:	20 93 36 01 	sts	0x0136, r18
  }
}
    86fe:	ff 91       	pop	r31
    8700:	ef 91       	pop	r30
    8702:	bf 91       	pop	r27
    8704:	af 91       	pop	r26
    8706:	9f 91       	pop	r25
    8708:	8f 91       	pop	r24
    870a:	7f 91       	pop	r23
    870c:	6f 91       	pop	r22
    870e:	5f 91       	pop	r21
    8710:	3f 91       	pop	r19
    8712:	2f 91       	pop	r18
    8714:	0f 90       	pop	r0
    8716:	0b be       	out	0x3b, r0	; 59
    8718:	0f 90       	pop	r0
    871a:	0f be       	out	0x3f, r0	; 63
    871c:	0f 90       	pop	r0
    871e:	1f 90       	pop	r1
    8720:	18 95       	reti

00008722 <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    8722:	bf 92       	push	r11
    8724:	cf 92       	push	r12
    8726:	df 92       	push	r13
    8728:	ef 92       	push	r14
    872a:	ff 92       	push	r15
    872c:	0f 93       	push	r16
    872e:	1f 93       	push	r17
    8730:	cf 93       	push	r28
    8732:	df 93       	push	r29
    8734:	ec 01       	movw	r28, r24
    8736:	6a 01       	movw	r12, r20
    8738:	7b 01       	movw	r14, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    873a:	bb 24       	eor	r11, r11
    873c:	b3 94       	inc	r11
    873e:	40 30       	cpi	r20, 0x00	; 0
    8740:	81 ee       	ldi	r24, 0xE1	; 225
    8742:	58 07       	cpc	r21, r24
    8744:	80 e0       	ldi	r24, 0x00	; 0
    8746:	68 07       	cpc	r22, r24
    8748:	80 e0       	ldi	r24, 0x00	; 0
    874a:	78 07       	cpc	r23, r24
    874c:	49 f4       	brne	.+18     	; 0x8760 <_ZN14HardwareSerial5beginEm+0x3e>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    874e:	bb 24       	eor	r11, r11
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    8750:	ec 89       	ldd	r30, Y+20	; 0x14
    8752:	fd 89       	ldd	r31, Y+21	; 0x15
    8754:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    8756:	60 e8       	ldi	r22, 0x80	; 128
    8758:	74 e8       	ldi	r23, 0x84	; 132
    875a:	8e e1       	ldi	r24, 0x1E	; 30
    875c:	90 e0       	ldi	r25, 0x00	; 0
    875e:	0f c0       	rjmp	.+30     	; 0x877e <_ZN14HardwareSerial5beginEm+0x5c>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    8760:	ec 89       	ldd	r30, Y+20	; 0x14
    8762:	fd 89       	ldd	r31, Y+21	; 0x15
    8764:	81 e0       	ldi	r24, 0x01	; 1
    8766:	90 e0       	ldi	r25, 0x00	; 0
    8768:	0e 8c       	ldd	r0, Y+30	; 0x1e
    876a:	02 c0       	rjmp	.+4      	; 0x8770 <_ZN14HardwareSerial5beginEm+0x4e>
    876c:	88 0f       	add	r24, r24
    876e:	99 1f       	adc	r25, r25
    8770:	0a 94       	dec	r0
    8772:	e2 f7       	brpl	.-8      	; 0x876c <_ZN14HardwareSerial5beginEm+0x4a>
    8774:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    8776:	60 e0       	ldi	r22, 0x00	; 0
    8778:	79 e0       	ldi	r23, 0x09	; 9
    877a:	8d e3       	ldi	r24, 0x3D	; 61
    877c:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    877e:	a7 01       	movw	r20, r14
    8780:	96 01       	movw	r18, r12
    8782:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>
    8786:	89 01       	movw	r16, r18
    8788:	9a 01       	movw	r18, r20
    878a:	01 50       	subi	r16, 0x01	; 1
    878c:	10 40       	sbci	r17, 0x00	; 0
    878e:	20 40       	sbci	r18, 0x00	; 0
    8790:	30 40       	sbci	r19, 0x00	; 0
    8792:	36 95       	lsr	r19
    8794:	27 95       	ror	r18
    8796:	17 95       	ror	r17
    8798:	07 95       	ror	r16
  }
  
  if ((baud_setting > 4095) && use_u2x)
    879a:	80 e1       	ldi	r24, 0x10	; 16
    879c:	00 30       	cpi	r16, 0x00	; 0
    879e:	18 07       	cpc	r17, r24
    87a0:	10 f0       	brcs	.+4      	; 0x87a6 <_ZN14HardwareSerial5beginEm+0x84>
    87a2:	bb 20       	and	r11, r11
    87a4:	a1 f6       	brne	.-88     	; 0x874e <_ZN14HardwareSerial5beginEm+0x2c>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    87a6:	e8 89       	ldd	r30, Y+16	; 0x10
    87a8:	f9 89       	ldd	r31, Y+17	; 0x11
    87aa:	10 83       	st	Z, r17
  *_ubrrl = baud_setting;
    87ac:	ea 89       	ldd	r30, Y+18	; 0x12
    87ae:	fb 89       	ldd	r31, Y+19	; 0x13
    87b0:	00 83       	st	Z, r16

  sbi(*_ucsrb, _rxen);
    87b2:	ee 89       	ldd	r30, Y+22	; 0x16
    87b4:	ff 89       	ldd	r31, Y+23	; 0x17
    87b6:	40 81       	ld	r20, Z
    87b8:	21 e0       	ldi	r18, 0x01	; 1
    87ba:	30 e0       	ldi	r19, 0x00	; 0
    87bc:	c9 01       	movw	r24, r18
    87be:	0a 8c       	ldd	r0, Y+26	; 0x1a
    87c0:	02 c0       	rjmp	.+4      	; 0x87c6 <_ZN14HardwareSerial5beginEm+0xa4>
    87c2:	88 0f       	add	r24, r24
    87c4:	99 1f       	adc	r25, r25
    87c6:	0a 94       	dec	r0
    87c8:	e2 f7       	brpl	.-8      	; 0x87c2 <_ZN14HardwareSerial5beginEm+0xa0>
    87ca:	48 2b       	or	r20, r24
    87cc:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    87ce:	ee 89       	ldd	r30, Y+22	; 0x16
    87d0:	ff 89       	ldd	r31, Y+23	; 0x17
    87d2:	40 81       	ld	r20, Z
    87d4:	c9 01       	movw	r24, r18
    87d6:	0b 8c       	ldd	r0, Y+27	; 0x1b
    87d8:	02 c0       	rjmp	.+4      	; 0x87de <_ZN14HardwareSerial5beginEm+0xbc>
    87da:	88 0f       	add	r24, r24
    87dc:	99 1f       	adc	r25, r25
    87de:	0a 94       	dec	r0
    87e0:	e2 f7       	brpl	.-8      	; 0x87da <_ZN14HardwareSerial5beginEm+0xb8>
    87e2:	48 2b       	or	r20, r24
    87e4:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    87e6:	ee 89       	ldd	r30, Y+22	; 0x16
    87e8:	ff 89       	ldd	r31, Y+23	; 0x17
    87ea:	40 81       	ld	r20, Z
    87ec:	c9 01       	movw	r24, r18
    87ee:	0c 8c       	ldd	r0, Y+28	; 0x1c
    87f0:	02 c0       	rjmp	.+4      	; 0x87f6 <_ZN14HardwareSerial5beginEm+0xd4>
    87f2:	88 0f       	add	r24, r24
    87f4:	99 1f       	adc	r25, r25
    87f6:	0a 94       	dec	r0
    87f8:	e2 f7       	brpl	.-8      	; 0x87f2 <_ZN14HardwareSerial5beginEm+0xd0>
    87fa:	48 2b       	or	r20, r24
    87fc:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    87fe:	ee 89       	ldd	r30, Y+22	; 0x16
    8800:	ff 89       	ldd	r31, Y+23	; 0x17
    8802:	80 81       	ld	r24, Z
    8804:	0d 8c       	ldd	r0, Y+29	; 0x1d
    8806:	02 c0       	rjmp	.+4      	; 0x880c <_ZN14HardwareSerial5beginEm+0xea>
    8808:	22 0f       	add	r18, r18
    880a:	33 1f       	adc	r19, r19
    880c:	0a 94       	dec	r0
    880e:	e2 f7       	brpl	.-8      	; 0x8808 <_ZN14HardwareSerial5beginEm+0xe6>
    8810:	20 95       	com	r18
    8812:	28 23       	and	r18, r24
    8814:	20 83       	st	Z, r18
}
    8816:	df 91       	pop	r29
    8818:	cf 91       	pop	r28
    881a:	1f 91       	pop	r17
    881c:	0f 91       	pop	r16
    881e:	ff 90       	pop	r15
    8820:	ef 90       	pop	r14
    8822:	df 90       	pop	r13
    8824:	cf 90       	pop	r12
    8826:	bf 90       	pop	r11
    8828:	08 95       	ret

0000882a <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    882a:	cf 92       	push	r12
    882c:	df 92       	push	r13
    882e:	ef 92       	push	r14
    8830:	ff 92       	push	r15
    8832:	10 92 1e 15 	sts	0x151E, r1
    8836:	10 92 1d 15 	sts	0x151D, r1
    883a:	78 ee       	ldi	r23, 0xE8	; 232
    883c:	c7 2e       	mov	r12, r23
    883e:	73 e0       	ldi	r23, 0x03	; 3
    8840:	d7 2e       	mov	r13, r23
    8842:	e1 2c       	mov	r14, r1
    8844:	f1 2c       	mov	r15, r1
    8846:	c0 92 1f 15 	sts	0x151F, r12
    884a:	d0 92 20 15 	sts	0x1520, r13
    884e:	e0 92 21 15 	sts	0x1521, r14
    8852:	f0 92 22 15 	sts	0x1522, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    8856:	ed e1       	ldi	r30, 0x1D	; 29
    8858:	f5 e1       	ldi	r31, 0x15	; 21
    885a:	a9 ec       	ldi	r26, 0xC9	; 201
    885c:	bf e0       	ldi	r27, 0x0F	; 15
    885e:	b2 93       	st	-Z, r27
    8860:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
    8862:	86 ed       	ldi	r24, 0xD6	; 214
    8864:	98 e1       	ldi	r25, 0x18	; 24
    8866:	95 87       	std	Z+13, r25	; 0x0d
    8868:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    886a:	82 e5       	ldi	r24, 0x52	; 82
    886c:	98 e1       	ldi	r25, 0x18	; 24
    886e:	97 87       	std	Z+15, r25	; 0x0f
    8870:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    8872:	85 ec       	ldi	r24, 0xC5	; 197
    8874:	90 e0       	ldi	r25, 0x00	; 0
    8876:	91 8b       	std	Z+17, r25	; 0x11
    8878:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    887a:	84 ec       	ldi	r24, 0xC4	; 196
    887c:	90 e0       	ldi	r25, 0x00	; 0
    887e:	93 8b       	std	Z+19, r25	; 0x13
    8880:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    8882:	80 ec       	ldi	r24, 0xC0	; 192
    8884:	90 e0       	ldi	r25, 0x00	; 0
    8886:	95 8b       	std	Z+21, r25	; 0x15
    8888:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    888a:	81 ec       	ldi	r24, 0xC1	; 193
    888c:	90 e0       	ldi	r25, 0x00	; 0
    888e:	97 8b       	std	Z+23, r25	; 0x17
    8890:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    8892:	86 ec       	ldi	r24, 0xC6	; 198
    8894:	90 e0       	ldi	r25, 0x00	; 0
    8896:	91 8f       	std	Z+25, r25	; 0x19
    8898:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    889a:	84 e0       	ldi	r24, 0x04	; 4
    889c:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    889e:	93 e0       	ldi	r25, 0x03	; 3
    88a0:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
    88a2:	47 e0       	ldi	r20, 0x07	; 7
    88a4:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
    88a6:	55 e0       	ldi	r21, 0x05	; 5
    88a8:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    88aa:	61 e0       	ldi	r22, 0x01	; 1
    88ac:	66 8f       	std	Z+30, r22	; 0x1e
    88ae:	10 92 ff 14 	sts	0x14FF, r1
    88b2:	10 92 fe 14 	sts	0x14FE, r1
    88b6:	c0 92 00 15 	sts	0x1500, r12
    88ba:	d0 92 01 15 	sts	0x1501, r13
    88be:	e0 92 02 15 	sts	0x1502, r14
    88c2:	f0 92 03 15 	sts	0x1503, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    88c6:	ee ef       	ldi	r30, 0xFE	; 254
    88c8:	f4 e1       	ldi	r31, 0x14	; 20
    88ca:	b2 93       	st	-Z, r27
    88cc:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
    88ce:	2e ec       	ldi	r18, 0xCE	; 206
    88d0:	37 e1       	ldi	r19, 0x17	; 23
    88d2:	35 87       	std	Z+13, r19	; 0x0d
    88d4:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
    88d6:	2a e4       	ldi	r18, 0x4A	; 74
    88d8:	37 e1       	ldi	r19, 0x17	; 23
    88da:	37 87       	std	Z+15, r19	; 0x0f
    88dc:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
    88de:	2d ec       	ldi	r18, 0xCD	; 205
    88e0:	30 e0       	ldi	r19, 0x00	; 0
    88e2:	31 8b       	std	Z+17, r19	; 0x11
    88e4:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    88e6:	2c ec       	ldi	r18, 0xCC	; 204
    88e8:	30 e0       	ldi	r19, 0x00	; 0
    88ea:	33 8b       	std	Z+19, r19	; 0x13
    88ec:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
    88ee:	28 ec       	ldi	r18, 0xC8	; 200
    88f0:	30 e0       	ldi	r19, 0x00	; 0
    88f2:	35 8b       	std	Z+21, r19	; 0x15
    88f4:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
    88f6:	29 ec       	ldi	r18, 0xC9	; 201
    88f8:	30 e0       	ldi	r19, 0x00	; 0
    88fa:	37 8b       	std	Z+23, r19	; 0x17
    88fc:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
    88fe:	2e ec       	ldi	r18, 0xCE	; 206
    8900:	30 e0       	ldi	r19, 0x00	; 0
    8902:	31 8f       	std	Z+25, r19	; 0x19
    8904:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
    8906:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    8908:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
    890a:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
    890c:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    890e:	66 8f       	std	Z+30, r22	; 0x1e
    8910:	10 92 e0 14 	sts	0x14E0, r1
    8914:	10 92 df 14 	sts	0x14DF, r1
    8918:	c0 92 e1 14 	sts	0x14E1, r12
    891c:	d0 92 e2 14 	sts	0x14E2, r13
    8920:	e0 92 e3 14 	sts	0x14E3, r14
    8924:	f0 92 e4 14 	sts	0x14E4, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    8928:	ef ed       	ldi	r30, 0xDF	; 223
    892a:	f4 e1       	ldi	r31, 0x14	; 20
    892c:	b2 93       	st	-Z, r27
    892e:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
    8930:	26 ec       	ldi	r18, 0xC6	; 198
    8932:	36 e1       	ldi	r19, 0x16	; 22
    8934:	35 87       	std	Z+13, r19	; 0x0d
    8936:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
    8938:	22 e4       	ldi	r18, 0x42	; 66
    893a:	36 e1       	ldi	r19, 0x16	; 22
    893c:	37 87       	std	Z+15, r19	; 0x0f
    893e:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
    8940:	25 ed       	ldi	r18, 0xD5	; 213
    8942:	30 e0       	ldi	r19, 0x00	; 0
    8944:	31 8b       	std	Z+17, r19	; 0x11
    8946:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    8948:	24 ed       	ldi	r18, 0xD4	; 212
    894a:	30 e0       	ldi	r19, 0x00	; 0
    894c:	33 8b       	std	Z+19, r19	; 0x13
    894e:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
    8950:	20 ed       	ldi	r18, 0xD0	; 208
    8952:	30 e0       	ldi	r19, 0x00	; 0
    8954:	35 8b       	std	Z+21, r19	; 0x15
    8956:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
    8958:	21 ed       	ldi	r18, 0xD1	; 209
    895a:	30 e0       	ldi	r19, 0x00	; 0
    895c:	37 8b       	std	Z+23, r19	; 0x17
    895e:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
    8960:	26 ed       	ldi	r18, 0xD6	; 214
    8962:	30 e0       	ldi	r19, 0x00	; 0
    8964:	31 8f       	std	Z+25, r19	; 0x19
    8966:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
    8968:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    896a:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
    896c:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
    896e:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    8970:	66 8f       	std	Z+30, r22	; 0x1e
    8972:	10 92 c1 14 	sts	0x14C1, r1
    8976:	10 92 c0 14 	sts	0x14C0, r1
    897a:	c0 92 c2 14 	sts	0x14C2, r12
    897e:	d0 92 c3 14 	sts	0x14C3, r13
    8982:	e0 92 c4 14 	sts	0x14C4, r14
    8986:	f0 92 c5 14 	sts	0x14C5, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    898a:	e0 ec       	ldi	r30, 0xC0	; 192
    898c:	f4 e1       	ldi	r31, 0x14	; 20
    898e:	b2 93       	st	-Z, r27
    8990:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
    8992:	2e eb       	ldi	r18, 0xBE	; 190
    8994:	35 e1       	ldi	r19, 0x15	; 21
    8996:	35 87       	std	Z+13, r19	; 0x0d
    8998:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
    899a:	2a e3       	ldi	r18, 0x3A	; 58
    899c:	35 e1       	ldi	r19, 0x15	; 21
    899e:	37 87       	std	Z+15, r19	; 0x0f
    89a0:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
    89a2:	25 e3       	ldi	r18, 0x35	; 53
    89a4:	31 e0       	ldi	r19, 0x01	; 1
    89a6:	31 8b       	std	Z+17, r19	; 0x11
    89a8:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    89aa:	24 e3       	ldi	r18, 0x34	; 52
    89ac:	31 e0       	ldi	r19, 0x01	; 1
    89ae:	33 8b       	std	Z+19, r19	; 0x13
    89b0:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
    89b2:	20 e3       	ldi	r18, 0x30	; 48
    89b4:	31 e0       	ldi	r19, 0x01	; 1
    89b6:	35 8b       	std	Z+21, r19	; 0x15
    89b8:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
    89ba:	21 e3       	ldi	r18, 0x31	; 49
    89bc:	31 e0       	ldi	r19, 0x01	; 1
    89be:	37 8b       	std	Z+23, r19	; 0x17
    89c0:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
    89c2:	26 e3       	ldi	r18, 0x36	; 54
    89c4:	31 e0       	ldi	r19, 0x01	; 1
    89c6:	31 8f       	std	Z+25, r19	; 0x19
    89c8:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
    89ca:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    89cc:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
    89ce:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
    89d0:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
    89d2:	66 8f       	std	Z+30, r22	; 0x1e
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
    89d4:	ff 90       	pop	r15
    89d6:	ef 90       	pop	r14
    89d8:	df 90       	pop	r13
    89da:	cf 90       	pop	r12
    89dc:	08 95       	ret

000089de <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    89de:	cf 92       	push	r12
    89e0:	df 92       	push	r13
    89e2:	ef 92       	push	r14
    89e4:	ff 92       	push	r15
    89e6:	0f 93       	push	r16
    89e8:	1f 93       	push	r17
    89ea:	cf 93       	push	r28
    89ec:	df 93       	push	r29
    89ee:	6c 01       	movw	r12, r24
    89f0:	7b 01       	movw	r14, r22
    89f2:	ea 01       	movw	r28, r20
  size_t n = 0;
    89f4:	00 e0       	ldi	r16, 0x00	; 0
    89f6:	10 e0       	ldi	r17, 0x00	; 0
  while (size--) {
    89f8:	0e c0       	rjmp	.+28     	; 0x8a16 <_ZN5Print5writeEPKhj+0x38>
    n += write(*buffer++);
    89fa:	d7 01       	movw	r26, r14
    89fc:	6d 91       	ld	r22, X+
    89fe:	7d 01       	movw	r14, r26
    8a00:	d6 01       	movw	r26, r12
    8a02:	ed 91       	ld	r30, X+
    8a04:	fc 91       	ld	r31, X
    8a06:	01 90       	ld	r0, Z+
    8a08:	f0 81       	ld	r31, Z
    8a0a:	e0 2d       	mov	r30, r0
    8a0c:	c6 01       	movw	r24, r12
    8a0e:	19 95       	eicall
    8a10:	08 0f       	add	r16, r24
    8a12:	19 1f       	adc	r17, r25
    8a14:	21 97       	sbiw	r28, 0x01	; 1

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    8a16:	20 97       	sbiw	r28, 0x00	; 0
    8a18:	81 f7       	brne	.-32     	; 0x89fa <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    8a1a:	c8 01       	movw	r24, r16
    8a1c:	df 91       	pop	r29
    8a1e:	cf 91       	pop	r28
    8a20:	1f 91       	pop	r17
    8a22:	0f 91       	pop	r16
    8a24:	ff 90       	pop	r15
    8a26:	ef 90       	pop	r14
    8a28:	df 90       	pop	r13
    8a2a:	cf 90       	pop	r12
    8a2c:	08 95       	ret

00008a2e <_ZN5Print5printEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    8a2e:	db 01       	movw	r26, r22
    8a30:	0d 90       	ld	r0, X+
    8a32:	00 20       	and	r0, r0
    8a34:	e9 f7       	brne	.-6      	; 0x8a30 <_ZN5Print5printEPKc+0x2>
    8a36:	ad 01       	movw	r20, r26
    8a38:	41 50       	subi	r20, 0x01	; 1
    8a3a:	50 40       	sbci	r21, 0x00	; 0
    8a3c:	46 1b       	sub	r20, r22
    8a3e:	57 0b       	sbc	r21, r23
    8a40:	dc 01       	movw	r26, r24
    8a42:	ed 91       	ld	r30, X+
    8a44:	fc 91       	ld	r31, X
    8a46:	02 80       	ldd	r0, Z+2	; 0x02
    8a48:	f3 81       	ldd	r31, Z+3	; 0x03
    8a4a:	e0 2d       	mov	r30, r0
    8a4c:	19 95       	eicall
}

size_t Print::print(const char str[])
{
  return write(str);
}
    8a4e:	08 95       	ret

00008a50 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    8a50:	dc 01       	movw	r26, r24
    8a52:	ed 91       	ld	r30, X+
    8a54:	fc 91       	ld	r31, X
    8a56:	01 90       	ld	r0, Z+
    8a58:	f0 81       	ld	r31, Z
    8a5a:	e0 2d       	mov	r30, r0
    8a5c:	19 95       	eicall
}
    8a5e:	08 95       	ret

00008a60 <_ZN5Print11printNumberEmh>:
  return n;
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    8a60:	6f 92       	push	r6
    8a62:	7f 92       	push	r7
    8a64:	8f 92       	push	r8
    8a66:	9f 92       	push	r9
    8a68:	af 92       	push	r10
    8a6a:	bf 92       	push	r11
    8a6c:	cf 92       	push	r12
    8a6e:	df 92       	push	r13
    8a70:	ef 92       	push	r14
    8a72:	ff 92       	push	r15
    8a74:	0f 93       	push	r16
    8a76:	1f 93       	push	r17
    8a78:	cf 93       	push	r28
    8a7a:	df 93       	push	r29
    8a7c:	cd b7       	in	r28, 0x3d	; 61
    8a7e:	de b7       	in	r29, 0x3e	; 62
    8a80:	a1 97       	sbiw	r28, 0x21	; 33
    8a82:	0f b6       	in	r0, 0x3f	; 63
    8a84:	f8 94       	cli
    8a86:	de bf       	out	0x3e, r29	; 62
    8a88:	0f be       	out	0x3f, r0	; 63
    8a8a:	cd bf       	out	0x3d, r28	; 61
    8a8c:	3c 01       	movw	r6, r24
    8a8e:	e4 2e       	mov	r14, r20
    8a90:	cb 01       	movw	r24, r22
    8a92:	f2 2e       	mov	r15, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    8a94:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    8a96:	21 e0       	ldi	r18, 0x01	; 1
    8a98:	2f 15       	cp	r18, r15
    8a9a:	10 f0       	brcs	.+4      	; 0x8aa0 <_ZN5Print11printNumberEmh+0x40>
    8a9c:	3a e0       	ldi	r19, 0x0A	; 10
    8a9e:	f3 2e       	mov	r15, r19
    8aa0:	21 e2       	ldi	r18, 0x21	; 33
    8aa2:	c2 2e       	mov	r12, r18
    8aa4:	d1 2c       	mov	r13, r1
    8aa6:	cc 0e       	add	r12, r28
    8aa8:	dd 1e       	adc	r13, r29

  do {
    unsigned long m = n;
    n /= base;
    8aaa:	8f 2c       	mov	r8, r15
    8aac:	99 24       	eor	r9, r9
    8aae:	aa 24       	eor	r10, r10
    8ab0:	bb 24       	eor	r11, r11
    8ab2:	03 c0       	rjmp	.+6      	; 0x8aba <_ZN5Print11printNumberEmh+0x5a>
    8ab4:	e0 2e       	mov	r14, r16
    8ab6:	51 2f       	mov	r21, r17
    8ab8:	c9 01       	movw	r24, r18
    8aba:	6e 2d       	mov	r22, r14
    8abc:	75 2f       	mov	r23, r21
    8abe:	a5 01       	movw	r20, r10
    8ac0:	94 01       	movw	r18, r8
    8ac2:	0e 94 90 48 	call	0x9120	; 0x9120 <__udivmodsi4>
    8ac6:	89 01       	movw	r16, r18
    8ac8:	9a 01       	movw	r18, r20
    char c = m - base * n;
    8aca:	f0 9e       	mul	r15, r16
    8acc:	80 2d       	mov	r24, r0
    8ace:	11 24       	eor	r1, r1
    8ad0:	e8 1a       	sub	r14, r24
    8ad2:	8e 2d       	mov	r24, r14
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    8ad4:	08 94       	sec
    8ad6:	c1 08       	sbc	r12, r1
    8ad8:	d1 08       	sbc	r13, r1
    8ada:	8a 30       	cpi	r24, 0x0A	; 10
    8adc:	14 f4       	brge	.+4      	; 0x8ae2 <_ZN5Print11printNumberEmh+0x82>
    8ade:	80 5d       	subi	r24, 0xD0	; 208
    8ae0:	01 c0       	rjmp	.+2      	; 0x8ae4 <_ZN5Print11printNumberEmh+0x84>
    8ae2:	89 5c       	subi	r24, 0xC9	; 201
    8ae4:	d6 01       	movw	r26, r12
    8ae6:	8c 93       	st	X, r24
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    8ae8:	01 15       	cp	r16, r1
    8aea:	11 05       	cpc	r17, r1
    8aec:	21 05       	cpc	r18, r1
    8aee:	31 05       	cpc	r19, r1
    8af0:	09 f7       	brne	.-62     	; 0x8ab4 <_ZN5Print11printNumberEmh+0x54>
    8af2:	d6 01       	movw	r26, r12
    8af4:	0d 90       	ld	r0, X+
    8af6:	00 20       	and	r0, r0
    8af8:	e9 f7       	brne	.-6      	; 0x8af4 <_ZN5Print11printNumberEmh+0x94>
    8afa:	ad 01       	movw	r20, r26
    8afc:	41 50       	subi	r20, 0x01	; 1
    8afe:	50 40       	sbci	r21, 0x00	; 0
    8b00:	4c 19       	sub	r20, r12
    8b02:	5d 09       	sbc	r21, r13
    8b04:	d3 01       	movw	r26, r6
    8b06:	ed 91       	ld	r30, X+
    8b08:	fc 91       	ld	r31, X
    8b0a:	02 80       	ldd	r0, Z+2	; 0x02
    8b0c:	f3 81       	ldd	r31, Z+3	; 0x03
    8b0e:	e0 2d       	mov	r30, r0
    8b10:	c3 01       	movw	r24, r6
    8b12:	b6 01       	movw	r22, r12
    8b14:	19 95       	eicall
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
}
    8b16:	a1 96       	adiw	r28, 0x21	; 33
    8b18:	0f b6       	in	r0, 0x3f	; 63
    8b1a:	f8 94       	cli
    8b1c:	de bf       	out	0x3e, r29	; 62
    8b1e:	0f be       	out	0x3f, r0	; 63
    8b20:	cd bf       	out	0x3d, r28	; 61
    8b22:	df 91       	pop	r29
    8b24:	cf 91       	pop	r28
    8b26:	1f 91       	pop	r17
    8b28:	0f 91       	pop	r16
    8b2a:	ff 90       	pop	r15
    8b2c:	ef 90       	pop	r14
    8b2e:	df 90       	pop	r13
    8b30:	cf 90       	pop	r12
    8b32:	bf 90       	pop	r11
    8b34:	af 90       	pop	r10
    8b36:	9f 90       	pop	r9
    8b38:	8f 90       	pop	r8
    8b3a:	7f 90       	pop	r7
    8b3c:	6f 90       	pop	r6
    8b3e:	08 95       	ret

00008b40 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    8b40:	21 15       	cp	r18, r1
    8b42:	31 05       	cpc	r19, r1
    8b44:	49 f4       	brne	.+18     	; 0x8b58 <_ZN5Print5printEmi+0x18>
    8b46:	dc 01       	movw	r26, r24
    8b48:	ed 91       	ld	r30, X+
    8b4a:	fc 91       	ld	r31, X
    8b4c:	01 90       	ld	r0, Z+
    8b4e:	f0 81       	ld	r31, Z
    8b50:	e0 2d       	mov	r30, r0
    8b52:	64 2f       	mov	r22, r20
    8b54:	19 95       	eicall
    8b56:	08 95       	ret
  else return printNumber(n, base);
    8b58:	0e 94 30 45 	call	0x8a60	; 0x8a60 <_ZN5Print11printNumberEmh>
}
    8b5c:	08 95       	ret

00008b5e <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    8b5e:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    8b60:	ab 01       	movw	r20, r22
    8b62:	60 e0       	ldi	r22, 0x00	; 0
    8b64:	70 e0       	ldi	r23, 0x00	; 0
    8b66:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <_ZN5Print5printEmi>
}
    8b6a:	08 95       	ret

00008b6c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    8b6c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    8b6e:	46 2f       	mov	r20, r22
    8b70:	50 e0       	ldi	r21, 0x00	; 0
    8b72:	60 e0       	ldi	r22, 0x00	; 0
    8b74:	70 e0       	ldi	r23, 0x00	; 0
    8b76:	0e 94 a0 45 	call	0x8b40	; 0x8b40 <_ZN5Print5printEmi>
}
    8b7a:	08 95       	ret

00008b7c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    8b7c:	cf 92       	push	r12
    8b7e:	df 92       	push	r13
    8b80:	ef 92       	push	r14
    8b82:	ff 92       	push	r15
    8b84:	0f 93       	push	r16
    8b86:	1f 93       	push	r17
    8b88:	cf 93       	push	r28
    8b8a:	df 93       	push	r29
    8b8c:	ec 01       	movw	r28, r24
    8b8e:	6a 01       	movw	r12, r20
    8b90:	7b 01       	movw	r14, r22
  if (base == 0) {
    8b92:	21 15       	cp	r18, r1
    8b94:	31 05       	cpc	r19, r1
    8b96:	41 f4       	brne	.+16     	; 0x8ba8 <_ZN5Print5printEli+0x2c>
    return write(n);
    8b98:	e8 81       	ld	r30, Y
    8b9a:	f9 81       	ldd	r31, Y+1	; 0x01
    8b9c:	01 90       	ld	r0, Z+
    8b9e:	f0 81       	ld	r31, Z
    8ba0:	e0 2d       	mov	r30, r0
    8ba2:	64 2f       	mov	r22, r20
    8ba4:	19 95       	eicall
    8ba6:	1a c0       	rjmp	.+52     	; 0x8bdc <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    8ba8:	2a 30       	cpi	r18, 0x0A	; 10
    8baa:	31 05       	cpc	r19, r1
    8bac:	a9 f4       	brne	.+42     	; 0x8bd8 <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    8bae:	77 ff       	sbrs	r23, 7
    8bb0:	12 c0       	rjmp	.+36     	; 0x8bd6 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    8bb2:	6d e2       	ldi	r22, 0x2D	; 45
    8bb4:	0e 94 28 45 	call	0x8a50	; 0x8a50 <_ZN5Print5printEc>
    8bb8:	8c 01       	movw	r16, r24
      n = -n;
    8bba:	44 27       	eor	r20, r20
    8bbc:	55 27       	eor	r21, r21
    8bbe:	ba 01       	movw	r22, r20
    8bc0:	4c 19       	sub	r20, r12
    8bc2:	5d 09       	sbc	r21, r13
    8bc4:	6e 09       	sbc	r22, r14
    8bc6:	7f 09       	sbc	r23, r15
      return printNumber(n, 10) + t;
    8bc8:	ce 01       	movw	r24, r28
    8bca:	2a e0       	ldi	r18, 0x0A	; 10
    8bcc:	0e 94 30 45 	call	0x8a60	; 0x8a60 <_ZN5Print11printNumberEmh>
    8bd0:	80 0f       	add	r24, r16
    8bd2:	91 1f       	adc	r25, r17
    8bd4:	03 c0       	rjmp	.+6      	; 0x8bdc <_ZN5Print5printEli+0x60>
    }
    return printNumber(n, 10);
    8bd6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    8bd8:	0e 94 30 45 	call	0x8a60	; 0x8a60 <_ZN5Print11printNumberEmh>
  }
}
    8bdc:	df 91       	pop	r29
    8bde:	cf 91       	pop	r28
    8be0:	1f 91       	pop	r17
    8be2:	0f 91       	pop	r16
    8be4:	ff 90       	pop	r15
    8be6:	ef 90       	pop	r14
    8be8:	df 90       	pop	r13
    8bea:	cf 90       	pop	r12
    8bec:	08 95       	ret

00008bee <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    8bee:	9a 01       	movw	r18, r20
  return print((long) n, base);
    8bf0:	fb 01       	movw	r30, r22
    8bf2:	af 01       	movw	r20, r30
    8bf4:	66 27       	eor	r22, r22
    8bf6:	57 fd       	sbrc	r21, 7
    8bf8:	60 95       	com	r22
    8bfa:	76 2f       	mov	r23, r22
    8bfc:	0e 94 be 45 	call	0x8b7c	; 0x8b7c <_ZN5Print5printEli>
}
    8c00:	08 95       	ret

00008c02 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
    8c02:	cf 93       	push	r28
    8c04:	df 93       	push	r29
    8c06:	ec 01       	movw	r28, r24
  int c;
  _startMillis = millis();
    8c08:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    8c0c:	dc 01       	movw	r26, r24
    8c0e:	cb 01       	movw	r24, r22
    8c10:	88 87       	std	Y+8, r24	; 0x08
    8c12:	99 87       	std	Y+9, r25	; 0x09
    8c14:	aa 87       	std	Y+10, r26	; 0x0a
    8c16:	bb 87       	std	Y+11, r27	; 0x0b
  do {
    c = read();
    8c18:	e8 81       	ld	r30, Y
    8c1a:	f9 81       	ldd	r31, Y+1	; 0x01
    8c1c:	06 80       	ldd	r0, Z+6	; 0x06
    8c1e:	f7 81       	ldd	r31, Z+7	; 0x07
    8c20:	e0 2d       	mov	r30, r0
    8c22:	ce 01       	movw	r24, r28
    8c24:	19 95       	eicall
    if (c >= 0) return c;
    8c26:	97 ff       	sbrs	r25, 7
    8c28:	17 c0       	rjmp	.+46     	; 0x8c58 <_ZN6Stream9timedReadEv+0x56>
  } while(millis() - _startMillis < _timeout);
    8c2a:	0e 94 ad 46 	call	0x8d5a	; 0x8d5a <millis>
    8c2e:	dc 01       	movw	r26, r24
    8c30:	cb 01       	movw	r24, r22
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
    8c32:	48 85       	ldd	r20, Y+8	; 0x08
    8c34:	59 85       	ldd	r21, Y+9	; 0x09
    8c36:	6a 85       	ldd	r22, Y+10	; 0x0a
    8c38:	7b 85       	ldd	r23, Y+11	; 0x0b
    8c3a:	84 1b       	sub	r24, r20
    8c3c:	95 0b       	sbc	r25, r21
    8c3e:	a6 0b       	sbc	r26, r22
    8c40:	b7 0b       	sbc	r27, r23
    8c42:	4c 81       	ldd	r20, Y+4	; 0x04
    8c44:	5d 81       	ldd	r21, Y+5	; 0x05
    8c46:	6e 81       	ldd	r22, Y+6	; 0x06
    8c48:	7f 81       	ldd	r23, Y+7	; 0x07
    8c4a:	84 17       	cp	r24, r20
    8c4c:	95 07       	cpc	r25, r21
    8c4e:	a6 07       	cpc	r26, r22
    8c50:	b7 07       	cpc	r27, r23
    8c52:	10 f3       	brcs	.-60     	; 0x8c18 <_ZN6Stream9timedReadEv+0x16>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
    8c54:	8f ef       	ldi	r24, 0xFF	; 255
    8c56:	9f ef       	ldi	r25, 0xFF	; 255
}
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	08 95       	ret

00008c5e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
    8c5e:	cf 92       	push	r12
    8c60:	df 92       	push	r13
    8c62:	ef 92       	push	r14
    8c64:	ff 92       	push	r15
    8c66:	0f 93       	push	r16
    8c68:	1f 93       	push	r17
    8c6a:	cf 93       	push	r28
    8c6c:	df 93       	push	r29
    8c6e:	6c 01       	movw	r12, r24
    8c70:	8b 01       	movw	r16, r22
    8c72:	7a 01       	movw	r14, r20
  size_t count = 0;
    8c74:	c0 e0       	ldi	r28, 0x00	; 0
    8c76:	d0 e0       	ldi	r29, 0x00	; 0
  while (count < length) {
    8c78:	09 c0       	rjmp	.+18     	; 0x8c8c <_ZN6Stream9readBytesEPcj+0x2e>
    int c = timedRead();
    8c7a:	c6 01       	movw	r24, r12
    8c7c:	0e 94 01 46 	call	0x8c02	; 0x8c02 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
    8c80:	97 fd       	sbrc	r25, 7
    8c82:	07 c0       	rjmp	.+14     	; 0x8c92 <_ZN6Stream9readBytesEPcj+0x34>
    *buffer++ = (char)c;
    8c84:	f8 01       	movw	r30, r16
    8c86:	81 93       	st	Z+, r24
    8c88:	8f 01       	movw	r16, r30
    count++;
    8c8a:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
    8c8c:	ce 15       	cp	r28, r14
    8c8e:	df 05       	cpc	r29, r15
    8c90:	a1 f7       	brne	.-24     	; 0x8c7a <_ZN6Stream9readBytesEPcj+0x1c>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
    8c92:	ce 01       	movw	r24, r28
    8c94:	df 91       	pop	r29
    8c96:	cf 91       	pop	r28
    8c98:	1f 91       	pop	r17
    8c9a:	0f 91       	pop	r16
    8c9c:	ff 90       	pop	r15
    8c9e:	ef 90       	pop	r14
    8ca0:	df 90       	pop	r13
    8ca2:	cf 90       	pop	r12
    8ca4:	08 95       	ret

00008ca6 <main>:
#include <Arduino.h>

int main(void)
{
	init();
    8ca6:	0e 94 12 47 	call	0x8e24	; 0x8e24 <init>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
    8caa:	0e 94 c3 14 	call	0x2986	; 0x2986 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    8cae:	c4 e4       	ldi	r28, 0x44	; 68
    8cb0:	d2 e4       	ldi	r29, 0x42	; 66
#endif
	
	setup();
    
	for (;;) {
		loop();
    8cb2:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <loop>
		if (serialEventRun) serialEventRun();
    8cb6:	20 97       	sbiw	r28, 0x00	; 0
    8cb8:	e1 f3       	breq	.-8      	; 0x8cb2 <main+0xc>
    8cba:	0e 94 44 42 	call	0x8488	; 0x8488 <_Z14serialEventRunv>
    8cbe:	f9 cf       	rjmp	.-14     	; 0x8cb2 <main+0xc>

00008cc0 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
    8cc0:	0e 94 4c 49 	call	0x9298	; 0x9298 <free>
} 
    8cc4:	08 95       	ret

00008cc6 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    8cc6:	1f 92       	push	r1
    8cc8:	0f 92       	push	r0
    8cca:	0f b6       	in	r0, 0x3f	; 63
    8ccc:	0f 92       	push	r0
    8cce:	11 24       	eor	r1, r1
    8cd0:	2f 93       	push	r18
    8cd2:	3f 93       	push	r19
    8cd4:	8f 93       	push	r24
    8cd6:	9f 93       	push	r25
    8cd8:	af 93       	push	r26
    8cda:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    8cdc:	80 91 5a 19 	lds	r24, 0x195A
    8ce0:	90 91 5b 19 	lds	r25, 0x195B
    8ce4:	a0 91 5c 19 	lds	r26, 0x195C
    8ce8:	b0 91 5d 19 	lds	r27, 0x195D
	unsigned char f = timer0_fract;
    8cec:	30 91 62 19 	lds	r19, 0x1962

	m += MILLIS_INC;
	f += FRACT_INC;
    8cf0:	23 2f       	mov	r18, r19
    8cf2:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    8cf4:	2d 37       	cpi	r18, 0x7D	; 125
    8cf6:	20 f4       	brcc	.+8      	; 0x8d00 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    8cf8:	01 96       	adiw	r24, 0x01	; 1
    8cfa:	a1 1d       	adc	r26, r1
    8cfc:	b1 1d       	adc	r27, r1
    8cfe:	05 c0       	rjmp	.+10     	; 0x8d0a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    8d00:	23 2f       	mov	r18, r19
    8d02:	2a 57       	subi	r18, 0x7A	; 122
		m += 1;
    8d04:	02 96       	adiw	r24, 0x02	; 2
    8d06:	a1 1d       	adc	r26, r1
    8d08:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    8d0a:	20 93 62 19 	sts	0x1962, r18
	timer0_millis = m;
    8d0e:	80 93 5a 19 	sts	0x195A, r24
    8d12:	90 93 5b 19 	sts	0x195B, r25
    8d16:	a0 93 5c 19 	sts	0x195C, r26
    8d1a:	b0 93 5d 19 	sts	0x195D, r27
	timer0_overflow_count++;
    8d1e:	80 91 5e 19 	lds	r24, 0x195E
    8d22:	90 91 5f 19 	lds	r25, 0x195F
    8d26:	a0 91 60 19 	lds	r26, 0x1960
    8d2a:	b0 91 61 19 	lds	r27, 0x1961
    8d2e:	01 96       	adiw	r24, 0x01	; 1
    8d30:	a1 1d       	adc	r26, r1
    8d32:	b1 1d       	adc	r27, r1
    8d34:	80 93 5e 19 	sts	0x195E, r24
    8d38:	90 93 5f 19 	sts	0x195F, r25
    8d3c:	a0 93 60 19 	sts	0x1960, r26
    8d40:	b0 93 61 19 	sts	0x1961, r27
}
    8d44:	bf 91       	pop	r27
    8d46:	af 91       	pop	r26
    8d48:	9f 91       	pop	r25
    8d4a:	8f 91       	pop	r24
    8d4c:	3f 91       	pop	r19
    8d4e:	2f 91       	pop	r18
    8d50:	0f 90       	pop	r0
    8d52:	0f be       	out	0x3f, r0	; 63
    8d54:	0f 90       	pop	r0
    8d56:	1f 90       	pop	r1
    8d58:	18 95       	reti

00008d5a <millis>:

unsigned long millis()
{
    8d5a:	0f 93       	push	r16
    8d5c:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG;
    8d5e:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    8d60:	f8 94       	cli
	m = timer0_millis;
    8d62:	00 91 5a 19 	lds	r16, 0x195A
    8d66:	10 91 5b 19 	lds	r17, 0x195B
    8d6a:	20 91 5c 19 	lds	r18, 0x195C
    8d6e:	30 91 5d 19 	lds	r19, 0x195D
	SREG = oldSREG;
    8d72:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    8d74:	b8 01       	movw	r22, r16
    8d76:	c9 01       	movw	r24, r18
    8d78:	1f 91       	pop	r17
    8d7a:	0f 91       	pop	r16
    8d7c:	08 95       	ret

00008d7e <micros>:

unsigned long micros() {
    8d7e:	0f 93       	push	r16
    8d80:	1f 93       	push	r17
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    8d82:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    8d84:	f8 94       	cli
	m = timer0_overflow_count;
    8d86:	00 91 5e 19 	lds	r16, 0x195E
    8d8a:	10 91 5f 19 	lds	r17, 0x195F
    8d8e:	20 91 60 19 	lds	r18, 0x1960
    8d92:	30 91 61 19 	lds	r19, 0x1961
#if defined(TCNT0)
	t = TCNT0;
    8d96:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    8d98:	a8 9b       	sbis	0x15, 0	; 21
    8d9a:	06 c0       	rjmp	.+12     	; 0x8da8 <micros+0x2a>
    8d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    8d9e:	21 f0       	breq	.+8      	; 0x8da8 <micros+0x2a>
		m++;
    8da0:	0f 5f       	subi	r16, 0xFF	; 255
    8da2:	1f 4f       	sbci	r17, 0xFF	; 255
    8da4:	2f 4f       	sbci	r18, 0xFF	; 255
    8da6:	3f 4f       	sbci	r19, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    8da8:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    8daa:	32 2f       	mov	r19, r18
    8dac:	21 2f       	mov	r18, r17
    8dae:	10 2f       	mov	r17, r16
    8db0:	00 27       	eor	r16, r16
    8db2:	08 0f       	add	r16, r24
    8db4:	11 1d       	adc	r17, r1
    8db6:	21 1d       	adc	r18, r1
    8db8:	31 1d       	adc	r19, r1
    8dba:	42 e0       	ldi	r20, 0x02	; 2
    8dbc:	00 0f       	add	r16, r16
    8dbe:	11 1f       	adc	r17, r17
    8dc0:	22 1f       	adc	r18, r18
    8dc2:	33 1f       	adc	r19, r19
    8dc4:	4a 95       	dec	r20
    8dc6:	d1 f7       	brne	.-12     	; 0x8dbc <micros+0x3e>
}
    8dc8:	b8 01       	movw	r22, r16
    8dca:	c9 01       	movw	r24, r18
    8dcc:	1f 91       	pop	r17
    8dce:	0f 91       	pop	r16
    8dd0:	08 95       	ret

00008dd2 <delay>:

void delay(unsigned long ms)
{
    8dd2:	cf 92       	push	r12
    8dd4:	df 92       	push	r13
    8dd6:	ef 92       	push	r14
    8dd8:	ff 92       	push	r15
    8dda:	cf 93       	push	r28
    8ddc:	df 93       	push	r29
    8dde:	6b 01       	movw	r12, r22
    8de0:	7c 01       	movw	r14, r24
	uint16_t start = (uint16_t)micros();
    8de2:	0e 94 bf 46 	call	0x8d7e	; 0x8d7e <micros>
    8de6:	dc 01       	movw	r26, r24
    8de8:	cb 01       	movw	r24, r22
    8dea:	ec 01       	movw	r28, r24

	while (ms > 0) {
    8dec:	0f c0       	rjmp	.+30     	; 0x8e0c <delay+0x3a>
		if (((uint16_t)micros() - start) >= 1000) {
    8dee:	0e 94 bf 46 	call	0x8d7e	; 0x8d7e <micros>
    8df2:	6c 1b       	sub	r22, r28
    8df4:	7d 0b       	sbc	r23, r29
    8df6:	83 e0       	ldi	r24, 0x03	; 3
    8df8:	68 3e       	cpi	r22, 0xE8	; 232
    8dfa:	78 07       	cpc	r23, r24
    8dfc:	38 f0       	brcs	.+14     	; 0x8e0c <delay+0x3a>
			ms--;
    8dfe:	08 94       	sec
    8e00:	c1 08       	sbc	r12, r1
    8e02:	d1 08       	sbc	r13, r1
    8e04:	e1 08       	sbc	r14, r1
    8e06:	f1 08       	sbc	r15, r1
			start += 1000;
    8e08:	c8 51       	subi	r28, 0x18	; 24
    8e0a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    8e0c:	c1 14       	cp	r12, r1
    8e0e:	d1 04       	cpc	r13, r1
    8e10:	e1 04       	cpc	r14, r1
    8e12:	f1 04       	cpc	r15, r1
    8e14:	61 f7       	brne	.-40     	; 0x8dee <delay+0x1c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    8e16:	df 91       	pop	r29
    8e18:	cf 91       	pop	r28
    8e1a:	ff 90       	pop	r15
    8e1c:	ef 90       	pop	r14
    8e1e:	df 90       	pop	r13
    8e20:	cf 90       	pop	r12
    8e22:	08 95       	ret

00008e24 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    8e24:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    8e26:	84 b5       	in	r24, 0x24	; 36
    8e28:	82 60       	ori	r24, 0x02	; 2
    8e2a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    8e2c:	84 b5       	in	r24, 0x24	; 36
    8e2e:	81 60       	ori	r24, 0x01	; 1
    8e30:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    8e32:	85 b5       	in	r24, 0x25	; 37
    8e34:	82 60       	ori	r24, 0x02	; 2
    8e36:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    8e38:	85 b5       	in	r24, 0x25	; 37
    8e3a:	81 60       	ori	r24, 0x01	; 1
    8e3c:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    8e3e:	ee e6       	ldi	r30, 0x6E	; 110
    8e40:	f0 e0       	ldi	r31, 0x00	; 0
    8e42:	80 81       	ld	r24, Z
    8e44:	81 60       	ori	r24, 0x01	; 1
    8e46:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    8e48:	e1 e8       	ldi	r30, 0x81	; 129
    8e4a:	f0 e0       	ldi	r31, 0x00	; 0
    8e4c:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    8e4e:	80 81       	ld	r24, Z
    8e50:	82 60       	ori	r24, 0x02	; 2
    8e52:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    8e54:	80 81       	ld	r24, Z
    8e56:	81 60       	ori	r24, 0x01	; 1
    8e58:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    8e5a:	e0 e8       	ldi	r30, 0x80	; 128
    8e5c:	f0 e0       	ldi	r31, 0x00	; 0
    8e5e:	80 81       	ld	r24, Z
    8e60:	81 60       	ori	r24, 0x01	; 1
    8e62:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    8e64:	e1 eb       	ldi	r30, 0xB1	; 177
    8e66:	f0 e0       	ldi	r31, 0x00	; 0
    8e68:	80 81       	ld	r24, Z
    8e6a:	84 60       	ori	r24, 0x04	; 4
    8e6c:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    8e6e:	e0 eb       	ldi	r30, 0xB0	; 176
    8e70:	f0 e0       	ldi	r31, 0x00	; 0
    8e72:	80 81       	ld	r24, Z
    8e74:	81 60       	ori	r24, 0x01	; 1
    8e76:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    8e78:	e1 e9       	ldi	r30, 0x91	; 145
    8e7a:	f0 e0       	ldi	r31, 0x00	; 0
    8e7c:	80 81       	ld	r24, Z
    8e7e:	82 60       	ori	r24, 0x02	; 2
    8e80:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    8e82:	80 81       	ld	r24, Z
    8e84:	81 60       	ori	r24, 0x01	; 1
    8e86:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    8e88:	e0 e9       	ldi	r30, 0x90	; 144
    8e8a:	f0 e0       	ldi	r31, 0x00	; 0
    8e8c:	80 81       	ld	r24, Z
    8e8e:	81 60       	ori	r24, 0x01	; 1
    8e90:	80 83       	st	Z, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
    8e92:	e1 ea       	ldi	r30, 0xA1	; 161
    8e94:	f0 e0       	ldi	r31, 0x00	; 0
    8e96:	80 81       	ld	r24, Z
    8e98:	82 60       	ori	r24, 0x02	; 2
    8e9a:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    8e9c:	80 81       	ld	r24, Z
    8e9e:	81 60       	ori	r24, 0x01	; 1
    8ea0:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
    8ea2:	e0 ea       	ldi	r30, 0xA0	; 160
    8ea4:	f0 e0       	ldi	r31, 0x00	; 0
    8ea6:	80 81       	ld	r24, Z
    8ea8:	81 60       	ori	r24, 0x01	; 1
    8eaa:	80 83       	st	Z, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
    8eac:	e1 e2       	ldi	r30, 0x21	; 33
    8eae:	f1 e0       	ldi	r31, 0x01	; 1
    8eb0:	80 81       	ld	r24, Z
    8eb2:	82 60       	ori	r24, 0x02	; 2
    8eb4:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
    8eb6:	80 81       	ld	r24, Z
    8eb8:	81 60       	ori	r24, 0x01	; 1
    8eba:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
    8ebc:	e0 e2       	ldi	r30, 0x20	; 32
    8ebe:	f1 e0       	ldi	r31, 0x01	; 1
    8ec0:	80 81       	ld	r24, Z
    8ec2:	81 60       	ori	r24, 0x01	; 1
    8ec4:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    8ec6:	ea e7       	ldi	r30, 0x7A	; 122
    8ec8:	f0 e0       	ldi	r31, 0x00	; 0
    8eca:	80 81       	ld	r24, Z
    8ecc:	84 60       	ori	r24, 0x04	; 4
    8ece:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    8ed0:	80 81       	ld	r24, Z
    8ed2:	82 60       	ori	r24, 0x02	; 2
    8ed4:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    8ed6:	80 81       	ld	r24, Z
    8ed8:	81 60       	ori	r24, 0x01	; 1
    8eda:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    8edc:	80 81       	ld	r24, Z
    8ede:	80 68       	ori	r24, 0x80	; 128
    8ee0:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    8ee2:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    8ee6:	08 95       	ret

00008ee8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    8ee8:	89 30       	cpi	r24, 0x09	; 9
    8eea:	09 f4       	brne	.+2      	; 0x8eee <turnOffPWM+0x6>
    8eec:	49 c0       	rjmp	.+146    	; 0x8f80 <turnOffPWM+0x98>
    8eee:	8a 30       	cpi	r24, 0x0A	; 10
    8ef0:	a0 f4       	brcc	.+40     	; 0x8f1a <turnOffPWM+0x32>
    8ef2:	84 30       	cpi	r24, 0x04	; 4
    8ef4:	51 f1       	breq	.+84     	; 0x8f4a <turnOffPWM+0x62>
    8ef6:	85 30       	cpi	r24, 0x05	; 5
    8ef8:	40 f4       	brcc	.+16     	; 0x8f0a <turnOffPWM+0x22>
    8efa:	82 30       	cpi	r24, 0x02	; 2
    8efc:	79 f1       	breq	.+94     	; 0x8f5c <turnOffPWM+0x74>
    8efe:	83 30       	cpi	r24, 0x03	; 3
    8f00:	00 f5       	brcc	.+64     	; 0x8f42 <turnOffPWM+0x5a>
    8f02:	81 30       	cpi	r24, 0x01	; 1
    8f04:	09 f0       	breq	.+2      	; 0x8f08 <turnOffPWM+0x20>
    8f06:	63 c0       	rjmp	.+198    	; 0x8fce <turnOffPWM+0xe6>
    8f08:	26 c0       	rjmp	.+76     	; 0x8f56 <turnOffPWM+0x6e>
    8f0a:	87 30       	cpi	r24, 0x07	; 7
    8f0c:	79 f1       	breq	.+94     	; 0x8f6c <turnOffPWM+0x84>
    8f0e:	88 30       	cpi	r24, 0x08	; 8
    8f10:	98 f5       	brcc	.+102    	; 0x8f78 <turnOffPWM+0x90>
    8f12:	86 30       	cpi	r24, 0x06	; 6
    8f14:	09 f0       	breq	.+2      	; 0x8f18 <turnOffPWM+0x30>
    8f16:	5b c0       	rjmp	.+182    	; 0x8fce <turnOffPWM+0xe6>
    8f18:	25 c0       	rjmp	.+74     	; 0x8f64 <turnOffPWM+0x7c>
    8f1a:	8d 30       	cpi	r24, 0x0D	; 13
    8f1c:	09 f4       	brne	.+2      	; 0x8f20 <turnOffPWM+0x38>
    8f1e:	42 c0       	rjmp	.+132    	; 0x8fa4 <turnOffPWM+0xbc>
    8f20:	8e 30       	cpi	r24, 0x0E	; 14
    8f22:	28 f4       	brcc	.+10     	; 0x8f2e <turnOffPWM+0x46>
    8f24:	8b 30       	cpi	r24, 0x0B	; 11
    8f26:	b1 f1       	breq	.+108    	; 0x8f94 <turnOffPWM+0xac>
    8f28:	8c 30       	cpi	r24, 0x0C	; 12
    8f2a:	c0 f5       	brcc	.+112    	; 0x8f9c <turnOffPWM+0xb4>
    8f2c:	2d c0       	rjmp	.+90     	; 0x8f88 <turnOffPWM+0xa0>
    8f2e:	80 31       	cpi	r24, 0x10	; 16
    8f30:	09 f4       	brne	.+2      	; 0x8f34 <turnOffPWM+0x4c>
    8f32:	42 c0       	rjmp	.+132    	; 0x8fb8 <turnOffPWM+0xd0>
    8f34:	81 31       	cpi	r24, 0x11	; 17
    8f36:	09 f4       	brne	.+2      	; 0x8f3a <turnOffPWM+0x52>
    8f38:	45 c0       	rjmp	.+138    	; 0x8fc4 <turnOffPWM+0xdc>
    8f3a:	8f 30       	cpi	r24, 0x0F	; 15
    8f3c:	09 f0       	breq	.+2      	; 0x8f40 <turnOffPWM+0x58>
    8f3e:	47 c0       	rjmp	.+142    	; 0x8fce <turnOffPWM+0xe6>
    8f40:	37 c0       	rjmp	.+110    	; 0x8fb0 <turnOffPWM+0xc8>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    8f42:	80 91 80 00 	lds	r24, 0x0080
    8f46:	8f 77       	andi	r24, 0x7F	; 127
    8f48:	03 c0       	rjmp	.+6      	; 0x8f50 <turnOffPWM+0x68>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    8f4a:	80 91 80 00 	lds	r24, 0x0080
    8f4e:	8f 7d       	andi	r24, 0xDF	; 223
    8f50:	80 93 80 00 	sts	0x0080, r24
    8f54:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    8f56:	84 b5       	in	r24, 0x24	; 36
    8f58:	8f 77       	andi	r24, 0x7F	; 127
    8f5a:	02 c0       	rjmp	.+4      	; 0x8f60 <turnOffPWM+0x78>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    8f5c:	84 b5       	in	r24, 0x24	; 36
    8f5e:	8f 7d       	andi	r24, 0xDF	; 223
    8f60:	84 bd       	out	0x24, r24	; 36
    8f62:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    8f64:	80 91 b0 00 	lds	r24, 0x00B0
    8f68:	8f 77       	andi	r24, 0x7F	; 127
    8f6a:	03 c0       	rjmp	.+6      	; 0x8f72 <turnOffPWM+0x8a>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    8f6c:	80 91 b0 00 	lds	r24, 0x00B0
    8f70:	8f 7d       	andi	r24, 0xDF	; 223
    8f72:	80 93 b0 00 	sts	0x00B0, r24
    8f76:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    8f78:	80 91 90 00 	lds	r24, 0x0090
    8f7c:	8f 77       	andi	r24, 0x7F	; 127
    8f7e:	07 c0       	rjmp	.+14     	; 0x8f8e <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    8f80:	80 91 90 00 	lds	r24, 0x0090
    8f84:	8f 7d       	andi	r24, 0xDF	; 223
    8f86:	03 c0       	rjmp	.+6      	; 0x8f8e <turnOffPWM+0xa6>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    8f88:	80 91 90 00 	lds	r24, 0x0090
    8f8c:	87 7f       	andi	r24, 0xF7	; 247
    8f8e:	80 93 90 00 	sts	0x0090, r24
    8f92:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    8f94:	80 91 a0 00 	lds	r24, 0x00A0
    8f98:	8f 77       	andi	r24, 0x7F	; 127
    8f9a:	07 c0       	rjmp	.+14     	; 0x8faa <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    8f9c:	80 91 a0 00 	lds	r24, 0x00A0
    8fa0:	8f 7d       	andi	r24, 0xDF	; 223
    8fa2:	03 c0       	rjmp	.+6      	; 0x8faa <turnOffPWM+0xc2>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
    8fa4:	80 91 a0 00 	lds	r24, 0x00A0
    8fa8:	87 7f       	andi	r24, 0xF7	; 247
    8faa:	80 93 a0 00 	sts	0x00A0, r24
    8fae:	08 95       	ret
		#endif
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
    8fb0:	80 91 20 01 	lds	r24, 0x0120
    8fb4:	8f 77       	andi	r24, 0x7F	; 127
    8fb6:	03 c0       	rjmp	.+6      	; 0x8fbe <turnOffPWM+0xd6>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
    8fb8:	80 91 20 01 	lds	r24, 0x0120
    8fbc:	8f 7d       	andi	r24, 0xDF	; 223
    8fbe:	80 93 20 01 	sts	0x0120, r24
    8fc2:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
    8fc4:	80 91 20 01 	lds	r24, 0x0120
    8fc8:	87 7f       	andi	r24, 0xF7	; 247
    8fca:	80 93 20 01 	sts	0x0120, r24
    8fce:	08 95       	ret

00008fd0 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    8fd0:	90 e0       	ldi	r25, 0x00	; 0
    8fd2:	fc 01       	movw	r30, r24
    8fd4:	e4 5f       	subi	r30, 0xF4	; 244
    8fd6:	f6 4e       	sbci	r31, 0xE6	; 230
    8fd8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    8fda:	fc 01       	movw	r30, r24
    8fdc:	ee 5a       	subi	r30, 0xAE	; 174
    8fde:	f6 4e       	sbci	r31, 0xE6	; 230
    8fe0:	e4 91       	lpm	r30, Z
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    8fe2:	ee 23       	and	r30, r30
    8fe4:	a9 f0       	breq	.+42     	; 0x9010 <pinMode+0x40>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    8fe6:	f0 e0       	ldi	r31, 0x00	; 0
    8fe8:	ee 0f       	add	r30, r30
    8fea:	ff 1f       	adc	r31, r31
    8fec:	e4 53       	subi	r30, 0x34	; 52
    8fee:	f6 4e       	sbci	r31, 0xE6	; 230
    8ff0:	85 91       	lpm	r24, Z+
    8ff2:	94 91       	lpm	r25, Z
    8ff4:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
		uint8_t oldSREG = SREG;
    8ff6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    8ff8:	f8 94       	cli
		*reg &= ~bit;
    8ffa:	8c 91       	ld	r24, X
	if (port == NOT_A_PIN) return;

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);

	if (mode == INPUT) { 
    8ffc:	66 23       	and	r22, r22
    8ffe:	29 f4       	brne	.+10     	; 0x900a <pinMode+0x3a>
		uint8_t oldSREG = SREG;
                cli();
		*reg &= ~bit;
    9000:	20 95       	com	r18
    9002:	82 23       	and	r24, r18
    9004:	8c 93       	st	X, r24
		SREG = oldSREG;
    9006:	9f bf       	out	0x3f, r25	; 63
    9008:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
                cli();
		*reg |= bit;
    900a:	82 2b       	or	r24, r18
    900c:	8c 93       	st	X, r24
		SREG = oldSREG;
    900e:	9f bf       	out	0x3f, r25	; 63
    9010:	08 95       	ret

00009012 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    9012:	0f 93       	push	r16
    9014:	1f 93       	push	r17
    9016:	cf 93       	push	r28
    9018:	df 93       	push	r29
    901a:	0f 92       	push	r0
    901c:	cd b7       	in	r28, 0x3d	; 61
    901e:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    9020:	28 2f       	mov	r18, r24
    9022:	30 e0       	ldi	r19, 0x00	; 0
    9024:	f9 01       	movw	r30, r18
    9026:	ea 53       	subi	r30, 0x3A	; 58
    9028:	f7 4e       	sbci	r31, 0xE7	; 231
    902a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    902c:	f9 01       	movw	r30, r18
    902e:	e4 5f       	subi	r30, 0xF4	; 244
    9030:	f6 4e       	sbci	r31, 0xE6	; 230
    9032:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
    9034:	f9 01       	movw	r30, r18
    9036:	ee 5a       	subi	r30, 0xAE	; 174
    9038:	f6 4e       	sbci	r31, 0xE6	; 230
    903a:	04 91       	lpm	r16, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    903c:	00 23       	and	r16, r16
    903e:	d1 f0       	breq	.+52     	; 0x9074 <digitalWrite+0x62>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    9040:	88 23       	and	r24, r24
    9042:	21 f0       	breq	.+8      	; 0x904c <digitalWrite+0x3a>
    9044:	69 83       	std	Y+1, r22	; 0x01
    9046:	0e 94 74 47 	call	0x8ee8	; 0x8ee8 <turnOffPWM>
    904a:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    904c:	e0 2f       	mov	r30, r16
    904e:	f0 e0       	ldi	r31, 0x00	; 0
    9050:	ee 0f       	add	r30, r30
    9052:	ff 1f       	adc	r31, r31
    9054:	ee 54       	subi	r30, 0x4E	; 78
    9056:	f6 4e       	sbci	r31, 0xE6	; 230
    9058:	85 91       	lpm	r24, Z+
    905a:	94 91       	lpm	r25, Z
    905c:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    905e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    9060:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
    9062:	8c 91       	ld	r24, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
    9064:	66 23       	and	r22, r22
    9066:	19 f4       	brne	.+6      	; 0x906e <digitalWrite+0x5c>
		*out &= ~bit;
    9068:	10 95       	com	r17
    906a:	81 23       	and	r24, r17
    906c:	01 c0       	rjmp	.+2      	; 0x9070 <digitalWrite+0x5e>
	} else {
		*out |= bit;
    906e:	81 2b       	or	r24, r17
    9070:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    9072:	9f bf       	out	0x3f, r25	; 63
}
    9074:	0f 90       	pop	r0
    9076:	df 91       	pop	r29
    9078:	cf 91       	pop	r28
    907a:	1f 91       	pop	r17
    907c:	0f 91       	pop	r16
    907e:	08 95       	ret

00009080 <digitalRead>:

int digitalRead(uint8_t pin)
{
    9080:	cf 93       	push	r28
    9082:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    9084:	28 2f       	mov	r18, r24
    9086:	30 e0       	ldi	r19, 0x00	; 0
    9088:	f9 01       	movw	r30, r18
    908a:	ea 53       	subi	r30, 0x3A	; 58
    908c:	f7 4e       	sbci	r31, 0xE7	; 231
    908e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    9090:	f9 01       	movw	r30, r18
    9092:	e4 5f       	subi	r30, 0xF4	; 244
    9094:	f6 4e       	sbci	r31, 0xE6	; 230
    9096:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
    9098:	f9 01       	movw	r30, r18
    909a:	ee 5a       	subi	r30, 0xAE	; 174
    909c:	f6 4e       	sbci	r31, 0xE6	; 230
    909e:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
    90a0:	dd 23       	and	r29, r29
    90a2:	91 f0       	breq	.+36     	; 0x90c8 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    90a4:	88 23       	and	r24, r24
    90a6:	11 f0       	breq	.+4      	; 0x90ac <digitalRead+0x2c>
    90a8:	0e 94 74 47 	call	0x8ee8	; 0x8ee8 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    90ac:	ed 2f       	mov	r30, r29
    90ae:	f0 e0       	ldi	r31, 0x00	; 0
    90b0:	ee 0f       	add	r30, r30
    90b2:	ff 1f       	adc	r31, r31
    90b4:	e8 56       	subi	r30, 0x68	; 104
    90b6:	f6 4e       	sbci	r31, 0xE6	; 230
    90b8:	85 91       	lpm	r24, Z+
    90ba:	94 91       	lpm	r25, Z
    90bc:	fc 01       	movw	r30, r24
    90be:	20 81       	ld	r18, Z
    90c0:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    90c2:	81 e0       	ldi	r24, 0x01	; 1
    90c4:	90 e0       	ldi	r25, 0x00	; 0
    90c6:	11 f4       	brne	.+4      	; 0x90cc <digitalRead+0x4c>
    90c8:	80 e0       	ldi	r24, 0x00	; 0
    90ca:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    90cc:	df 91       	pop	r29
    90ce:	cf 91       	pop	r28
    90d0:	08 95       	ret

000090d2 <__udivmodhi4>:
    90d2:	aa 1b       	sub	r26, r26
    90d4:	bb 1b       	sub	r27, r27
    90d6:	51 e1       	ldi	r21, 0x11	; 17
    90d8:	07 c0       	rjmp	.+14     	; 0x90e8 <__udivmodhi4_ep>

000090da <__udivmodhi4_loop>:
    90da:	aa 1f       	adc	r26, r26
    90dc:	bb 1f       	adc	r27, r27
    90de:	a6 17       	cp	r26, r22
    90e0:	b7 07       	cpc	r27, r23
    90e2:	10 f0       	brcs	.+4      	; 0x90e8 <__udivmodhi4_ep>
    90e4:	a6 1b       	sub	r26, r22
    90e6:	b7 0b       	sbc	r27, r23

000090e8 <__udivmodhi4_ep>:
    90e8:	88 1f       	adc	r24, r24
    90ea:	99 1f       	adc	r25, r25
    90ec:	5a 95       	dec	r21
    90ee:	a9 f7       	brne	.-22     	; 0x90da <__udivmodhi4_loop>
    90f0:	80 95       	com	r24
    90f2:	90 95       	com	r25
    90f4:	bc 01       	movw	r22, r24
    90f6:	cd 01       	movw	r24, r26
    90f8:	08 95       	ret

000090fa <__divmodhi4>:
    90fa:	97 fb       	bst	r25, 7
    90fc:	09 2e       	mov	r0, r25
    90fe:	07 26       	eor	r0, r23
    9100:	0a d0       	rcall	.+20     	; 0x9116 <__divmodhi4_neg1>
    9102:	77 fd       	sbrc	r23, 7
    9104:	04 d0       	rcall	.+8      	; 0x910e <__divmodhi4_neg2>
    9106:	e5 df       	rcall	.-54     	; 0x90d2 <__udivmodhi4>
    9108:	06 d0       	rcall	.+12     	; 0x9116 <__divmodhi4_neg1>
    910a:	00 20       	and	r0, r0
    910c:	1a f4       	brpl	.+6      	; 0x9114 <__divmodhi4_exit>

0000910e <__divmodhi4_neg2>:
    910e:	70 95       	com	r23
    9110:	61 95       	neg	r22
    9112:	7f 4f       	sbci	r23, 0xFF	; 255

00009114 <__divmodhi4_exit>:
    9114:	08 95       	ret

00009116 <__divmodhi4_neg1>:
    9116:	f6 f7       	brtc	.-4      	; 0x9114 <__divmodhi4_exit>
    9118:	90 95       	com	r25
    911a:	81 95       	neg	r24
    911c:	9f 4f       	sbci	r25, 0xFF	; 255
    911e:	08 95       	ret

00009120 <__udivmodsi4>:
    9120:	a1 e2       	ldi	r26, 0x21	; 33
    9122:	1a 2e       	mov	r1, r26
    9124:	aa 1b       	sub	r26, r26
    9126:	bb 1b       	sub	r27, r27
    9128:	fd 01       	movw	r30, r26
    912a:	0d c0       	rjmp	.+26     	; 0x9146 <__udivmodsi4_ep>

0000912c <__udivmodsi4_loop>:
    912c:	aa 1f       	adc	r26, r26
    912e:	bb 1f       	adc	r27, r27
    9130:	ee 1f       	adc	r30, r30
    9132:	ff 1f       	adc	r31, r31
    9134:	a2 17       	cp	r26, r18
    9136:	b3 07       	cpc	r27, r19
    9138:	e4 07       	cpc	r30, r20
    913a:	f5 07       	cpc	r31, r21
    913c:	20 f0       	brcs	.+8      	; 0x9146 <__udivmodsi4_ep>
    913e:	a2 1b       	sub	r26, r18
    9140:	b3 0b       	sbc	r27, r19
    9142:	e4 0b       	sbc	r30, r20
    9144:	f5 0b       	sbc	r31, r21

00009146 <__udivmodsi4_ep>:
    9146:	66 1f       	adc	r22, r22
    9148:	77 1f       	adc	r23, r23
    914a:	88 1f       	adc	r24, r24
    914c:	99 1f       	adc	r25, r25
    914e:	1a 94       	dec	r1
    9150:	69 f7       	brne	.-38     	; 0x912c <__udivmodsi4_loop>
    9152:	60 95       	com	r22
    9154:	70 95       	com	r23
    9156:	80 95       	com	r24
    9158:	90 95       	com	r25
    915a:	9b 01       	movw	r18, r22
    915c:	ac 01       	movw	r20, r24
    915e:	bd 01       	movw	r22, r26
    9160:	cf 01       	movw	r24, r30
    9162:	08 95       	ret

00009164 <__tablejump_elpm__>:
    9164:	07 90       	elpm	r0, Z+
    9166:	f6 91       	elpm	r31, Z
    9168:	e0 2d       	mov	r30, r0
    916a:	19 94       	eijmp

0000916c <malloc>:
    916c:	cf 93       	push	r28
    916e:	df 93       	push	r29
    9170:	ac 01       	movw	r20, r24
    9172:	82 30       	cpi	r24, 0x02	; 2
    9174:	91 05       	cpc	r25, r1
    9176:	10 f4       	brcc	.+4      	; 0x917c <malloc+0x10>
    9178:	42 e0       	ldi	r20, 0x02	; 2
    917a:	50 e0       	ldi	r21, 0x00	; 0
    917c:	e0 91 65 19 	lds	r30, 0x1965
    9180:	f0 91 66 19 	lds	r31, 0x1966
    9184:	20 e0       	ldi	r18, 0x00	; 0
    9186:	30 e0       	ldi	r19, 0x00	; 0
    9188:	a0 e0       	ldi	r26, 0x00	; 0
    918a:	b0 e0       	ldi	r27, 0x00	; 0
    918c:	24 c0       	rjmp	.+72     	; 0x91d6 <malloc+0x6a>
    918e:	80 81       	ld	r24, Z
    9190:	91 81       	ldd	r25, Z+1	; 0x01
    9192:	84 17       	cp	r24, r20
    9194:	95 07       	cpc	r25, r21
    9196:	d0 f0       	brcs	.+52     	; 0x91cc <malloc+0x60>
    9198:	84 17       	cp	r24, r20
    919a:	95 07       	cpc	r25, r21
    919c:	71 f4       	brne	.+28     	; 0x91ba <malloc+0x4e>
    919e:	82 81       	ldd	r24, Z+2	; 0x02
    91a0:	93 81       	ldd	r25, Z+3	; 0x03
    91a2:	10 97       	sbiw	r26, 0x00	; 0
    91a4:	29 f0       	breq	.+10     	; 0x91b0 <malloc+0x44>
    91a6:	13 96       	adiw	r26, 0x03	; 3
    91a8:	9c 93       	st	X, r25
    91aa:	8e 93       	st	-X, r24
    91ac:	12 97       	sbiw	r26, 0x02	; 2
    91ae:	2c c0       	rjmp	.+88     	; 0x9208 <malloc+0x9c>
    91b0:	90 93 66 19 	sts	0x1966, r25
    91b4:	80 93 65 19 	sts	0x1965, r24
    91b8:	27 c0       	rjmp	.+78     	; 0x9208 <malloc+0x9c>
    91ba:	21 15       	cp	r18, r1
    91bc:	31 05       	cpc	r19, r1
    91be:	19 f0       	breq	.+6      	; 0x91c6 <malloc+0x5a>
    91c0:	82 17       	cp	r24, r18
    91c2:	93 07       	cpc	r25, r19
    91c4:	18 f4       	brcc	.+6      	; 0x91cc <malloc+0x60>
    91c6:	9c 01       	movw	r18, r24
    91c8:	bd 01       	movw	r22, r26
    91ca:	ef 01       	movw	r28, r30
    91cc:	92 81       	ldd	r25, Z+2	; 0x02
    91ce:	83 81       	ldd	r24, Z+3	; 0x03
    91d0:	df 01       	movw	r26, r30
    91d2:	e9 2f       	mov	r30, r25
    91d4:	f8 2f       	mov	r31, r24
    91d6:	30 97       	sbiw	r30, 0x00	; 0
    91d8:	d1 f6       	brne	.-76     	; 0x918e <malloc+0x22>
    91da:	21 15       	cp	r18, r1
    91dc:	31 05       	cpc	r19, r1
    91de:	f9 f0       	breq	.+62     	; 0x921e <malloc+0xb2>
    91e0:	c9 01       	movw	r24, r18
    91e2:	84 1b       	sub	r24, r20
    91e4:	95 0b       	sbc	r25, r21
    91e6:	84 30       	cpi	r24, 0x04	; 4
    91e8:	91 05       	cpc	r25, r1
    91ea:	80 f4       	brcc	.+32     	; 0x920c <malloc+0xa0>
    91ec:	8a 81       	ldd	r24, Y+2	; 0x02
    91ee:	9b 81       	ldd	r25, Y+3	; 0x03
    91f0:	61 15       	cp	r22, r1
    91f2:	71 05       	cpc	r23, r1
    91f4:	21 f0       	breq	.+8      	; 0x91fe <malloc+0x92>
    91f6:	fb 01       	movw	r30, r22
    91f8:	93 83       	std	Z+3, r25	; 0x03
    91fa:	82 83       	std	Z+2, r24	; 0x02
    91fc:	04 c0       	rjmp	.+8      	; 0x9206 <malloc+0x9a>
    91fe:	90 93 66 19 	sts	0x1966, r25
    9202:	80 93 65 19 	sts	0x1965, r24
    9206:	fe 01       	movw	r30, r28
    9208:	32 96       	adiw	r30, 0x02	; 2
    920a:	42 c0       	rjmp	.+132    	; 0x9290 <malloc+0x124>
    920c:	fe 01       	movw	r30, r28
    920e:	e8 0f       	add	r30, r24
    9210:	f9 1f       	adc	r31, r25
    9212:	41 93       	st	Z+, r20
    9214:	51 93       	st	Z+, r21
    9216:	02 97       	sbiw	r24, 0x02	; 2
    9218:	99 83       	std	Y+1, r25	; 0x01
    921a:	88 83       	st	Y, r24
    921c:	39 c0       	rjmp	.+114    	; 0x9290 <malloc+0x124>
    921e:	80 91 63 19 	lds	r24, 0x1963
    9222:	90 91 64 19 	lds	r25, 0x1964
    9226:	00 97       	sbiw	r24, 0x00	; 0
    9228:	41 f4       	brne	.+16     	; 0x923a <malloc+0xce>
    922a:	80 91 63 0d 	lds	r24, 0x0D63
    922e:	90 91 64 0d 	lds	r25, 0x0D64
    9232:	90 93 64 19 	sts	0x1964, r25
    9236:	80 93 63 19 	sts	0x1963, r24
    923a:	20 91 61 0d 	lds	r18, 0x0D61
    923e:	30 91 62 0d 	lds	r19, 0x0D62
    9242:	21 15       	cp	r18, r1
    9244:	31 05       	cpc	r19, r1
    9246:	41 f4       	brne	.+16     	; 0x9258 <malloc+0xec>
    9248:	2d b7       	in	r18, 0x3d	; 61
    924a:	3e b7       	in	r19, 0x3e	; 62
    924c:	80 91 65 0d 	lds	r24, 0x0D65
    9250:	90 91 66 0d 	lds	r25, 0x0D66
    9254:	28 1b       	sub	r18, r24
    9256:	39 0b       	sbc	r19, r25
    9258:	e0 91 63 19 	lds	r30, 0x1963
    925c:	f0 91 64 19 	lds	r31, 0x1964
    9260:	e2 17       	cp	r30, r18
    9262:	f3 07       	cpc	r31, r19
    9264:	98 f4       	brcc	.+38     	; 0x928c <malloc+0x120>
    9266:	2e 1b       	sub	r18, r30
    9268:	3f 0b       	sbc	r19, r31
    926a:	24 17       	cp	r18, r20
    926c:	35 07       	cpc	r19, r21
    926e:	70 f0       	brcs	.+28     	; 0x928c <malloc+0x120>
    9270:	ca 01       	movw	r24, r20
    9272:	02 96       	adiw	r24, 0x02	; 2
    9274:	28 17       	cp	r18, r24
    9276:	39 07       	cpc	r19, r25
    9278:	48 f0       	brcs	.+18     	; 0x928c <malloc+0x120>
    927a:	8e 0f       	add	r24, r30
    927c:	9f 1f       	adc	r25, r31
    927e:	90 93 64 19 	sts	0x1964, r25
    9282:	80 93 63 19 	sts	0x1963, r24
    9286:	41 93       	st	Z+, r20
    9288:	51 93       	st	Z+, r21
    928a:	02 c0       	rjmp	.+4      	; 0x9290 <malloc+0x124>
    928c:	e0 e0       	ldi	r30, 0x00	; 0
    928e:	f0 e0       	ldi	r31, 0x00	; 0
    9290:	cf 01       	movw	r24, r30
    9292:	df 91       	pop	r29
    9294:	cf 91       	pop	r28
    9296:	08 95       	ret

00009298 <free>:
    9298:	0f 93       	push	r16
    929a:	1f 93       	push	r17
    929c:	cf 93       	push	r28
    929e:	df 93       	push	r29
    92a0:	9c 01       	movw	r18, r24
    92a2:	00 97       	sbiw	r24, 0x00	; 0
    92a4:	09 f4       	brne	.+2      	; 0x92a8 <free+0x10>
    92a6:	8c c0       	rjmp	.+280    	; 0x93c0 <free+0x128>
    92a8:	dc 01       	movw	r26, r24
    92aa:	12 97       	sbiw	r26, 0x02	; 2
    92ac:	13 96       	adiw	r26, 0x03	; 3
    92ae:	1c 92       	st	X, r1
    92b0:	1e 92       	st	-X, r1
    92b2:	12 97       	sbiw	r26, 0x02	; 2
    92b4:	60 91 65 19 	lds	r22, 0x1965
    92b8:	70 91 66 19 	lds	r23, 0x1966
    92bc:	61 15       	cp	r22, r1
    92be:	71 05       	cpc	r23, r1
    92c0:	89 f4       	brne	.+34     	; 0x92e4 <free+0x4c>
    92c2:	8d 91       	ld	r24, X+
    92c4:	9c 91       	ld	r25, X
    92c6:	11 97       	sbiw	r26, 0x01	; 1
    92c8:	82 0f       	add	r24, r18
    92ca:	93 1f       	adc	r25, r19
    92cc:	20 91 63 19 	lds	r18, 0x1963
    92d0:	30 91 64 19 	lds	r19, 0x1964
    92d4:	28 17       	cp	r18, r24
    92d6:	39 07       	cpc	r19, r25
    92d8:	69 f5       	brne	.+90     	; 0x9334 <free+0x9c>
    92da:	b0 93 64 19 	sts	0x1964, r27
    92de:	a0 93 63 19 	sts	0x1963, r26
    92e2:	6e c0       	rjmp	.+220    	; 0x93c0 <free+0x128>
    92e4:	fb 01       	movw	r30, r22
    92e6:	40 e0       	ldi	r20, 0x00	; 0
    92e8:	50 e0       	ldi	r21, 0x00	; 0
    92ea:	01 c0       	rjmp	.+2      	; 0x92ee <free+0x56>
    92ec:	fc 01       	movw	r30, r24
    92ee:	ea 17       	cp	r30, r26
    92f0:	fb 07       	cpc	r31, r27
    92f2:	30 f4       	brcc	.+12     	; 0x9300 <free+0x68>
    92f4:	82 81       	ldd	r24, Z+2	; 0x02
    92f6:	93 81       	ldd	r25, Z+3	; 0x03
    92f8:	af 01       	movw	r20, r30
    92fa:	00 97       	sbiw	r24, 0x00	; 0
    92fc:	b9 f7       	brne	.-18     	; 0x92ec <free+0x54>
    92fe:	1f c0       	rjmp	.+62     	; 0x933e <free+0xa6>
    9300:	e9 01       	movw	r28, r18
    9302:	22 97       	sbiw	r28, 0x02	; 2
    9304:	fb 83       	std	Y+3, r31	; 0x03
    9306:	ea 83       	std	Y+2, r30	; 0x02
    9308:	08 81       	ld	r16, Y
    930a:	19 81       	ldd	r17, Y+1	; 0x01
    930c:	c9 01       	movw	r24, r18
    930e:	80 0f       	add	r24, r16
    9310:	91 1f       	adc	r25, r17
    9312:	8e 17       	cp	r24, r30
    9314:	9f 07       	cpc	r25, r31
    9316:	59 f4       	brne	.+22     	; 0x932e <free+0x96>
    9318:	80 81       	ld	r24, Z
    931a:	91 81       	ldd	r25, Z+1	; 0x01
    931c:	80 0f       	add	r24, r16
    931e:	91 1f       	adc	r25, r17
    9320:	02 96       	adiw	r24, 0x02	; 2
    9322:	99 83       	std	Y+1, r25	; 0x01
    9324:	88 83       	st	Y, r24
    9326:	82 81       	ldd	r24, Z+2	; 0x02
    9328:	93 81       	ldd	r25, Z+3	; 0x03
    932a:	9b 83       	std	Y+3, r25	; 0x03
    932c:	8a 83       	std	Y+2, r24	; 0x02
    932e:	41 15       	cp	r20, r1
    9330:	51 05       	cpc	r21, r1
    9332:	29 f4       	brne	.+10     	; 0x933e <free+0xa6>
    9334:	b0 93 66 19 	sts	0x1966, r27
    9338:	a0 93 65 19 	sts	0x1965, r26
    933c:	41 c0       	rjmp	.+130    	; 0x93c0 <free+0x128>
    933e:	fa 01       	movw	r30, r20
    9340:	b3 83       	std	Z+3, r27	; 0x03
    9342:	a2 83       	std	Z+2, r26	; 0x02
    9344:	c1 91       	ld	r28, Z+
    9346:	d1 91       	ld	r29, Z+
    9348:	ec 0f       	add	r30, r28
    934a:	fd 1f       	adc	r31, r29
    934c:	ae 17       	cp	r26, r30
    934e:	bf 07       	cpc	r27, r31
    9350:	81 f4       	brne	.+32     	; 0x9372 <free+0xda>
    9352:	f9 01       	movw	r30, r18
    9354:	92 91       	ld	r25, -Z
    9356:	82 91       	ld	r24, -Z
    9358:	8c 0f       	add	r24, r28
    935a:	9d 1f       	adc	r25, r29
    935c:	02 96       	adiw	r24, 0x02	; 2
    935e:	da 01       	movw	r26, r20
    9360:	11 96       	adiw	r26, 0x01	; 1
    9362:	9c 93       	st	X, r25
    9364:	8e 93       	st	-X, r24
    9366:	82 81       	ldd	r24, Z+2	; 0x02
    9368:	93 81       	ldd	r25, Z+3	; 0x03
    936a:	13 96       	adiw	r26, 0x03	; 3
    936c:	9c 93       	st	X, r25
    936e:	8e 93       	st	-X, r24
    9370:	12 97       	sbiw	r26, 0x02	; 2
    9372:	e0 e0       	ldi	r30, 0x00	; 0
    9374:	f0 e0       	ldi	r31, 0x00	; 0
    9376:	02 c0       	rjmp	.+4      	; 0x937c <free+0xe4>
    9378:	fb 01       	movw	r30, r22
    937a:	bc 01       	movw	r22, r24
    937c:	db 01       	movw	r26, r22
    937e:	12 96       	adiw	r26, 0x02	; 2
    9380:	8d 91       	ld	r24, X+
    9382:	9c 91       	ld	r25, X
    9384:	13 97       	sbiw	r26, 0x03	; 3
    9386:	00 97       	sbiw	r24, 0x00	; 0
    9388:	b9 f7       	brne	.-18     	; 0x9378 <free+0xe0>
    938a:	cb 01       	movw	r24, r22
    938c:	02 96       	adiw	r24, 0x02	; 2
    938e:	2d 91       	ld	r18, X+
    9390:	3c 91       	ld	r19, X
    9392:	11 97       	sbiw	r26, 0x01	; 1
    9394:	82 0f       	add	r24, r18
    9396:	93 1f       	adc	r25, r19
    9398:	20 91 63 19 	lds	r18, 0x1963
    939c:	30 91 64 19 	lds	r19, 0x1964
    93a0:	28 17       	cp	r18, r24
    93a2:	39 07       	cpc	r19, r25
    93a4:	69 f4       	brne	.+26     	; 0x93c0 <free+0x128>
    93a6:	30 97       	sbiw	r30, 0x00	; 0
    93a8:	29 f4       	brne	.+10     	; 0x93b4 <free+0x11c>
    93aa:	10 92 66 19 	sts	0x1966, r1
    93ae:	10 92 65 19 	sts	0x1965, r1
    93b2:	02 c0       	rjmp	.+4      	; 0x93b8 <free+0x120>
    93b4:	13 82       	std	Z+3, r1	; 0x03
    93b6:	12 82       	std	Z+2, r1	; 0x02
    93b8:	70 93 64 19 	sts	0x1964, r23
    93bc:	60 93 63 19 	sts	0x1963, r22
    93c0:	df 91       	pop	r29
    93c2:	cf 91       	pop	r28
    93c4:	1f 91       	pop	r17
    93c6:	0f 91       	pop	r16
    93c8:	08 95       	ret

000093ca <atoi>:
    93ca:	fc 01       	movw	r30, r24
    93cc:	88 27       	eor	r24, r24
    93ce:	99 27       	eor	r25, r25
    93d0:	e8 94       	clt
    93d2:	21 91       	ld	r18, Z+
    93d4:	20 32       	cpi	r18, 0x20	; 32
    93d6:	e9 f3       	breq	.-6      	; 0x93d2 <atoi+0x8>
    93d8:	29 30       	cpi	r18, 0x09	; 9
    93da:	10 f0       	brcs	.+4      	; 0x93e0 <atoi+0x16>
    93dc:	2e 30       	cpi	r18, 0x0E	; 14
    93de:	c8 f3       	brcs	.-14     	; 0x93d2 <atoi+0x8>
    93e0:	2b 32       	cpi	r18, 0x2B	; 43
    93e2:	41 f0       	breq	.+16     	; 0x93f4 <atoi+0x2a>
    93e4:	2d 32       	cpi	r18, 0x2D	; 45
    93e6:	39 f4       	brne	.+14     	; 0x93f6 <atoi+0x2c>
    93e8:	68 94       	set
    93ea:	04 c0       	rjmp	.+8      	; 0x93f4 <atoi+0x2a>
    93ec:	0e 94 03 4a 	call	0x9406	; 0x9406 <__mulhi_const_10>
    93f0:	82 0f       	add	r24, r18
    93f2:	91 1d       	adc	r25, r1
    93f4:	21 91       	ld	r18, Z+
    93f6:	20 53       	subi	r18, 0x30	; 48
    93f8:	2a 30       	cpi	r18, 0x0A	; 10
    93fa:	c0 f3       	brcs	.-16     	; 0x93ec <atoi+0x22>
    93fc:	1e f4       	brtc	.+6      	; 0x9404 <atoi+0x3a>
    93fe:	90 95       	com	r25
    9400:	81 95       	neg	r24
    9402:	9f 4f       	sbci	r25, 0xFF	; 255
    9404:	08 95       	ret

00009406 <__mulhi_const_10>:
    9406:	7a e0       	ldi	r23, 0x0A	; 10
    9408:	97 9f       	mul	r25, r23
    940a:	90 2d       	mov	r25, r0
    940c:	87 9f       	mul	r24, r23
    940e:	80 2d       	mov	r24, r0
    9410:	91 0d       	add	r25, r1
    9412:	11 24       	eor	r1, r1
    9414:	08 95       	ret

00009416 <printf_P>:
    9416:	cf 93       	push	r28
    9418:	df 93       	push	r29
    941a:	cd b7       	in	r28, 0x3d	; 61
    941c:	de b7       	in	r29, 0x3e	; 62
    941e:	fe 01       	movw	r30, r28
    9420:	36 96       	adiw	r30, 0x06	; 6
    9422:	61 91       	ld	r22, Z+
    9424:	71 91       	ld	r23, Z+
    9426:	80 91 69 19 	lds	r24, 0x1969
    942a:	90 91 6a 19 	lds	r25, 0x196A
    942e:	dc 01       	movw	r26, r24
    9430:	13 96       	adiw	r26, 0x03	; 3
    9432:	2c 91       	ld	r18, X
    9434:	13 97       	sbiw	r26, 0x03	; 3
    9436:	28 60       	ori	r18, 0x08	; 8
    9438:	13 96       	adiw	r26, 0x03	; 3
    943a:	2c 93       	st	X, r18
    943c:	af 01       	movw	r20, r30
    943e:	0e 94 2b 4a 	call	0x9456	; 0x9456 <vfprintf>
    9442:	e0 91 69 19 	lds	r30, 0x1969
    9446:	f0 91 6a 19 	lds	r31, 0x196A
    944a:	23 81       	ldd	r18, Z+3	; 0x03
    944c:	27 7f       	andi	r18, 0xF7	; 247
    944e:	23 83       	std	Z+3, r18	; 0x03
    9450:	df 91       	pop	r29
    9452:	cf 91       	pop	r28
    9454:	08 95       	ret

00009456 <vfprintf>:
    9456:	2f 92       	push	r2
    9458:	3f 92       	push	r3
    945a:	4f 92       	push	r4
    945c:	5f 92       	push	r5
    945e:	6f 92       	push	r6
    9460:	7f 92       	push	r7
    9462:	8f 92       	push	r8
    9464:	9f 92       	push	r9
    9466:	af 92       	push	r10
    9468:	bf 92       	push	r11
    946a:	cf 92       	push	r12
    946c:	df 92       	push	r13
    946e:	ef 92       	push	r14
    9470:	ff 92       	push	r15
    9472:	0f 93       	push	r16
    9474:	1f 93       	push	r17
    9476:	cf 93       	push	r28
    9478:	df 93       	push	r29
    947a:	cd b7       	in	r28, 0x3d	; 61
    947c:	de b7       	in	r29, 0x3e	; 62
    947e:	2d 97       	sbiw	r28, 0x0d	; 13
    9480:	0f b6       	in	r0, 0x3f	; 63
    9482:	f8 94       	cli
    9484:	de bf       	out	0x3e, r29	; 62
    9486:	0f be       	out	0x3f, r0	; 63
    9488:	cd bf       	out	0x3d, r28	; 61
    948a:	3c 01       	movw	r6, r24
    948c:	7d 87       	std	Y+13, r23	; 0x0d
    948e:	6c 87       	std	Y+12, r22	; 0x0c
    9490:	5a 01       	movw	r10, r20
    9492:	fc 01       	movw	r30, r24
    9494:	17 82       	std	Z+7, r1	; 0x07
    9496:	16 82       	std	Z+6, r1	; 0x06
    9498:	83 81       	ldd	r24, Z+3	; 0x03
    949a:	81 ff       	sbrs	r24, 1
    949c:	ca c1       	rjmp	.+916    	; 0x9832 <vfprintf+0x3dc>
    949e:	3f e3       	ldi	r19, 0x3F	; 63
    94a0:	c3 2e       	mov	r12, r19
    94a2:	2e 01       	movw	r4, r28
    94a4:	08 94       	sec
    94a6:	41 1c       	adc	r4, r1
    94a8:	51 1c       	adc	r5, r1
    94aa:	f3 01       	movw	r30, r6
    94ac:	93 81       	ldd	r25, Z+3	; 0x03
    94ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    94b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    94b2:	93 fd       	sbrc	r25, 3
    94b4:	85 91       	lpm	r24, Z+
    94b6:	93 ff       	sbrs	r25, 3
    94b8:	81 91       	ld	r24, Z+
    94ba:	fd 87       	std	Y+13, r31	; 0x0d
    94bc:	ec 87       	std	Y+12, r30	; 0x0c
    94be:	88 23       	and	r24, r24
    94c0:	09 f4       	brne	.+2      	; 0x94c4 <vfprintf+0x6e>
    94c2:	b3 c1       	rjmp	.+870    	; 0x982a <vfprintf+0x3d4>
    94c4:	85 32       	cpi	r24, 0x25	; 37
    94c6:	41 f4       	brne	.+16     	; 0x94d8 <vfprintf+0x82>
    94c8:	93 fd       	sbrc	r25, 3
    94ca:	85 91       	lpm	r24, Z+
    94cc:	93 ff       	sbrs	r25, 3
    94ce:	81 91       	ld	r24, Z+
    94d0:	fd 87       	std	Y+13, r31	; 0x0d
    94d2:	ec 87       	std	Y+12, r30	; 0x0c
    94d4:	85 32       	cpi	r24, 0x25	; 37
    94d6:	29 f4       	brne	.+10     	; 0x94e2 <vfprintf+0x8c>
    94d8:	90 e0       	ldi	r25, 0x00	; 0
    94da:	b3 01       	movw	r22, r6
    94dc:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    94e0:	e4 cf       	rjmp	.-56     	; 0x94aa <vfprintf+0x54>
    94e2:	ee 24       	eor	r14, r14
    94e4:	dd 24       	eor	r13, r13
    94e6:	10 e0       	ldi	r17, 0x00	; 0
    94e8:	10 32       	cpi	r17, 0x20	; 32
    94ea:	b0 f4       	brcc	.+44     	; 0x9518 <vfprintf+0xc2>
    94ec:	8b 32       	cpi	r24, 0x2B	; 43
    94ee:	69 f0       	breq	.+26     	; 0x950a <vfprintf+0xb4>
    94f0:	8c 32       	cpi	r24, 0x2C	; 44
    94f2:	28 f4       	brcc	.+10     	; 0x94fe <vfprintf+0xa8>
    94f4:	80 32       	cpi	r24, 0x20	; 32
    94f6:	51 f0       	breq	.+20     	; 0x950c <vfprintf+0xb6>
    94f8:	83 32       	cpi	r24, 0x23	; 35
    94fa:	71 f4       	brne	.+28     	; 0x9518 <vfprintf+0xc2>
    94fc:	0b c0       	rjmp	.+22     	; 0x9514 <vfprintf+0xbe>
    94fe:	8d 32       	cpi	r24, 0x2D	; 45
    9500:	39 f0       	breq	.+14     	; 0x9510 <vfprintf+0xba>
    9502:	80 33       	cpi	r24, 0x30	; 48
    9504:	49 f4       	brne	.+18     	; 0x9518 <vfprintf+0xc2>
    9506:	11 60       	ori	r17, 0x01	; 1
    9508:	2c c0       	rjmp	.+88     	; 0x9562 <vfprintf+0x10c>
    950a:	12 60       	ori	r17, 0x02	; 2
    950c:	14 60       	ori	r17, 0x04	; 4
    950e:	29 c0       	rjmp	.+82     	; 0x9562 <vfprintf+0x10c>
    9510:	18 60       	ori	r17, 0x08	; 8
    9512:	27 c0       	rjmp	.+78     	; 0x9562 <vfprintf+0x10c>
    9514:	10 61       	ori	r17, 0x10	; 16
    9516:	25 c0       	rjmp	.+74     	; 0x9562 <vfprintf+0x10c>
    9518:	17 fd       	sbrc	r17, 7
    951a:	2e c0       	rjmp	.+92     	; 0x9578 <vfprintf+0x122>
    951c:	28 2f       	mov	r18, r24
    951e:	20 53       	subi	r18, 0x30	; 48
    9520:	2a 30       	cpi	r18, 0x0A	; 10
    9522:	98 f4       	brcc	.+38     	; 0x954a <vfprintf+0xf4>
    9524:	16 ff       	sbrs	r17, 6
    9526:	08 c0       	rjmp	.+16     	; 0x9538 <vfprintf+0xe2>
    9528:	8e 2d       	mov	r24, r14
    952a:	88 0f       	add	r24, r24
    952c:	e8 2e       	mov	r14, r24
    952e:	ee 0c       	add	r14, r14
    9530:	ee 0c       	add	r14, r14
    9532:	e8 0e       	add	r14, r24
    9534:	e2 0e       	add	r14, r18
    9536:	15 c0       	rjmp	.+42     	; 0x9562 <vfprintf+0x10c>
    9538:	8d 2d       	mov	r24, r13
    953a:	88 0f       	add	r24, r24
    953c:	d8 2e       	mov	r13, r24
    953e:	dd 0c       	add	r13, r13
    9540:	dd 0c       	add	r13, r13
    9542:	d8 0e       	add	r13, r24
    9544:	d2 0e       	add	r13, r18
    9546:	10 62       	ori	r17, 0x20	; 32
    9548:	0c c0       	rjmp	.+24     	; 0x9562 <vfprintf+0x10c>
    954a:	8e 32       	cpi	r24, 0x2E	; 46
    954c:	21 f4       	brne	.+8      	; 0x9556 <vfprintf+0x100>
    954e:	16 fd       	sbrc	r17, 6
    9550:	6c c1       	rjmp	.+728    	; 0x982a <vfprintf+0x3d4>
    9552:	10 64       	ori	r17, 0x40	; 64
    9554:	06 c0       	rjmp	.+12     	; 0x9562 <vfprintf+0x10c>
    9556:	8c 36       	cpi	r24, 0x6C	; 108
    9558:	11 f4       	brne	.+4      	; 0x955e <vfprintf+0x108>
    955a:	10 68       	ori	r17, 0x80	; 128
    955c:	02 c0       	rjmp	.+4      	; 0x9562 <vfprintf+0x10c>
    955e:	88 36       	cpi	r24, 0x68	; 104
    9560:	59 f4       	brne	.+22     	; 0x9578 <vfprintf+0x122>
    9562:	ec 85       	ldd	r30, Y+12	; 0x0c
    9564:	fd 85       	ldd	r31, Y+13	; 0x0d
    9566:	93 fd       	sbrc	r25, 3
    9568:	85 91       	lpm	r24, Z+
    956a:	93 ff       	sbrs	r25, 3
    956c:	81 91       	ld	r24, Z+
    956e:	fd 87       	std	Y+13, r31	; 0x0d
    9570:	ec 87       	std	Y+12, r30	; 0x0c
    9572:	88 23       	and	r24, r24
    9574:	09 f0       	breq	.+2      	; 0x9578 <vfprintf+0x122>
    9576:	b8 cf       	rjmp	.-144    	; 0x94e8 <vfprintf+0x92>
    9578:	98 2f       	mov	r25, r24
    957a:	95 54       	subi	r25, 0x45	; 69
    957c:	93 30       	cpi	r25, 0x03	; 3
    957e:	18 f0       	brcs	.+6      	; 0x9586 <vfprintf+0x130>
    9580:	90 52       	subi	r25, 0x20	; 32
    9582:	93 30       	cpi	r25, 0x03	; 3
    9584:	30 f4       	brcc	.+12     	; 0x9592 <vfprintf+0x13c>
    9586:	24 e0       	ldi	r18, 0x04	; 4
    9588:	30 e0       	ldi	r19, 0x00	; 0
    958a:	a2 0e       	add	r10, r18
    958c:	b3 1e       	adc	r11, r19
    958e:	c9 82       	std	Y+1, r12	; 0x01
    9590:	0f c0       	rjmp	.+30     	; 0x95b0 <vfprintf+0x15a>
    9592:	83 36       	cpi	r24, 0x63	; 99
    9594:	31 f0       	breq	.+12     	; 0x95a2 <vfprintf+0x14c>
    9596:	83 37       	cpi	r24, 0x73	; 115
    9598:	81 f0       	breq	.+32     	; 0x95ba <vfprintf+0x164>
    959a:	83 35       	cpi	r24, 0x53	; 83
    959c:	09 f0       	breq	.+2      	; 0x95a0 <vfprintf+0x14a>
    959e:	5a c0       	rjmp	.+180    	; 0x9654 <vfprintf+0x1fe>
    95a0:	22 c0       	rjmp	.+68     	; 0x95e6 <vfprintf+0x190>
    95a2:	f5 01       	movw	r30, r10
    95a4:	80 81       	ld	r24, Z
    95a6:	89 83       	std	Y+1, r24	; 0x01
    95a8:	22 e0       	ldi	r18, 0x02	; 2
    95aa:	30 e0       	ldi	r19, 0x00	; 0
    95ac:	a2 0e       	add	r10, r18
    95ae:	b3 1e       	adc	r11, r19
    95b0:	21 e0       	ldi	r18, 0x01	; 1
    95b2:	e2 2e       	mov	r14, r18
    95b4:	f1 2c       	mov	r15, r1
    95b6:	42 01       	movw	r8, r4
    95b8:	14 c0       	rjmp	.+40     	; 0x95e2 <vfprintf+0x18c>
    95ba:	92 e0       	ldi	r25, 0x02	; 2
    95bc:	29 2e       	mov	r2, r25
    95be:	31 2c       	mov	r3, r1
    95c0:	2a 0c       	add	r2, r10
    95c2:	3b 1c       	adc	r3, r11
    95c4:	f5 01       	movw	r30, r10
    95c6:	80 80       	ld	r8, Z
    95c8:	91 80       	ldd	r9, Z+1	; 0x01
    95ca:	16 ff       	sbrs	r17, 6
    95cc:	03 c0       	rjmp	.+6      	; 0x95d4 <vfprintf+0x17e>
    95ce:	6e 2d       	mov	r22, r14
    95d0:	70 e0       	ldi	r23, 0x00	; 0
    95d2:	02 c0       	rjmp	.+4      	; 0x95d8 <vfprintf+0x182>
    95d4:	6f ef       	ldi	r22, 0xFF	; 255
    95d6:	7f ef       	ldi	r23, 0xFF	; 255
    95d8:	c4 01       	movw	r24, r8
    95da:	0e 94 3f 4c 	call	0x987e	; 0x987e <strnlen>
    95de:	7c 01       	movw	r14, r24
    95e0:	51 01       	movw	r10, r2
    95e2:	1f 77       	andi	r17, 0x7F	; 127
    95e4:	15 c0       	rjmp	.+42     	; 0x9610 <vfprintf+0x1ba>
    95e6:	82 e0       	ldi	r24, 0x02	; 2
    95e8:	28 2e       	mov	r2, r24
    95ea:	31 2c       	mov	r3, r1
    95ec:	2a 0c       	add	r2, r10
    95ee:	3b 1c       	adc	r3, r11
    95f0:	f5 01       	movw	r30, r10
    95f2:	80 80       	ld	r8, Z
    95f4:	91 80       	ldd	r9, Z+1	; 0x01
    95f6:	16 ff       	sbrs	r17, 6
    95f8:	03 c0       	rjmp	.+6      	; 0x9600 <vfprintf+0x1aa>
    95fa:	6e 2d       	mov	r22, r14
    95fc:	70 e0       	ldi	r23, 0x00	; 0
    95fe:	02 c0       	rjmp	.+4      	; 0x9604 <vfprintf+0x1ae>
    9600:	6f ef       	ldi	r22, 0xFF	; 255
    9602:	7f ef       	ldi	r23, 0xFF	; 255
    9604:	c4 01       	movw	r24, r8
    9606:	0e 94 34 4c 	call	0x9868	; 0x9868 <strnlen_P>
    960a:	7c 01       	movw	r14, r24
    960c:	10 68       	ori	r17, 0x80	; 128
    960e:	51 01       	movw	r10, r2
    9610:	13 fd       	sbrc	r17, 3
    9612:	1c c0       	rjmp	.+56     	; 0x964c <vfprintf+0x1f6>
    9614:	06 c0       	rjmp	.+12     	; 0x9622 <vfprintf+0x1cc>
    9616:	80 e2       	ldi	r24, 0x20	; 32
    9618:	90 e0       	ldi	r25, 0x00	; 0
    961a:	b3 01       	movw	r22, r6
    961c:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    9620:	da 94       	dec	r13
    9622:	8d 2d       	mov	r24, r13
    9624:	90 e0       	ldi	r25, 0x00	; 0
    9626:	e8 16       	cp	r14, r24
    9628:	f9 06       	cpc	r15, r25
    962a:	a8 f3       	brcs	.-22     	; 0x9616 <vfprintf+0x1c0>
    962c:	0f c0       	rjmp	.+30     	; 0x964c <vfprintf+0x1f6>
    962e:	f4 01       	movw	r30, r8
    9630:	17 fd       	sbrc	r17, 7
    9632:	85 91       	lpm	r24, Z+
    9634:	17 ff       	sbrs	r17, 7
    9636:	81 91       	ld	r24, Z+
    9638:	4f 01       	movw	r8, r30
    963a:	90 e0       	ldi	r25, 0x00	; 0
    963c:	b3 01       	movw	r22, r6
    963e:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    9642:	d1 10       	cpse	r13, r1
    9644:	da 94       	dec	r13
    9646:	08 94       	sec
    9648:	e1 08       	sbc	r14, r1
    964a:	f1 08       	sbc	r15, r1
    964c:	e1 14       	cp	r14, r1
    964e:	f1 04       	cpc	r15, r1
    9650:	71 f7       	brne	.-36     	; 0x962e <vfprintf+0x1d8>
    9652:	e8 c0       	rjmp	.+464    	; 0x9824 <vfprintf+0x3ce>
    9654:	84 36       	cpi	r24, 0x64	; 100
    9656:	11 f0       	breq	.+4      	; 0x965c <vfprintf+0x206>
    9658:	89 36       	cpi	r24, 0x69	; 105
    965a:	59 f5       	brne	.+86     	; 0x96b2 <vfprintf+0x25c>
    965c:	f5 01       	movw	r30, r10
    965e:	17 ff       	sbrs	r17, 7
    9660:	07 c0       	rjmp	.+14     	; 0x9670 <vfprintf+0x21a>
    9662:	80 81       	ld	r24, Z
    9664:	91 81       	ldd	r25, Z+1	; 0x01
    9666:	a2 81       	ldd	r26, Z+2	; 0x02
    9668:	b3 81       	ldd	r27, Z+3	; 0x03
    966a:	24 e0       	ldi	r18, 0x04	; 4
    966c:	30 e0       	ldi	r19, 0x00	; 0
    966e:	09 c0       	rjmp	.+18     	; 0x9682 <vfprintf+0x22c>
    9670:	60 81       	ld	r22, Z
    9672:	71 81       	ldd	r23, Z+1	; 0x01
    9674:	cb 01       	movw	r24, r22
    9676:	aa 27       	eor	r26, r26
    9678:	97 fd       	sbrc	r25, 7
    967a:	a0 95       	com	r26
    967c:	ba 2f       	mov	r27, r26
    967e:	22 e0       	ldi	r18, 0x02	; 2
    9680:	30 e0       	ldi	r19, 0x00	; 0
    9682:	a2 0e       	add	r10, r18
    9684:	b3 1e       	adc	r11, r19
    9686:	01 2f       	mov	r16, r17
    9688:	0f 76       	andi	r16, 0x6F	; 111
    968a:	b7 ff       	sbrs	r27, 7
    968c:	08 c0       	rjmp	.+16     	; 0x969e <vfprintf+0x248>
    968e:	b0 95       	com	r27
    9690:	a0 95       	com	r26
    9692:	90 95       	com	r25
    9694:	81 95       	neg	r24
    9696:	9f 4f       	sbci	r25, 0xFF	; 255
    9698:	af 4f       	sbci	r26, 0xFF	; 255
    969a:	bf 4f       	sbci	r27, 0xFF	; 255
    969c:	00 68       	ori	r16, 0x80	; 128
    969e:	bc 01       	movw	r22, r24
    96a0:	cd 01       	movw	r24, r26
    96a2:	a2 01       	movw	r20, r4
    96a4:	2a e0       	ldi	r18, 0x0A	; 10
    96a6:	30 e0       	ldi	r19, 0x00	; 0
    96a8:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__ultoa_invert>
    96ac:	f8 2e       	mov	r15, r24
    96ae:	f4 18       	sub	r15, r4
    96b0:	3f c0       	rjmp	.+126    	; 0x9730 <vfprintf+0x2da>
    96b2:	85 37       	cpi	r24, 0x75	; 117
    96b4:	21 f4       	brne	.+8      	; 0x96be <vfprintf+0x268>
    96b6:	1f 7e       	andi	r17, 0xEF	; 239
    96b8:	2a e0       	ldi	r18, 0x0A	; 10
    96ba:	30 e0       	ldi	r19, 0x00	; 0
    96bc:	20 c0       	rjmp	.+64     	; 0x96fe <vfprintf+0x2a8>
    96be:	19 7f       	andi	r17, 0xF9	; 249
    96c0:	8f 36       	cpi	r24, 0x6F	; 111
    96c2:	a9 f0       	breq	.+42     	; 0x96ee <vfprintf+0x298>
    96c4:	80 37       	cpi	r24, 0x70	; 112
    96c6:	20 f4       	brcc	.+8      	; 0x96d0 <vfprintf+0x27a>
    96c8:	88 35       	cpi	r24, 0x58	; 88
    96ca:	09 f0       	breq	.+2      	; 0x96ce <vfprintf+0x278>
    96cc:	ae c0       	rjmp	.+348    	; 0x982a <vfprintf+0x3d4>
    96ce:	0b c0       	rjmp	.+22     	; 0x96e6 <vfprintf+0x290>
    96d0:	80 37       	cpi	r24, 0x70	; 112
    96d2:	21 f0       	breq	.+8      	; 0x96dc <vfprintf+0x286>
    96d4:	88 37       	cpi	r24, 0x78	; 120
    96d6:	09 f0       	breq	.+2      	; 0x96da <vfprintf+0x284>
    96d8:	a8 c0       	rjmp	.+336    	; 0x982a <vfprintf+0x3d4>
    96da:	01 c0       	rjmp	.+2      	; 0x96de <vfprintf+0x288>
    96dc:	10 61       	ori	r17, 0x10	; 16
    96de:	14 ff       	sbrs	r17, 4
    96e0:	09 c0       	rjmp	.+18     	; 0x96f4 <vfprintf+0x29e>
    96e2:	14 60       	ori	r17, 0x04	; 4
    96e4:	07 c0       	rjmp	.+14     	; 0x96f4 <vfprintf+0x29e>
    96e6:	14 ff       	sbrs	r17, 4
    96e8:	08 c0       	rjmp	.+16     	; 0x96fa <vfprintf+0x2a4>
    96ea:	16 60       	ori	r17, 0x06	; 6
    96ec:	06 c0       	rjmp	.+12     	; 0x96fa <vfprintf+0x2a4>
    96ee:	28 e0       	ldi	r18, 0x08	; 8
    96f0:	30 e0       	ldi	r19, 0x00	; 0
    96f2:	05 c0       	rjmp	.+10     	; 0x96fe <vfprintf+0x2a8>
    96f4:	20 e1       	ldi	r18, 0x10	; 16
    96f6:	30 e0       	ldi	r19, 0x00	; 0
    96f8:	02 c0       	rjmp	.+4      	; 0x96fe <vfprintf+0x2a8>
    96fa:	20 e1       	ldi	r18, 0x10	; 16
    96fc:	32 e0       	ldi	r19, 0x02	; 2
    96fe:	f5 01       	movw	r30, r10
    9700:	17 ff       	sbrs	r17, 7
    9702:	07 c0       	rjmp	.+14     	; 0x9712 <vfprintf+0x2bc>
    9704:	60 81       	ld	r22, Z
    9706:	71 81       	ldd	r23, Z+1	; 0x01
    9708:	82 81       	ldd	r24, Z+2	; 0x02
    970a:	93 81       	ldd	r25, Z+3	; 0x03
    970c:	44 e0       	ldi	r20, 0x04	; 4
    970e:	50 e0       	ldi	r21, 0x00	; 0
    9710:	06 c0       	rjmp	.+12     	; 0x971e <vfprintf+0x2c8>
    9712:	60 81       	ld	r22, Z
    9714:	71 81       	ldd	r23, Z+1	; 0x01
    9716:	80 e0       	ldi	r24, 0x00	; 0
    9718:	90 e0       	ldi	r25, 0x00	; 0
    971a:	42 e0       	ldi	r20, 0x02	; 2
    971c:	50 e0       	ldi	r21, 0x00	; 0
    971e:	a4 0e       	add	r10, r20
    9720:	b5 1e       	adc	r11, r21
    9722:	a2 01       	movw	r20, r4
    9724:	0e 94 76 4c 	call	0x98ec	; 0x98ec <__ultoa_invert>
    9728:	f8 2e       	mov	r15, r24
    972a:	f4 18       	sub	r15, r4
    972c:	01 2f       	mov	r16, r17
    972e:	0f 77       	andi	r16, 0x7F	; 127
    9730:	06 ff       	sbrs	r16, 6
    9732:	09 c0       	rjmp	.+18     	; 0x9746 <vfprintf+0x2f0>
    9734:	0e 7f       	andi	r16, 0xFE	; 254
    9736:	fe 14       	cp	r15, r14
    9738:	30 f4       	brcc	.+12     	; 0x9746 <vfprintf+0x2f0>
    973a:	04 ff       	sbrs	r16, 4
    973c:	06 c0       	rjmp	.+12     	; 0x974a <vfprintf+0x2f4>
    973e:	02 fd       	sbrc	r16, 2
    9740:	04 c0       	rjmp	.+8      	; 0x974a <vfprintf+0x2f4>
    9742:	0f 7e       	andi	r16, 0xEF	; 239
    9744:	02 c0       	rjmp	.+4      	; 0x974a <vfprintf+0x2f4>
    9746:	1f 2d       	mov	r17, r15
    9748:	01 c0       	rjmp	.+2      	; 0x974c <vfprintf+0x2f6>
    974a:	1e 2d       	mov	r17, r14
    974c:	80 2f       	mov	r24, r16
    974e:	90 e0       	ldi	r25, 0x00	; 0
    9750:	04 ff       	sbrs	r16, 4
    9752:	0c c0       	rjmp	.+24     	; 0x976c <vfprintf+0x316>
    9754:	fe 01       	movw	r30, r28
    9756:	ef 0d       	add	r30, r15
    9758:	f1 1d       	adc	r31, r1
    975a:	20 81       	ld	r18, Z
    975c:	20 33       	cpi	r18, 0x30	; 48
    975e:	11 f4       	brne	.+4      	; 0x9764 <vfprintf+0x30e>
    9760:	09 7e       	andi	r16, 0xE9	; 233
    9762:	09 c0       	rjmp	.+18     	; 0x9776 <vfprintf+0x320>
    9764:	02 ff       	sbrs	r16, 2
    9766:	06 c0       	rjmp	.+12     	; 0x9774 <vfprintf+0x31e>
    9768:	1e 5f       	subi	r17, 0xFE	; 254
    976a:	05 c0       	rjmp	.+10     	; 0x9776 <vfprintf+0x320>
    976c:	86 78       	andi	r24, 0x86	; 134
    976e:	90 70       	andi	r25, 0x00	; 0
    9770:	00 97       	sbiw	r24, 0x00	; 0
    9772:	09 f0       	breq	.+2      	; 0x9776 <vfprintf+0x320>
    9774:	1f 5f       	subi	r17, 0xFF	; 255
    9776:	80 2e       	mov	r8, r16
    9778:	99 24       	eor	r9, r9
    977a:	03 fd       	sbrc	r16, 3
    977c:	12 c0       	rjmp	.+36     	; 0x97a2 <vfprintf+0x34c>
    977e:	00 ff       	sbrs	r16, 0
    9780:	0d c0       	rjmp	.+26     	; 0x979c <vfprintf+0x346>
    9782:	ef 2c       	mov	r14, r15
    9784:	1d 15       	cp	r17, r13
    9786:	50 f4       	brcc	.+20     	; 0x979c <vfprintf+0x346>
    9788:	ed 0c       	add	r14, r13
    978a:	e1 1a       	sub	r14, r17
    978c:	1d 2d       	mov	r17, r13
    978e:	06 c0       	rjmp	.+12     	; 0x979c <vfprintf+0x346>
    9790:	80 e2       	ldi	r24, 0x20	; 32
    9792:	90 e0       	ldi	r25, 0x00	; 0
    9794:	b3 01       	movw	r22, r6
    9796:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    979a:	1f 5f       	subi	r17, 0xFF	; 255
    979c:	1d 15       	cp	r17, r13
    979e:	c0 f3       	brcs	.-16     	; 0x9790 <vfprintf+0x33a>
    97a0:	04 c0       	rjmp	.+8      	; 0x97aa <vfprintf+0x354>
    97a2:	1d 15       	cp	r17, r13
    97a4:	10 f4       	brcc	.+4      	; 0x97aa <vfprintf+0x354>
    97a6:	d1 1a       	sub	r13, r17
    97a8:	01 c0       	rjmp	.+2      	; 0x97ac <vfprintf+0x356>
    97aa:	dd 24       	eor	r13, r13
    97ac:	84 fe       	sbrs	r8, 4
    97ae:	0f c0       	rjmp	.+30     	; 0x97ce <vfprintf+0x378>
    97b0:	80 e3       	ldi	r24, 0x30	; 48
    97b2:	90 e0       	ldi	r25, 0x00	; 0
    97b4:	b3 01       	movw	r22, r6
    97b6:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    97ba:	82 fe       	sbrs	r8, 2
    97bc:	1f c0       	rjmp	.+62     	; 0x97fc <vfprintf+0x3a6>
    97be:	81 fe       	sbrs	r8, 1
    97c0:	03 c0       	rjmp	.+6      	; 0x97c8 <vfprintf+0x372>
    97c2:	88 e5       	ldi	r24, 0x58	; 88
    97c4:	90 e0       	ldi	r25, 0x00	; 0
    97c6:	10 c0       	rjmp	.+32     	; 0x97e8 <vfprintf+0x392>
    97c8:	88 e7       	ldi	r24, 0x78	; 120
    97ca:	90 e0       	ldi	r25, 0x00	; 0
    97cc:	0d c0       	rjmp	.+26     	; 0x97e8 <vfprintf+0x392>
    97ce:	c4 01       	movw	r24, r8
    97d0:	86 78       	andi	r24, 0x86	; 134
    97d2:	90 70       	andi	r25, 0x00	; 0
    97d4:	00 97       	sbiw	r24, 0x00	; 0
    97d6:	91 f0       	breq	.+36     	; 0x97fc <vfprintf+0x3a6>
    97d8:	81 fc       	sbrc	r8, 1
    97da:	02 c0       	rjmp	.+4      	; 0x97e0 <vfprintf+0x38a>
    97dc:	80 e2       	ldi	r24, 0x20	; 32
    97de:	01 c0       	rjmp	.+2      	; 0x97e2 <vfprintf+0x38c>
    97e0:	8b e2       	ldi	r24, 0x2B	; 43
    97e2:	07 fd       	sbrc	r16, 7
    97e4:	8d e2       	ldi	r24, 0x2D	; 45
    97e6:	90 e0       	ldi	r25, 0x00	; 0
    97e8:	b3 01       	movw	r22, r6
    97ea:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    97ee:	06 c0       	rjmp	.+12     	; 0x97fc <vfprintf+0x3a6>
    97f0:	80 e3       	ldi	r24, 0x30	; 48
    97f2:	90 e0       	ldi	r25, 0x00	; 0
    97f4:	b3 01       	movw	r22, r6
    97f6:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    97fa:	ea 94       	dec	r14
    97fc:	fe 14       	cp	r15, r14
    97fe:	c0 f3       	brcs	.-16     	; 0x97f0 <vfprintf+0x39a>
    9800:	fa 94       	dec	r15
    9802:	f2 01       	movw	r30, r4
    9804:	ef 0d       	add	r30, r15
    9806:	f1 1d       	adc	r31, r1
    9808:	80 81       	ld	r24, Z
    980a:	90 e0       	ldi	r25, 0x00	; 0
    980c:	b3 01       	movw	r22, r6
    980e:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    9812:	ff 20       	and	r15, r15
    9814:	a9 f7       	brne	.-22     	; 0x9800 <vfprintf+0x3aa>
    9816:	06 c0       	rjmp	.+12     	; 0x9824 <vfprintf+0x3ce>
    9818:	80 e2       	ldi	r24, 0x20	; 32
    981a:	90 e0       	ldi	r25, 0x00	; 0
    981c:	b3 01       	movw	r22, r6
    981e:	0e 94 4a 4c 	call	0x9894	; 0x9894 <fputc>
    9822:	da 94       	dec	r13
    9824:	dd 20       	and	r13, r13
    9826:	c1 f7       	brne	.-16     	; 0x9818 <vfprintf+0x3c2>
    9828:	40 ce       	rjmp	.-896    	; 0x94aa <vfprintf+0x54>
    982a:	f3 01       	movw	r30, r6
    982c:	86 81       	ldd	r24, Z+6	; 0x06
    982e:	97 81       	ldd	r25, Z+7	; 0x07
    9830:	02 c0       	rjmp	.+4      	; 0x9836 <vfprintf+0x3e0>
    9832:	8f ef       	ldi	r24, 0xFF	; 255
    9834:	9f ef       	ldi	r25, 0xFF	; 255
    9836:	2d 96       	adiw	r28, 0x0d	; 13
    9838:	0f b6       	in	r0, 0x3f	; 63
    983a:	f8 94       	cli
    983c:	de bf       	out	0x3e, r29	; 62
    983e:	0f be       	out	0x3f, r0	; 63
    9840:	cd bf       	out	0x3d, r28	; 61
    9842:	df 91       	pop	r29
    9844:	cf 91       	pop	r28
    9846:	1f 91       	pop	r17
    9848:	0f 91       	pop	r16
    984a:	ff 90       	pop	r15
    984c:	ef 90       	pop	r14
    984e:	df 90       	pop	r13
    9850:	cf 90       	pop	r12
    9852:	bf 90       	pop	r11
    9854:	af 90       	pop	r10
    9856:	9f 90       	pop	r9
    9858:	8f 90       	pop	r8
    985a:	7f 90       	pop	r7
    985c:	6f 90       	pop	r6
    985e:	5f 90       	pop	r5
    9860:	4f 90       	pop	r4
    9862:	3f 90       	pop	r3
    9864:	2f 90       	pop	r2
    9866:	08 95       	ret

00009868 <strnlen_P>:
    9868:	fc 01       	movw	r30, r24
    986a:	05 90       	lpm	r0, Z+
    986c:	61 50       	subi	r22, 0x01	; 1
    986e:	70 40       	sbci	r23, 0x00	; 0
    9870:	01 10       	cpse	r0, r1
    9872:	d8 f7       	brcc	.-10     	; 0x986a <strnlen_P+0x2>
    9874:	80 95       	com	r24
    9876:	90 95       	com	r25
    9878:	8e 0f       	add	r24, r30
    987a:	9f 1f       	adc	r25, r31
    987c:	08 95       	ret

0000987e <strnlen>:
    987e:	fc 01       	movw	r30, r24
    9880:	61 50       	subi	r22, 0x01	; 1
    9882:	70 40       	sbci	r23, 0x00	; 0
    9884:	01 90       	ld	r0, Z+
    9886:	01 10       	cpse	r0, r1
    9888:	d8 f7       	brcc	.-10     	; 0x9880 <strnlen+0x2>
    988a:	80 95       	com	r24
    988c:	90 95       	com	r25
    988e:	8e 0f       	add	r24, r30
    9890:	9f 1f       	adc	r25, r31
    9892:	08 95       	ret

00009894 <fputc>:
    9894:	0f 93       	push	r16
    9896:	1f 93       	push	r17
    9898:	cf 93       	push	r28
    989a:	df 93       	push	r29
    989c:	8c 01       	movw	r16, r24
    989e:	eb 01       	movw	r28, r22
    98a0:	8b 81       	ldd	r24, Y+3	; 0x03
    98a2:	81 ff       	sbrs	r24, 1
    98a4:	1b c0       	rjmp	.+54     	; 0x98dc <fputc+0x48>
    98a6:	82 ff       	sbrs	r24, 2
    98a8:	0d c0       	rjmp	.+26     	; 0x98c4 <fputc+0x30>
    98aa:	2e 81       	ldd	r18, Y+6	; 0x06
    98ac:	3f 81       	ldd	r19, Y+7	; 0x07
    98ae:	8c 81       	ldd	r24, Y+4	; 0x04
    98b0:	9d 81       	ldd	r25, Y+5	; 0x05
    98b2:	28 17       	cp	r18, r24
    98b4:	39 07       	cpc	r19, r25
    98b6:	64 f4       	brge	.+24     	; 0x98d0 <fputc+0x3c>
    98b8:	e8 81       	ld	r30, Y
    98ba:	f9 81       	ldd	r31, Y+1	; 0x01
    98bc:	01 93       	st	Z+, r16
    98be:	f9 83       	std	Y+1, r31	; 0x01
    98c0:	e8 83       	st	Y, r30
    98c2:	06 c0       	rjmp	.+12     	; 0x98d0 <fputc+0x3c>
    98c4:	e8 85       	ldd	r30, Y+8	; 0x08
    98c6:	f9 85       	ldd	r31, Y+9	; 0x09
    98c8:	80 2f       	mov	r24, r16
    98ca:	19 95       	eicall
    98cc:	00 97       	sbiw	r24, 0x00	; 0
    98ce:	31 f4       	brne	.+12     	; 0x98dc <fputc+0x48>
    98d0:	8e 81       	ldd	r24, Y+6	; 0x06
    98d2:	9f 81       	ldd	r25, Y+7	; 0x07
    98d4:	01 96       	adiw	r24, 0x01	; 1
    98d6:	9f 83       	std	Y+7, r25	; 0x07
    98d8:	8e 83       	std	Y+6, r24	; 0x06
    98da:	02 c0       	rjmp	.+4      	; 0x98e0 <fputc+0x4c>
    98dc:	0f ef       	ldi	r16, 0xFF	; 255
    98de:	1f ef       	ldi	r17, 0xFF	; 255
    98e0:	c8 01       	movw	r24, r16
    98e2:	df 91       	pop	r29
    98e4:	cf 91       	pop	r28
    98e6:	1f 91       	pop	r17
    98e8:	0f 91       	pop	r16
    98ea:	08 95       	ret

000098ec <__ultoa_invert>:
    98ec:	fa 01       	movw	r30, r20
    98ee:	aa 27       	eor	r26, r26
    98f0:	28 30       	cpi	r18, 0x08	; 8
    98f2:	51 f1       	breq	.+84     	; 0x9948 <__ultoa_invert+0x5c>
    98f4:	20 31       	cpi	r18, 0x10	; 16
    98f6:	81 f1       	breq	.+96     	; 0x9958 <__ultoa_invert+0x6c>
    98f8:	e8 94       	clt
    98fa:	6f 93       	push	r22
    98fc:	6e 7f       	andi	r22, 0xFE	; 254
    98fe:	6e 5f       	subi	r22, 0xFE	; 254
    9900:	7f 4f       	sbci	r23, 0xFF	; 255
    9902:	8f 4f       	sbci	r24, 0xFF	; 255
    9904:	9f 4f       	sbci	r25, 0xFF	; 255
    9906:	af 4f       	sbci	r26, 0xFF	; 255
    9908:	b1 e0       	ldi	r27, 0x01	; 1
    990a:	3e d0       	rcall	.+124    	; 0x9988 <__ultoa_invert+0x9c>
    990c:	b4 e0       	ldi	r27, 0x04	; 4
    990e:	3c d0       	rcall	.+120    	; 0x9988 <__ultoa_invert+0x9c>
    9910:	67 0f       	add	r22, r23
    9912:	78 1f       	adc	r23, r24
    9914:	89 1f       	adc	r24, r25
    9916:	9a 1f       	adc	r25, r26
    9918:	a1 1d       	adc	r26, r1
    991a:	68 0f       	add	r22, r24
    991c:	79 1f       	adc	r23, r25
    991e:	8a 1f       	adc	r24, r26
    9920:	91 1d       	adc	r25, r1
    9922:	a1 1d       	adc	r26, r1
    9924:	6a 0f       	add	r22, r26
    9926:	71 1d       	adc	r23, r1
    9928:	81 1d       	adc	r24, r1
    992a:	91 1d       	adc	r25, r1
    992c:	a1 1d       	adc	r26, r1
    992e:	20 d0       	rcall	.+64     	; 0x9970 <__ultoa_invert+0x84>
    9930:	09 f4       	brne	.+2      	; 0x9934 <__ultoa_invert+0x48>
    9932:	68 94       	set
    9934:	3f 91       	pop	r19
    9936:	2a e0       	ldi	r18, 0x0A	; 10
    9938:	26 9f       	mul	r18, r22
    993a:	11 24       	eor	r1, r1
    993c:	30 19       	sub	r19, r0
    993e:	30 5d       	subi	r19, 0xD0	; 208
    9940:	31 93       	st	Z+, r19
    9942:	de f6       	brtc	.-74     	; 0x98fa <__ultoa_invert+0xe>
    9944:	cf 01       	movw	r24, r30
    9946:	08 95       	ret
    9948:	46 2f       	mov	r20, r22
    994a:	47 70       	andi	r20, 0x07	; 7
    994c:	40 5d       	subi	r20, 0xD0	; 208
    994e:	41 93       	st	Z+, r20
    9950:	b3 e0       	ldi	r27, 0x03	; 3
    9952:	0f d0       	rcall	.+30     	; 0x9972 <__ultoa_invert+0x86>
    9954:	c9 f7       	brne	.-14     	; 0x9948 <__ultoa_invert+0x5c>
    9956:	f6 cf       	rjmp	.-20     	; 0x9944 <__ultoa_invert+0x58>
    9958:	46 2f       	mov	r20, r22
    995a:	4f 70       	andi	r20, 0x0F	; 15
    995c:	40 5d       	subi	r20, 0xD0	; 208
    995e:	4a 33       	cpi	r20, 0x3A	; 58
    9960:	18 f0       	brcs	.+6      	; 0x9968 <__ultoa_invert+0x7c>
    9962:	49 5d       	subi	r20, 0xD9	; 217
    9964:	31 fd       	sbrc	r19, 1
    9966:	40 52       	subi	r20, 0x20	; 32
    9968:	41 93       	st	Z+, r20
    996a:	02 d0       	rcall	.+4      	; 0x9970 <__ultoa_invert+0x84>
    996c:	a9 f7       	brne	.-22     	; 0x9958 <__ultoa_invert+0x6c>
    996e:	ea cf       	rjmp	.-44     	; 0x9944 <__ultoa_invert+0x58>
    9970:	b4 e0       	ldi	r27, 0x04	; 4
    9972:	a6 95       	lsr	r26
    9974:	97 95       	ror	r25
    9976:	87 95       	ror	r24
    9978:	77 95       	ror	r23
    997a:	67 95       	ror	r22
    997c:	ba 95       	dec	r27
    997e:	c9 f7       	brne	.-14     	; 0x9972 <__ultoa_invert+0x86>
    9980:	00 97       	sbiw	r24, 0x00	; 0
    9982:	61 05       	cpc	r22, r1
    9984:	71 05       	cpc	r23, r1
    9986:	08 95       	ret
    9988:	9b 01       	movw	r18, r22
    998a:	ac 01       	movw	r20, r24
    998c:	0a 2e       	mov	r0, r26
    998e:	06 94       	lsr	r0
    9990:	57 95       	ror	r21
    9992:	47 95       	ror	r20
    9994:	37 95       	ror	r19
    9996:	27 95       	ror	r18
    9998:	ba 95       	dec	r27
    999a:	c9 f7       	brne	.-14     	; 0x998e <__ultoa_invert+0xa2>
    999c:	62 0f       	add	r22, r18
    999e:	73 1f       	adc	r23, r19
    99a0:	84 1f       	adc	r24, r20
    99a2:	95 1f       	adc	r25, r21
    99a4:	a0 1d       	adc	r26, r0
    99a6:	08 95       	ret

000099a8 <__do_global_dtors>:
    99a8:	19 e1       	ldi	r17, 0x19	; 25
    99aa:	ca ee       	ldi	r28, 0xEA	; 234
    99ac:	d9 e1       	ldi	r29, 0x19	; 25
    99ae:	00 e0       	ldi	r16, 0x00	; 0
    99b0:	06 c0       	rjmp	.+12     	; 0x99be <__do_global_dtors+0x16>
    99b2:	22 97       	sbiw	r28, 0x02	; 2
    99b4:	01 09       	sbc	r16, r1
    99b6:	fe 01       	movw	r30, r28
    99b8:	0b bf       	out	0x3b, r16	; 59
    99ba:	0e 94 b2 48 	call	0x9164	; 0x9164 <__tablejump_elpm__>
    99be:	cc 3e       	cpi	r28, 0xEC	; 236
    99c0:	d1 07       	cpc	r29, r17
    99c2:	80 e0       	ldi	r24, 0x00	; 0
    99c4:	08 07       	cpc	r16, r24
    99c6:	a9 f7       	brne	.-22     	; 0x99b2 <__do_global_dtors+0xa>
    99c8:	f8 94       	cli

000099ca <__stop_program>:
    99ca:	ff cf       	rjmp	.-2      	; 0x99ca <__stop_program>
