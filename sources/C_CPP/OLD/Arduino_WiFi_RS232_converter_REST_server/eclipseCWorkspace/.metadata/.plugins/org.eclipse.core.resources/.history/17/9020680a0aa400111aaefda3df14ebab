/*
 * RWSubTaskReadSENDACKCommand.cpp
 *
 *  Created on: 22-05-2012
 *      Author: root
 */

// =================================================

#include "RWSubTaskReadSENDACKCommand.h"

// =================================================

RWSubTaskReadSENDACKCommand::RWSubTaskReadSENDACKCommand( AnyBuffer< byte , byte >* _outputBuffer , StreamHFA11xRS232WiFiCRC* _crcStream , RWCommandSerialNumber* _rwCommandSerialNumber , RWSubTask* _subTaskOnSuccess , RWSubTask* _subTaskOnFail ) : dp( PSTR( "RWSubTaskReadSENDACKCommand" ) , DEBUG_LEVEL_ALL )
{
	outputBuffer = _outputBuffer;
	crcStream = _crcStream;
	rwCommandSerialNumber = _rwCommandSerialNumber;
	subTaskOnSuccess = _subTaskOnSuccess;
	subTaskOnFail = _subTaskOnFail;
}

// =================================================

char* RWSubTaskReadSENDACKCommand::getSubTaskName()
{
	return "ReadSENDACKCommand";
}

// =================================================

void RWSubTaskReadSENDACKCommand::resetInternalState()
{

}

// =================================================

unsigned long RWSubTaskReadSENDACKCommand::getStateTimeout()
{
	return 2*1000;
}

// =================================================

RWSubTask* RWSubTaskReadSENDACKCommand::getStateAfterTimeout()
{
	return subTaskOnFail;
}

// =================================================

void RWSubTaskReadSENDACKCommand::setWork( byte _bytesSendInSENDcommand )
{
	bytesSendInSENDcommand = _bytesSendInSENDcommand;
}

// =================================================

RWSubTask* RWSubTaskReadSENDACKCommand::executeSubTask()
{
	static const PROGMEM prog_char functionName[] = "executeSubTask";

	// command
	if( crcStream->read() != 2 ) return subTaskOnFail;

	// sn
	if( crcStream->read() != rwCommandSerialNumber->commandSerialNumber ) return subTaskOnFail;

	// ---

	// reserved two bytes byte
	if( crcStream->read() != 0 ) return subTaskOnFail;
	if( crcStream->read() != 0 ) return subTaskOnFail;

	// ---

	byte ackInfo = crcStream->read();

	// ---

	if( !compareCRCsumWithCRCsumCalculatedOnTwoIncommingBytes( crcStream->getIncommingDataCRC() ) )
	{
		wln( "incomming CRC (in SEND_ACK) and our locally counted CRC does not match! setting write_error to" )

		delay( 3000 ); // todo temporary

		//inputBuffer->setPositionAndLimit( positionBefore , limitBefore );

		//read_error = -5;
		//return;

		return subTaskOnFail;
	}
	else
	if( ackInfo != 0 )
	{
		return subTaskOnFail;
	}
	else
	{
		// jesli ackInfo wykazuje, ze wszystko jest OK!!

		rwCommandSerialNumber->commandSerialNumber++;

		byte positionDiff = outputBuffer->position - bytesSendInSENDcommand;

		if( positionDiff > 0 ) // ktos dodal do bufora jakies dane po tym jak wyslalismy poprzednie
		{
			memcpy( outputBuffer->array[ 0 ] , outputBuffer->array[ bytesSendInSENDcommand ] , positionDiff );

			outputBuffer->setPositionAndLimit( positionDiff , outputBuffer->capacity );
		}
		else
		{
			outputBuffer->setPositionAndLimit( 0 , outputBuffer->capacity );
		}

		return subTaskOnSuccess;
	}

	// ---

	/*
	unsigned int size;

	size = crcStream->read(); // low byte of incomming data length
	size += 256 * crcStream->read(); // high byte of incomming data length

	if( size > inputBuffer->getUnusedSpace() ) return subTaskOnFail;

	// ---

	rwSubTaskReadRECVACKCommandData->setWork( size );

	rwSubTaskWaitForData->setWork( size+2 , rwSubTaskReadRECVACKCommandData , 2*1000 , subTaskOnFail );

	// ---

	return rwSubTaskWaitForData;*/
}


// =================================================

bool RWSubTaskReadSENDACKCommand::compareCRCsumWithCRCsumCalculatedOnTwoIncommingBytes( unsigned int crcCountedByUnderlyingCRCStream )
{
	static const PROGMEM prog_char functionName[] = "compareCRCsumWithCRCsumCalculatedOnTwoIncommingBytes";

	//while( crcStream->available() < 2 ); // waiting for 2B of crc

	unsigned int crcCountedUsingTwoLastBytes = 0;

	crcCountedUsingTwoLastBytes = (unsigned char)crcStream->read(); // first byte of crc (low byte of u16)

	crcCountedUsingTwoLastBytes += 256 * (unsigned char)crcStream->read(); // second byte of crc (high byte of u16)

	aln( "crcCountedUsingTwoLastBytes = %u , crcCountedByUnderlyingCRCStream = %u" , crcCountedUsingTwoLastBytes , crcCountedByUnderlyingCRCStream )

	return crcCountedUsingTwoLastBytes == crcCountedByUnderlyingCRCStream;
}

// =================================================


