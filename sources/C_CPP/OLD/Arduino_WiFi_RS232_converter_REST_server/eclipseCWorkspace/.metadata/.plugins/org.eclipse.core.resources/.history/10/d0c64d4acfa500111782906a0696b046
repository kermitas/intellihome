/*
 * StreamHttpChunkedTransferEncoding.cpp
 *
 *  Created on: 08-05-2012
 *      Author: root
 */

// =================================================

#include "StreamHttpChunkedTransferEncoding.h"

// =================================================

StreamHttpChunkedTransferEncoding::StreamHttpChunkedTransferEncoding( uint8_t* _buffer , unsigned char _bufferSize , Stream* _underlyingStream )
{
	buffer = _buffer;
	bufferSize = _bufferSize;

	setStream( _underlyingStream );
	resetInternalState();
}

// =================================================

void StreamHttpChunkedTransferEncoding::setStream( Stream* _underlyingStream )
{
	underlyingStream = _underlyingStream;
}

// =================================================

void StreamHttpChunkedTransferEncoding::resetInternalState()
{
	index = 0;
}

// =================================================

size_t StreamHttpChunkedTransferEncoding::write( uint8_t b )
{
	buffer[ index ] = b;

	index++;

	if( index == bufferSize ) flush();

	return 1;
}

// =================================================

size_t StreamHttpChunkedTransferEncoding::write( const uint8_t* buff , size_t size )
{
	size_t bytesToSendCount = size;

	while( bytesToSendCount > 0 )
	{
		size_t countToWrite = min( bytesToSendCount , bufferSize - index );

		memcpy( buffer , buff , countToWrite );
		index += countToWrite;

		if( index == bufferSize ) flush();

		bytesToSendCount -= countToWrite;
	}

	return size;
}

// =================================================

void StreamHttpChunkedTransferEncoding::flush()
{
	if( index > 0 )
	{
		if( index < 16 ) underlyingStream->write( "0" );

		underlyingStream->print( index , HEX );
		underlyingStream->write( "\r\n" );
		underlyingStream->write( buffer , index );
		underlyingStream->write( "\r\n" );

		underlyingStream->flush();

		index = 0;
	}
}

// =================================================

void StreamHttpChunkedTransferEncoding::finishChunkedTransmission()
{
	flush();

	underlyingStream->write( "0\r\n\r\n" );
	underlyingStream->flush();
}

// =================================================

int StreamHttpChunkedTransferEncoding::available()
{
	return underlyingStream->available();
}

// =================================================

int StreamHttpChunkedTransferEncoding::read()
{
	return underlyingStream->read();
}

// =================================================

int StreamHttpChunkedTransferEncoding::peek()
{
	return underlyingStream->peek();
}

// =================================================


