/*
 * A.h
 *
 *  Created on: 10-01-2012
 *      Author: root
 */

#ifndef A_H_
#define A_H_

// Download these into your Sketches/libraries/ folder...

// CmdMessenger library available from https://github.com/dreamcat4/cmdmessenger
#include </home/as/ARDUINO/arduino-1.0-IDE/libraries/CmdMessenger/CmdMessenger.h>

// Base64 library available from https://github.com/adamvr/arduino-base64
#include </home/as/ARDUINO/arduino-1.0-IDE/libraries/base64/Base64.h>

// Streaming4 library available from http://arduiniana.org/libraries/streaming/
#include </home/as/ARDUINO/arduino-1.0-IDE/libraries/Streaming4/Streaming.h>


class A {
public:
	A();

	void loop();
	void setup();

	void bens_msg();
	void jerrys_base64_data();

	virtual ~A();

	// Attach a new CmdMessenger object to the default Serial port
	CmdMessenger* cmdMessenger;// = CmdMessenger(Serial, field_separator, command_separator);

	// ------------------ S E R I A L  M O N I T O R -----------------------------
	//
	// Try typing these command messages in the serial monitor!
	//
	// 4,hi,heh,ho!;
	// 5;
	// 5,dGhlIGJlYXJzIGFyZSBhbGxyaWdodA==;
	// 5,dGhvc2UgbmFzdHkgY29udHJvbCA7OyBjaGFyYWN0ZXJzICws==;
	// 2;
	// 6;
	//
	//
	// Expected output:
	//
	// 1,Arduino ready;
	// 1,bens cmd recieved;
	// 1,hi;
	// 1,heh;
	// 1,ho!;
	// 1,jerrys cmd recieved;
	// 1,"the bears are allright" encoded in base64...;
	// 1,dGhlIGJlYXJzIGFyZSBhbGxyaWdodA==;
	// 1,jerrys cmd recieved;
	// 1,what you send me, decoded base64...;
	// 1,the bears are allright;
	// 1,jerrys cmd recieved;
	// 1,what you send me, decoded base64...;
	// 1,those nasty control ;; characters ,,;
	// 1,Arduino ready;
	// 3,Unknown command;
	//


	// ------------------ C M D  L I S T I N G ( T X / R X ) ---------------------

	// We can define up to a default of 50 cmds total, including both directions (send + recieve)
	// and including also the first 4 default command codes for the generic error handling.
	// If you run out of message slots, then just increase the value of MAXCALLBACKS in CmdMessenger.h

	// Commands we send from the Arduino to be received on the PC
	enum
	{
	  kCOMM_ERROR    = 000, // Lets Arduino report serial port comm error back to the PC (only works for some comm errors)
	  kACK           = 001, // Arduino acknowledges cmd was received
	  kARDUINO_READY = 002, // After opening the comm port, send this cmd 02 from PC to check arduino is ready
	  kERR           = 003, // Arduino reports badly formatted cmd, or cmd not recognised

	  // Now we can define many more 'send' commands, coming from the arduino -> the PC, eg
	  // kICE_CREAM_READY,
	  // kICE_CREAM_PRICE,
	  // For the above commands, we just call cmdMessenger.sendCmd() anywhere we want in our Arduino program.

	  kSEND_CMDS_END, // Mustnt delete this line
	};

	// Commands we send from the PC and want to recieve on the Arduino.
	// We must define a callback function in our Arduino program for each entry in the list below vv.
	// They start at the address kSEND_CMDS_END defined ^^ above as 004

	messengerCallbackFunction messengerCallbacks[];
	/*
	messengerCallbackFunction messengerCallbacks[] =
	{
	  bens_msg,            // 004 in this example
	  jerrys_base64_data,  // 005
	  NULL
	};
	*/
	// Its also possible (above ^^) to implement some symetric commands, when both the Arduino and
	// PC / host are using each other's same command numbers. However we recommend only to do this if you
	// really have the exact same messages going in both directions. Then specify the integers (with '=')


};

#endif /* A_H_ */
