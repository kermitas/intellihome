/*
 * A.cpp
 *
 *  Created on: 10-01-2012
 *      Author: root
 */

#include "A.h"

A::A() {


	// Mustnt conflict / collide with our message payload data. Fine if we use base64 library ^^ above
	char field_separator = ',';
	char command_separator = ';';

	timeoutInterval = 2000; // 2 seconds
	previousMillis=0;
	counter=0;

	cmdMessenger = new CmdMessenger(&Serial, field_separator, command_separator);

	/*
	messengerCallbacks =
	{
	  A::bens_msg,            // 004 in this example
	  A::jerrys_base64_data,  // 005
	  NULL
	};*/

	//messengerCallbacks[0] = bens_msg;
	//messengerCallbacks[1] = &A::jerrys_base64_data;
	//messengerCallbacks[2] = NULL;
}





// ------------------ C A L L B A C K  M E T H O D S -------------------------

void A::bens_msg()
{
  // Message data is any ASCII bytes (0-255 value). But can't contain the field
  // separator, command separator chars you decide (eg ',' and ';')
  cmdMessenger->sendCmd(kACK,"bens cmd recieved");
  while ( cmdMessenger->available() )
  {
    char buf[350] = { '\0' };
    cmdMessenger->copyString(buf, 350);
    if(buf[0])
      cmdMessenger->sendCmd(kACK, buf);
  }
}

void A::jerrys_base64_data()
{
  // To avoid conflicts with the control characters and any newline characters
  // Message length increases about 30%-40%

  // Afer base64_decode(), we just parse the buffer and unpack it into your
  // target / desination data type eg bitmask, float, double, whatever.
  char buf[350] = { '\0' };
  boolean data_msg_printed = false;
  cmdMessenger->sendCmd(kACK,"jerrys cmd recieved");

  // base64 decode
  while ( cmdMessenger->available() )
  {
    if(!data_msg_printed)
    {
      cmdMessenger->sendCmd(kACK, "what you send me, decoded base64...");
      data_msg_printed = true;
    }
    char buf[350] = { '\0' };
    cmdMessenger->copyString(buf, 350);
    if(buf[0])
    {
      char decode_buf[350] = { '\0' };
      base64_decode(decode_buf, buf, 350);
      cmdMessenger->sendCmd(kACK, decode_buf);
    }
  }

  // base64 encode
  if(!data_msg_printed)
  {
    cmdMessenger->sendCmd(kACK, "\"the bears are allright\" encoded in base64...");
    char base64_msg[350] = { '\0' };
    base64_encode(base64_msg, "the bears are allright", 22);
    cmdMessenger->sendCmd(kACK, base64_msg);
  }
}

// ------------------ D E F A U L T  C A L L B A C K S -----------------------

void A::arduino_ready()
{
  // In response to ping. We just send a throw-away Acknowledgement to say "im alive"
  cmdMessenger->sendCmd(kACK,"Arduino ready");
}

void A::unknownCmd()
{
  // Default response for unknown commands and corrupt messages
  cmdMessenger->sendCmd(kERR,"Unknown command");
}

// ------------------ E N D  C A L L B A C K  M E T H O D S ------------------



// ------------------ S E T U P ----------------------------------------------
/*
void A::attach_callbacks(messengerCallbackFunction* callbacks)
{
  int i = 0;
  int offset = kSEND_CMDS_END;

  while(callbacks[i])
  {
    cmdMessenger.attach(offset+i, callbacks[i]);
    i++;
  }

  cmdMessenger.attach(offset+i, callbacks[i]);
}*/

void abc()
{

}

void A::setup()
{
  // Listen on serial connection for messages from the pc
  // Serial.begin(57600);  // Arduino Duemilanove, FTDI Serial
  Serial.begin(115200); // Arduino Uno, Mega, with AT8u2 USB

  // cmdMessenger.discard_LF_CR(); // Useful if your terminal appends CR/LF, and you wish to remove them
  cmdMessenger->print_LF_CR();   // Make output more readable whilst debugging in Arduino Serial Monitor

  // Attach default / generic callback methods
  cmdMessenger->attach(kARDUINO_READY, abc);
  //cmdMessenger->attach(this::unknownCmd);

  // Attach my application's user-defined callback methods
  //attach_callbacks(messengerCallbacks);

  /*
  int offset = kSEND_CMDS_END;
  cmdMessenger->attach(offset+0, &bens_msg );
  cmdMessenger->attach(offset+1, &A::jerrys_base64_data );
  cmdMessenger->attach(offset+2, NULL );
   */

  arduino_ready();

  // blink
  pinMode(13, OUTPUT);
}


// ------------------ M A I N ( ) --------------------------------------------


/*
void A::timeout()
{
  // blink
  if (counter % 2)
    digitalWrite(13, HIGH);
  else
    digitalWrite(13, LOW);
  counter ++;
}*/

void A::loop()
{
  // Process incoming serial data, if any
  cmdMessenger->feedinSerialData();

  /*
  // handle timeout function, if any
  if (  millis() - previousMillis > timeoutInterval )
  {
    timeout();
    previousMillis = millis();
  }*/

  // Loop.
}

A::~A() {
	// TODO Auto-generated destructor stub
}

