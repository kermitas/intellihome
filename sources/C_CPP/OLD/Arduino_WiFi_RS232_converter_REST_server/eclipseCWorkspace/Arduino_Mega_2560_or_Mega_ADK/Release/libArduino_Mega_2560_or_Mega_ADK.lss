In archive libArduino_Mega_2560_or_Mega_ADK.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000594  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002cae  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000594  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002cae  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000174c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003db9  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN14HardwareSerial9availableEv 00000024  00000000  00000000  00005539  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN14HardwareSerial4peekEv 00000036  00000000  00000000  0000555d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN14HardwareSerial4readEv 00000044  00000000  00000000  00005593  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14HardwareSerial5flushEv 00000026  00000000  00000000  000055d7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14HardwareSerial5writeEh 00000088  00000000  00000000  000055fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z10store_charhP11ring_buffer 00000038  00000000  00000000  00005685  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Z11serialEventv 00000002  00000000  00000000  000056bd  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text.__vector_25 00000058  00000000  00000000  000056bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._Z12serialEvent1v 00000002  00000000  00000000  00005717  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_36 00000058  00000000  00000000  00005719  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._Z12serialEvent2v 00000002  00000000  00000000  00005771  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__vector_51 00000058  00000000  00000000  00005773  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._Z12serialEvent3v 00000002  00000000  00000000  000057cb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__vector_54 00000058  00000000  00000000  000057cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._Z14serialEventRunv 00000042  00000000  00000000  00005825  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.__vector_26 00000096  00000000  00000000  00005867  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.__vector_37 00000096  00000000  00000000  000058fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text.__vector_52 00000096  00000000  00000000  00005993  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text.__vector_55 00000096  00000000  00000000  00005a29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh 0000007e  00000000  00000000  00005abf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN14HardwareSerial5beginEm 00000108  00000000  00000000  00005b3d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN14HardwareSerial3endEv 000000ac  00000000  00000000  00005c45  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text.startup._GLOBAL__sub_I_rx_buffer 000001b4  00000000  00000000  00005cf1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .ctors        00000002  00000000  00000000  00005ea5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 29 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  00005ea7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 30 .bss.Serial3  0000001f  00000000  00000000  00005eb7  2**0
                  ALLOC
 31 .bss.Serial2  0000001f  00000000  00000000  00005eb7  2**0
                  ALLOC
 32 .bss.Serial1  0000001f  00000000  00000000  00005eb7  2**0
                  ALLOC
 33 .bss.Serial   0000001f  00000000  00000000  00005eb7  2**0
                  ALLOC
 34 .bss.tx_buffer3 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 35 .bss.rx_buffer3 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 36 .bss.tx_buffer2 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 37 .bss.rx_buffer2 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 38 .bss.tx_buffer1 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 39 .bss.rx_buffer1 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 40 .bss.tx_buffer 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 41 .bss.rx_buffer 00000084  00000000  00000000  00005eb7  2**0
                  ALLOC
 42 .rodata._ZTV6Stream 00000010  00000000  00000000  00005eb7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fc 01       	movw	r30, r24
   2:	24 85       	ldd	r18, Z+12	; 0x0c
   4:	35 85       	ldd	r19, Z+13	; 0x0d
   6:	f9 01       	movw	r30, r18
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
   8:	e0 58       	subi	r30, 0x80	; 128
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  10:	2e 57       	subi	r18, 0x7E	; 126
  12:	3f 4f       	sbci	r19, 0xFF	; 255
  14:	f9 01       	movw	r30, r18
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	82 1b       	sub	r24, r18
  1c:	93 0b       	sbc	r25, r19
  1e:	8f 77       	andi	r24, 0x7F	; 127
  20:	90 70       	andi	r25, 0x00	; 0
  22:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:
   0:	fc 01       	movw	r30, r24
   2:	44 85       	ldd	r20, Z+12	; 0x0c
   4:	55 85       	ldd	r21, Z+13	; 0x0d
   6:	fa 01       	movw	r30, r20
   8:	e0 58       	subi	r30, 0x80	; 128
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	fa 01       	movw	r30, r20
  12:	ee 57       	subi	r30, 0x7E	; 126
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	20 81       	ld	r18, Z
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	82 17       	cp	r24, r18
  1c:	93 07       	cpc	r25, r19
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4peekEv+0x20>
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	e4 0f       	add	r30, r20
  28:	f5 1f       	adc	r31, r21
  2a:	80 81       	ld	r24, Z

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	08 95       	ret
  30:	8f ef       	ldi	r24, 0xFF	; 255
  32:	9f ef       	ldi	r25, 0xFF	; 255
  34:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	fc 01       	movw	r30, r24
   2:	44 85       	ldd	r20, Z+12	; 0x0c
   4:	55 85       	ldd	r21, Z+13	; 0x0d
   6:	fa 01       	movw	r30, r20
   8:	e0 58       	subi	r30, 0x80	; 128
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	20 81       	ld	r18, Z
   e:	31 81       	ldd	r19, Z+1	; 0x01
  10:	fa 01       	movw	r30, r20
  12:	ee 57       	subi	r30, 0x7E	; 126
  14:	ff 4f       	sbci	r31, 0xFF	; 255
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	28 17       	cp	r18, r24
  1c:	39 07       	cpc	r19, r25
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN14HardwareSerial4readEv+0x20>
  20:	a0 81       	ld	r26, Z
  22:	b1 81       	ldd	r27, Z+1	; 0x01
  24:	a4 0f       	add	r26, r20
  26:	b5 1f       	adc	r27, r21
  28:	8c 91       	ld	r24, X
  2a:	20 81       	ld	r18, Z

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	31 81       	ldd	r19, Z+1	; 0x01
  2e:	2f 5f       	subi	r18, 0xFF	; 255
  30:	3f 4f       	sbci	r19, 0xFF	; 255
  32:	2f 77       	andi	r18, 0x7F	; 127
  34:	30 70       	andi	r19, 0x00	; 0
  36:	31 83       	std	Z+1, r19	; 0x01
{
  _rx_buffer = rx_buffer;
  38:	20 83       	st	Z, r18
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	08 95       	ret
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  _tx_buffer = tx_buffer;
  40:	9f ef       	ldi	r25, 0xFF	; 255
  42:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	dc 01       	movw	r26, r24
   2:	1e 96       	adiw	r26, 0x0e	; 14
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1f 97       	sbiw	r26, 0x0f	; 15
   a:	df 01       	movw	r26, r30
   c:	a0 58       	subi	r26, 0x80	; 128
   e:	bf 4f       	sbci	r27, 0xFF	; 255
  10:	ee 57       	subi	r30, 0x7E	; 126
  12:	ff 4f       	sbci	r31, 0xFF	; 255
  14:	2d 91       	ld	r18, X+
  16:	3c 91       	ld	r19, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	28 17       	cp	r18, r24
  20:	39 07       	cpc	r19, r25
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN14HardwareSerial5flushEv+0x24>
  24:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	26 2f       	mov	r18, r22
  10:	0e 85       	ldd	r16, Y+14	; 0x0e
  12:	1f 85       	ldd	r17, Y+15	; 0x0f
  14:	30 e8       	ldi	r19, 0x80	; 128
  16:	e3 2e       	mov	r14, r19
  18:	f1 2c       	mov	r15, r1
  1a:	e0 0e       	add	r14, r16
  1c:	f1 1e       	adc	r15, r17
  1e:	d7 01       	movw	r26, r14
  20:	8d 91       	ld	r24, X+
  22:	9c 91       	ld	r25, X
  24:	11 97       	sbiw	r26, 0x01	; 1
  26:	01 96       	adiw	r24, 0x01	; 1
  28:	60 e8       	ldi	r22, 0x80	; 128
  2a:	70 e0       	ldi	r23, 0x00	; 0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5writeEh>
  30:	ac 01       	movw	r20, r24
  32:	f8 01       	movw	r30, r16
  34:	ee 57       	subi	r30, 0x7E	; 126
  36:	ff 4f       	sbci	r31, 0xFF	; 255
{
  _rx_buffer = rx_buffer;
  38:	80 81       	ld	r24, Z
  3a:	91 81       	ldd	r25, Z+1	; 0x01
  3c:	48 17       	cp	r20, r24
  3e:	59 07       	cpc	r21, r25
  _tx_buffer = tx_buffer;
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN14HardwareSerial5writeEh+0x42>
  42:	d7 01       	movw	r26, r14
  44:	ed 91       	ld	r30, X+
  46:	fc 91       	ld	r31, X
  _ubrrh = ubrrh;
  48:	11 97       	sbiw	r26, 0x01	; 1
  4a:	e0 0f       	add	r30, r16
  4c:	f1 1f       	adc	r31, r17
  4e:	20 83       	st	Z, r18
  _ubrrl = ubrrl;
  50:	ee 85       	ldd	r30, Y+14	; 0x0e
  52:	ff 85       	ldd	r31, Y+15	; 0x0f
  54:	e0 58       	subi	r30, 0x80	; 128
  56:	ff 4f       	sbci	r31, 0xFF	; 255
  _ucsra = ucsra;
  58:	51 83       	std	Z+1, r21	; 0x01
  5a:	40 83       	st	Z, r20
  5c:	ee 89       	ldd	r30, Y+22	; 0x16
  5e:	ff 89       	ldd	r31, Y+23	; 0x17
  _ucsrb = ucsrb;
  60:	20 81       	ld	r18, Z
  62:	81 e0       	ldi	r24, 0x01	; 1
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	0d 8c       	ldd	r0, Y+29	; 0x1d
  _udr = udr;
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN14HardwareSerial5writeEh+0x6a>
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	0a 94       	dec	r0
  _rxen = rxen;
  70:	02 f4       	brpl	.+0      	; 0x72 <_ZN14HardwareSerial5writeEh+0x72>
  72:	28 2b       	or	r18, r24
  _txen = txen;
  74:	20 83       	st	Z, r18
  76:	81 e0       	ldi	r24, 0x01	; 1
  _rxcie = rxcie;
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	df 91       	pop	r29
  _udrie = udrie;
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  _u2x = u2x;
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	08 95       	ret

Disassembly of section .text._Z10store_charhP11ring_buffer:

00000000 <_Z10store_charhP11ring_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	db 01       	movw	r26, r22
   2:	a0 58       	subi	r26, 0x80	; 128
   4:	bf 4f       	sbci	r27, 0xFF	; 255
   6:	2d 91       	ld	r18, X+
   8:	3c 91       	ld	r19, X
   a:	11 97       	sbiw	r26, 0x01	; 1
   c:	2f 5f       	subi	r18, 0xFF	; 255
   e:	3f 4f       	sbci	r19, 0xFF	; 255
  10:	2f 77       	andi	r18, 0x7F	; 127
  12:	30 70       	andi	r19, 0x00	; 0
  14:	fb 01       	movw	r30, r22
  16:	ee 57       	subi	r30, 0x7E	; 126
  18:	ff 4f       	sbci	r31, 0xFF	; 255
  1a:	40 81       	ld	r20, Z
  1c:	51 81       	ldd	r21, Z+1	; 0x01
  1e:	24 17       	cp	r18, r20
  20:	35 07       	cpc	r19, r21
  22:	01 f0       	breq	.+0      	; 0x24 <_Z10store_charhP11ring_buffer+0x24>
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	11 97       	sbiw	r26, 0x01	; 1
  2a:	e6 0f       	add	r30, r22

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	f7 1f       	adc	r31, r23
  2e:	80 83       	st	Z, r24
  30:	11 96       	adiw	r26, 0x01	; 1
  32:	3c 93       	st	X, r19
  34:	2e 93       	st	-X, r18
  36:	08 95       	ret

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_25:

00000000 <__vector_25>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 c6 00 	lds	r24, 0x00C6
  2a:	60 e0       	ldi	r22, 0x00	; 0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <__vector_25>
  32:	ff 91       	pop	r31
  34:	ef 91       	pop	r30
  36:	bf 91       	pop	r27
{
  _rx_buffer = rx_buffer;
  38:	af 91       	pop	r26
  3a:	9f 91       	pop	r25
  3c:	8f 91       	pop	r24
  3e:	7f 91       	pop	r23
  _tx_buffer = tx_buffer;
  40:	6f 91       	pop	r22
  42:	5f 91       	pop	r21
  44:	4f 91       	pop	r20
  46:	3f 91       	pop	r19
  _ubrrh = ubrrh;
  48:	2f 91       	pop	r18
  4a:	0f 90       	pop	r0
  4c:	0b be       	out	0x3b, r0	; 59
  4e:	0f 90       	pop	r0
  _ubrrl = ubrrl;
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

Disassembly of section .text._Z12serialEvent1v:

00000000 <_Z12serialEvent1v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_36:

00000000 <__vector_36>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 ce 00 	lds	r24, 0x00CE
  2a:	60 e0       	ldi	r22, 0x00	; 0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <__vector_36>
  32:	ff 91       	pop	r31
  34:	ef 91       	pop	r30
  36:	bf 91       	pop	r27
{
  _rx_buffer = rx_buffer;
  38:	af 91       	pop	r26
  3a:	9f 91       	pop	r25
  3c:	8f 91       	pop	r24
  3e:	7f 91       	pop	r23
  _tx_buffer = tx_buffer;
  40:	6f 91       	pop	r22
  42:	5f 91       	pop	r21
  44:	4f 91       	pop	r20
  46:	3f 91       	pop	r19
  _ubrrh = ubrrh;
  48:	2f 91       	pop	r18
  4a:	0f 90       	pop	r0
  4c:	0b be       	out	0x3b, r0	; 59
  4e:	0f 90       	pop	r0
  _ubrrl = ubrrl;
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

Disassembly of section .text._Z12serialEvent2v:

00000000 <_Z12serialEvent2v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_51:

00000000 <__vector_51>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 d6 00 	lds	r24, 0x00D6
  2a:	60 e0       	ldi	r22, 0x00	; 0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <__vector_51>
  32:	ff 91       	pop	r31
  34:	ef 91       	pop	r30
  36:	bf 91       	pop	r27
{
  _rx_buffer = rx_buffer;
  38:	af 91       	pop	r26
  3a:	9f 91       	pop	r25
  3c:	8f 91       	pop	r24
  3e:	7f 91       	pop	r23
  _tx_buffer = tx_buffer;
  40:	6f 91       	pop	r22
  42:	5f 91       	pop	r21
  44:	4f 91       	pop	r20
  46:	3f 91       	pop	r19
  _ubrrh = ubrrh;
  48:	2f 91       	pop	r18
  4a:	0f 90       	pop	r0
  4c:	0b be       	out	0x3b, r0	; 59
  4e:	0f 90       	pop	r0
  _ubrrl = ubrrl;
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

Disassembly of section .text._Z12serialEvent3v:

00000000 <_Z12serialEvent3v>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	08 95       	ret

Disassembly of section .text.__vector_54:

00000000 <__vector_54>:
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  26:	80 91 36 01 	lds	r24, 0x0136
  2a:	60 e0       	ldi	r22, 0x00	; 0

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <__vector_54>
  32:	ff 91       	pop	r31
  34:	ef 91       	pop	r30
  36:	bf 91       	pop	r27
{
  _rx_buffer = rx_buffer;
  38:	af 91       	pop	r26
  3a:	9f 91       	pop	r25
  3c:	8f 91       	pop	r24
  3e:	7f 91       	pop	r23
  _tx_buffer = tx_buffer;
  40:	6f 91       	pop	r22
  42:	5f 91       	pop	r21
  44:	4f 91       	pop	r20
  46:	3f 91       	pop	r19
  _ubrrh = ubrrh;
  48:	2f 91       	pop	r18
  4a:	0f 90       	pop	r0
  4c:	0b be       	out	0x3b, r0	; 59
  4e:	0f 90       	pop	r0
  _ubrrl = ubrrl;
  50:	0f be       	out	0x3f, r0	; 63
  52:	0f 90       	pop	r0
  54:	1f 90       	pop	r1
  56:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
   8:	00 97       	sbiw	r24, 0x00	; 0
   a:	01 f0       	breq	.+0      	; 0xc <_Z14serialEventRunv+0xc>
   c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_Z14serialEventRunv+0x1c>
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_Z14serialEventRunv+0x2c>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
{
  _rx_buffer = rx_buffer;
  38:	00 97       	sbiw	r24, 0x00	; 0
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z14serialEventRunv+0x3c>
  3c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  _tx_buffer = tx_buffer;
  40:	08 95       	ret

Disassembly of section .text.__vector_26:

00000000 <__vector_26>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	5f 93       	push	r21
  14:	6f 93       	push	r22
  16:	7f 93       	push	r23
  18:	8f 93       	push	r24
  1a:	9f 93       	push	r25
  1c:	af 93       	push	r26
  1e:	bf 93       	push	r27
  20:	ef 93       	push	r30
  22:	ff 93       	push	r31
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	28 17       	cp	r18, r24
  36:	39 07       	cpc	r19, r25
{
  _rx_buffer = rx_buffer;
  38:	01 f4       	brne	.+0      	; 0x3a <__vector_26+0x3a>
  3a:	80 91 c1 00 	lds	r24, 0x00C1
  3e:	8f 7d       	andi	r24, 0xDF	; 223
  _tx_buffer = tx_buffer;
  40:	80 93 c1 00 	sts	0x00C1, r24
  44:	00 c0       	rjmp	.+0      	; 0x46 <__vector_26+0x46>
  46:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  4a:	f0 91 00 00 	lds	r31, 0x0000
  4e:	e0 50       	subi	r30, 0x00	; 0
  _ubrrl = ubrrl;
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	20 81       	ld	r18, Z
  54:	80 91 00 00 	lds	r24, 0x0000
  _ucsra = ucsra;
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	60 e8       	ldi	r22, 0x80	; 128
  _ucsrb = ucsrb;
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <__vector_26>
  66:	90 93 00 00 	sts	0x0000, r25
  _udr = udr;
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	20 93 c6 00 	sts	0x00C6, r18
  _rxen = rxen;
  72:	ff 91       	pop	r31
  _txen = txen;
  74:	ef 91       	pop	r30
  76:	bf 91       	pop	r27
  _rxcie = rxcie;
  78:	af 91       	pop	r26
  7a:	9f 91       	pop	r25
  _udrie = udrie;
  7c:	8f 91       	pop	r24
  7e:	7f 91       	pop	r23
  _u2x = u2x;
  80:	6f 91       	pop	r22
  82:	5f 91       	pop	r21
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0b be       	out	0x3b, r0	; 59
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text.__vector_37:

00000000 <__vector_37>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	5f 93       	push	r21
  14:	6f 93       	push	r22
  16:	7f 93       	push	r23
  18:	8f 93       	push	r24
  1a:	9f 93       	push	r25
  1c:	af 93       	push	r26
  1e:	bf 93       	push	r27
  20:	ef 93       	push	r30
  22:	ff 93       	push	r31
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	28 17       	cp	r18, r24
  36:	39 07       	cpc	r19, r25
{
  _rx_buffer = rx_buffer;
  38:	01 f4       	brne	.+0      	; 0x3a <__vector_37+0x3a>
  3a:	80 91 c9 00 	lds	r24, 0x00C9
  3e:	8f 7d       	andi	r24, 0xDF	; 223
  _tx_buffer = tx_buffer;
  40:	80 93 c9 00 	sts	0x00C9, r24
  44:	00 c0       	rjmp	.+0      	; 0x46 <__vector_37+0x46>
  46:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  4a:	f0 91 00 00 	lds	r31, 0x0000
  4e:	e0 50       	subi	r30, 0x00	; 0
  _ubrrl = ubrrl;
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	20 81       	ld	r18, Z
  54:	80 91 00 00 	lds	r24, 0x0000
  _ucsra = ucsra;
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	60 e8       	ldi	r22, 0x80	; 128
  _ucsrb = ucsrb;
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <__vector_37>
  66:	90 93 00 00 	sts	0x0000, r25
  _udr = udr;
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	20 93 ce 00 	sts	0x00CE, r18
  _rxen = rxen;
  72:	ff 91       	pop	r31
  _txen = txen;
  74:	ef 91       	pop	r30
  76:	bf 91       	pop	r27
  _rxcie = rxcie;
  78:	af 91       	pop	r26
  7a:	9f 91       	pop	r25
  _udrie = udrie;
  7c:	8f 91       	pop	r24
  7e:	7f 91       	pop	r23
  _u2x = u2x;
  80:	6f 91       	pop	r22
  82:	5f 91       	pop	r21
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0b be       	out	0x3b, r0	; 59
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text.__vector_52:

00000000 <__vector_52>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	5f 93       	push	r21
  14:	6f 93       	push	r22
  16:	7f 93       	push	r23
  18:	8f 93       	push	r24
  1a:	9f 93       	push	r25
  1c:	af 93       	push	r26
  1e:	bf 93       	push	r27
  20:	ef 93       	push	r30
  22:	ff 93       	push	r31
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	28 17       	cp	r18, r24
  36:	39 07       	cpc	r19, r25
{
  _rx_buffer = rx_buffer;
  38:	01 f4       	brne	.+0      	; 0x3a <__vector_52+0x3a>
  3a:	80 91 d1 00 	lds	r24, 0x00D1
  3e:	8f 7d       	andi	r24, 0xDF	; 223
  _tx_buffer = tx_buffer;
  40:	80 93 d1 00 	sts	0x00D1, r24
  44:	00 c0       	rjmp	.+0      	; 0x46 <__vector_52+0x46>
  46:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  4a:	f0 91 00 00 	lds	r31, 0x0000
  4e:	e0 50       	subi	r30, 0x00	; 0
  _ubrrl = ubrrl;
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	20 81       	ld	r18, Z
  54:	80 91 00 00 	lds	r24, 0x0000
  _ucsra = ucsra;
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	60 e8       	ldi	r22, 0x80	; 128
  _ucsrb = ucsrb;
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <__vector_52>
  66:	90 93 00 00 	sts	0x0000, r25
  _udr = udr;
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	20 93 d6 00 	sts	0x00D6, r18
  _rxen = rxen;
  72:	ff 91       	pop	r31
  _txen = txen;
  74:	ef 91       	pop	r30
  76:	bf 91       	pop	r27
  _rxcie = rxcie;
  78:	af 91       	pop	r26
  7a:	9f 91       	pop	r25
  _udrie = udrie;
  7c:	8f 91       	pop	r24
  7e:	7f 91       	pop	r23
  _u2x = u2x;
  80:	6f 91       	pop	r22
  82:	5f 91       	pop	r21
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0b be       	out	0x3b, r0	; 59
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text.__vector_55:

00000000 <__vector_55>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	5f 93       	push	r21
  14:	6f 93       	push	r22
  16:	7f 93       	push	r23
  18:	8f 93       	push	r24
  1a:	9f 93       	push	r25
  1c:	af 93       	push	r26
  1e:	bf 93       	push	r27
  20:	ef 93       	push	r30
  22:	ff 93       	push	r31
  24:	20 91 00 00 	lds	r18, 0x0000
  28:	30 91 00 00 	lds	r19, 0x0000

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	28 17       	cp	r18, r24
  36:	39 07       	cpc	r19, r25
{
  _rx_buffer = rx_buffer;
  38:	01 f4       	brne	.+0      	; 0x3a <__vector_55+0x3a>
  3a:	80 91 31 01 	lds	r24, 0x0131
  3e:	8f 7d       	andi	r24, 0xDF	; 223
  _tx_buffer = tx_buffer;
  40:	80 93 31 01 	sts	0x0131, r24
  44:	00 c0       	rjmp	.+0      	; 0x46 <__vector_55+0x46>
  46:	e0 91 00 00 	lds	r30, 0x0000
  _ubrrh = ubrrh;
  4a:	f0 91 00 00 	lds	r31, 0x0000
  4e:	e0 50       	subi	r30, 0x00	; 0
  _ubrrl = ubrrl;
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	20 81       	ld	r18, Z
  54:	80 91 00 00 	lds	r24, 0x0000
  _ucsra = ucsra;
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	01 96       	adiw	r24, 0x01	; 1
  5e:	60 e8       	ldi	r22, 0x80	; 128
  _ucsrb = ucsrb;
  60:	70 e0       	ldi	r23, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <__vector_55>
  66:	90 93 00 00 	sts	0x0000, r25
  _udr = udr;
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	20 93 36 01 	sts	0x0136, r18
  _rxen = rxen;
  72:	ff 91       	pop	r31
  _txen = txen;
  74:	ef 91       	pop	r30
  76:	bf 91       	pop	r27
  _rxcie = rxcie;
  78:	af 91       	pop	r26
  7a:	9f 91       	pop	r25
  _udrie = udrie;
  7c:	8f 91       	pop	r24
  7e:	7f 91       	pop	r23
  _u2x = u2x;
  80:	6f 91       	pop	r22
  82:	5f 91       	pop	r21
  84:	3f 91       	pop	r19
  86:	2f 91       	pop	r18
  88:	0f 90       	pop	r0
  8a:	0b be       	out	0x3b, r0	; 59
  8c:	0f 90       	pop	r0
  8e:	0f be       	out	0x3f, r0	; 63
  90:	0f 90       	pop	r0
  92:	1f 90       	pop	r1
  94:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	8f 92       	push	r8
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	fc 01       	movw	r30, r24
  1c:	13 82       	std	Z+3, r1	; 0x03
  1e:	12 82       	std	Z+2, r1	; 0x02
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	84 83       	std	Z+4, r24	; 0x04
  2a:	95 83       	std	Z+5, r25	; 0x05

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	a6 83       	std	Z+6, r26	; 0x06
  2e:	b7 83       	std	Z+7, r27	; 0x07
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
  38:	75 87       	std	Z+13, r23	; 0x0d
  3a:	64 87       	std	Z+12, r22	; 0x0c
  3c:	57 87       	std	Z+15, r21	; 0x0f
  3e:	46 87       	std	Z+14, r20	; 0x0e
  _tx_buffer = tx_buffer;
  40:	31 8b       	std	Z+17, r19	; 0x11
  42:	20 8b       	std	Z+16, r18	; 0x10
  44:	13 8b       	std	Z+19, r17	; 0x13
  46:	02 8b       	std	Z+18, r16	; 0x12
  _ubrrh = ubrrh;
  48:	f5 8a       	std	Z+21, r15	; 0x15
  4a:	e4 8a       	std	Z+20, r14	; 0x14
  4c:	d7 8a       	std	Z+23, r13	; 0x17
  4e:	c6 8a       	std	Z+22, r12	; 0x16
  _ubrrl = ubrrl;
  50:	b1 8e       	std	Z+25, r11	; 0x19
  52:	a0 8e       	std	Z+24, r10	; 0x18
  54:	82 8e       	std	Z+26, r8	; 0x1a
  56:	8f 85       	ldd	r24, Y+15	; 0x0f
  _ucsra = ucsra;
  58:	83 8f       	std	Z+27, r24	; 0x1b
  5a:	88 89       	ldd	r24, Y+16	; 0x10
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  5e:	89 89       	ldd	r24, Y+17	; 0x11
  _ucsrb = ucsrb;
  60:	85 8f       	std	Z+29, r24	; 0x1d
  62:	8a 89       	ldd	r24, Y+18	; 0x12
  64:	86 8f       	std	Z+30, r24	; 0x1e
  66:	df 91       	pop	r29
  _udr = udr;
  68:	cf 91       	pop	r28
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  _rxen = rxen;
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  _txen = txen;
  74:	cf 90       	pop	r12
  76:	bf 90       	pop	r11
  _rxcie = rxcie;
  78:	af 90       	pop	r10
  7a:	8f 90       	pop	r8
  _udrie = udrie;
  7c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	ec 01       	movw	r28, r24
  14:	6a 01       	movw	r12, r20
  16:	7b 01       	movw	r14, r22
  18:	bb 24       	eor	r11, r11
  1a:	b3 94       	inc	r11
  1c:	40 30       	cpi	r20, 0x00	; 0
  1e:	81 ee       	ldi	r24, 0xE1	; 225
  20:	58 07       	cpc	r21, r24
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	68 07       	cpc	r22, r24
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	78 07       	cpc	r23, r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN14HardwareSerial5beginEm+0x2c>

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	bb 24       	eor	r11, r11
  2e:	ec 89       	ldd	r30, Y+20	; 0x14
  30:	fd 89       	ldd	r31, Y+21	; 0x15
  32:	10 82       	st	Z, r1
  34:	60 e8       	ldi	r22, 0x80	; 128
  36:	74 e8       	ldi	r23, 0x84	; 132
{
  _rx_buffer = rx_buffer;
  38:	8e e1       	ldi	r24, 0x1E	; 30
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN14HardwareSerial5beginEm+0x3e>
  3e:	ec 89       	ldd	r30, Y+20	; 0x14
  _tx_buffer = tx_buffer;
  40:	fd 89       	ldd	r31, Y+21	; 0x15
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	0e 8c       	ldd	r0, Y+30	; 0x1e
  _ubrrh = ubrrh;
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN14HardwareSerial5beginEm+0x4a>
  4a:	88 0f       	add	r24, r24
  4c:	99 1f       	adc	r25, r25
  4e:	0a 94       	dec	r0
  _ubrrl = ubrrl;
  50:	02 f4       	brpl	.+0      	; 0x52 <_ZN14HardwareSerial5beginEm+0x52>
  52:	80 83       	st	Z, r24
  54:	60 e0       	ldi	r22, 0x00	; 0
  56:	79 e0       	ldi	r23, 0x09	; 9
  _ucsra = ucsra;
  58:	8d e3       	ldi	r24, 0x3D	; 61
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	a7 01       	movw	r20, r14
  5e:	96 01       	movw	r18, r12
  _ucsrb = ucsrb;
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  64:	89 01       	movw	r16, r18
  66:	9a 01       	movw	r18, r20
  _udr = udr;
  68:	01 50       	subi	r16, 0x01	; 1
  6a:	10 40       	sbci	r17, 0x00	; 0
  6c:	20 40       	sbci	r18, 0x00	; 0
  6e:	30 40       	sbci	r19, 0x00	; 0
  _rxen = rxen;
  70:	36 95       	lsr	r19
  72:	27 95       	ror	r18
  _txen = txen;
  74:	17 95       	ror	r17
  76:	07 95       	ror	r16
  _rxcie = rxcie;
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	00 30       	cpi	r16, 0x00	; 0
  _udrie = udrie;
  7c:	18 07       	cpc	r17, r24
  7e:	00 f0       	brcs	.+0      	; 0x80 <_ZN14HardwareSerial5beginEm+0x80>
  _u2x = u2x;
  80:	bb 20       	and	r11, r11
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN14HardwareSerial5beginEm+0x84>
  84:	e8 89       	ldd	r30, Y+16	; 0x10
  86:	f9 89       	ldd	r31, Y+17	; 0x11
  88:	10 83       	st	Z, r17
  8a:	ea 89       	ldd	r30, Y+18	; 0x12
  8c:	fb 89       	ldd	r31, Y+19	; 0x13
  8e:	00 83       	st	Z, r16
  90:	ee 89       	ldd	r30, Y+22	; 0x16
  92:	ff 89       	ldd	r31, Y+23	; 0x17
  94:	40 81       	ld	r20, Z
  96:	21 e0       	ldi	r18, 0x01	; 1
  98:	30 e0       	ldi	r19, 0x00	; 0
  9a:	c9 01       	movw	r24, r18

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9c:	0a 8c       	ldd	r0, Y+26	; 0x1a
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN14HardwareSerial5beginEm+0xa0>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
{
  _rx_buffer = rx_buffer;
  a4:	0a 94       	dec	r0
  a6:	02 f4       	brpl	.+0      	; 0xa8 <_ZN14HardwareSerial5beginEm+0xa8>
  a8:	48 2b       	or	r20, r24
  aa:	40 83       	st	Z, r20
  _tx_buffer = tx_buffer;
  ac:	ee 89       	ldd	r30, Y+22	; 0x16
  ae:	ff 89       	ldd	r31, Y+23	; 0x17
  b0:	40 81       	ld	r20, Z
  b2:	c9 01       	movw	r24, r18
  _ubrrh = ubrrh;
  b4:	0b 8c       	ldd	r0, Y+27	; 0x1b
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN14HardwareSerial5beginEm+0xb8>
  b8:	88 0f       	add	r24, r24
  ba:	99 1f       	adc	r25, r25
  _ubrrl = ubrrl;
  bc:	0a 94       	dec	r0
  be:	02 f4       	brpl	.+0      	; 0xc0 <_ZN14HardwareSerial5beginEm+0xc0>
  c0:	48 2b       	or	r20, r24
  c2:	40 83       	st	Z, r20
  _ucsra = ucsra;
  c4:	ee 89       	ldd	r30, Y+22	; 0x16
  c6:	ff 89       	ldd	r31, Y+23	; 0x17
  c8:	40 81       	ld	r20, Z
  ca:	c9 01       	movw	r24, r18
  _ucsrb = ucsrb;
  cc:	0c 8c       	ldd	r0, Y+28	; 0x1c
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN14HardwareSerial5beginEm+0xd0>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  _udr = udr;
  d4:	0a 94       	dec	r0
  d6:	02 f4       	brpl	.+0      	; 0xd8 <_ZN14HardwareSerial5beginEm+0xd8>
  d8:	48 2b       	or	r20, r24
  da:	40 83       	st	Z, r20
  _rxen = rxen;
  dc:	ee 89       	ldd	r30, Y+22	; 0x16
  _txen = txen;
  de:	ff 89       	ldd	r31, Y+23	; 0x17
  _rxcie = rxcie;
  e0:	80 81       	ld	r24, Z
  _udrie = udrie;
  e2:	0d 8c       	ldd	r0, Y+29	; 0x1d
  _u2x = u2x;
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN14HardwareSerial5beginEm+0xe6>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	0a 94       	dec	r0
  ec:	02 f4       	brpl	.+0      	; 0xee <_ZN14HardwareSerial5beginEm+0xee>
  ee:	20 95       	com	r18
  f0:	28 23       	and	r18, r24
  f2:	20 83       	st	Z, r18
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	0f 91       	pop	r16
  fc:	ff 90       	pop	r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  fe:	ef 90       	pop	r14
 100:	df 90       	pop	r13
 102:	cf 90       	pop	r12
 104:	bf 90       	pop	r11
{
  _rx_buffer = rx_buffer;
 106:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ee 85       	ldd	r30, Y+14	; 0x0e
   8:	ff 85       	ldd	r31, Y+15	; 0x0f
   a:	df 01       	movw	r26, r30
   c:	a0 58       	subi	r26, 0x80	; 128
   e:	bf 4f       	sbci	r27, 0xFF	; 255
  10:	ee 57       	subi	r30, 0x7E	; 126
  12:	ff 4f       	sbci	r31, 0xFF	; 255
  14:	8d 91       	ld	r24, X+
  16:	9c 91       	ld	r25, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	20 81       	ld	r18, Z
  1c:	31 81       	ldd	r19, Z+1	; 0x01
  1e:	82 17       	cp	r24, r18
  20:	93 07       	cpc	r25, r19
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN14HardwareSerial3endEv+0x24>
  24:	ee 89       	ldd	r30, Y+22	; 0x16
  26:	ff 89       	ldd	r31, Y+23	; 0x17
  28:	40 81       	ld	r20, Z
  2a:	21 e0       	ldi	r18, 0x01	; 1

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	c9 01       	movw	r24, r18
  30:	0a 8c       	ldd	r0, Y+26	; 0x1a
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN14HardwareSerial3endEv+0x34>
  34:	88 0f       	add	r24, r24
  36:	99 1f       	adc	r25, r25
{
  _rx_buffer = rx_buffer;
  38:	0a 94       	dec	r0
  3a:	02 f4       	brpl	.+0      	; 0x3c <_ZN14HardwareSerial3endEv+0x3c>
  3c:	80 95       	com	r24
  3e:	84 23       	and	r24, r20
  _tx_buffer = tx_buffer;
  40:	80 83       	st	Z, r24
  42:	ee 89       	ldd	r30, Y+22	; 0x16
  44:	ff 89       	ldd	r31, Y+23	; 0x17
  46:	40 81       	ld	r20, Z
  _ubrrh = ubrrh;
  48:	c9 01       	movw	r24, r18
  4a:	0b 8c       	ldd	r0, Y+27	; 0x1b
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN14HardwareSerial3endEv+0x4e>
  4e:	88 0f       	add	r24, r24
  _ubrrl = ubrrl;
  50:	99 1f       	adc	r25, r25
  52:	0a 94       	dec	r0
  54:	02 f4       	brpl	.+0      	; 0x56 <_ZN14HardwareSerial3endEv+0x56>
  56:	80 95       	com	r24
  _ucsra = ucsra;
  58:	84 23       	and	r24, r20
  5a:	80 83       	st	Z, r24
  5c:	ee 89       	ldd	r30, Y+22	; 0x16
  5e:	ff 89       	ldd	r31, Y+23	; 0x17
  _ucsrb = ucsrb;
  60:	40 81       	ld	r20, Z
  62:	c9 01       	movw	r24, r18
  64:	0c 8c       	ldd	r0, Y+28	; 0x1c
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN14HardwareSerial3endEv+0x68>
  _udr = udr;
  68:	88 0f       	add	r24, r24
  6a:	99 1f       	adc	r25, r25
  6c:	0a 94       	dec	r0
  6e:	02 f4       	brpl	.+0      	; 0x70 <_ZN14HardwareSerial3endEv+0x70>
  _rxen = rxen;
  70:	80 95       	com	r24
  72:	84 23       	and	r24, r20
  _txen = txen;
  74:	80 83       	st	Z, r24
  76:	ee 89       	ldd	r30, Y+22	; 0x16
  _rxcie = rxcie;
  78:	ff 89       	ldd	r31, Y+23	; 0x17
  7a:	80 81       	ld	r24, Z
  _udrie = udrie;
  7c:	0d 8c       	ldd	r0, Y+29	; 0x1d
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN14HardwareSerial3endEv+0x80>
  _u2x = u2x;
  80:	22 0f       	add	r18, r18
  82:	33 1f       	adc	r19, r19
  84:	0a 94       	dec	r0
  86:	02 f4       	brpl	.+0      	; 0x88 <_ZN14HardwareSerial3endEv+0x88>
  88:	20 95       	com	r18
  8a:	28 23       	and	r18, r24
  8c:	20 83       	st	Z, r18
  8e:	8c 85       	ldd	r24, Y+12	; 0x0c
  90:	9d 85       	ldd	r25, Y+13	; 0x0d
  92:	fc 01       	movw	r30, r24
  94:	ee 57       	subi	r30, 0x7E	; 126
  96:	ff 4f       	sbci	r31, 0xFF	; 255
  98:	20 81       	ld	r18, Z
  9a:	31 81       	ldd	r19, Z+1	; 0x01

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9c:	80 58       	subi	r24, 0x80	; 128
  9e:	9f 4f       	sbci	r25, 0xFF	; 255
  a0:	fc 01       	movw	r30, r24
  a2:	31 83       	std	Z+1, r19	; 0x01
{
  _rx_buffer = rx_buffer;
  a4:	20 83       	st	Z, r18
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I_rx_buffer:

00000000 <_GLOBAL__sub_I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	10 92 00 00 	sts	0x0000, r1
   c:	10 92 00 00 	sts	0x0000, r1
  10:	78 ee       	ldi	r23, 0xE8	; 232
  12:	c7 2e       	mov	r12, r23
  14:	73 e0       	ldi	r23, 0x03	; 3
  16:	d7 2e       	mov	r13, r23
  18:	e1 2c       	mov	r14, r1
  1a:	f1 2c       	mov	r15, r1
  1c:	c0 92 00 00 	sts	0x0000, r12
  20:	d0 92 00 00 	sts	0x0000, r13
  24:	e0 92 00 00 	sts	0x0000, r14
  28:	f0 92 00 00 	sts	0x0000, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  2c:	e0 e0       	ldi	r30, 0x00	; 0
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	a0 e0       	ldi	r26, 0x00	; 0
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	b2 93       	st	-Z, r27
  36:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	95 87       	std	Z+13, r25	; 0x0d
  3e:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	90 e0       	ldi	r25, 0x00	; 0
  44:	97 87       	std	Z+15, r25	; 0x0f
  46:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
  48:	85 ec       	ldi	r24, 0xC5	; 197
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	91 8b       	std	Z+17, r25	; 0x11
  4e:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
  50:	84 ec       	ldi	r24, 0xC4	; 196
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	93 8b       	std	Z+19, r25	; 0x13
  56:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
  58:	80 ec       	ldi	r24, 0xC0	; 192
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	95 8b       	std	Z+21, r25	; 0x15
  5e:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
  60:	81 ec       	ldi	r24, 0xC1	; 193
  62:	90 e0       	ldi	r25, 0x00	; 0
  64:	97 8b       	std	Z+23, r25	; 0x17
  66:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
  68:	86 ec       	ldi	r24, 0xC6	; 198
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	91 8f       	std	Z+25, r25	; 0x19
  6e:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
  70:	84 e0       	ldi	r24, 0x04	; 4
  72:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
  74:	93 e0       	ldi	r25, 0x03	; 3
  76:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
  78:	47 e0       	ldi	r20, 0x07	; 7
  7a:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
  7c:	55 e0       	ldi	r21, 0x05	; 5
  7e:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
  80:	61 e0       	ldi	r22, 0x01	; 1
  82:	66 8f       	std	Z+30, r22	; 0x1e
  84:	10 92 00 00 	sts	0x0000, r1
  88:	10 92 00 00 	sts	0x0000, r1
  8c:	c0 92 00 00 	sts	0x0000, r12
  90:	d0 92 00 00 	sts	0x0000, r13
  94:	e0 92 00 00 	sts	0x0000, r14
  98:	f0 92 00 00 	sts	0x0000, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  9c:	e0 e0       	ldi	r30, 0x00	; 0
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	b2 93       	st	-Z, r27
  a2:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	35 87       	std	Z+13, r19	; 0x0d
  aa:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
  ac:	20 e0       	ldi	r18, 0x00	; 0
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	37 87       	std	Z+15, r19	; 0x0f
  b2:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
  b4:	2d ec       	ldi	r18, 0xCD	; 205
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	31 8b       	std	Z+17, r19	; 0x11
  ba:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
  bc:	2c ec       	ldi	r18, 0xCC	; 204
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	33 8b       	std	Z+19, r19	; 0x13
  c2:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
  c4:	28 ec       	ldi	r18, 0xC8	; 200
  c6:	30 e0       	ldi	r19, 0x00	; 0
  c8:	35 8b       	std	Z+21, r19	; 0x15
  ca:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
  cc:	29 ec       	ldi	r18, 0xC9	; 201
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	37 8b       	std	Z+23, r19	; 0x17
  d2:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
  d4:	2e ec       	ldi	r18, 0xCE	; 206
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	31 8f       	std	Z+25, r19	; 0x19
  da:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
  dc:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
  de:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
  e0:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
  e2:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
  e4:	66 8f       	std	Z+30, r22	; 0x1e
  e6:	10 92 00 00 	sts	0x0000, r1
  ea:	10 92 00 00 	sts	0x0000, r1
  ee:	c0 92 00 00 	sts	0x0000, r12
  f2:	d0 92 00 00 	sts	0x0000, r13
  f6:	e0 92 00 00 	sts	0x0000, r14
  fa:	f0 92 00 00 	sts	0x0000, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  fe:	e0 e0       	ldi	r30, 0x00	; 0
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	b2 93       	st	-Z, r27
 104:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
 106:	20 e0       	ldi	r18, 0x00	; 0
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	35 87       	std	Z+13, r19	; 0x0d
 10c:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	37 87       	std	Z+15, r19	; 0x0f
 114:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
 116:	25 ed       	ldi	r18, 0xD5	; 213
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	31 8b       	std	Z+17, r19	; 0x11
 11c:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
 11e:	24 ed       	ldi	r18, 0xD4	; 212
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	33 8b       	std	Z+19, r19	; 0x13
 124:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
 126:	20 ed       	ldi	r18, 0xD0	; 208
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	35 8b       	std	Z+21, r19	; 0x15
 12c:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
 12e:	21 ed       	ldi	r18, 0xD1	; 209
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	37 8b       	std	Z+23, r19	; 0x17
 134:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
 136:	26 ed       	ldi	r18, 0xD6	; 214
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	31 8f       	std	Z+25, r19	; 0x19
 13c:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
 13e:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
 140:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
 142:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
 144:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
 146:	66 8f       	std	Z+30, r22	; 0x1e
 148:	10 92 00 00 	sts	0x0000, r1
 14c:	10 92 00 00 	sts	0x0000, r1
 150:	c0 92 00 00 	sts	0x0000, r12
 154:	d0 92 00 00 	sts	0x0000, r13
 158:	e0 92 00 00 	sts	0x0000, r14
 15c:	f0 92 00 00 	sts	0x0000, r15

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 160:	e0 e0       	ldi	r30, 0x00	; 0
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	b2 93       	st	-Z, r27
 166:	a2 93       	st	-Z, r26
{
  _rx_buffer = rx_buffer;
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	35 87       	std	Z+13, r19	; 0x0d
 16e:	24 87       	std	Z+12, r18	; 0x0c
  _tx_buffer = tx_buffer;
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	37 87       	std	Z+15, r19	; 0x0f
 176:	26 87       	std	Z+14, r18	; 0x0e
  _ubrrh = ubrrh;
 178:	25 e3       	ldi	r18, 0x35	; 53
 17a:	31 e0       	ldi	r19, 0x01	; 1
 17c:	31 8b       	std	Z+17, r19	; 0x11
 17e:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
 180:	24 e3       	ldi	r18, 0x34	; 52
 182:	31 e0       	ldi	r19, 0x01	; 1
 184:	33 8b       	std	Z+19, r19	; 0x13
 186:	22 8b       	std	Z+18, r18	; 0x12
  _ucsra = ucsra;
 188:	20 e3       	ldi	r18, 0x30	; 48
 18a:	31 e0       	ldi	r19, 0x01	; 1
 18c:	35 8b       	std	Z+21, r19	; 0x15
 18e:	24 8b       	std	Z+20, r18	; 0x14
  _ucsrb = ucsrb;
 190:	21 e3       	ldi	r18, 0x31	; 49
 192:	31 e0       	ldi	r19, 0x01	; 1
 194:	37 8b       	std	Z+23, r19	; 0x17
 196:	26 8b       	std	Z+22, r18	; 0x16
  _udr = udr;
 198:	26 e3       	ldi	r18, 0x36	; 54
 19a:	31 e0       	ldi	r19, 0x01	; 1
 19c:	31 8f       	std	Z+25, r19	; 0x19
 19e:	20 8f       	std	Z+24, r18	; 0x18
  _rxen = rxen;
 1a0:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
 1a2:	93 8f       	std	Z+27, r25	; 0x1b
  _rxcie = rxcie;
 1a4:	44 8f       	std	Z+28, r20	; 0x1c
  _udrie = udrie;
 1a6:	55 8f       	std	Z+29, r21	; 0x1d
  _u2x = u2x;
 1a8:	66 8f       	std	Z+30, r22	; 0x1e
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a5c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000377c  00000000  00000000  00000a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZNK9IPAddress7printToER5Print 00000076  00000000  00000000  0000420c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  00004282  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00004296  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN9IPAddressC2Em 00000014  00000000  00000000  000042ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN9IPAddressC2EPKh 00000026  00000000  00000000  000042c2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN9IPAddressaSEPKh 00000016  00000000  00000000  000042e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN9IPAddressaSEm 0000000c  00000000  00000000  000042fe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .text._ZN9IPAddresseqEPKh 00000020  00000000  00000000  0000430a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  0000432a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .ctors        00000002  00000000  00000000  00004348  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 15 .rodata._ZTV9IPAddress 00000006  00000000  00000000  0000434a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 16 .rodata._ZTV9Printable 00000006  00000000  00000000  00004350  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 17 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00004356  2**0
                  ALLOC

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
{
    _address[0] = first_octet;
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
    _address[1] = second_octet;
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
    _address[2] = third_octet;
  14:	5c 01       	movw	r10, r24
  16:	7b 01       	movw	r14, r22
    _address[3] = fourth_octet;
  18:	00 e0       	ldi	r16, 0x00	; 0
  1a:	10 e0       	ldi	r17, 0x00	; 0
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	cc 24       	eor	r12, r12
  1e:	dd 24       	eor	r13, r13
  20:	f5 01       	movw	r30, r10
  22:	e0 0f       	add	r30, r16
  24:	f1 1f       	adc	r31, r17
  26:	c7 01       	movw	r24, r14
  28:	62 81       	ldd	r22, Z+2	; 0x02
  2a:	4a e0       	ldi	r20, 0x0A	; 10
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  32:	ec 01       	movw	r28, r24
  34:	c7 01       	movw	r24, r14
  36:	6e e2       	ldi	r22, 0x2E	; 46
  38:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  3c:	c8 0f       	add	r28, r24
  3e:	d9 1f       	adc	r29, r25
  40:	cc 0e       	add	r12, r28
  42:	dd 1e       	adc	r13, r29
  44:	0f 5f       	subi	r16, 0xFF	; 255
  46:	1f 4f       	sbci	r17, 0xFF	; 255
  48:	03 30       	cpi	r16, 0x03	; 3
  4a:	11 05       	cpc	r17, r1
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZNK9IPAddress7printToER5Print+0x4e>
  4e:	c7 01       	movw	r24, r14
  50:	f5 01       	movw	r30, r10
  52:	65 81       	ldd	r22, Z+5	; 0x05
  54:	4a e0       	ldi	r20, 0x0A	; 10
  56:	50 e0       	ldi	r21, 0x00	; 0
  58:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  5c:	8c 0d       	add	r24, r12
  5e:	9d 1d       	adc	r25, r13
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	df 90       	pop	r13
  6e:	cf 90       	pop	r12
  70:	bf 90       	pop	r11
  72:	af 90       	pop	r10
  74:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	12 82       	std	Z+2, r1	; 0x02
{
    _address[0] = first_octet;
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
    _address[1] = second_octet;
  10:	15 82       	std	Z+5, r1	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[1] = second_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
  12:	05 83       	std	Z+5, r16	; 0x05
    _address[2] = third_octet;
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
   a:	42 83       	std	Z+2, r20	; 0x02
{
    _address[0] = first_octet;
   c:	53 83       	std	Z+3, r21	; 0x03
   e:	64 83       	std	Z+4, r22	; 0x04
    _address[1] = second_octet;
  10:	75 83       	std	Z+5, r23	; 0x05
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	91 83       	std	Z+1, r25	; 0x01
{
    _address[0] = first_octet;
   c:	80 83       	st	Z, r24
   e:	eb 01       	movw	r28, r22
    _address[1] = second_octet;
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
    _address[2] = third_octet;
  14:	aa 81       	ldd	r26, Y+2	; 0x02
  16:	bb 81       	ldd	r27, Y+3	; 0x03
    _address[3] = fourth_octet;
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
  20:	df 91       	pop	r29
  22:	cf 91       	pop	r28
  24:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fb 01       	movw	r30, r22
   2:	40 81       	ld	r20, Z
   4:	51 81       	ldd	r21, Z+1	; 0x01
   6:	62 81       	ldd	r22, Z+2	; 0x02
   8:	73 81       	ldd	r23, Z+3	; 0x03
   a:	fc 01       	movw	r30, r24
{
    _address[0] = first_octet;
   c:	42 83       	std	Z+2, r20	; 0x02
   e:	53 83       	std	Z+3, r21	; 0x03
    _address[1] = second_octet;
  10:	64 83       	std	Z+4, r22	; 0x04
  12:	75 83       	std	Z+5, r23	; 0x05
    _address[2] = third_octet;
  14:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	fc 01       	movw	r30, r24
   2:	42 83       	std	Z+2, r20	; 0x02
   4:	53 83       	std	Z+3, r21	; 0x03
   6:	64 83       	std	Z+4, r22	; 0x04
   8:	75 83       	std	Z+5, r23	; 0x05
   a:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:
   0:	9c 01       	movw	r18, r24
   2:	2e 5f       	subi	r18, 0xFE	; 254
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	44 e0       	ldi	r20, 0x04	; 4
{
    _address[0] = first_octet;
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
    _address[1] = second_octet;
  12:	9c 01       	movw	r18, r24
    _address[2] = third_octet;
  14:	81 e0       	ldi	r24, 0x01	; 1
  16:	21 15       	cp	r18, r1
    _address[3] = fourth_octet;
  18:	31 05       	cpc	r19, r1
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN9IPAddresseqEPKh+0x1c>
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__sub_I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    _address[0] = first_octet;
   c:	10 92 00 00 	sts	0x0000, r1
    _address[1] = second_octet;
  10:	10 92 00 00 	sts	0x0000, r1
    _address[2] = third_octet;
  14:	10 92 00 00 	sts	0x0000, r1
    _address[3] = fourth_octet;
  18:	10 92 00 00 	sts	0x0000, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000036  2**0
                  ALLOC
  3 .stab         0000150c  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003dd9  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN5Print5writeEPKhj 00000050  00000000  00000000  0000531d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN5Print5printEPK19__FlashStringHelper 00000042  00000000  00000000  0000536d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printERK6String 00000068  00000000  00000000  000053af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5printEPKc 00000022  00000000  00000000  00005417  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Print5printEc 00000010  00000000  00000000  00005439  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN5Print5printERK9Printable 00000016  00000000  00000000  00005449  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print7printlnEv 00000028  00000000  00000000  0000545f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000024  00000000  00000000  00005487  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print7printlnERK6String 00000024  00000000  00000000  000054ab  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print7printlnEPKc 00000024  00000000  00000000  000054cf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print7printlnEc 00000024  00000000  00000000  000054f3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print7printlnERK9Printable 00000024  00000000  00000000  00005517  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print11printNumberEmh 000000e0  00000000  00000000  0000553b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print5printEmi 0000001e  00000000  00000000  0000561b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnEmi 00000024  00000000  00000000  00005639  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print5printEji 0000000e  00000000  00000000  0000565d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print7printlnEji 0000002c  00000000  00000000  0000566b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEhi 00000010  00000000  00000000  00005697  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEhi 0000002e  00000000  00000000  000056a7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print5printEli 00000072  00000000  00000000  000056d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print7printlnEli 00000024  00000000  00000000  00005747  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEii 00000014  00000000  00000000  0000576b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print7printlnEii 00000034  00000000  00000000  0000577f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print10printFloatEdh 000001a6  00000000  00000000  000057b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print5printEdi 00000006  00000000  00000000  00005959  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEdi 00000024  00000000  00000000  0000595f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .rodata._ZTV5Print 00000008  00000000  00000000  00005983  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	6c 01       	movw	r12, r24
  12:	7b 01       	movw	r14, r22
  14:	ea 01       	movw	r28, r20
  16:	00 e0       	ldi	r16, 0x00	; 0
  18:	10 e0       	ldi	r17, 0x00	; 0
  return n;
}
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN5Print5writeEPKhj+0x1c>
  1c:	d7 01       	movw	r26, r14
  1e:	6d 91       	ld	r22, X+
  20:	7d 01       	movw	r14, r26
  22:	d6 01       	movw	r26, r12
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c6 01       	movw	r24, r12
  30:	19 95       	eicall
  32:	08 0f       	add	r16, r24
  34:	19 1f       	adc	r17, r25
  36:	21 97       	sbiw	r28, 0x01	; 1
  38:	20 97       	sbiw	r28, 0x00	; 0
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN5Print5writeEPKhj+0x3c>
  3c:	c8 01       	movw	r24, r16
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	ff 90       	pop	r15
  48:	ef 90       	pop	r14
  4a:	df 90       	pop	r13
  4c:	cf 90       	pop	r12
  4e:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
   e:	eb 01       	movw	r28, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	00 e0       	ldi	r16, 0x00	; 0
  12:	10 e0       	ldi	r17, 0x00	; 0
  14:	fe 01       	movw	r30, r28
  16:	21 96       	adiw	r28, 0x01	; 1
  18:	64 91       	lpm	r22, Z
  return n;
}
  1a:	66 23       	and	r22, r22
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN5Print5printEPK19__FlashStringHelper+0x1e>
  1e:	f7 01       	movw	r30, r14
  20:	a0 81       	ld	r26, Z
  22:	b1 81       	ldd	r27, Z+1	; 0x01
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	c7 01       	movw	r24, r14
  2a:	19 95       	eicall
  2c:	08 0f       	add	r16, r24
  2e:	19 1f       	adc	r17, r25
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN5Print5printEPK19__FlashStringHelper+0x32>
  32:	c8 01       	movw	r24, r16
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	5b 01       	movw	r10, r22
  18:	00 e0       	ldi	r16, 0x00	; 0
  return n;
}
  1a:	10 e0       	ldi	r17, 0x00	; 0
  1c:	ee 24       	eor	r14, r14
  1e:	ff 24       	eor	r15, r15
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
  22:	d6 01       	movw	r26, r12
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	c0 81       	ld	r28, Z
  2a:	d1 81       	ldd	r29, Z+1	; 0x01
  2c:	c5 01       	movw	r24, r10
  2e:	b8 01       	movw	r22, r16
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c6 01       	movw	r24, r12
  38:	fe 01       	movw	r30, r28
  3a:	19 95       	eicall
  3c:	e8 0e       	add	r14, r24
  3e:	f9 1e       	adc	r15, r25
  40:	0f 5f       	subi	r16, 0xFF	; 255
  42:	1f 4f       	sbci	r17, 0xFF	; 255
  44:	f5 01       	movw	r30, r10
  46:	84 81       	ldd	r24, Z+4	; 0x04
  48:	95 81       	ldd	r25, Z+5	; 0x05
  4a:	08 17       	cp	r16, r24
  4c:	19 07       	cpc	r17, r25
  4e:	00 f0       	brcs	.+0      	; 0x50 <_ZN5Print5printERK6String+0x50>
  50:	c7 01       	movw	r24, r14
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	ff 90       	pop	r15
  5c:	ef 90       	pop	r14
  5e:	df 90       	pop	r13
  60:	cf 90       	pop	r12
  62:	bf 90       	pop	r11
  64:	af 90       	pop	r10
  66:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	db 01       	movw	r26, r22
   2:	0d 90       	ld	r0, X+
   4:	00 20       	and	r0, r0
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Print5printEPKc+0x8>
   8:	ad 01       	movw	r20, r26
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	41 50       	subi	r20, 0x01	; 1
   c:	50 40       	sbci	r21, 0x00	; 0
   e:	46 1b       	sub	r20, r22
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	57 0b       	sbc	r21, r23
  12:	dc 01       	movw	r26, r24
  14:	ed 91       	ld	r30, X+
  16:	fc 91       	ld	r31, X
  18:	02 80       	ldd	r0, Z+2	; 0x02
  return n;
}
  1a:	f3 81       	ldd	r31, Z+3	; 0x03
  1c:	e0 2d       	mov	r30, r0
  1e:	19 95       	eicall
  20:	08 95       	ret

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	e0 2d       	mov	r30, r0
   c:	19 95       	eicall
   e:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9c 01       	movw	r18, r24
   2:	cb 01       	movw	r24, r22
   4:	db 01       	movw	r26, r22
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	01 90       	ld	r0, Z+
   c:	f0 81       	ld	r31, Z
   e:	e0 2d       	mov	r30, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	b9 01       	movw	r22, r18
  12:	19 95       	eicall
  14:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	6d e0       	ldi	r22, 0x0D	; 13
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	c8 01       	movw	r24, r16
  14:	6a e0       	ldi	r22, 0x0A	; 10
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEv>
  return n;
}
  1a:	8c 0f       	add	r24, r28
  1c:	9d 1f       	adc	r25, r29
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  return n;
}
  1a:	df 93       	push	r29
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	a1 97       	sbiw	r28, 0x21	; 33
  22:	0f b6       	in	r0, 0x3f	; 63
  24:	f8 94       	cli
  26:	de bf       	out	0x3e, r29	; 62
  28:	0f be       	out	0x3f, r0	; 63
  2a:	cd bf       	out	0x3d, r28	; 61
  2c:	3c 01       	movw	r6, r24
  2e:	e4 2e       	mov	r14, r20
  30:	cb 01       	movw	r24, r22
  32:	f2 2e       	mov	r15, r18
  34:	19 a2       	std	Y+33, r1	; 0x21
  36:	21 e0       	ldi	r18, 0x01	; 1
  38:	2f 15       	cp	r18, r15
  3a:	00 f0       	brcs	.+0      	; 0x3c <_ZN5Print11printNumberEmh+0x3c>
  3c:	3a e0       	ldi	r19, 0x0A	; 10
  3e:	f3 2e       	mov	r15, r19
  40:	21 e2       	ldi	r18, 0x21	; 33
  42:	c2 2e       	mov	r12, r18
  44:	d1 2c       	mov	r13, r1
  46:	cc 0e       	add	r12, r28
  48:	dd 1e       	adc	r13, r29
  4a:	8f 2c       	mov	r8, r15
  4c:	99 24       	eor	r9, r9
  4e:	aa 24       	eor	r10, r10
  50:	bb 24       	eor	r11, r11
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN5Print11printNumberEmh+0x54>
  54:	e0 2e       	mov	r14, r16
  56:	51 2f       	mov	r21, r17
  58:	c9 01       	movw	r24, r18
  5a:	6e 2d       	mov	r22, r14
  5c:	75 2f       	mov	r23, r21
  5e:	a5 01       	movw	r20, r10
  60:	94 01       	movw	r18, r8
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  66:	89 01       	movw	r16, r18
  68:	9a 01       	movw	r18, r20
  6a:	f0 9e       	mul	r15, r16
  6c:	80 2d       	mov	r24, r0
  6e:	11 24       	eor	r1, r1
  70:	e8 1a       	sub	r14, r24
  72:	8e 2d       	mov	r24, r14
  74:	08 94       	sec
  76:	c1 08       	sbc	r12, r1
  78:	d1 08       	sbc	r13, r1
  7a:	8a 30       	cpi	r24, 0x0A	; 10
  7c:	04 f4       	brge	.+0      	; 0x7e <_ZN5Print11printNumberEmh+0x7e>
  7e:	80 5d       	subi	r24, 0xD0	; 208
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN5Print11printNumberEmh+0x82>
  82:	89 5c       	subi	r24, 0xC9	; 201
  84:	d6 01       	movw	r26, r12
  86:	8c 93       	st	X, r24
  88:	01 15       	cp	r16, r1
  8a:	11 05       	cpc	r17, r1
  8c:	21 05       	cpc	r18, r1
  8e:	31 05       	cpc	r19, r1
  90:	01 f4       	brne	.+0      	; 0x92 <_ZN5Print11printNumberEmh+0x92>
  92:	d6 01       	movw	r26, r12
  94:	0d 90       	ld	r0, X+
  96:	00 20       	and	r0, r0
  98:	01 f4       	brne	.+0      	; 0x9a <_ZN5Print11printNumberEmh+0x9a>
  9a:	ad 01       	movw	r20, r26
  9c:	41 50       	subi	r20, 0x01	; 1
  9e:	50 40       	sbci	r21, 0x00	; 0
  a0:	4c 19       	sub	r20, r12
  a2:	5d 09       	sbc	r21, r13
  a4:	d3 01       	movw	r26, r6
  a6:	ed 91       	ld	r30, X+
  a8:	fc 91       	ld	r31, X
  aa:	02 80       	ldd	r0, Z+2	; 0x02
  ac:	f3 81       	ldd	r31, Z+3	; 0x03
  ae:	e0 2d       	mov	r30, r0
  b0:	c3 01       	movw	r24, r6
  b2:	b6 01       	movw	r22, r12
  b4:	19 95       	eicall
  b6:	a1 96       	adiw	r28, 0x21	; 33
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	bf 90       	pop	r11
  d4:	af 90       	pop	r10
  d6:	9f 90       	pop	r9
  d8:	8f 90       	pop	r8
  da:	7f 90       	pop	r7
  dc:	6f 90       	pop	r6
  de:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	21 15       	cp	r18, r1
   2:	31 05       	cpc	r19, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN5Print5printEmi+0x6>
   6:	dc 01       	movw	r26, r24
   8:	ed 91       	ld	r30, X+
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	19 95       	eicall
  16:	08 95       	ret
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
  return n;
}
  1c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	ab 01       	movw	r20, r22
   4:	60 e0       	ldi	r22, 0x00	; 0
   6:	70 e0       	ldi	r23, 0x00	; 0
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	ab 01       	movw	r20, r22
   e:	60 e0       	ldi	r22, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  16:	ec 01       	movw	r28, r24
  18:	c8 01       	movw	r24, r16
  return n;
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  1e:	8c 0f       	add	r24, r28
  20:	9d 1f       	adc	r25, r29
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	46 2f       	mov	r20, r22
   4:	50 e0       	ldi	r21, 0x00	; 0
   6:	60 e0       	ldi	r22, 0x00	; 0
   8:	70 e0       	ldi	r23, 0x00	; 0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
   e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	46 2f       	mov	r20, r22
   e:	50 e0       	ldi	r21, 0x00	; 0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  18:	ec 01       	movw	r28, r24
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	8c 0f       	add	r24, r28
  22:	9d 1f       	adc	r25, r29
  24:	df 91       	pop	r29
  26:	cf 91       	pop	r28
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  return n;
}
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	19 95       	eicall
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  2c:	2a 30       	cpi	r18, 0x0A	; 10
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN5Print5printEli+0x32>
  32:	77 ff       	sbrs	r23, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEli+0x36>
  36:	6d e2       	ldi	r22, 0x2D	; 45
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  3c:	8c 01       	movw	r16, r24
  3e:	44 27       	eor	r20, r20
  40:	55 27       	eor	r21, r21
  42:	ba 01       	movw	r22, r20
  44:	4c 19       	sub	r20, r12
  46:	5d 09       	sbc	r21, r13
  48:	6e 09       	sbc	r22, r14
  4a:	7f 09       	sbc	r23, r15
  4c:	ce 01       	movw	r24, r28
  4e:	2a e0       	ldi	r18, 0x0A	; 10
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  54:	80 0f       	add	r24, r16
  56:	91 1f       	adc	r25, r17
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN5Print5printEli+0x5a>
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	df 90       	pop	r13
  6e:	cf 90       	pop	r12
  70:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	9a 01       	movw	r18, r20
   2:	fb 01       	movw	r30, r22
   4:	af 01       	movw	r20, r30
   6:	66 27       	eor	r22, r22
   8:	57 fd       	sbrc	r21, 7
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	60 95       	com	r22
   c:	76 2f       	mov	r23, r22
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  12:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	9a 01       	movw	r18, r20
   c:	cb 01       	movw	r24, r22
   e:	ac 01       	movw	r20, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	66 27       	eor	r22, r22
  12:	57 fd       	sbrc	r21, 7
  14:	60 95       	com	r22
  16:	76 2f       	mov	r23, r22
  18:	c8 01       	movw	r24, r16
  return n;
}
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  1e:	ec 01       	movw	r28, r24
  20:	c8 01       	movw	r24, r16
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  26:	8c 0f       	add	r24, r28
  28:	9d 1f       	adc	r25, r29
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  return n;
}
  1a:	3c 01       	movw	r6, r24
  1c:	6a 01       	movw	r12, r20
  1e:	7b 01       	movw	r14, r22
  20:	92 2e       	mov	r9, r18
  22:	cb 01       	movw	r24, r22
  24:	ba 01       	movw	r22, r20
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	40 e0       	ldi	r20, 0x00	; 0
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  32:	87 ff       	sbrs	r24, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print10printFloatEdh+0x36>
  36:	c3 01       	movw	r24, r6
  38:	6d e2       	ldi	r22, 0x2D	; 45
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  3e:	5c 01       	movw	r10, r24
  40:	f7 fa       	bst	r15, 7
  42:	f0 94       	com	r15
  44:	f7 f8       	bld	r15, 7
  46:	f0 94       	com	r15
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN5Print10printFloatEdh+0x4a>
  4a:	aa 24       	eor	r10, r10
  4c:	bb 24       	eor	r11, r11
  4e:	c0 e0       	ldi	r28, 0x00	; 0
  50:	50 e0       	ldi	r21, 0x00	; 0
  52:	40 e0       	ldi	r20, 0x00	; 0
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	2f e3       	ldi	r18, 0x3F	; 63
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN5Print10printFloatEdh+0x5a>
  5a:	fa 01       	movw	r30, r20
  5c:	b9 01       	movw	r22, r18
  5e:	8f 2f       	mov	r24, r31
  60:	94 2f       	mov	r25, r20
  62:	a7 2f       	mov	r26, r23
  64:	b2 2f       	mov	r27, r18
  66:	bc 01       	movw	r22, r24
  68:	cd 01       	movw	r24, r26
  6a:	20 e0       	ldi	r18, 0x00	; 0
  6c:	30 e0       	ldi	r19, 0x00	; 0
  6e:	40 e2       	ldi	r20, 0x20	; 32
  70:	51 e4       	ldi	r21, 0x41	; 65
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  76:	56 2f       	mov	r21, r22
  78:	47 2f       	mov	r20, r23
  7a:	38 2f       	mov	r19, r24
  7c:	29 2f       	mov	r18, r25
  7e:	cf 5f       	subi	r28, 0xFF	; 255
  80:	c9 15       	cp	r28, r9
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN5Print10printFloatEdh+0x84>
  84:	c7 01       	movw	r24, r14
  86:	b6 01       	movw	r22, r12
  88:	da 01       	movw	r26, r20
  8a:	f9 01       	movw	r30, r18
  8c:	0b 2f       	mov	r16, r27
  8e:	14 2f       	mov	r17, r20
  90:	2f 2f       	mov	r18, r31
  92:	3e 2f       	mov	r19, r30
  94:	a9 01       	movw	r20, r18
  96:	98 01       	movw	r18, r16
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  9c:	d6 2e       	mov	r13, r22
  9e:	e7 2e       	mov	r14, r23
  a0:	f8 2e       	mov	r15, r24
  a2:	19 2f       	mov	r17, r25
  a4:	86 2f       	mov	r24, r22
  a6:	9e 2d       	mov	r25, r14
  a8:	af 2d       	mov	r26, r15
  aa:	b1 2f       	mov	r27, r17
  ac:	bc 01       	movw	r22, r24
  ae:	cd 01       	movw	r24, r26
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  b4:	c6 2e       	mov	r12, r22
  b6:	07 2f       	mov	r16, r23
  b8:	ec 01       	movw	r28, r24
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  be:	9b 01       	movw	r18, r22
  c0:	ac 01       	movw	r20, r24
  c2:	8d 2d       	mov	r24, r13
  c4:	9e 2d       	mov	r25, r14
  c6:	af 2d       	mov	r26, r15
  c8:	b1 2f       	mov	r27, r17
  ca:	bc 01       	movw	r22, r24
  cc:	cd 01       	movw	r24, r26
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  d2:	d6 2e       	mov	r13, r22
  d4:	e7 2e       	mov	r14, r23
  d6:	f8 2e       	mov	r15, r24
  d8:	19 2f       	mov	r17, r25
  da:	c3 01       	movw	r24, r6
  dc:	4c 2d       	mov	r20, r12
  de:	50 2f       	mov	r21, r16
  e0:	be 01       	movw	r22, r28
  e2:	2a e0       	ldi	r18, 0x0A	; 10
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  ea:	ec 01       	movw	r28, r24
  ec:	ca 0d       	add	r28, r10
  ee:	db 1d       	adc	r29, r11
  f0:	99 20       	and	r9, r9
  f2:	01 f4       	brne	.+0      	; 0xf4 <_ZN5Print10printFloatEdh+0xf4>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN5Print10printFloatEdh+0xf6>
  f6:	c3 01       	movw	r24, r6
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 100:	c8 0f       	add	r28, r24
 102:	d9 1f       	adc	r29, r25
 104:	00 c0       	rjmp	.+0      	; 0x106 <_ZN5Print10printFloatEdh+0x106>
 106:	8d 2d       	mov	r24, r13
 108:	9e 2d       	mov	r25, r14
 10a:	af 2d       	mov	r26, r15
 10c:	b1 2f       	mov	r27, r17
 10e:	bc 01       	movw	r22, r24
 110:	cd 01       	movw	r24, r26
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e2       	ldi	r20, 0x20	; 32
 118:	51 e4       	ldi	r21, 0x41	; 65
 11a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 11e:	16 2f       	mov	r17, r22
 120:	07 2f       	mov	r16, r23
 122:	b8 2e       	mov	r11, r24
 124:	a9 2e       	mov	r10, r25
 126:	a8 01       	movw	r20, r16
 128:	95 01       	movw	r18, r10
 12a:	85 2f       	mov	r24, r21
 12c:	94 2f       	mov	r25, r20
 12e:	a3 2f       	mov	r26, r19
 130:	b2 2f       	mov	r27, r18
 132:	bc 01       	movw	r22, r24
 134:	cd 01       	movw	r24, r26
 136:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 13a:	6b 01       	movw	r12, r22
 13c:	7c 01       	movw	r14, r24
 13e:	ee 24       	eor	r14, r14
 140:	d7 fc       	sbrc	r13, 7
 142:	e0 94       	com	r14
 144:	fe 2c       	mov	r15, r14
 146:	c3 01       	movw	r24, r6
 148:	b7 01       	movw	r22, r14
 14a:	a6 01       	movw	r20, r12
 14c:	2a e0       	ldi	r18, 0x0A	; 10
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 154:	c8 0f       	add	r28, r24
 156:	d9 1f       	adc	r29, r25
 158:	c7 01       	movw	r24, r14
 15a:	b6 01       	movw	r22, r12
 15c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 160:	9b 01       	movw	r18, r22
 162:	ac 01       	movw	r20, r24
 164:	f8 01       	movw	r30, r16
 166:	b5 01       	movw	r22, r10
 168:	8f 2f       	mov	r24, r31
 16a:	9e 2f       	mov	r25, r30
 16c:	a7 2f       	mov	r26, r23
 16e:	b6 2f       	mov	r27, r22
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 178:	d6 2e       	mov	r13, r22
 17a:	e7 2e       	mov	r14, r23
 17c:	f8 2e       	mov	r15, r24
 17e:	19 2f       	mov	r17, r25
 180:	9a 94       	dec	r9
 182:	99 20       	and	r9, r9
 184:	01 f0       	breq	.+0      	; 0x186 <_ZN5Print10printFloatEdh+0x186>
 186:	00 c0       	rjmp	.+0      	; 0x188 <_ZN5Print10printFloatEdh+0x188>
 188:	ce 01       	movw	r24, r28
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	df 90       	pop	r13
 198:	cf 90       	pop	r12
 19a:	bf 90       	pop	r11
 19c:	af 90       	pop	r10
 19e:	9f 90       	pop	r9
 1a0:	7f 90       	pop	r7
 1a2:	6f 90       	pop	r6
 1a4:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
   4:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	ec 01       	movw	r28, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c8 01       	movw	r24, r16
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	8c 0f       	add	r24, r28
  18:	9d 1f       	adc	r25, r29
  return n;
}
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000105c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00003098  00000000  00000000  00001090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6Stream9timedReadEv 0000005c  00000000  00000000  00004128  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6Stream9timedPeekEv 0000005c  00000000  00000000  00004184  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6Stream13peekNextDigitEv 00000038  00000000  00000000  000041e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  00004218  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN6Stream9findUntilEPcjS0_j 000000b6  00000000  00000000  00004224  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream9findUntilEPcS0_ 0000003a  00000000  00000000  000042da  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream4findEPc 0000000a  00000000  00000000  00004314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  0000431e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream8parseIntEc 000000da  00000000  00000000  00004334  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream8parseIntEv 00000008  00000000  00000000  0000440e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10parseFloatEc 0000015e  00000000  00000000  00004416  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream10parseFloatEv 00000014  00000000  00000000  00004574  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 00000048  00000000  00000000  00004588  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream14readBytesUntilEcPcj 00000064  00000000  00000000  000045d0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   a:	dc 01       	movw	r26, r24
   c:	cb 01       	movw	r24, r22
   e:	88 87       	std	Y+8, r24	; 0x08
  10:	99 87       	std	Y+9, r25	; 0x09
  12:	aa 87       	std	Y+10, r26	; 0x0a
  14:	bb 87       	std	Y+11, r27	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  if (length < 1) return 0;
  1a:	06 80       	ldd	r0, Z+6	; 0x06
  1c:	f7 81       	ldd	r31, Z+7	; 0x07
  1e:	e0 2d       	mov	r30, r0
  20:	ce 01       	movw	r24, r28
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	19 95       	eicall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedReadEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2c:	dc 01       	movw	r26, r24
  2e:	cb 01       	movw	r24, r22
    if (c < 0 || c == terminator) break;
  30:	48 85       	ldd	r20, Y+8	; 0x08
  32:	59 85       	ldd	r21, Y+9	; 0x09
  34:	6a 85       	ldd	r22, Y+10	; 0x0a
  36:	7b 85       	ldd	r23, Y+11	; 0x0b
  38:	84 1b       	sub	r24, r20
    *buffer++ = (char)c;
  3a:	95 0b       	sbc	r25, r21
  3c:	a6 0b       	sbc	r26, r22
  3e:	b7 0b       	sbc	r27, r23
    index++;
  40:	4c 81       	ldd	r20, Y+4	; 0x04
  42:	5d 81       	ldd	r21, Y+5	; 0x05
  44:	6e 81       	ldd	r22, Y+6	; 0x06

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	7f 81       	ldd	r23, Y+7	; 0x07
  48:	84 17       	cp	r24, r20
  4a:	95 07       	cpc	r25, r21
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	a6 07       	cpc	r26, r22
  4e:	b7 07       	cpc	r27, r23
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream9timedReadEv+0x52>
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	9f ef       	ldi	r25, 0xFF	; 255
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   a:	dc 01       	movw	r26, r24
   c:	cb 01       	movw	r24, r22
   e:	88 87       	std	Y+8, r24	; 0x08
  10:	99 87       	std	Y+9, r25	; 0x09
  12:	aa 87       	std	Y+10, r26	; 0x0a
  14:	bb 87       	std	Y+11, r27	; 0x0b
  16:	e8 81       	ld	r30, Y
  18:	f9 81       	ldd	r31, Y+1	; 0x01
  if (length < 1) return 0;
  1a:	00 84       	ldd	r0, Z+8	; 0x08
  1c:	f1 85       	ldd	r31, Z+9	; 0x09
  1e:	e0 2d       	mov	r30, r0
  20:	ce 01       	movw	r24, r28
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	19 95       	eicall
  24:	97 ff       	sbrs	r25, 7
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6Stream9timedPeekEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2c:	dc 01       	movw	r26, r24
  2e:	cb 01       	movw	r24, r22
    if (c < 0 || c == terminator) break;
  30:	48 85       	ldd	r20, Y+8	; 0x08
  32:	59 85       	ldd	r21, Y+9	; 0x09
  34:	6a 85       	ldd	r22, Y+10	; 0x0a
  36:	7b 85       	ldd	r23, Y+11	; 0x0b
  38:	84 1b       	sub	r24, r20
    *buffer++ = (char)c;
  3a:	95 0b       	sbc	r25, r21
  3c:	a6 0b       	sbc	r26, r22
  3e:	b7 0b       	sbc	r27, r23
    index++;
  40:	4c 81       	ldd	r20, Y+4	; 0x04
  42:	5d 81       	ldd	r21, Y+5	; 0x05
  44:	6e 81       	ldd	r22, Y+6	; 0x06

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	7f 81       	ldd	r23, Y+7	; 0x07
  48:	84 17       	cp	r24, r20
  4a:	95 07       	cpc	r25, r21
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	a6 07       	cpc	r26, r22
  4e:	b7 07       	cpc	r27, r23
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream9timedPeekEv+0x52>
  52:	8f ef       	ldi	r24, 0xFF	; 255
  54:	9f ef       	ldi	r25, 0xFF	; 255
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	97 fd       	sbrc	r25, 7
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6Stream13peekNextDigitEv+0x10>
  10:	8d 32       	cpi	r24, 0x2D	; 45
  12:	91 05       	cpc	r25, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6Stream13peekNextDigitEv+0x16>
  16:	9c 01       	movw	r18, r24
  18:	20 53       	subi	r18, 0x30	; 48
  if (length < 1) return 0;
  1a:	30 40       	sbci	r19, 0x00	; 0
  1c:	2a 30       	cpi	r18, 0x0A	; 10
  1e:	31 05       	cpc	r19, r1
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZN6Stream13peekNextDigitEv+0x22>
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	06 80       	ldd	r0, Z+6	; 0x06
  28:	f7 81       	ldd	r31, Z+7	; 0x07
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	e0 2d       	mov	r30, r0
  2c:	ce 01       	movw	r24, r28
  2e:	19 95       	eicall
    if (c < 0 || c == terminator) break;
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6Stream13peekNextDigitEv+0x32>
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  if (length < 1) return 0;
  1a:	df 93       	push	r29
  1c:	3c 01       	movw	r6, r24
  1e:	6b 01       	movw	r12, r22
  20:	4a 01       	movw	r8, r20
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	59 01       	movw	r10, r18
  24:	78 01       	movw	r14, r16
  26:	fb 01       	movw	r30, r22
  28:	80 81       	ld	r24, Z
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6Stream9findUntilEPcjS0_j+0x2e>
  2e:	c0 e0       	ldi	r28, 0x00	; 0
    if (c < 0 || c == terminator) break;
  30:	d0 e0       	ldi	r29, 0x00	; 0
  32:	00 e0       	ldi	r16, 0x00	; 0
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6Stream9findUntilEPcjS0_j+0x38>
  38:	f6 01       	movw	r30, r12
    *buffer++ = (char)c;
  3a:	e0 0f       	add	r30, r16
  3c:	f1 1f       	adc	r31, r17
  3e:	80 81       	ld	r24, Z
    index++;
  40:	99 27       	eor	r25, r25
  42:	87 fd       	sbrc	r24, 7
  44:	90 95       	com	r25

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	28 17       	cp	r18, r24
  48:	39 07       	cpc	r19, r25
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6Stream9findUntilEPcjS0_j+0x4c>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	0f 5f       	subi	r16, 0xFF	; 255
  4e:	1f 4f       	sbci	r17, 0xFF	; 255
  50:	08 15       	cp	r16, r8
  52:	19 05       	cpc	r17, r9
  54:	00 f0       	brcs	.+0      	; 0x56 <_ZN6Stream9findUntilEPcjS0_j+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6Stream9findUntilEPcjS0_j+0x58>
  58:	00 e0       	ldi	r16, 0x00	; 0
  5a:	10 e0       	ldi	r17, 0x00	; 0
  5c:	e1 14       	cp	r14, r1
  5e:	f1 04       	cpc	r15, r1
  60:	01 f0       	breq	.+0      	; 0x62 <_ZN6Stream9findUntilEPcjS0_j+0x62>
  62:	f5 01       	movw	r30, r10
  64:	ec 0f       	add	r30, r28
  66:	fd 1f       	adc	r31, r29
  68:	80 81       	ld	r24, Z
  6a:	99 27       	eor	r25, r25
  6c:	87 fd       	sbrc	r24, 7
  6e:	90 95       	com	r25
  70:	28 17       	cp	r18, r24
  72:	39 07       	cpc	r19, r25
  74:	01 f4       	brne	.+0      	; 0x76 <_ZN6Stream9findUntilEPcjS0_j+0x76>
  76:	21 96       	adiw	r28, 0x01	; 1
  78:	ce 15       	cp	r28, r14
  7a:	df 05       	cpc	r29, r15
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN6Stream9findUntilEPcjS0_j+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN6Stream9findUntilEPcjS0_j+0x80>
  80:	c0 e0       	ldi	r28, 0x00	; 0
  82:	d0 e0       	ldi	r29, 0x00	; 0
  84:	c3 01       	movw	r24, r6
  86:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  8a:	9c 01       	movw	r18, r24
  8c:	18 16       	cp	r1, r24
  8e:	19 06       	cpc	r1, r25
  90:	04 f0       	brlt	.+0      	; 0x92 <_ZN6Stream9findUntilEPcjS0_j+0x92>
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN6Stream9findUntilEPcjS0_j+0x96>
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	ff 90       	pop	r15
  a2:	ef 90       	pop	r14
  a4:	df 90       	pop	r13
  a6:	cf 90       	pop	r12
  a8:	bf 90       	pop	r11
  aa:	af 90       	pop	r10
  ac:	9f 90       	pop	r9
  ae:	8f 90       	pop	r8
  b0:	7f 90       	pop	r7
  b2:	6f 90       	pop	r6
  b4:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	9a 01       	movw	r18, r20
   a:	db 01       	movw	r26, r22
   c:	0d 90       	ld	r0, X+
   e:	00 20       	and	r0, r0
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6Stream9findUntilEPcS0_+0x12>
  12:	11 97       	sbiw	r26, 0x01	; 1
  14:	a6 1b       	sub	r26, r22
  16:	b7 0b       	sbc	r27, r23
  18:	ea 01       	movw	r28, r20
  if (length < 1) return 0;
  1a:	09 90       	ld	r0, Y+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  20:	8e 01       	movw	r16, r28
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	01 50       	subi	r16, 0x01	; 1
  24:	10 40       	sbci	r17, 0x00	; 0
  26:	04 1b       	sub	r16, r20
  28:	15 0b       	sbc	r17, r21
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	ad 01       	movw	r20, r26
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
    if (c < 0 || c == terminator) break;
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  38:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
   8:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	00 e0       	ldi	r16, 0x00	; 0
   a:	10 e0       	ldi	r17, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
  10:	1f 91       	pop	r17
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	8c 01       	movw	r16, r24
  18:	86 2e       	mov	r8, r22
  if (length < 1) return 0;
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	ec 01       	movw	r28, r24
  20:	cc 24       	eor	r12, r12
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	dd 24       	eor	r13, r13
  24:	76 01       	movw	r14, r12
  26:	97 fd       	sbrc	r25, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream8parseIntEc+0x2a>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	bb 24       	eor	r11, r11
  2c:	99 24       	eor	r9, r9
  2e:	87 fc       	sbrc	r8, 7
    if (c < 0 || c == terminator) break;
  30:	90 94       	com	r9
  32:	c8 15       	cp	r28, r8
  34:	d9 05       	cpc	r29, r9
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN6Stream8parseIntEc+0x38>
  38:	cd 32       	cpi	r28, 0x2D	; 45
    *buffer++ = (char)c;
  3a:	d1 05       	cpc	r29, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6Stream8parseIntEc+0x3e>
  3e:	ce 01       	movw	r24, r28
    index++;
  40:	c0 97       	sbiw	r24, 0x30	; 48
  42:	8a 30       	cpi	r24, 0x0A	; 10
  44:	91 05       	cpc	r25, r1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZN6Stream8parseIntEc+0x48>
  48:	c7 01       	movw	r24, r14
  4a:	b6 01       	movw	r22, r12
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	2a e0       	ldi	r18, 0x0A	; 10
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	50 e0       	ldi	r21, 0x00	; 0
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  58:	6b 01       	movw	r12, r22
  5a:	7c 01       	movw	r14, r24
  5c:	ce 01       	movw	r24, r28
  5e:	aa 27       	eor	r26, r26
  60:	97 fd       	sbrc	r25, 7
  62:	a0 95       	com	r26
  64:	ba 2f       	mov	r27, r26
  66:	c8 0e       	add	r12, r24
  68:	d9 1e       	adc	r13, r25
  6a:	ea 1e       	adc	r14, r26
  6c:	fb 1e       	adc	r15, r27
  6e:	80 ed       	ldi	r24, 0xD0	; 208
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	af ef       	ldi	r26, 0xFF	; 255
  74:	bf ef       	ldi	r27, 0xFF	; 255
  76:	c8 0e       	add	r12, r24
  78:	d9 1e       	adc	r13, r25
  7a:	ea 1e       	adc	r14, r26
  7c:	fb 1e       	adc	r15, r27
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN6Stream8parseIntEc+0x80>
  80:	bb 24       	eor	r11, r11
  82:	b3 94       	inc	r11
  84:	d8 01       	movw	r26, r16
  86:	ed 91       	ld	r30, X+
  88:	fc 91       	ld	r31, X
  8a:	06 80       	ldd	r0, Z+6	; 0x06
  8c:	f7 81       	ldd	r31, Z+7	; 0x07
  8e:	e0 2d       	mov	r30, r0
  90:	c8 01       	movw	r24, r16
  92:	19 95       	eicall
  94:	c8 01       	movw	r24, r16
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  9a:	ec 01       	movw	r28, r24
  9c:	c0 97       	sbiw	r24, 0x30	; 48
  9e:	8a 30       	cpi	r24, 0x0A	; 10
  a0:	91 05       	cpc	r25, r1
  a2:	00 f0       	brcs	.+0      	; 0xa4 <_ZN6Stream8parseIntEc+0xa4>
  a4:	c8 15       	cp	r28, r8
  a6:	d9 05       	cpc	r29, r9
  a8:	01 f0       	breq	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	bb 20       	and	r11, r11
  ac:	01 f0       	breq	.+0      	; 0xae <_ZN6Stream8parseIntEc+0xae>
  ae:	f0 94       	com	r15
  b0:	e0 94       	com	r14
  b2:	d0 94       	com	r13
  b4:	c0 94       	com	r12
  b6:	c1 1c       	adc	r12, r1
  b8:	d1 1c       	adc	r13, r1
  ba:	e1 1c       	adc	r14, r1
  bc:	f1 1c       	adc	r15, r1
  be:	b6 01       	movw	r22, r12
  c0:	c7 01       	movw	r24, r14
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	df 90       	pop	r13
  d0:	cf 90       	pop	r12
  d2:	bf 90       	pop	r11
  d4:	9f 90       	pop	r9
  d6:	8f 90       	pop	r8
  d8:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  if (length < 1) return 0;
  1a:	df 93       	push	r29
  1c:	4c 01       	movw	r8, r24
  1e:	76 2e       	mov	r7, r22
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  24:	c8 2f       	mov	r28, r24
  26:	87 fd       	sbrc	r24, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream10parseFloatEc+0x2a>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	00 e0       	ldi	r16, 0x00	; 0
  2e:	80 e8       	ldi	r24, 0x80	; 128
    if (c < 0 || c == terminator) break;
  30:	b8 2e       	mov	r11, r24
  32:	9f e3       	ldi	r25, 0x3F	; 63
  34:	a9 2e       	mov	r10, r25
  36:	cc 24       	eor	r12, r12
  38:	dd 24       	eor	r13, r13
    *buffer++ = (char)c;
  3a:	76 01       	movw	r14, r12
  3c:	d0 e0       	ldi	r29, 0x00	; 0
  3e:	66 24       	eor	r6, r6
    index++;
  40:	c7 15       	cp	r28, r7
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream10parseFloatEc+0x44>
  44:	cd 32       	cpi	r28, 0x2D	; 45

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream10parseFloatEc+0x48>
  48:	ce 32       	cpi	r28, 0x2E	; 46
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN6Stream10parseFloatEc+0x4c>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	8c 2f       	mov	r24, r28
  4e:	80 53       	subi	r24, 0x30	; 48
  50:	8a 30       	cpi	r24, 0x0A	; 10
  52:	00 f4       	brcc	.+0      	; 0x54 <_ZN6Stream10parseFloatEc+0x54>
  54:	c7 01       	movw	r24, r14
  56:	b6 01       	movw	r22, r12
  58:	2a e0       	ldi	r18, 0x0A	; 10
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	50 e0       	ldi	r21, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  64:	6b 01       	movw	r12, r22
  66:	7c 01       	movw	r14, r24
  68:	8c 2f       	mov	r24, r28
  6a:	99 27       	eor	r25, r25
  6c:	87 fd       	sbrc	r24, 7
  6e:	90 95       	com	r25
  70:	a9 2f       	mov	r26, r25
  72:	b9 2f       	mov	r27, r25
  74:	c8 0e       	add	r12, r24
  76:	d9 1e       	adc	r13, r25
  78:	ea 1e       	adc	r14, r26
  7a:	fb 1e       	adc	r15, r27
  7c:	80 ed       	ldi	r24, 0xD0	; 208
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	bf ef       	ldi	r27, 0xFF	; 255
  84:	c8 0e       	add	r12, r24
  86:	d9 1e       	adc	r13, r25
  88:	ea 1e       	adc	r14, r26
  8a:	fb 1e       	adc	r15, r27
  8c:	dd 23       	and	r29, r29
  8e:	01 f0       	breq	.+0      	; 0x90 <_ZN6Stream10parseFloatEc+0x90>
  90:	a8 01       	movw	r20, r16
  92:	95 01       	movw	r18, r10
  94:	85 2f       	mov	r24, r21
  96:	90 2f       	mov	r25, r16
  98:	a3 2f       	mov	r26, r19
  9a:	ba 2d       	mov	r27, r10
  9c:	bc 01       	movw	r22, r24
  9e:	cd 01       	movw	r24, r26
  a0:	2d ec       	ldi	r18, 0xCD	; 205
  a2:	3c ec       	ldi	r19, 0xCC	; 204
  a4:	4c ec       	ldi	r20, 0xCC	; 204
  a6:	5d e3       	ldi	r21, 0x3D	; 61
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  ac:	16 2f       	mov	r17, r22
  ae:	07 2f       	mov	r16, r23
  b0:	b8 2e       	mov	r11, r24
  b2:	a9 2e       	mov	r10, r25
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_ZN6Stream10parseFloatEc+0xb6>
  b6:	66 24       	eor	r6, r6
  b8:	63 94       	inc	r6
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN6Stream10parseFloatEc+0xbc>
  bc:	d1 e0       	ldi	r29, 0x01	; 1
  be:	d4 01       	movw	r26, r8
  c0:	ed 91       	ld	r30, X+
  c2:	fc 91       	ld	r31, X
  c4:	06 80       	ldd	r0, Z+6	; 0x06
  c6:	f7 81       	ldd	r31, Z+7	; 0x07
  c8:	e0 2d       	mov	r30, r0
  ca:	c4 01       	movw	r24, r8
  cc:	19 95       	eicall
  ce:	c4 01       	movw	r24, r8
  d0:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  d4:	c8 2f       	mov	r28, r24
  d6:	98 2f       	mov	r25, r24
  d8:	90 53       	subi	r25, 0x30	; 48
  da:	9a 30       	cpi	r25, 0x0A	; 10
  dc:	00 f4       	brcc	.+0      	; 0xde <_ZN6Stream10parseFloatEc+0xde>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_ZN6Stream10parseFloatEc+0xe0>
  e0:	8e 32       	cpi	r24, 0x2E	; 46
  e2:	01 f4       	brne	.+0      	; 0xe4 <_ZN6Stream10parseFloatEc+0xe4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN6Stream10parseFloatEc+0xe6>
  e6:	87 15       	cp	r24, r7
  e8:	01 f4       	brne	.+0      	; 0xea <_ZN6Stream10parseFloatEc+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	66 20       	and	r6, r6
  ee:	01 f0       	breq	.+0      	; 0xf0 <_ZN6Stream10parseFloatEc+0xf0>
  f0:	f0 94       	com	r15
  f2:	e0 94       	com	r14
  f4:	d0 94       	com	r13
  f6:	c0 94       	com	r12
  f8:	c1 1c       	adc	r12, r1
  fa:	d1 1c       	adc	r13, r1
  fc:	e1 1c       	adc	r14, r1
  fe:	f1 1c       	adc	r15, r1
 100:	c7 01       	movw	r24, r14
 102:	b6 01       	movw	r22, r12
 104:	dd 23       	and	r29, r29
 106:	01 f0       	breq	.+0      	; 0x108 <_ZN6Stream10parseFloatEc+0x108>
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 10c:	f8 01       	movw	r30, r16
 10e:	a5 01       	movw	r20, r10
 110:	0f 2f       	mov	r16, r31
 112:	1e 2f       	mov	r17, r30
 114:	25 2f       	mov	r18, r21
 116:	3a 2d       	mov	r19, r10
 118:	a9 01       	movw	r20, r18
 11a:	98 01       	movw	r18, r16
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZN6Stream10parseFloatEc+0x122>
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN6Stream10parseFloatEc+0x128>
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	70 e0       	ldi	r23, 0x00	; 0
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	38 2f       	mov	r19, r24
 132:	29 2f       	mov	r18, r25
 134:	86 2f       	mov	r24, r22
 136:	97 2f       	mov	r25, r23
 138:	a3 2f       	mov	r26, r19
 13a:	b2 2f       	mov	r27, r18
 13c:	bc 01       	movw	r22, r24
 13e:	cd 01       	movw	r24, r26
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	df 90       	pop	r13
 14e:	cf 90       	pop	r12
 150:	bf 90       	pop	r11
 152:	af 90       	pop	r10
 154:	9f 90       	pop	r9
 156:	8f 90       	pop	r8
 158:	7f 90       	pop	r7
 15a:	6f 90       	pop	r6
 15c:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
   6:	46 2f       	mov	r20, r22
   8:	57 2f       	mov	r21, r23
   a:	68 2f       	mov	r22, r24
   c:	79 2f       	mov	r23, r25
   e:	cb 01       	movw	r24, r22
  10:	ba 01       	movw	r22, r20
  12:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	8b 01       	movw	r16, r22
  14:	7a 01       	movw	r14, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  if (length < 1) return 0;
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
  26:	f8 01       	movw	r30, r16
  28:	81 93       	st	Z+, r24
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	8f 01       	movw	r16, r30
  2c:	21 96       	adiw	r28, 0x01	; 1
  2e:	ce 15       	cp	r28, r14
    if (c < 0 || c == terminator) break;
  30:	df 05       	cpc	r29, r15
  32:	01 f4       	brne	.+0      	; 0x34 <_ZN6Stream9readBytesEPcj+0x34>
  34:	ce 01       	movw	r24, r28
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
    *buffer++ = (char)c;
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
    index++;
  40:	ef 90       	pop	r14
  42:	df 90       	pop	r13
  44:	cf 90       	pop	r12

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:
// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	6a 01       	movw	r12, r20
  18:	e9 01       	movw	r28, r18
  if (length < 1) return 0;
  1a:	ee 24       	eor	r14, r14
  1c:	ff 24       	eor	r15, r15
  1e:	20 97       	sbiw	r28, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6Stream14readBytesUntilEcPcj+0x22>
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  22:	06 2f       	mov	r16, r22
  24:	11 27       	eor	r17, r17
  26:	07 fd       	sbrc	r16, 7
  28:	10 95       	com	r17
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  2a:	c5 01       	movw	r24, r10
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
    if (c < 0 || c == terminator) break;
  30:	97 fd       	sbrc	r25, 7
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream14readBytesUntilEcPcj+0x34>
  34:	80 17       	cp	r24, r16
  36:	91 07       	cpc	r25, r17
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN6Stream14readBytesUntilEcPcj+0x3a>
    *buffer++ = (char)c;
  3a:	f6 01       	movw	r30, r12
  3c:	81 93       	st	Z+, r24
  3e:	6f 01       	movw	r12, r30
    index++;
  40:	08 94       	sec
  42:	e1 1c       	adc	r14, r1
  44:	f1 1c       	adc	r15, r1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  46:	ec 16       	cp	r14, r28
  48:	fd 06       	cpc	r15, r29
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6Stream14readBytesUntilEcPcj+0x4c>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  4c:	c7 01       	movw	r24, r14
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	df 90       	pop	r13
  5c:	cf 90       	pop	r12
  5e:	bf 90       	pop	r11
  60:	af 90       	pop	r10
  62:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000f90  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002fff  00000000  00000000  00000fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z4tonehjm 000005e0  00000000  00000000  00003fc3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z12disableTimerh 00000066  00000000  00000000  000045a3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002c  00000000  00000000  00004609  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_13 000000c0  00000000  00000000  00004635  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .bss.timer5_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 10 .bss.timer5_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 11 .bss.timer5_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 12 .bss.timer4_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 13 .bss.timer4_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 14 .bss.timer4_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 15 .bss.timer3_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 16 .bss.timer3_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 17 .bss.timer3_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 18 .bss.timer2_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 19 .bss.timer2_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 20 .bss.timer2_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 21 .bss.timer1_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 22 .bss.timer1_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 23 .bss.timer1_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 24 .bss.timer0_pin_mask 00000001  00000000  00000000  000046f5  2**0
                  ALLOC
 25 .bss.timer0_pin_port 00000002  00000000  00000000  000046f5  2**0
                  ALLOC
 26 .bss.timer0_toggle_count 00000004  00000000  00000000  000046f5  2**0
                  ALLOC
 27 .data._ZL9tone_pins 00000001  00000000  00000000  000046f5  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 28 .progmem.data 00000001  00000000  00000000  000046f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
   0:	3f 92       	push	r3
   2:	4f 92       	push	r4
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	0f 92       	push	r0

  if (timer2_toggle_count != 0)
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	a8 2f       	mov	r26, r24
  2c:	8b 01       	movw	r16, r22
  2e:	29 83       	std	Y+1, r18	; 0x01
  30:	3a 83       	std	Y+2, r19	; 0x02
  32:	4b 83       	std	Y+3, r20	; 0x03
  34:	5c 83       	std	Y+4, r21	; 0x04
  36:	80 91 00 00 	lds	r24, 0x0000
  3a:	8a 17       	cp	r24, r26
  3c:	01 f0       	breq	.+0      	; 0x3e <_Z4tonehjm+0x3e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	8f 3f       	cpi	r24, 0xFF	; 255
  40:	01 f0       	breq	.+0      	; 0x42 <_Z4tonehjm+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_Z4tonehjm+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z4tonehjm+0x46>
  46:	e0 e0       	ldi	r30, 0x00	; 0
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	34 90       	lpm	r3, Z
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_Z4tonehjm+0x4e>
  4e:	a0 93 00 00 	sts	0x0000, r26

    if (timer2_toggle_count > 0)
  52:	e0 e0       	ldi	r30, 0x00	; 0
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	34 90       	lpm	r3, Z
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	38 16       	cp	r3, r24
  5c:	01 f4       	brne	.+0      	; 0x5e <_Z4tonehjm+0x5e>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_Z4tonehjm+0x60>
  60:	92 e0       	ldi	r25, 0x02	; 2
  62:	39 16       	cp	r3, r25
  64:	01 f4       	brne	.+0      	; 0x66 <_Z4tonehjm+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <_Z4tonehjm+0x68>
  68:	93 15       	cp	r25, r3
      timer2_toggle_count--;
  6a:	04 f0       	brlt	.+0      	; 0x6c <_Z4tonehjm+0x6c>
  6c:	33 20       	and	r3, r3
  6e:	01 f0       	breq	.+0      	; 0x70 <_Z4tonehjm+0x70>
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	3b 16       	cp	r3, r27
  74:	01 f0       	breq	.+0      	; 0x76 <_Z4tonehjm+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_Z4tonehjm+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <_Z4tonehjm+0x7a>
  7a:	e4 e0       	ldi	r30, 0x04	; 4
  7c:	3e 16       	cp	r3, r30
  7e:	01 f4       	brne	.+0      	; 0x80 <_Z4tonehjm+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <_Z4tonehjm+0x82>
  82:	3e 16       	cp	r3, r30
  84:	04 f4       	brge	.+0      	; 0x86 <_Z4tonehjm+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_Z4tonehjm+0x88>
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	3f 16       	cp	r3, r31
  8c:	01 f0       	breq	.+0      	; 0x8e <_Z4tonehjm+0x8e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z4tonehjm+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_Z4tonehjm+0x92>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  92:	14 bc       	out	0x24, r1	; 36
  94:	15 bc       	out	0x25, r1	; 37
  96:	84 b5       	in	r24, 0x24	; 36
  98:	82 60       	ori	r24, 0x02	; 2
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  9a:	84 bd       	out	0x24, r24	; 36
  9c:	85 b5       	in	r24, 0x25	; 37
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	85 bd       	out	0x25, r24	; 37
  a2:	2a 2f       	mov	r18, r26
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	f9 01       	movw	r30, r18
  a8:	e0 50       	subi	r30, 0x00	; 0
  aa:	f0 40       	sbci	r31, 0x00	; 0
  ac:	e4 91       	lpm	r30, Z
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	ee 0f       	add	r30, r30
  b2:	ff 1f       	adc	r31, r31
  b4:	e0 50       	subi	r30, 0x00	; 0
  b6:	f0 40       	sbci	r31, 0x00	; 0
  b8:	85 91       	lpm	r24, Z+
  ba:	94 91       	lpm	r25, Z
  bc:	80 93 00 00 	sts	0x0000, r24
  c0:	90 93 00 00 	sts	0x0000, r25
  c4:	20 50       	subi	r18, 0x00	; 0
  c6:	30 40       	sbci	r19, 0x00	; 0
  c8:	f9 01       	movw	r30, r18
  ca:	24 91       	lpm	r18, Z
  cc:	20 93 00 00 	sts	0x0000, r18
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_Z4tonehjm+0xd2>
  d2:	10 92 80 00 	sts	0x0080, r1
  d6:	10 92 81 00 	sts	0x0081, r1
  da:	80 91 81 00 	lds	r24, 0x0081
  de:	88 60       	ori	r24, 0x08	; 8
  e0:	80 93 81 00 	sts	0x0081, r24
  e4:	80 91 81 00 	lds	r24, 0x0081
  e8:	81 60       	ori	r24, 0x01	; 1
  ea:	80 93 81 00 	sts	0x0081, r24
  ee:	2a 2f       	mov	r18, r26
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	f9 01       	movw	r30, r18
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	f0 40       	sbci	r31, 0x00	; 0
  f8:	e4 91       	lpm	r30, Z
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	ee 0f       	add	r30, r30
  fe:	ff 1f       	adc	r31, r31
 100:	e0 50       	subi	r30, 0x00	; 0
 102:	f0 40       	sbci	r31, 0x00	; 0
 104:	85 91       	lpm	r24, Z+
 106:	94 91       	lpm	r25, Z
 108:	80 93 00 00 	sts	0x0000, r24
 10c:	90 93 00 00 	sts	0x0000, r25
 110:	20 50       	subi	r18, 0x00	; 0
 112:	30 40       	sbci	r19, 0x00	; 0
 114:	f9 01       	movw	r30, r18
 116:	24 91       	lpm	r18, Z
 118:	20 93 00 00 	sts	0x0000, r18
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_Z4tonehjm+0x11e>
 11e:	10 92 b0 00 	sts	0x00B0, r1
 122:	10 92 b1 00 	sts	0x00B1, r1
 126:	80 91 b0 00 	lds	r24, 0x00B0
 12a:	82 60       	ori	r24, 0x02	; 2
 12c:	80 93 b0 00 	sts	0x00B0, r24
 130:	80 91 b1 00 	lds	r24, 0x00B1
 134:	81 60       	ori	r24, 0x01	; 1
 136:	80 93 b1 00 	sts	0x00B1, r24
 13a:	2a 2f       	mov	r18, r26
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	e0 50       	subi	r30, 0x00	; 0
 142:	f0 40       	sbci	r31, 0x00	; 0
 144:	e4 91       	lpm	r30, Z
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e0 50       	subi	r30, 0x00	; 0
 14e:	f0 40       	sbci	r31, 0x00	; 0
 150:	85 91       	lpm	r24, Z+
 152:	94 91       	lpm	r25, Z
 154:	80 93 00 00 	sts	0x0000, r24
 158:	90 93 00 00 	sts	0x0000, r25
 15c:	20 50       	subi	r18, 0x00	; 0
 15e:	30 40       	sbci	r19, 0x00	; 0
 160:	f9 01       	movw	r30, r18
 162:	24 91       	lpm	r18, Z
 164:	20 93 00 00 	sts	0x0000, r18
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z4tonehjm+0x16a>
 16a:	10 92 90 00 	sts	0x0090, r1
 16e:	10 92 91 00 	sts	0x0091, r1
 172:	80 91 91 00 	lds	r24, 0x0091
 176:	88 60       	ori	r24, 0x08	; 8
 178:	80 93 91 00 	sts	0x0091, r24
 17c:	80 91 91 00 	lds	r24, 0x0091
 180:	81 60       	ori	r24, 0x01	; 1
 182:	80 93 91 00 	sts	0x0091, r24
 186:	2a 2f       	mov	r18, r26
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	f9 01       	movw	r30, r18
 18c:	e0 50       	subi	r30, 0x00	; 0
 18e:	f0 40       	sbci	r31, 0x00	; 0
 190:	e4 91       	lpm	r30, Z
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e0 50       	subi	r30, 0x00	; 0
 19a:	f0 40       	sbci	r31, 0x00	; 0
 19c:	85 91       	lpm	r24, Z+
 19e:	94 91       	lpm	r25, Z
 1a0:	80 93 00 00 	sts	0x0000, r24
 1a4:	90 93 00 00 	sts	0x0000, r25
 1a8:	20 50       	subi	r18, 0x00	; 0
 1aa:	30 40       	sbci	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	24 91       	lpm	r18, Z
 1b0:	20 93 00 00 	sts	0x0000, r18
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <_Z4tonehjm+0x1b6>
 1b6:	10 92 a0 00 	sts	0x00A0, r1
 1ba:	10 92 a1 00 	sts	0x00A1, r1
 1be:	80 91 a1 00 	lds	r24, 0x00A1
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	80 93 a1 00 	sts	0x00A1, r24
 1c8:	80 91 a1 00 	lds	r24, 0x00A1
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	80 93 a1 00 	sts	0x00A1, r24
 1d2:	2a 2f       	mov	r18, r26
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	f9 01       	movw	r30, r18
 1d8:	e0 50       	subi	r30, 0x00	; 0
 1da:	f0 40       	sbci	r31, 0x00	; 0
 1dc:	e4 91       	lpm	r30, Z
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	ee 0f       	add	r30, r30
 1e2:	ff 1f       	adc	r31, r31
 1e4:	e0 50       	subi	r30, 0x00	; 0
 1e6:	f0 40       	sbci	r31, 0x00	; 0
 1e8:	85 91       	lpm	r24, Z+
 1ea:	94 91       	lpm	r25, Z
 1ec:	80 93 00 00 	sts	0x0000, r24
 1f0:	90 93 00 00 	sts	0x0000, r25
 1f4:	20 50       	subi	r18, 0x00	; 0
 1f6:	30 40       	sbci	r19, 0x00	; 0
 1f8:	f9 01       	movw	r30, r18
 1fa:	24 91       	lpm	r18, Z
 1fc:	20 93 00 00 	sts	0x0000, r18
 200:	00 c0       	rjmp	.+0      	; 0x202 <_Z4tonehjm+0x202>
 202:	10 92 20 01 	sts	0x0120, r1
 206:	10 92 21 01 	sts	0x0121, r1
 20a:	80 91 21 01 	lds	r24, 0x0121
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	80 93 21 01 	sts	0x0121, r24
 214:	80 91 21 01 	lds	r24, 0x0121
 218:	81 60       	ori	r24, 0x01	; 1
 21a:	80 93 21 01 	sts	0x0121, r24
 21e:	2a 2f       	mov	r18, r26
 220:	30 e0       	ldi	r19, 0x00	; 0
 222:	f9 01       	movw	r30, r18
 224:	e0 50       	subi	r30, 0x00	; 0
 226:	f0 40       	sbci	r31, 0x00	; 0
 228:	e4 91       	lpm	r30, Z
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	ee 0f       	add	r30, r30
 22e:	ff 1f       	adc	r31, r31
 230:	e0 50       	subi	r30, 0x00	; 0
 232:	f0 40       	sbci	r31, 0x00	; 0
 234:	85 91       	lpm	r24, Z+
 236:	94 91       	lpm	r25, Z
 238:	80 93 00 00 	sts	0x0000, r24
 23c:	90 93 00 00 	sts	0x0000, r25
 240:	20 50       	subi	r18, 0x00	; 0
 242:	30 40       	sbci	r19, 0x00	; 0
 244:	f9 01       	movw	r30, r18
 246:	24 91       	lpm	r18, Z
 248:	20 93 00 00 	sts	0x0000, r18
 24c:	00 c0       	rjmp	.+0      	; 0x24e <_Z4tonehjm+0x24e>
 24e:	37 fc       	sbrc	r3, 7
 250:	00 c0       	rjmp	.+0      	; 0x252 <_Z4tonehjm+0x252>
 252:	8a 2f       	mov	r24, r26
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 25a:	48 01       	movw	r8, r16
 25c:	aa 24       	eor	r10, r10
 25e:	bb 24       	eor	r11, r11
 260:	60 e0       	ldi	r22, 0x00	; 0
 262:	72 e1       	ldi	r23, 0x12	; 18
 264:	8a e7       	ldi	r24, 0x7A	; 122
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	a5 01       	movw	r20, r10
 26a:	94 01       	movw	r18, r8
 26c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 270:	33 20       	and	r3, r3
 272:	01 f0       	breq	.+0      	; 0x274 <_Z4tonehjm+0x274>
 274:	f2 e0       	ldi	r31, 0x02	; 2
 276:	3f 16       	cp	r3, r31
 278:	01 f0       	breq	.+0      	; 0x27a <_Z4tonehjm+0x27a>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <_Z4tonehjm+0x27c>
 27c:	29 01       	movw	r4, r18
 27e:	3a 01       	movw	r6, r20
 280:	69 01       	movw	r12, r18
 282:	7a 01       	movw	r14, r20
 284:	08 94       	sec
 286:	c1 08       	sbc	r12, r1
 288:	d1 08       	sbc	r13, r1
 28a:	e1 08       	sbc	r14, r1
 28c:	f1 08       	sbc	r15, r1
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	c8 16       	cp	r12, r24
 292:	d1 04       	cpc	r13, r1
 294:	e1 04       	cpc	r14, r1
 296:	f1 04       	cpc	r15, r1
 298:	01 f0       	breq	.+0      	; 0x29a <_Z4tonehjm+0x29a>
 29a:	00 f4       	brcc	.+0      	; 0x29c <_Z4tonehjm+0x29c>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <_Z4tonehjm+0x29e>
 29e:	60 e4       	ldi	r22, 0x40	; 64
 2a0:	72 e4       	ldi	r23, 0x42	; 66
 2a2:	8f e0       	ldi	r24, 0x0F	; 15
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	a5 01       	movw	r20, r10
 2a8:	94 01       	movw	r18, r8
 2aa:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2ae:	69 01       	movw	r12, r18
 2b0:	7a 01       	movw	r14, r20
 2b2:	08 94       	sec
 2b4:	c1 08       	sbc	r12, r1
 2b6:	d1 08       	sbc	r13, r1
 2b8:	e1 08       	sbc	r14, r1
 2ba:	f1 08       	sbc	r15, r1
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	39 16       	cp	r3, r25
 2c0:	01 f4       	brne	.+0      	; 0x2c2 <_Z4tonehjm+0x2c2>
 2c2:	af ef       	ldi	r26, 0xFF	; 255
 2c4:	ca 16       	cp	r12, r26
 2c6:	d1 04       	cpc	r13, r1
 2c8:	e1 04       	cpc	r14, r1
 2ca:	f1 04       	cpc	r15, r1
 2cc:	01 f0       	breq	.+0      	; 0x2ce <_Z4tonehjm+0x2ce>
 2ce:	00 f4       	brcc	.+0      	; 0x2d0 <_Z4tonehjm+0x2d0>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <_Z4tonehjm+0x2d2>
 2d2:	60 e9       	ldi	r22, 0x90	; 144
 2d4:	70 ed       	ldi	r23, 0xD0	; 208
 2d6:	83 e0       	ldi	r24, 0x03	; 3
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	a5 01       	movw	r20, r10
 2dc:	94 01       	movw	r18, r8
 2de:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2e2:	69 01       	movw	r12, r18
 2e4:	7a 01       	movw	r14, r20
 2e6:	08 94       	sec
 2e8:	c1 08       	sbc	r12, r1
 2ea:	d1 08       	sbc	r13, r1
 2ec:	e1 08       	sbc	r14, r1
 2ee:	f1 08       	sbc	r15, r1
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <_Z4tonehjm+0x2f4>
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	bf ef       	ldi	r27, 0xFF	; 255
 2f8:	cb 16       	cp	r12, r27
 2fa:	d1 04       	cpc	r13, r1
 2fc:	e1 04       	cpc	r14, r1
 2fe:	f1 04       	cpc	r15, r1
 300:	01 f0       	breq	.+0      	; 0x302 <_Z4tonehjm+0x302>
 302:	00 f4       	brcc	.+0      	; 0x304 <_Z4tonehjm+0x304>
 304:	00 c0       	rjmp	.+0      	; 0x306 <_Z4tonehjm+0x306>
 306:	68 e4       	ldi	r22, 0x48	; 72
 308:	78 ee       	ldi	r23, 0xE8	; 232
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	a5 01       	movw	r20, r10
 310:	94 01       	movw	r18, r8
 312:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 316:	69 01       	movw	r12, r18
 318:	7a 01       	movw	r14, r20
 31a:	08 94       	sec
 31c:	c1 08       	sbc	r12, r1
 31e:	d1 08       	sbc	r13, r1
 320:	e1 08       	sbc	r14, r1
 322:	f1 08       	sbc	r15, r1
 324:	33 20       	and	r3, r3
 326:	01 f0       	breq	.+0      	; 0x328 <_Z4tonehjm+0x328>
 328:	e2 e0       	ldi	r30, 0x02	; 2
 32a:	3e 16       	cp	r3, r30
 32c:	01 f4       	brne	.+0      	; 0x32e <_Z4tonehjm+0x32e>
 32e:	ff ef       	ldi	r31, 0xFF	; 255
 330:	cf 16       	cp	r12, r31
 332:	d1 04       	cpc	r13, r1
 334:	e1 04       	cpc	r14, r1
 336:	f1 04       	cpc	r15, r1
 338:	01 f0       	breq	.+0      	; 0x33a <_Z4tonehjm+0x33a>
 33a:	00 f4       	brcc	.+0      	; 0x33c <_Z4tonehjm+0x33c>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <_Z4tonehjm+0x33e>
 33e:	64 e2       	ldi	r22, 0x24	; 36
 340:	74 ef       	ldi	r23, 0xF4	; 244
 342:	80 e0       	ldi	r24, 0x00	; 0
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	a5 01       	movw	r20, r10
 348:	94 01       	movw	r18, r8
 34a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 34e:	69 01       	movw	r12, r18
 350:	7a 01       	movw	r14, r20
 352:	08 94       	sec
 354:	c1 08       	sbc	r12, r1
 356:	d1 08       	sbc	r13, r1
 358:	e1 08       	sbc	r14, r1
 35a:	f1 08       	sbc	r15, r1
 35c:	85 e0       	ldi	r24, 0x05	; 5
 35e:	00 c0       	rjmp	.+0      	; 0x360 <_Z4tonehjm+0x360>
 360:	83 e0       	ldi	r24, 0x03	; 3
 362:	00 c0       	rjmp	.+0      	; 0x364 <_Z4tonehjm+0x364>
 364:	84 e0       	ldi	r24, 0x04	; 4
 366:	9f ef       	ldi	r25, 0xFF	; 255
 368:	c9 16       	cp	r12, r25
 36a:	d1 04       	cpc	r13, r1
 36c:	e1 04       	cpc	r14, r1
 36e:	f1 04       	cpc	r15, r1
 370:	01 f0       	breq	.+0      	; 0x372 <_Z4tonehjm+0x372>
 372:	00 f0       	brcs	.+0      	; 0x374 <_Z4tonehjm+0x374>
 374:	62 e1       	ldi	r22, 0x12	; 18
 376:	7a e7       	ldi	r23, 0x7A	; 122
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	a5 01       	movw	r20, r10
 37e:	94 01       	movw	r18, r8
 380:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 384:	69 01       	movw	r12, r18
 386:	7a 01       	movw	r14, r20
 388:	08 94       	sec
 38a:	c1 08       	sbc	r12, r1
 38c:	d1 08       	sbc	r13, r1
 38e:	e1 08       	sbc	r14, r1
 390:	f1 08       	sbc	r15, r1
 392:	33 20       	and	r3, r3
 394:	01 f4       	brne	.+0      	; 0x396 <_Z4tonehjm+0x396>
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	00 c0       	rjmp	.+0      	; 0x39a <_Z4tonehjm+0x39a>
 39a:	86 e0       	ldi	r24, 0x06	; 6
 39c:	af ef       	ldi	r26, 0xFF	; 255
 39e:	ca 16       	cp	r12, r26
 3a0:	d1 04       	cpc	r13, r1
 3a2:	e1 04       	cpc	r14, r1
 3a4:	f1 04       	cpc	r15, r1
 3a6:	01 f0       	breq	.+0      	; 0x3a8 <_Z4tonehjm+0x3a8>
 3a8:	00 f0       	brcs	.+0      	; 0x3aa <_Z4tonehjm+0x3aa>
 3aa:	73 01       	movw	r14, r6
 3ac:	62 01       	movw	r12, r4
 3ae:	9a e0       	ldi	r25, 0x0A	; 10
 3b0:	f6 94       	lsr	r15
 3b2:	e7 94       	ror	r14
 3b4:	d7 94       	ror	r13
 3b6:	c7 94       	ror	r12
 3b8:	9a 95       	dec	r25
 3ba:	01 f4       	brne	.+0      	; 0x3bc <_Z4tonehjm+0x3bc>
 3bc:	08 94       	sec
 3be:	c1 08       	sbc	r12, r1
 3c0:	d1 08       	sbc	r13, r1
 3c2:	e1 08       	sbc	r14, r1
 3c4:	f1 08       	sbc	r15, r1
 3c6:	33 20       	and	r3, r3
 3c8:	01 f0       	breq	.+0      	; 0x3ca <_Z4tonehjm+0x3ca>
 3ca:	87 e0       	ldi	r24, 0x07	; 7
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <_Z4tonehjm+0x3ce>
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	33 20       	and	r3, r3
 3d2:	01 f0       	breq	.+0      	; 0x3d4 <_Z4tonehjm+0x3d4>
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z4tonehjm+0x3d6>
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	85 bd       	out	0x25, r24	; 37
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <_Z4tonehjm+0x3dc>
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <_Z4tonehjm+0x3e0>
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	80 93 b1 00 	sts	0x00B1, r24
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <_Z4tonehjm+0x3e8>
 3e8:	69 01       	movw	r12, r18
 3ea:	7a 01       	movw	r14, r20
 3ec:	08 94       	sec
 3ee:	c1 08       	sbc	r12, r1
 3f0:	d1 08       	sbc	r13, r1
 3f2:	e1 08       	sbc	r14, r1
 3f4:	f1 08       	sbc	r15, r1
 3f6:	b0 e0       	ldi	r27, 0x00	; 0
 3f8:	cb 16       	cp	r12, r27
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	db 06       	cpc	r13, r27
 3fe:	b1 e0       	ldi	r27, 0x01	; 1
 400:	eb 06       	cpc	r14, r27
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	fb 06       	cpc	r15, r27
 406:	00 f0       	brcs	.+0      	; 0x408 <_Z4tonehjm+0x408>
 408:	68 e4       	ldi	r22, 0x48	; 72
 40a:	78 ee       	ldi	r23, 0xE8	; 232
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	a5 01       	movw	r20, r10
 412:	94 01       	movw	r18, r8
 414:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 418:	69 01       	movw	r12, r18
 41a:	7a 01       	movw	r14, r20
 41c:	08 94       	sec
 41e:	c1 08       	sbc	r12, r1
 420:	d1 08       	sbc	r13, r1
 422:	e1 08       	sbc	r14, r1
 424:	f1 08       	sbc	r15, r1
 426:	93 e0       	ldi	r25, 0x03	; 3
 428:	00 c0       	rjmp	.+0      	; 0x42a <_Z4tonehjm+0x42a>
 42a:	91 e0       	ldi	r25, 0x01	; 1
 42c:	e1 e0       	ldi	r30, 0x01	; 1
 42e:	3e 16       	cp	r3, r30
 430:	01 f4       	brne	.+0      	; 0x432 <_Z4tonehjm+0x432>
 432:	80 91 81 00 	lds	r24, 0x0081
 436:	88 7f       	andi	r24, 0xF8	; 248
 438:	89 2b       	or	r24, r25
 43a:	80 93 81 00 	sts	0x0081, r24
 43e:	00 c0       	rjmp	.+0      	; 0x440 <_Z4tonehjm+0x440>
 440:	f3 e0       	ldi	r31, 0x03	; 3
 442:	3f 16       	cp	r3, r31
 444:	01 f4       	brne	.+0      	; 0x446 <_Z4tonehjm+0x446>
 446:	80 91 91 00 	lds	r24, 0x0091
 44a:	88 7f       	andi	r24, 0xF8	; 248
 44c:	89 2b       	or	r24, r25
 44e:	80 93 91 00 	sts	0x0091, r24
 452:	00 c0       	rjmp	.+0      	; 0x454 <_Z4tonehjm+0x454>
 454:	84 e0       	ldi	r24, 0x04	; 4
 456:	38 16       	cp	r3, r24
 458:	01 f4       	brne	.+0      	; 0x45a <_Z4tonehjm+0x45a>
 45a:	80 91 a1 00 	lds	r24, 0x00A1
 45e:	88 7f       	andi	r24, 0xF8	; 248
 460:	89 2b       	or	r24, r25
 462:	80 93 a1 00 	sts	0x00A1, r24
 466:	00 c0       	rjmp	.+0      	; 0x468 <_Z4tonehjm+0x468>
 468:	a5 e0       	ldi	r26, 0x05	; 5
 46a:	3a 16       	cp	r3, r26
 46c:	01 f4       	brne	.+0      	; 0x46e <_Z4tonehjm+0x46e>
 46e:	80 91 21 01 	lds	r24, 0x0121
 472:	88 7f       	andi	r24, 0xF8	; 248
 474:	89 2b       	or	r24, r25
 476:	80 93 21 01 	sts	0x0121, r24
 47a:	89 81       	ldd	r24, Y+1	; 0x01
 47c:	9a 81       	ldd	r25, Y+2	; 0x02
 47e:	ab 81       	ldd	r26, Y+3	; 0x03
 480:	bc 81       	ldd	r27, Y+4	; 0x04
 482:	00 97       	sbiw	r24, 0x00	; 0
 484:	a1 05       	cpc	r26, r1
 486:	b1 05       	cpc	r27, r1
 488:	01 f0       	breq	.+0      	; 0x48a <_Z4tonehjm+0x48a>
 48a:	b8 01       	movw	r22, r16
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	29 81       	ldd	r18, Y+1	; 0x01
 496:	3a 81       	ldd	r19, Y+2	; 0x02
 498:	4b 81       	ldd	r20, Y+3	; 0x03
 49a:	5c 81       	ldd	r21, Y+4	; 0x04
 49c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4a0:	28 ee       	ldi	r18, 0xE8	; 232
 4a2:	33 e0       	ldi	r19, 0x03	; 3
 4a4:	40 e0       	ldi	r20, 0x00	; 0
 4a6:	50 e0       	ldi	r21, 0x00	; 0
 4a8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4ac:	89 01       	movw	r16, r18
 4ae:	9a 01       	movw	r18, r20
 4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <_Z4tonehjm+0x4b2>
 4b2:	0f ef       	ldi	r16, 0xFF	; 255
 4b4:	1f ef       	ldi	r17, 0xFF	; 255
 4b6:	2f ef       	ldi	r18, 0xFF	; 255
 4b8:	3f ef       	ldi	r19, 0xFF	; 255
 4ba:	92 e0       	ldi	r25, 0x02	; 2
 4bc:	39 16       	cp	r3, r25
 4be:	01 f0       	breq	.+0      	; 0x4c0 <_Z4tonehjm+0x4c0>
 4c0:	93 15       	cp	r25, r3
 4c2:	04 f0       	brlt	.+0      	; 0x4c4 <_Z4tonehjm+0x4c4>
 4c4:	33 20       	and	r3, r3
 4c6:	01 f0       	breq	.+0      	; 0x4c8 <_Z4tonehjm+0x4c8>
 4c8:	a1 e0       	ldi	r26, 0x01	; 1
 4ca:	3a 16       	cp	r3, r26
 4cc:	01 f0       	breq	.+0      	; 0x4ce <_Z4tonehjm+0x4ce>
 4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <_Z4tonehjm+0x4d0>
 4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <_Z4tonehjm+0x4d2>
 4d2:	b4 e0       	ldi	r27, 0x04	; 4
 4d4:	3b 16       	cp	r3, r27
 4d6:	01 f4       	brne	.+0      	; 0x4d8 <_Z4tonehjm+0x4d8>
 4d8:	00 c0       	rjmp	.+0      	; 0x4da <_Z4tonehjm+0x4da>
 4da:	3b 16       	cp	r3, r27
 4dc:	04 f0       	brlt	.+0      	; 0x4de <_Z4tonehjm+0x4de>
 4de:	e5 e0       	ldi	r30, 0x05	; 5
 4e0:	3e 16       	cp	r3, r30
 4e2:	01 f0       	breq	.+0      	; 0x4e4 <_Z4tonehjm+0x4e4>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_Z4tonehjm+0x4e6>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <_Z4tonehjm+0x4e8>
 4e8:	c7 bc       	out	0x27, r12	; 39
 4ea:	00 93 00 00 	sts	0x0000, r16
 4ee:	10 93 00 00 	sts	0x0000, r17
 4f2:	20 93 00 00 	sts	0x0000, r18
 4f6:	30 93 00 00 	sts	0x0000, r19
 4fa:	80 91 6e 00 	lds	r24, 0x006E
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	80 93 6e 00 	sts	0x006E, r24
 504:	00 c0       	rjmp	.+0      	; 0x506 <_Z4tonehjm+0x506>
 506:	d0 92 89 00 	sts	0x0089, r13
 50a:	c0 92 88 00 	sts	0x0088, r12
 50e:	00 93 00 00 	sts	0x0000, r16
 512:	10 93 00 00 	sts	0x0000, r17
 516:	20 93 00 00 	sts	0x0000, r18
 51a:	30 93 00 00 	sts	0x0000, r19
 51e:	80 91 6f 00 	lds	r24, 0x006F
 522:	82 60       	ori	r24, 0x02	; 2
 524:	80 93 6f 00 	sts	0x006F, r24
 528:	00 c0       	rjmp	.+0      	; 0x52a <_Z4tonehjm+0x52a>
 52a:	c0 92 b3 00 	sts	0x00B3, r12
 52e:	00 93 00 00 	sts	0x0000, r16
 532:	10 93 00 00 	sts	0x0000, r17
 536:	20 93 00 00 	sts	0x0000, r18
 53a:	30 93 00 00 	sts	0x0000, r19
 53e:	80 91 70 00 	lds	r24, 0x0070
 542:	82 60       	ori	r24, 0x02	; 2
 544:	80 93 70 00 	sts	0x0070, r24
 548:	00 c0       	rjmp	.+0      	; 0x54a <_Z4tonehjm+0x54a>
 54a:	d0 92 99 00 	sts	0x0099, r13
 54e:	c0 92 98 00 	sts	0x0098, r12
 552:	00 93 00 00 	sts	0x0000, r16
 556:	10 93 00 00 	sts	0x0000, r17
 55a:	20 93 00 00 	sts	0x0000, r18
 55e:	30 93 00 00 	sts	0x0000, r19
 562:	80 91 71 00 	lds	r24, 0x0071
 566:	82 60       	ori	r24, 0x02	; 2
 568:	80 93 71 00 	sts	0x0071, r24
 56c:	00 c0       	rjmp	.+0      	; 0x56e <_Z4tonehjm+0x56e>
 56e:	d0 92 a9 00 	sts	0x00A9, r13
 572:	c0 92 a8 00 	sts	0x00A8, r12
 576:	00 93 00 00 	sts	0x0000, r16
 57a:	10 93 00 00 	sts	0x0000, r17
 57e:	20 93 00 00 	sts	0x0000, r18
 582:	30 93 00 00 	sts	0x0000, r19
 586:	80 91 72 00 	lds	r24, 0x0072
 58a:	82 60       	ori	r24, 0x02	; 2
 58c:	80 93 72 00 	sts	0x0072, r24
 590:	00 c0       	rjmp	.+0      	; 0x592 <_Z4tonehjm+0x592>
 592:	d0 92 29 01 	sts	0x0129, r13
 596:	c0 92 28 01 	sts	0x0128, r12
 59a:	00 93 00 00 	sts	0x0000, r16
 59e:	10 93 00 00 	sts	0x0000, r17
 5a2:	20 93 00 00 	sts	0x0000, r18
 5a6:	30 93 00 00 	sts	0x0000, r19
 5aa:	80 91 73 00 	lds	r24, 0x0073
 5ae:	82 60       	ori	r24, 0x02	; 2
 5b0:	80 93 73 00 	sts	0x0073, r24
 5b4:	0f 90       	pop	r0
 5b6:	0f 90       	pop	r0
 5b8:	0f 90       	pop	r0
 5ba:	0f 90       	pop	r0
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	1f 91       	pop	r17
 5c2:	0f 91       	pop	r16
 5c4:	ff 90       	pop	r15
 5c6:	ef 90       	pop	r14
 5c8:	df 90       	pop	r13
 5ca:	cf 90       	pop	r12
 5cc:	bf 90       	pop	r11
 5ce:	af 90       	pop	r10
 5d0:	9f 90       	pop	r9
 5d2:	8f 90       	pop	r8
 5d4:	7f 90       	pop	r7
 5d6:	6f 90       	pop	r6
 5d8:	5f 90       	pop	r5
 5da:	4f 90       	pop	r4
 5dc:	3f 90       	pop	r3
 5de:	08 95       	ret

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	83 30       	cpi	r24, 0x03	; 3
   6:	00 f4       	brcc	.+0      	; 0x8 <_Z12disableTimerh+0x8>
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f4       	brne	.+0      	; 0x10 <_Z12disableTimerh+0x10>
  10:	00 c0       	rjmp	.+0      	; 0x12 <_Z12disableTimerh+0x12>
  12:	84 30       	cpi	r24, 0x04	; 4
  14:	01 f0       	breq	.+0      	; 0x16 <_Z12disableTimerh+0x16>
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f0       	brcs	.+0      	; 0x1a <_Z12disableTimerh+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	01 f4       	brne	.+0      	; 0x1e <_Z12disableTimerh+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z12disableTimerh+0x20>
  20:	10 92 6e 00 	sts	0x006E, r1
  24:	08 95       	ret

  if (timer2_toggle_count != 0)
  26:	80 91 6f 00 	lds	r24, 0x006F
  2a:	8d 7f       	andi	r24, 0xFD	; 253
  2c:	80 93 6f 00 	sts	0x006F, r24
  30:	08 95       	ret
  32:	80 91 70 00 	lds	r24, 0x0070
  36:	8d 7f       	andi	r24, 0xFD	; 253
  38:	80 93 70 00 	sts	0x0070, r24
  3c:	81 e0       	ldi	r24, 0x01	; 1
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	80 93 b0 00 	sts	0x00B0, r24
  42:	80 91 b1 00 	lds	r24, 0x00B1
  46:	88 7f       	andi	r24, 0xF8	; 248
  48:	84 60       	ori	r24, 0x04	; 4
  4a:	80 93 b1 00 	sts	0x00B1, r24
  4e:	10 92 b3 00 	sts	0x00B3, r1

    if (timer2_toggle_count > 0)
  52:	08 95       	ret
  54:	10 92 71 00 	sts	0x0071, r1
  58:	08 95       	ret
  5a:	10 92 72 00 	sts	0x0072, r1
  5e:	08 95       	ret
  60:	10 92 73 00 	sts	0x0073, r1
  64:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
   0:	cf 93       	push	r28
   2:	c8 2f       	mov	r28, r24
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	8c 17       	cp	r24, r28
   a:	01 f4       	brne	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	e0 e0       	ldi	r30, 0x00	; 0
   e:	f0 e0       	ldi	r31, 0x00	; 0
  10:	84 91       	lpm	r24, Z
  12:	9f ef       	ldi	r25, 0xFF	; 255
  14:	90 93 00 00 	sts	0x0000, r25
  18:	00 c0       	rjmp	.+0      	; 0x1a <_Z6noToneh+0x1a>
  1a:	8f ef       	ldi	r24, 0xFF	; 255
  1c:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
  20:	8c 2f       	mov	r24, r28
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>

  if (timer2_toggle_count != 0)
  28:	cf 91       	pop	r28
  2a:	08 95       	ret

Disassembly of section .text.__vector_13:

00000000 <__vector_13>:
}
#endif


ISR(TIMER2_COMPA_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31

  if (timer2_toggle_count != 0)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	a0 91 00 00 	lds	r26, 0x0000
  32:	b0 91 00 00 	lds	r27, 0x0000
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	a1 05       	cpc	r26, r1
  3a:	b1 05       	cpc	r27, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_13+0x3e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	80 81       	ld	r24, Z
  48:	90 91 00 00 	lds	r25, 0x0000
  4c:	89 27       	eor	r24, r25
  4e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	a0 91 00 00 	lds	r26, 0x0000
  5c:	b0 91 00 00 	lds	r27, 0x0000
  60:	18 16       	cp	r1, r24
  62:	19 06       	cpc	r1, r25
  64:	1a 06       	cpc	r1, r26
  66:	1b 06       	cpc	r1, r27
  68:	04 f4       	brge	.+0      	; 0x6a <__vector_13+0x6a>
      timer2_toggle_count--;
  6a:	80 91 00 00 	lds	r24, 0x0000
  6e:	90 91 00 00 	lds	r25, 0x0000
  72:	a0 91 00 00 	lds	r26, 0x0000
  76:	b0 91 00 00 	lds	r27, 0x0000
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	a1 09       	sbc	r26, r1
  7e:	b1 09       	sbc	r27, r1
  80:	80 93 00 00 	sts	0x0000, r24
  84:	90 93 00 00 	sts	0x0000, r25
  88:	a0 93 00 00 	sts	0x0000, r26
  8c:	b0 93 00 00 	sts	0x0000, r27
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_13+0x92>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  92:	80 91 00 00 	lds	r24, 0x0000
  96:	0e 94 00 00 	call	0	; 0x0 <__vector_13>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	7f 91       	pop	r23
  a8:	6f 91       	pop	r22
  aa:	5f 91       	pop	r21
  ac:	4f 91       	pop	r20
  ae:	3f 91       	pop	r19
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0b be       	out	0x3b, r0	; 59
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000594  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002cb6  00000000  00000000  000005c8  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f48  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.attachInterrupt 000000f4  00000000  00000000  00001b04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.detachInterrupt 00000058  00000000  00000000  00001bf8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__vector_1 00000062  00000000  00000000  00001c50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_2 00000062  00000000  00000000  00001cb2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_3 00000062  00000000  00000000  00001d14  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_4 00000062  00000000  00000000  00001d76  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_5 00000062  00000000  00000000  00001dd8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.__vector_6 00000062  00000000  00000000  00001e3a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.__vector_7 00000062  00000000  00000000  00001e9c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.__vector_8 00000062  00000000  00000000  00001efe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .bss.intFunc  00000010  00000000  00000000  00001f60  2**0
                  ALLOC

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f0       	brcs	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	00 c0       	rjmp	.+0      	; 0x6 <attachInterrupt+0x6>
   6:	e8 2f       	mov	r30, r24
   8:	f0 e0       	ldi	r31, 0x00	; 0
   a:	ee 0f       	add	r30, r30
   c:	ff 1f       	adc	r31, r31
   e:	e0 50       	subi	r30, 0x00	; 0
  10:	f0 40       	sbci	r31, 0x00	; 0
  12:	71 83       	std	Z+1, r23	; 0x01
  14:	60 83       	st	Z, r22
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	01 f0       	breq	.+0      	; 0x1a <attachInterrupt+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	00 f4       	brcc	.+0      	; 0x1e <attachInterrupt+0x1e>
  1e:	82 30       	cpi	r24, 0x02	; 2
  20:	01 f0       	breq	.+0      	; 0x22 <attachInterrupt+0x22>
  22:	83 30       	cpi	r24, 0x03	; 3
  24:	00 f4       	brcc	.+0      	; 0x26 <attachInterrupt+0x26>
  if(intFunc[EXTERNAL_INT_7])
  26:	81 30       	cpi	r24, 0x01	; 1
  28:	01 f4       	brne	.+0      	; 0x2a <attachInterrupt+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <attachInterrupt+0x2c>
  2c:	86 30       	cpi	r24, 0x06	; 6
  2e:	01 f4       	brne	.+0      	; 0x30 <attachInterrupt+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <attachInterrupt+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	86 30       	cpi	r24, 0x06	; 6
  34:	00 f0       	brcs	.+0      	; 0x36 <attachInterrupt+0x36>
  36:	87 30       	cpi	r24, 0x07	; 7
  38:	01 f4       	brne	.+0      	; 0x3a <attachInterrupt+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <attachInterrupt+0x3c>
}
  3c:	80 91 69 00 	lds	r24, 0x0069
  40:	8c 7f       	andi	r24, 0xFC	; 252
  42:	84 2b       	or	r24, r20
  44:	80 93 69 00 	sts	0x0069, r24
  48:	e8 9a       	sbi	0x1d, 0	; 29
  4a:	08 95       	ret
  4c:	80 91 69 00 	lds	r24, 0x0069
  50:	44 0f       	add	r20, r20
  52:	55 1f       	adc	r21, r21
  54:	44 0f       	add	r20, r20
  56:	55 1f       	adc	r21, r21
  58:	83 7f       	andi	r24, 0xF3	; 243
  5a:	84 2b       	or	r24, r20
  5c:	80 93 69 00 	sts	0x0069, r24
  60:	e9 9a       	sbi	0x1d, 1	; 29
  62:	08 95       	ret
  64:	80 91 69 00 	lds	r24, 0x0069
  68:	74 e0       	ldi	r23, 0x04	; 4
  6a:	44 0f       	add	r20, r20
  6c:	55 1f       	adc	r21, r21
  6e:	7a 95       	dec	r23
  70:	01 f4       	brne	.+0      	; 0x72 <attachInterrupt+0x72>
  72:	8f 7c       	andi	r24, 0xCF	; 207
  74:	84 2b       	or	r24, r20
  76:	80 93 69 00 	sts	0x0069, r24
  7a:	ea 9a       	sbi	0x1d, 2	; 29
  7c:	08 95       	ret
  7e:	80 91 69 00 	lds	r24, 0x0069
  82:	66 e0       	ldi	r22, 0x06	; 6
  84:	44 0f       	add	r20, r20
  86:	55 1f       	adc	r21, r21
  88:	6a 95       	dec	r22
  8a:	01 f4       	brne	.+0      	; 0x8c <attachInterrupt+0x8c>
  8c:	8f 73       	andi	r24, 0x3F	; 63
  8e:	84 2b       	or	r24, r20
  90:	80 93 69 00 	sts	0x0069, r24
  94:	eb 9a       	sbi	0x1d, 3	; 29
  96:	08 95       	ret
  98:	80 91 6a 00 	lds	r24, 0x006A
  9c:	8c 7f       	andi	r24, 0xFC	; 252
  9e:	84 2b       	or	r24, r20
  a0:	80 93 6a 00 	sts	0x006A, r24
  a4:	ec 9a       	sbi	0x1d, 4	; 29
  a6:	08 95       	ret
  a8:	80 91 6a 00 	lds	r24, 0x006A
  ac:	44 0f       	add	r20, r20
  ae:	55 1f       	adc	r21, r21
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	83 7f       	andi	r24, 0xF3	; 243
  b6:	84 2b       	or	r24, r20
  b8:	80 93 6a 00 	sts	0x006A, r24
  bc:	ed 9a       	sbi	0x1d, 5	; 29
  be:	08 95       	ret
  c0:	80 91 6a 00 	lds	r24, 0x006A
  c4:	24 e0       	ldi	r18, 0x04	; 4
  c6:	44 0f       	add	r20, r20
  c8:	55 1f       	adc	r21, r21
  ca:	2a 95       	dec	r18
  cc:	01 f4       	brne	.+0      	; 0xce <attachInterrupt+0xce>
  ce:	8f 7c       	andi	r24, 0xCF	; 207
  d0:	84 2b       	or	r24, r20
  d2:	80 93 6a 00 	sts	0x006A, r24
  d6:	ee 9a       	sbi	0x1d, 6	; 29
  d8:	08 95       	ret
  da:	80 91 6a 00 	lds	r24, 0x006A
  de:	96 e0       	ldi	r25, 0x06	; 6
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	9a 95       	dec	r25
  e6:	01 f4       	brne	.+0      	; 0xe8 <attachInterrupt+0xe8>
  e8:	8f 73       	andi	r24, 0x3F	; 63
  ea:	84 2b       	or	r24, r20
  ec:	80 93 6a 00 	sts	0x006A, r24
  f0:	ef 9a       	sbi	0x1d, 7	; 29
  f2:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
   4:	84 30       	cpi	r24, 0x04	; 4
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	85 30       	cpi	r24, 0x05	; 5
   a:	00 f4       	brcc	.+0      	; 0xc <detachInterrupt+0xc>
   c:	82 30       	cpi	r24, 0x02	; 2
   e:	01 f0       	breq	.+0      	; 0x10 <detachInterrupt+0x10>
  10:	83 30       	cpi	r24, 0x03	; 3
  12:	00 f4       	brcc	.+0      	; 0x14 <detachInterrupt+0x14>
  14:	81 30       	cpi	r24, 0x01	; 1
  16:	01 f4       	brne	.+0      	; 0x18 <detachInterrupt+0x18>
  18:	00 c0       	rjmp	.+0      	; 0x1a <detachInterrupt+0x1a>
  1a:	86 30       	cpi	r24, 0x06	; 6
  1c:	01 f0       	breq	.+0      	; 0x1e <detachInterrupt+0x1e>
  1e:	86 30       	cpi	r24, 0x06	; 6
  20:	00 f0       	brcs	.+0      	; 0x22 <detachInterrupt+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7
  24:	01 f4       	brne	.+0      	; 0x26 <detachInterrupt+0x26>
  if(intFunc[EXTERNAL_INT_7])
  26:	00 c0       	rjmp	.+0      	; 0x28 <detachInterrupt+0x28>
  28:	e8 98       	cbi	0x1d, 0	; 29
  2a:	00 c0       	rjmp	.+0      	; 0x2c <detachInterrupt+0x2c>
  2c:	e9 98       	cbi	0x1d, 1	; 29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <detachInterrupt+0x30>
  30:	ea 98       	cbi	0x1d, 2	; 29
    intFunc[EXTERNAL_INT_7]();
  32:	00 c0       	rjmp	.+0      	; 0x34 <detachInterrupt+0x34>
  34:	eb 98       	cbi	0x1d, 3	; 29
  36:	00 c0       	rjmp	.+0      	; 0x38 <detachInterrupt+0x38>
  38:	ec 98       	cbi	0x1d, 4	; 29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <detachInterrupt+0x3c>
}
  3c:	ed 98       	cbi	0x1d, 5	; 29
  3e:	00 c0       	rjmp	.+0      	; 0x40 <detachInterrupt+0x40>
  40:	ee 98       	cbi	0x1d, 6	; 29
  42:	00 c0       	rjmp	.+0      	; 0x44 <detachInterrupt+0x44>
  44:	ef 98       	cbi	0x1d, 7	; 29
  46:	e8 2f       	mov	r30, r24
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	ee 0f       	add	r30, r30
  4c:	ff 1f       	adc	r31, r31
  4e:	e0 50       	subi	r30, 0x00	; 0
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	11 82       	std	Z+1, r1	; 0x01
  54:	10 82       	st	Z, r1
  56:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_1+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_2+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_3:

00000000 <__vector_3>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_3+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_4:

00000000 <__vector_4>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_4+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_5:

00000000 <__vector_5>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_5+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_6:

00000000 <__vector_6>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_6+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_7+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_8:

00000000 <__vector_8>:
SIGNAL(INT6_vect) {
  if(intFunc[EXTERNAL_INT_6])
    intFunc[EXTERNAL_INT_6]();
}

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_8+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000468  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000006a6  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z10randomSeedj 00000010  00000000  00000000  00000b42  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z6randoml 00000046  00000000  00000000  00000b52  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6randomll 00000044  00000000  00000000  00000b98  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z3maplllll 000000a6  00000000  00000000  00000bdc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z8makeWordj 00000002  00000000  00000000  00000c82  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._Z8makeWordhh 0000000e  00000000  00000000  00000c84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}

unsigned int makeWord(unsigned int w) { return w; }
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6b 01       	movw	r12, r22
   e:	7c 01       	movw	r14, r24
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	81 05       	cpc	r24, r1
  16:	91 05       	cpc	r25, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_Z6randoml+0x1a>
  1a:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  1e:	a7 01       	movw	r20, r14
  20:	96 01       	movw	r18, r12
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  26:	8b 01       	movw	r16, r22
  28:	9c 01       	movw	r18, r24
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_Z6randoml+0x2c>
  2c:	00 e0       	ldi	r16, 0x00	; 0
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	b8 01       	movw	r22, r16
  36:	c9 01       	movw	r24, r18
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	df 90       	pop	r13
  42:	cf 90       	pop	r12
  44:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	6b 01       	movw	r12, r22
   a:	7c 01       	movw	r14, r24
   c:	da 01       	movw	r26, r20
   e:	c9 01       	movw	r24, r18
  10:	c2 16       	cp	r12, r18
  12:	d3 06       	cpc	r13, r19
  14:	e4 06       	cpc	r14, r20
  16:	f5 06       	cpc	r15, r21
  18:	04 f4       	brge	.+0      	; 0x1a <_Z6randomll+0x1a>
  1a:	8c 19       	sub	r24, r12
  1c:	9d 09       	sbc	r25, r13
  1e:	ae 09       	sbc	r26, r14
  20:	bf 09       	sbc	r27, r15
  22:	bc 01       	movw	r22, r24
  24:	cd 01       	movw	r24, r26
  26:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  2a:	dc 01       	movw	r26, r24
  2c:	cb 01       	movw	r24, r22
  2e:	c8 0e       	add	r12, r24
  30:	d9 1e       	adc	r13, r25
  32:	ea 1e       	adc	r14, r26
  34:	fb 1e       	adc	r15, r27
  36:	b6 01       	movw	r22, r12
  38:	c7 01       	movw	r24, r14
  3a:	ff 90       	pop	r15
  3c:	ef 90       	pop	r14
  3e:	df 90       	pop	r13
  40:	cf 90       	pop	r12
  42:	08 95       	ret

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29
  20:	00 d0       	rcall	.+0      	; 0x22 <_Z3maplllll+0x22>
  22:	0f 92       	push	r0
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	29 83       	std	Y+1, r18	; 0x01
  2a:	3a 83       	std	Y+2, r19	; 0x02
  2c:	4b 83       	std	Y+3, r20	; 0x03
  2e:	5c 83       	std	Y+4, r21	; 0x04
  30:	27 01       	movw	r4, r14
  32:	38 01       	movw	r6, r16
  34:	76 01       	movw	r14, r12
  36:	65 01       	movw	r12, r10
  38:	28 8d       	ldd	r18, Y+24	; 0x18
  3a:	39 8d       	ldd	r19, Y+25	; 0x19
  3c:	4a 8d       	ldd	r20, Y+26	; 0x1a
  3e:	5b 8d       	ldd	r21, Y+27	; 0x1b
  40:	89 80       	ldd	r8, Y+1	; 0x01
  42:	9a 80       	ldd	r9, Y+2	; 0x02
  44:	ab 80       	ldd	r10, Y+3	; 0x03
  46:	bc 80       	ldd	r11, Y+4	; 0x04
  48:	68 19       	sub	r22, r8
  4a:	79 09       	sbc	r23, r9
  4c:	8a 09       	sbc	r24, r10
  4e:	9b 09       	sbc	r25, r11
  50:	2c 19       	sub	r18, r12
  52:	3d 09       	sbc	r19, r13
  54:	4e 09       	sbc	r20, r14
  56:	5f 09       	sbc	r21, r15
  58:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  5c:	48 18       	sub	r4, r8
  5e:	59 08       	sbc	r5, r9
  60:	6a 08       	sbc	r6, r10
  62:	7b 08       	sbc	r7, r11
  64:	a3 01       	movw	r20, r6
  66:	92 01       	movw	r18, r4
  68:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  6c:	89 01       	movw	r16, r18
  6e:	9a 01       	movw	r18, r20
  70:	0c 0d       	add	r16, r12
  72:	1d 1d       	adc	r17, r13
  74:	2e 1d       	adc	r18, r14
  76:	3f 1d       	adc	r19, r15
  78:	b8 01       	movw	r22, r16
  7a:	c9 01       	movw	r24, r18
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	0f 90       	pop	r0
  82:	0f 90       	pop	r0
  84:	df 91       	pop	r29
  86:	cf 91       	pop	r28
  88:	1f 91       	pop	r17
  8a:	0f 91       	pop	r16
  8c:	ff 90       	pop	r15
  8e:	ef 90       	pop	r14
  90:	df 90       	pop	r13
  92:	cf 90       	pop	r12
  94:	bf 90       	pop	r11
  96:	af 90       	pop	r10
  98:	9f 90       	pop	r9
  9a:	8f 90       	pop	r8
  9c:	7f 90       	pop	r7
  9e:	6f 90       	pop	r6
  a0:	5f 90       	pop	r5
  a2:	4f 90       	pop	r4
  a4:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	38 2f       	mov	r19, r24
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	62 2b       	or	r22, r18
   8:	73 2b       	or	r23, r19
   a:	cb 01       	movw	r24, r22
   c:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .stab         00002d3c  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000034e0  00000000  00000000  00002d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6StringD2Ev 0000000c  00000000  00000000  00006254  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6String10invalidateEv 00000024  00000000  00000000  00006260  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00006284  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6String7reserveEj 0000003e  00000000  00000000  000062b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  000062f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6StringC2EPKc 00000036  00000000  00000000  00006338  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6StringaSERKS_ 00000030  00000000  00000000  0000636e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6StringC2ERKS_ 00000016  00000000  00000000  0000639e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6StringaSEPKc 00000030  00000000  00000000  000063b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6StringC2Emh 0000005c  00000000  00000000  000063e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6StringC2Elh 0000005c  00000000  00000000  00006440  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6StringC2Ejh 0000005a  00000000  00000000  0000649c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6StringC2Eih 0000005a  00000000  00000000  000064f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6StringC2Ehh 0000005c  00000000  00000000  00006550  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6StringC2Ec 00000034  00000000  00000000  000065ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6String6concatEPKcj 0000005e  00000000  00000000  000065e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6String6concatERKS_ 00000012  00000000  00000000  0000663e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6String6concatEPKc 00000022  00000000  00000000  00006650  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6String6concatEc 00000028  00000000  00000000  00006672  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6String6concatEh 0000005a  00000000  00000000  0000669a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6String6concatEi 00000064  00000000  00000000  000066f4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6String6concatEj 0000005c  00000000  00000000  00006758  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6String6concatEl 00000066  00000000  00000000  000067b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6String6concatEm 00000066  00000000  00000000  0000681a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZplRK15StringSumHelperRK6String 0000002e  00000000  00000000  00006880  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZplRK15StringSumHelperPKc 00000034  00000000  00000000  000068ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZplRK15StringSumHelperc 00000022  00000000  00000000  000068e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZplRK15StringSumHelperh 00000022  00000000  00000000  00006904  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZplRK15StringSumHelperi 00000022  00000000  00000000  00006926  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZplRK15StringSumHelperj 00000022  00000000  00000000  00006948  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZplRK15StringSumHelperl 00000022  00000000  00000000  0000696a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZplRK15StringSumHelperm 00000022  00000000  00000000  0000698c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZNK6String9compareToERKS_ 00000064  00000000  00000000  000069ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZNK6String6equalsERKS_ 00000022  00000000  00000000  00006a12  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZNK6String6equalsEPKc 00000044  00000000  00000000  00006a34  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00006a78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00006a86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00006a98  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00006aaa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000078  00000000  00000000  00006aba  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZNK6String10startsWithERKS_j 0000004a  00000000  00000000  00006b32  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZNK6String10startsWithERKS_ 00000020  00000000  00000000  00006b7c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZNK6String8endsWithERKS_ 0000004a  00000000  00000000  00006b9c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  00006be6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZN6StringixEj 00000024  00000000  00000000  00006c00  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZNK6StringixEj 00000026  00000000  00000000  00006c24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZNK6String6charAtEj 00000006  00000000  00000000  00006c4a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZNK6String8getBytesEPhjj 00000058  00000000  00000000  00006c50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZNK6String7indexOfEcj 00000038  00000000  00000000  00006ca8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZNK6String7indexOfEc 0000000a  00000000  00000000  00006ce0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZNK6String7indexOfERKS_j 00000038  00000000  00000000  00006cea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZNK6String7indexOfERKS_ 0000000a  00000000  00000000  00006d22  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZNK6String11lastIndexOfEcj 00000068  00000000  00000000  00006d2c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZNK6String11lastIndexOfEc 00000010  00000000  00000000  00006d94  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  00006da4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZNK6String11lastIndexOfERKS_ 00000016  00000000  00000000  00006e40  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZNK6String9substringEjj 0000008c  00000000  00000000  00006e56  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZNK6String9substringEj 00000018  00000000  00000000  00006ee2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6String7replaceEcc 0000001e  00000000  00000000  00006efa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6String7replaceERKS_S1_ 000001fc  00000000  00000000  00006f18  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  00007114  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  0000713c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6String4trimEv 000000bc  00000000  00000000  00007164  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZNK6String5toIntEv 0000002a  00000000  00000000  00007220  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  0000724a  2**0
                  ALLOC

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD1Ev>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
	if (buffer) return atol(buffer);
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
   a:	08 95       	ret

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
  16:	1d 82       	std	Y+5, r1	; 0x05
	return 0;
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
  1e:	df 91       	pop	r29
}
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
	return 0;
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	99 83       	std	Y+1, r25	; 0x01
  1e:	88 83       	st	Y, r24
}
  20:	1b 83       	std	Y+3, r17	; 0x03
  22:	0a 83       	std	Y+2, r16	; 0x02
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6String12changeBufferEj+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
	return 0;
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
}
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String7reserveEj+0x32>
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6String7reserveEj+0x36>
  36:	81 e0       	ldi	r24, 0x01	; 1
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
	return 0;
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
}
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
  28:	88 81       	ld	r24, Y
  2a:	99 81       	ldd	r25, Y+1	; 0x01
  2c:	b7 01       	movw	r22, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC1EPKc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	11 82       	std	Z+1, r1	; 0x01
   8:	10 82       	st	Z, r1
   a:	13 82       	std	Z+3, r1	; 0x03
   c:	12 82       	std	Z+2, r1	; 0x02
   e:	15 82       	std	Z+5, r1	; 0x05
  10:	14 82       	std	Z+4, r1	; 0x04
  12:	16 82       	std	Z+6, r1	; 0x06
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
	return 0;
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC1EPKc+0x1a>
  1a:	eb 01       	movw	r28, r22
  1c:	09 90       	ld	r0, Y+
  1e:	00 20       	and	r0, r0
}
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	ae 01       	movw	r20, r28
  24:	41 50       	subi	r20, 0x01	; 1
  26:	50 40       	sbci	r21, 0x00	; 0
  28:	46 1b       	sub	r20, r22
  2a:	57 0b       	sbc	r21, r23
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	86 17       	cp	r24, r22
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	21 15       	cp	r18, r1
  14:	31 05       	cpc	r19, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
	return 0;
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	b9 01       	movw	r22, r18
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
}
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSERKS_+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  28:	ce 01       	movw	r24, r28
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC1ERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	11 82       	std	Z+1, r1	; 0x01
	if (buffer) return atol(buffer);
   4:	10 82       	st	Z, r1
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
   e:	16 82       	std	Z+6, r1	; 0x06
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
  14:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZN6StringaSEPKc+0xc>
   c:	db 01       	movw	r26, r22
   e:	0d 90       	ld	r0, X+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringaSEPKc+0x14>
  14:	ad 01       	movw	r20, r26
  16:	41 50       	subi	r20, 0x01	; 1
	return 0;
  18:	50 40       	sbci	r21, 0x00	; 0
  1a:	46 1b       	sub	r20, r22
  1c:	57 0b       	sbc	r21, r23
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
}
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSEPKc+0x24>
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  28:	ce 01       	movw	r24, r28
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC1Emh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a1 97       	sbiw	r28, 0x21	; 33
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
	return 0;
  18:	8c 01       	movw	r16, r24
  1a:	fc 01       	movw	r30, r24
  1c:	11 82       	std	Z+1, r1	; 0x01
  1e:	10 82       	st	Z, r1
}
  20:	13 82       	std	Z+3, r1	; 0x03
  22:	12 82       	std	Z+2, r1	; 0x02
  24:	15 82       	std	Z+5, r1	; 0x05
  26:	14 82       	std	Z+4, r1	; 0x04
  28:	16 82       	std	Z+6, r1	; 0x06
  2a:	cb 01       	movw	r24, r22
  2c:	ba 01       	movw	r22, r20
  2e:	ae 01       	movw	r20, r28
  30:	4f 5f       	subi	r20, 0xFF	; 255
  32:	5f 4f       	sbci	r21, 0xFF	; 255
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  3a:	c8 01       	movw	r24, r16
  3c:	be 01       	movw	r22, r28
  3e:	6f 5f       	subi	r22, 0xFF	; 255
  40:	7f 4f       	sbci	r23, 0xFF	; 255
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
  46:	a1 96       	adiw	r28, 0x21	; 33
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC1Elh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	a2 97       	sbiw	r28, 0x22	; 34
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
	return 0;
  18:	8c 01       	movw	r16, r24
  1a:	fc 01       	movw	r30, r24
  1c:	11 82       	std	Z+1, r1	; 0x01
  1e:	10 82       	st	Z, r1
}
  20:	13 82       	std	Z+3, r1	; 0x03
  22:	12 82       	std	Z+2, r1	; 0x02
  24:	15 82       	std	Z+5, r1	; 0x05
  26:	14 82       	std	Z+4, r1	; 0x04
  28:	16 82       	std	Z+6, r1	; 0x06
  2a:	cb 01       	movw	r24, r22
  2c:	ba 01       	movw	r22, r20
  2e:	ae 01       	movw	r20, r28
  30:	4f 5f       	subi	r20, 0xFF	; 255
  32:	5f 4f       	sbci	r21, 0xFF	; 255
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  3a:	c8 01       	movw	r24, r16
  3c:	be 01       	movw	r22, r28
  3e:	6f 5f       	subi	r22, 0xFF	; 255
  40:	7f 4f       	sbci	r23, 0xFF	; 255
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
  46:	a2 96       	adiw	r28, 0x22	; 34
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC1Ejh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	61 97       	sbiw	r28, 0x11	; 17
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
	return 0;
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
}
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	be 01       	movw	r22, r28
  2e:	6f 5f       	subi	r22, 0xFF	; 255
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	50 e0       	ldi	r21, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  38:	c8 01       	movw	r24, r16
  3a:	be 01       	movw	r22, r28
  3c:	6f 5f       	subi	r22, 0xFF	; 255
  3e:	7f 4f       	sbci	r23, 0xFF	; 255
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
  44:	61 96       	adiw	r28, 0x11	; 17
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC1Eih>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	62 97       	sbiw	r28, 0x12	; 18
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
	return 0;
  18:	8c 01       	movw	r16, r24
  1a:	cb 01       	movw	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
}
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	be 01       	movw	r22, r28
  2e:	6f 5f       	subi	r22, 0xFF	; 255
  30:	7f 4f       	sbci	r23, 0xFF	; 255
  32:	50 e0       	ldi	r21, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  38:	c8 01       	movw	r24, r16
  3a:	be 01       	movw	r22, r28
  3c:	6f 5f       	subi	r22, 0xFF	; 255
  3e:	7f 4f       	sbci	r23, 0xFF	; 255
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
  44:	62 96       	adiw	r28, 0x12	; 18
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC1Ehh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	29 97       	sbiw	r28, 0x09	; 9
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
	return 0;
  18:	8c 01       	movw	r16, r24
  1a:	86 2f       	mov	r24, r22
  1c:	f8 01       	movw	r30, r16
  1e:	11 82       	std	Z+1, r1	; 0x01
}
  20:	10 82       	st	Z, r1
  22:	13 82       	std	Z+3, r1	; 0x03
  24:	12 82       	std	Z+2, r1	; 0x02
  26:	15 82       	std	Z+5, r1	; 0x05
  28:	14 82       	std	Z+4, r1	; 0x04
  2a:	16 82       	std	Z+6, r1	; 0x06
  2c:	90 e0       	ldi	r25, 0x00	; 0
  2e:	be 01       	movw	r22, r28
  30:	6f 5f       	subi	r22, 0xFF	; 255
  32:	7f 4f       	sbci	r23, 0xFF	; 255
  34:	50 e0       	ldi	r21, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  3a:	c8 01       	movw	r24, r16
  3c:	be 01       	movw	r22, r28
  3e:	6f 5f       	subi	r22, 0xFF	; 255
  40:	7f 4f       	sbci	r23, 0xFF	; 255
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
  46:	29 96       	adiw	r28, 0x09	; 9
  48:	0f b6       	in	r0, 0x3f	; 63
  4a:	f8 94       	cli
  4c:	de bf       	out	0x3e, r29	; 62
  4e:	0f be       	out	0x3f, r0	; 63
  50:	cd bf       	out	0x3d, r28	; 61
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	0f 91       	pop	r16
  5a:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC1Ec>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	11 82       	std	Z+1, r1	; 0x01
  10:	10 82       	st	Z, r1
  12:	13 82       	std	Z+3, r1	; 0x03
  14:	12 82       	std	Z+2, r1	; 0x02
  16:	15 82       	std	Z+5, r1	; 0x05
	return 0;
  18:	14 82       	std	Z+4, r1	; 0x04
  1a:	16 82       	std	Z+6, r1	; 0x06
  1c:	69 83       	std	Y+1, r22	; 0x01
  1e:	1a 82       	std	Y+2, r1	; 0x02
}
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	7b 01       	movw	r14, r22
  10:	fc 01       	movw	r30, r24
  12:	c4 81       	ldd	r28, Z+4	; 0x04
  14:	d5 81       	ldd	r29, Z+5	; 0x05
  16:	61 15       	cp	r22, r1
	return 0;
  18:	71 05       	cpc	r23, r1
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6String6concatEPKcj+0x1c>
  1c:	41 15       	cp	r20, r1
  1e:	51 05       	cpc	r21, r1
}
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String6concatEPKcj+0x22>
  22:	c4 0f       	add	r28, r20
  24:	d5 1f       	adc	r29, r21
  26:	be 01       	movw	r22, r28
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6String6concatEPKcj+0x30>
  30:	f8 01       	movw	r30, r16
  32:	80 81       	ld	r24, Z
  34:	91 81       	ldd	r25, Z+1	; 0x01
  36:	24 81       	ldd	r18, Z+4	; 0x04
  38:	35 81       	ldd	r19, Z+5	; 0x05
  3a:	82 0f       	add	r24, r18
  3c:	93 1f       	adc	r25, r19
  3e:	b7 01       	movw	r22, r14
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  44:	f8 01       	movw	r30, r16
  46:	d5 83       	std	Z+5, r29	; 0x05
  48:	c4 83       	std	Z+4, r28	; 0x04
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6String6concatEPKcj+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fb 01       	movw	r30, r22
   2:	20 81       	ld	r18, Z
	if (buffer) return atol(buffer);
   4:	31 81       	ldd	r19, Z+1	; 0x01
   6:	44 81       	ldd	r20, Z+4	; 0x04
   8:	55 81       	ldd	r21, Z+5	; 0x05
   a:	b9 01       	movw	r22, r18
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
  10:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
	if (buffer) return atol(buffer);
   4:	01 f0       	breq	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String6concatEPKc+0xe>
   e:	ad 01       	movw	r20, r26
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
	return 0;
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
}
  20:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	69 83       	std	Y+1, r22	; 0x01
   e:	1a 82       	std	Y+2, r1	; 0x02
  10:	be 01       	movw	r22, r28
  12:	6f 5f       	subi	r22, 0xFF	; 255
  14:	7f 4f       	sbci	r23, 0xFF	; 255
  16:	41 e0       	ldi	r20, 0x01	; 1
	return 0;
  18:	50 e0       	ldi	r21, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
  1e:	0f 90       	pop	r0
}
  20:	0f 90       	pop	r0
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	0f 92       	push	r0
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
	return 0;
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
}
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	af 01       	movw	r20, r30
  34:	41 50       	subi	r20, 0x01	; 1
  36:	50 40       	sbci	r21, 0x00	; 0
  38:	40 1b       	sub	r20, r16
  3a:	51 0b       	sbc	r21, r17
  3c:	c7 01       	movw	r24, r14
  3e:	b8 01       	movw	r22, r16
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	0f 90       	pop	r0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
	return 0;
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
}
  20:	8e 01       	movw	r16, r28
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	b8 01       	movw	r22, r16
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	af 01       	movw	r20, r30
  3a:	41 50       	subi	r20, 0x01	; 1
  3c:	50 40       	sbci	r21, 0x00	; 0
  3e:	40 1b       	sub	r20, r16
  40:	51 0b       	sbc	r21, r17
  42:	c7 01       	movw	r24, r14
  44:	b8 01       	movw	r22, r16
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
  4a:	27 96       	adiw	r28, 0x07	; 7
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	cb 01       	movw	r24, r22
	return 0;
  18:	8e 01       	movw	r16, r28
  1a:	0f 5f       	subi	r16, 0xFF	; 255
  1c:	1f 4f       	sbci	r17, 0xFF	; 255
  1e:	b8 01       	movw	r22, r16
}
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  28:	f8 01       	movw	r30, r16
  2a:	01 90       	ld	r0, Z+
  2c:	00 20       	and	r0, r0
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6String6concatEj+0x30>
  30:	af 01       	movw	r20, r30
  32:	41 50       	subi	r20, 0x01	; 1
  34:	50 40       	sbci	r21, 0x00	; 0
  36:	40 1b       	sub	r20, r16
  38:	51 0b       	sbc	r21, r17
  3a:	c7 01       	movw	r24, r14
  3c:	b8 01       	movw	r22, r16
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
  42:	26 96       	adiw	r28, 0x06	; 6
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	ef 90       	pop	r14
  5a:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
	return 0;
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
}
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	50 40       	sbci	r21, 0x00	; 0
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	c7 01       	movw	r24, r14
  46:	b8 01       	movw	r22, r16
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
  4c:	2c 96       	adiw	r28, 0x0c	; 12
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
	return 0;
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
}
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	af 01       	movw	r20, r30
  3c:	41 50       	subi	r20, 0x01	; 1
  3e:	50 40       	sbci	r21, 0x00	; 0
  40:	40 1b       	sub	r20, r16
  42:	51 0b       	sbc	r21, r17
  44:	c7 01       	movw	r24, r14
  46:	b8 01       	movw	r22, r16
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
  4c:	2b 96       	adiw	r28, 0x0b	; 11
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	fb 01       	movw	r30, r22
   a:	20 81       	ld	r18, Z
   c:	31 81       	ldd	r19, Z+1	; 0x01
   e:	44 81       	ldd	r20, Z+4	; 0x04
  10:	55 81       	ldd	r21, Z+5	; 0x05
  12:	b9 01       	movw	r22, r18
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
	return 0;
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZplRK15StringSumHelperRK6String+0x1c>
  1c:	8d 2f       	mov	r24, r29
  1e:	9c 2f       	mov	r25, r28
}
  20:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  24:	8d 2f       	mov	r24, r29
  26:	9c 2f       	mov	r25, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	61 15       	cp	r22, r1
   8:	71 05       	cpc	r23, r1
   a:	01 f0       	breq	.+0      	; 0xc <_ZplRK15StringSumHelperPKc+0xc>
   c:	db 01       	movw	r26, r22
   e:	0d 90       	ld	r0, X+
  10:	00 20       	and	r0, r0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZplRK15StringSumHelperPKc+0x14>
  14:	ad 01       	movw	r20, r26
  16:	41 50       	subi	r20, 0x01	; 1
	return 0;
  18:	50 40       	sbci	r21, 0x00	; 0
  1a:	46 1b       	sub	r20, r22
  1c:	57 0b       	sbc	r21, r23
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
}
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZplRK15StringSumHelperPKc+0x26>
  26:	ce 01       	movw	r24, r28
  28:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  2c:	ce 01       	movw	r24, r28
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperc+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperh+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperi+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperj+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperl+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	d8 2f       	mov	r29, r24
   6:	c9 2f       	mov	r28, r25
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperm+0x10>
  10:	8d 2f       	mov	r24, r29
  12:	9c 2f       	mov	r25, r28
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
	return 0;
  18:	8d 2f       	mov	r24, r29
  1a:	9c 2f       	mov	r25, r28
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
}
  20:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	9c 01       	movw	r18, r24
   6:	db 01       	movw	r26, r22
   8:	fc 01       	movw	r30, r24
   a:	c0 81       	ld	r28, Z
   c:	d1 81       	ldd	r29, Z+1	; 0x01
   e:	ed 91       	ld	r30, X+
  10:	fc 91       	ld	r31, X
  12:	11 97       	sbiw	r26, 0x01	; 1
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String9compareToERKS_+0x18>
	return 0;
  18:	30 97       	sbiw	r30, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
  1c:	30 97       	sbiw	r30, 0x00	; 0
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZNK6String9compareToERKS_+0x20>
}
  20:	14 96       	adiw	r26, 0x04	; 4
  22:	8d 91       	ld	r24, X+
  24:	9c 91       	ld	r25, X
  26:	15 97       	sbiw	r26, 0x05	; 5
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String9compareToERKS_+0x2c>
  2c:	20 81       	ld	r18, Z
  2e:	30 e0       	ldi	r19, 0x00	; 0
  30:	30 95       	com	r19
  32:	21 95       	neg	r18
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZNK6String9compareToERKS_+0x38>
  38:	20 97       	sbiw	r28, 0x00	; 0
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZNK6String9compareToERKS_+0x3c>
  3c:	f9 01       	movw	r30, r18
  3e:	84 81       	ldd	r24, Z+4	; 0x04
  40:	95 81       	ldd	r25, Z+5	; 0x05
  42:	00 97       	sbiw	r24, 0x00	; 0
  44:	01 f0       	breq	.+0      	; 0x46 <_ZNK6String9compareToERKS_+0x46>
  46:	28 81       	ld	r18, Y
  48:	30 e0       	ldi	r19, 0x00	; 0
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZNK6String9compareToERKS_+0x4c>
  4c:	ce 01       	movw	r24, r28
  4e:	bf 01       	movw	r22, r30
  50:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  54:	9c 01       	movw	r18, r24
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String9compareToERKS_+0x58>
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	c9 01       	movw	r24, r18
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	44 81       	ldd	r20, Z+4	; 0x04
   a:	55 81       	ldd	r21, Z+5	; 0x05
   c:	24 17       	cp	r18, r20
   e:	35 07       	cpc	r19, r21
  10:	01 f4       	brne	.+0      	; 0x12 <_ZNK6String6equalsERKS_+0x12>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  16:	21 e0       	ldi	r18, 0x01	; 1
	return 0;
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZNK6String6equalsERKS_+0x1c>
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	82 2f       	mov	r24, r18
}
  20:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String6equalsEPKc+0xa>
   a:	81 e0       	ldi	r24, 0x01	; 1
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String6equalsEPKc+0x12>
  12:	fb 01       	movw	r30, r22
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	08 95       	ret
	return 0;
  18:	01 90       	ld	r0, Z+
  1a:	f0 81       	ld	r31, Z
  1c:	e0 2d       	mov	r30, r0
  1e:	61 15       	cp	r22, r1
}
  20:	71 05       	cpc	r23, r1
  22:	01 f4       	brne	.+0      	; 0x24 <_ZNK6String6equalsEPKc+0x24>
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	90 81       	ld	r25, Z
  28:	99 23       	and	r25, r25
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String6equalsEPKc+0x2c>
  2c:	80 e0       	ldi	r24, 0x00	; 0
  2e:	08 95       	ret
  30:	cf 01       	movw	r24, r30
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  36:	9c 01       	movw	r18, r24
  38:	81 e0       	ldi	r24, 0x01	; 1
  3a:	21 15       	cp	r18, r1
  3c:	31 05       	cpc	r19, r1
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZNK6String6equalsEPKc+0x40>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
	if (buffer) return atol(buffer);
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
	if (buffer) return atol(buffer);
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
	if (buffer) return atol(buffer);
   4:	21 e0       	ldi	r18, 0x01	; 1
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
	if (buffer) return atol(buffer);
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
	if (buffer) return atol(buffer);
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	dc 01       	movw	r26, r24
   e:	fb 01       	movw	r30, r22
  10:	86 17       	cp	r24, r22
  12:	97 07       	cpc	r25, r23
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
  16:	14 96       	adiw	r26, 0x04	; 4
	return 0;
  18:	8d 91       	ld	r24, X+
  1a:	9c 91       	ld	r25, X
  1c:	15 97       	sbiw	r26, 0x05	; 5
  1e:	24 81       	ldd	r18, Z+4	; 0x04
}
  20:	35 81       	ldd	r19, Z+5	; 0x05
  22:	82 17       	cp	r24, r18
  24:	93 07       	cpc	r25, r19
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String16equalsIgnoreCaseERKS_+0x2c>
  2c:	e0 80       	ld	r14, Z
  2e:	f1 80       	ldd	r15, Z+1	; 0x01
  30:	0d 91       	ld	r16, X+
  32:	1c 91       	ld	r17, X
  34:	11 97       	sbiw	r26, 0x01	; 1
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>
  38:	99 27       	eor	r25, r25
  3a:	87 fd       	sbrc	r24, 7
  3c:	90 95       	com	r25
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  42:	ec 01       	movw	r28, r24
  44:	f7 01       	movw	r30, r14
  46:	81 91       	ld	r24, Z+
  48:	7f 01       	movw	r14, r30
  4a:	99 27       	eor	r25, r25
  4c:	87 fd       	sbrc	r24, 7
  4e:	90 95       	com	r25
  50:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  54:	c8 17       	cp	r28, r24
  56:	d9 07       	cpc	r29, r25
  58:	01 f4       	brne	.+0      	; 0x5a <_ZNK6String16equalsIgnoreCaseERKS_+0x5a>
  5a:	f8 01       	movw	r30, r16
  5c:	81 91       	ld	r24, Z+
  5e:	8f 01       	movw	r16, r30
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
	if (buffer) return atol(buffer);
   4:	9a 01       	movw	r18, r20
   6:	14 96       	adiw	r26, 0x04	; 4
   8:	4d 91       	ld	r20, X+
   a:	5c 91       	ld	r21, X
   c:	15 97       	sbiw	r26, 0x05	; 5
   e:	84 81       	ldd	r24, Z+4	; 0x04
  10:	95 81       	ldd	r25, Z+5	; 0x05
  12:	84 1b       	sub	r24, r20
  14:	95 0b       	sbc	r25, r21
  16:	82 17       	cp	r24, r18
	return 0;
  18:	93 07       	cpc	r25, r19
  1a:	00 f0       	brcs	.+0      	; 0x1c <_ZNK6String10startsWithERKS_j+0x1c>
  1c:	80 81       	ld	r24, Z
  1e:	91 81       	ldd	r25, Z+1	; 0x01
}
  20:	00 97       	sbiw	r24, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String10startsWithERKS_j+0x24>
  24:	6d 91       	ld	r22, X+
  26:	7c 91       	ld	r23, X
  28:	11 97       	sbiw	r26, 0x01	; 1
  2a:	61 15       	cp	r22, r1
  2c:	71 05       	cpc	r23, r1
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZNK6String10startsWithERKS_j+0x30>
  30:	82 0f       	add	r24, r18
  32:	93 1f       	adc	r25, r19
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  38:	9c 01       	movw	r18, r24
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	21 15       	cp	r18, r1
  3e:	31 05       	cpc	r19, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZNK6String10startsWithERKS_j+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	08 95       	ret
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	24 81       	ldd	r18, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	35 81       	ldd	r19, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	44 81       	ldd	r20, Z+4	; 0x04
   a:	55 81       	ldd	r21, Z+5	; 0x05
   c:	24 17       	cp	r18, r20
   e:	35 07       	cpc	r19, r21
  10:	00 f0       	brcs	.+0      	; 0x12 <_ZNK6String10startsWithERKS_+0x12>
  12:	40 e0       	ldi	r20, 0x00	; 0
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
	return 0;
  1a:	08 95       	ret
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
	if (buffer) return atol(buffer);
   4:	84 81       	ldd	r24, Z+4	; 0x04
   6:	95 81       	ldd	r25, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	84 17       	cp	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	20 81       	ld	r18, Z
	return 0;
  18:	31 81       	ldd	r19, Z+1	; 0x01
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZNK6String8endsWithERKS_+0x20>
}
  20:	6d 91       	ld	r22, X+
  22:	7c 91       	ld	r23, X
  24:	11 97       	sbiw	r26, 0x01	; 1
  26:	61 15       	cp	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String8endsWithERKS_+0x2c>
  2c:	84 1b       	sub	r24, r20
  2e:	95 0b       	sbc	r25, r21
  30:	82 0f       	add	r24, r18
  32:	93 1f       	adc	r25, r19
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  38:	9c 01       	movw	r18, r24
  3a:	81 e0       	ldi	r24, 0x01	; 1
  3c:	21 15       	cp	r18, r1
  3e:	31 05       	cpc	r19, r1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZNK6String8endsWithERKS_+0x42>
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	08 95       	ret
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	e6 0f       	add	r30, r22
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
	return 0;
  18:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <_ZN6StringixEj+0x14>
  14:	10 92 00 00 	sts	0x0000, r1
	return 0;
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	08 95       	ret
  1e:	86 0f       	add	r24, r22
}
  20:	97 1f       	adc	r25, r23
  22:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	80 81       	ld	r24, Z
   e:	91 81       	ldd	r25, Z+1	; 0x01
  10:	00 97       	sbiw	r24, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <_ZNK6StringixEj+0x14>
  14:	68 0f       	add	r22, r24
  16:	79 1f       	adc	r23, r25
	return 0;
  18:	fb 01       	movw	r30, r22
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
}
  20:	08 95       	ret
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	08 95       	ret

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6charAtEj>
	if (buffer) return atol(buffer);
   4:	08 95       	ret

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	8b 01       	movw	r16, r22
   c:	41 15       	cp	r20, r1
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String8getBytesEPhjj+0x12>
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String8getBytesEPhjj+0x18>
	return 0;
  18:	c4 81       	ldd	r28, Z+4	; 0x04
  1a:	d5 81       	ldd	r29, Z+5	; 0x05
  1c:	2c 17       	cp	r18, r28
  1e:	3d 07       	cpc	r19, r29
}
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
  22:	fb 01       	movw	r30, r22
  24:	10 82       	st	Z, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZNK6String8getBytesEPhjj+0x28>
  28:	41 50       	subi	r20, 0x01	; 1
  2a:	50 40       	sbci	r21, 0x00	; 0
  2c:	c2 1b       	sub	r28, r18
  2e:	d3 0b       	sbc	r29, r19
  30:	4c 17       	cp	r20, r28
  32:	5d 07       	cpc	r21, r29
  34:	00 f4       	brcc	.+0      	; 0x36 <_ZNK6String8getBytesEPhjj+0x36>
  36:	ea 01       	movw	r28, r20
  38:	60 81       	ld	r22, Z
  3a:	71 81       	ldd	r23, Z+1	; 0x01
  3c:	62 0f       	add	r22, r18
  3e:	73 1f       	adc	r23, r19
  40:	c8 01       	movw	r24, r16
  42:	ae 01       	movw	r20, r28
  44:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
  48:	c0 0f       	add	r28, r16
  4a:	d1 1f       	adc	r29, r17
  4c:	18 82       	st	Y, r1
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	ca 01       	movw	r24, r20
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 17       	cp	r20, r18
   e:	53 07       	cpc	r21, r19
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfEcj+0x12>
  12:	c0 81       	ld	r28, Z
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	77 27       	eor	r23, r23
	return 0;
  18:	67 fd       	sbrc	r22, 7
  1a:	70 95       	com	r23
  1c:	8c 0f       	add	r24, r28
  1e:	9d 1f       	adc	r25, r29
}
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfEcj+0x28>
  28:	8c 1b       	sub	r24, r28
  2a:	9d 0b       	sbc	r25, r29
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZNK6String7indexOfEcj+0x2e>
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	9f ef       	ldi	r25, 0xFF	; 255
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
	if (buffer) return atol(buffer);
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
   8:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfERKS_j+0x10>
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	fb 01       	movw	r30, r22
  16:	60 81       	ld	r22, Z
	return 0;
  18:	71 81       	ldd	r23, Z+1	; 0x01
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
}
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String7indexOfERKS_j+0x28>
  28:	8c 1b       	sub	r24, r28
  2a:	9d 0b       	sbc	r25, r29
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZNK6String7indexOfERKS_j+0x2e>
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	9f ef       	ldi	r25, 0xFF	; 255
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
	if (buffer) return atol(buffer);
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
   8:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
	if (buffer) return atol(buffer);
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
	return 0;
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
  1a:	7a 01       	movw	r14, r20
  1c:	08 94       	sec
  1e:	e1 1c       	adc	r14, r1
}
  20:	f1 1c       	adc	r15, r1
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	ee 0d       	add	r30, r14
  28:	ff 1d       	adc	r31, r15
  2a:	d0 80       	ld	r13, Z
  2c:	10 82       	st	Z, r1
  2e:	08 81       	ld	r16, Y
  30:	19 81       	ldd	r17, Y+1	; 0x01
  32:	77 27       	eor	r23, r23
  34:	67 fd       	sbrc	r22, 7
  36:	70 95       	com	r23
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  3e:	0e 0d       	add	r16, r14
  40:	1f 1d       	adc	r17, r15
  42:	f8 01       	movw	r30, r16
  44:	d0 82       	st	Z, r13
  46:	00 97       	sbiw	r24, 0x00	; 0
  48:	01 f0       	breq	.+0      	; 0x4a <_ZNK6String11lastIndexOfEcj+0x4a>
  4a:	28 81       	ld	r18, Y
  4c:	39 81       	ldd	r19, Y+1	; 0x01
  4e:	82 1b       	sub	r24, r18
  50:	93 0b       	sbc	r25, r19
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZNK6String11lastIndexOfEcj+0x54>
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	9f ef       	ldi	r25, 0xFF	; 255
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	1f 91       	pop	r17
  5e:	0f 91       	pop	r16
  60:	ff 90       	pop	r15
  62:	ef 90       	pop	r14
  64:	df 90       	pop	r13
  66:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	50 40       	sbci	r21, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
   e:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
	if (buffer) return atol(buffer);
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	fc 01       	movw	r30, r24
  16:	6b 01       	movw	r12, r22
	return 0;
  18:	7a 01       	movw	r14, r20
  1a:	db 01       	movw	r26, r22
  1c:	14 96       	adiw	r26, 0x04	; 4
  1e:	2d 91       	ld	r18, X+
}
  20:	3c 91       	ld	r19, X
  22:	15 97       	sbiw	r26, 0x05	; 5
  24:	21 15       	cp	r18, r1
  26:	31 05       	cpc	r19, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String11lastIndexOfERKS_j+0x2a>
  2a:	84 81       	ldd	r24, Z+4	; 0x04
  2c:	95 81       	ldd	r25, Z+5	; 0x05
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String11lastIndexOfERKS_j+0x32>
  32:	82 17       	cp	r24, r18
  34:	93 07       	cpc	r25, r19
  36:	00 f0       	brcs	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
  38:	48 17       	cp	r20, r24
  3a:	59 07       	cpc	r21, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String11lastIndexOfERKS_j+0x3e>
  3e:	7c 01       	movw	r14, r24
  40:	08 94       	sec
  42:	e1 08       	sbc	r14, r1
  44:	f1 08       	sbc	r15, r1
  46:	00 81       	ld	r16, Z
  48:	11 81       	ldd	r17, Z+1	; 0x01
  4a:	c8 01       	movw	r24, r16
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	df ef       	ldi	r29, 0xFF	; 255
  50:	58 01       	movw	r10, r16
  52:	ae 0c       	add	r10, r14
  54:	bf 1c       	adc	r11, r15
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfERKS_j+0x58>
  58:	f6 01       	movw	r30, r12
  5a:	60 81       	ld	r22, Z
  5c:	71 81       	ldd	r23, Z+1	; 0x01
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  62:	00 97       	sbiw	r24, 0x00	; 0
  64:	01 f0       	breq	.+0      	; 0x66 <_ZNK6String11lastIndexOfERKS_j+0x66>
  66:	9c 01       	movw	r18, r24
  68:	20 1b       	sub	r18, r16
  6a:	31 0b       	sbc	r19, r17
  6c:	e2 16       	cp	r14, r18
  6e:	f3 06       	cpc	r15, r19
  70:	00 f4       	brcc	.+0      	; 0x72 <_ZNK6String11lastIndexOfERKS_j+0x72>
  72:	9e 01       	movw	r18, r28
  74:	01 96       	adiw	r24, 0x01	; 1
  76:	e9 01       	movw	r28, r18
  78:	a8 16       	cp	r10, r24
  7a:	b9 06       	cpc	r11, r25
  7c:	00 f4       	brcc	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZNK6String11lastIndexOfERKS_j+0x80>
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	df ef       	ldi	r29, 0xFF	; 255
  84:	ce 01       	movw	r24, r28
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	fc 01       	movw	r30, r24
   2:	44 81       	ldd	r20, Z+4	; 0x04
	if (buffer) return atol(buffer);
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	42 1b       	sub	r20, r18
   e:	53 0b       	sbc	r21, r19
  10:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
  14:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
	if (buffer) return atol(buffer);
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	6c 01       	movw	r12, r24
  14:	7b 01       	movw	r14, r22
  16:	8a 01       	movw	r16, r20
	return 0;
  18:	e9 01       	movw	r28, r18
  1a:	24 17       	cp	r18, r20
  1c:	35 07       	cpc	r19, r21
  1e:	00 f4       	brcc	.+0      	; 0x20 <_ZNK6String9substringEjj+0x20>
}
  20:	81 2f       	mov	r24, r17
  22:	89 01       	movw	r16, r18
  24:	c4 2f       	mov	r28, r20
  26:	d8 2f       	mov	r29, r24
  28:	c6 01       	movw	r24, r12
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  32:	d7 01       	movw	r26, r14
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	80 17       	cp	r24, r16
  3e:	91 07       	cpc	r25, r17
  40:	00 f0       	brcs	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	8c 17       	cp	r24, r28
  44:	9d 07       	cpc	r25, r29
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	ec 01       	movw	r28, r24
  4a:	d7 01       	movw	r26, r14
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	b0 80       	ld	r11, Z
  58:	10 82       	st	Z, r1
  5a:	6d 91       	ld	r22, X+
  5c:	7c 91       	ld	r23, X
  5e:	60 0f       	add	r22, r16
  60:	71 1f       	adc	r23, r17
  62:	c6 01       	movw	r24, r12
  64:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
  68:	d7 01       	movw	r26, r14
  6a:	ed 91       	ld	r30, X+
  6c:	fc 91       	ld	r31, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	ec 0f       	add	r30, r28
  72:	fd 1f       	adc	r31, r29
  74:	b0 82       	st	Z, r11
  76:	c6 01       	movw	r24, r12
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	ef 90       	pop	r14
  84:	df 90       	pop	r13
  86:	cf 90       	pop	r12
  88:	bf 90       	pop	r11
  8a:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
  10:	ce 01       	movw	r24, r28
  12:	df 91       	pop	r29
  14:	cf 91       	pop	r28
  16:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	dc 01       	movw	r26, r24
   2:	ed 91       	ld	r30, X+
	if (buffer) return atol(buffer);
   4:	fc 91       	ld	r31, X
   6:	11 97       	sbiw	r26, 0x01	; 1
   8:	30 97       	sbiw	r30, 0x00	; 0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6String7replaceEcc+0xc>
   c:	08 95       	ret
   e:	86 17       	cp	r24, r22
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String7replaceEcc+0x12>
  12:	40 83       	st	Z, r20
  14:	31 96       	adiw	r30, 0x01	; 1
  16:	80 81       	ld	r24, Z
	return 0;
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String7replaceEcc+0x1c>
  1c:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
	if (buffer) return atol(buffer);
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
	return 0;
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29
}
  20:	6c 01       	movw	r12, r24
  22:	2b 01       	movw	r4, r22
  24:	5a 01       	movw	r10, r20
  26:	dc 01       	movw	r26, r24
  28:	14 96       	adiw	r26, 0x04	; 4
  2a:	8d 90       	ld	r8, X+
  2c:	9c 90       	ld	r9, X
  2e:	15 97       	sbiw	r26, 0x05	; 5
  30:	81 14       	cp	r8, r1
  32:	91 04       	cpc	r9, r1
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6String7replaceERKS_S1_+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6String7replaceERKS_S1_+0x38>
  38:	fb 01       	movw	r30, r22
  3a:	e4 80       	ldd	r14, Z+4	; 0x04
  3c:	f5 80       	ldd	r15, Z+5	; 0x05
  3e:	e1 14       	cp	r14, r1
  40:	f1 04       	cpc	r15, r1
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN6String7replaceERKS_S1_+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6String7replaceERKS_S1_+0x46>
  46:	da 01       	movw	r26, r20
  48:	14 96       	adiw	r26, 0x04	; 4
  4a:	6d 90       	ld	r6, X+
  4c:	7c 90       	ld	r7, X
  4e:	15 97       	sbiw	r26, 0x05	; 5
  50:	6e 18       	sub	r6, r14
  52:	7f 08       	sbc	r7, r15
  54:	fc 01       	movw	r30, r24
  56:	00 81       	ld	r16, Z
  58:	11 81       	ldd	r17, Z+1	; 0x01
  5a:	61 14       	cp	r6, r1
  5c:	71 04       	cpc	r7, r1
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6String7replaceERKS_S1_+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6String7replaceERKS_S1_+0x62>
  62:	d5 01       	movw	r26, r10
  64:	6c 91       	ld	r22, X
  66:	11 96       	adiw	r26, 0x01	; 1
  68:	7c 91       	ld	r23, X
  6a:	11 97       	sbiw	r26, 0x01	; 1
  6c:	14 96       	adiw	r26, 0x04	; 4
  6e:	4d 91       	ld	r20, X+
  70:	5c 91       	ld	r21, X
  72:	15 97       	sbiw	r26, 0x05	; 5
  74:	ce 01       	movw	r24, r28
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  7a:	f5 01       	movw	r30, r10
  7c:	04 81       	ldd	r16, Z+4	; 0x04
  7e:	15 81       	ldd	r17, Z+5	; 0x05
  80:	0c 0f       	add	r16, r28
  82:	1d 1f       	adc	r17, r29
  84:	d2 01       	movw	r26, r4
  86:	6d 91       	ld	r22, X+
  88:	7c 91       	ld	r23, X
  8a:	c8 01       	movw	r24, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  90:	ec 01       	movw	r28, r24
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	01 f4       	brne	.+0      	; 0x96 <_ZN6String7replaceERKS_S1_+0x96>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN6String7replaceERKS_S1_+0x98>
  98:	77 fc       	sbrc	r7, 7
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN6String7replaceERKS_S1_+0x9c>
  9c:	e4 01       	movw	r28, r8
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	78 01       	movw	r14, r16
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
  a4:	e4 01       	movw	r28, r8
  a6:	c0 1b       	sub	r28, r16
  a8:	d1 0b       	sbc	r29, r17
  aa:	c7 01       	movw	r24, r14
  ac:	b8 01       	movw	r22, r16
  ae:	ae 01       	movw	r20, r28
  b0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  b4:	ce 0d       	add	r28, r14
  b6:	df 1d       	adc	r29, r15
  b8:	f5 01       	movw	r30, r10
  ba:	60 81       	ld	r22, Z
  bc:	71 81       	ldd	r23, Z+1	; 0x01
  be:	44 81       	ldd	r20, Z+4	; 0x04
  c0:	55 81       	ldd	r21, Z+5	; 0x05
  c2:	ce 01       	movw	r24, r28
  c4:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  c8:	d5 01       	movw	r26, r10
  ca:	14 96       	adiw	r26, 0x04	; 4
  cc:	ed 90       	ld	r14, X+
  ce:	fc 90       	ld	r15, X
  d0:	15 97       	sbiw	r26, 0x05	; 5
  d2:	ec 0e       	add	r14, r28
  d4:	fd 1e       	adc	r15, r29
  d6:	f2 01       	movw	r30, r4
  d8:	04 81       	ldd	r16, Z+4	; 0x04
  da:	15 81       	ldd	r17, Z+5	; 0x05
  dc:	08 0d       	add	r16, r8
  de:	19 1d       	adc	r17, r9
  e0:	d6 01       	movw	r26, r12
  e2:	14 96       	adiw	r26, 0x04	; 4
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	15 97       	sbiw	r26, 0x05	; 5
  ea:	86 0d       	add	r24, r6
  ec:	97 1d       	adc	r25, r7
  ee:	15 96       	adiw	r26, 0x05	; 5
  f0:	9c 93       	st	X, r25
  f2:	8e 93       	st	-X, r24
  f4:	14 97       	sbiw	r26, 0x04	; 4
  f6:	f2 01       	movw	r30, r4
  f8:	60 81       	ld	r22, Z
  fa:	71 81       	ldd	r23, Z+1	; 0x01
  fc:	c8 01       	movw	r24, r16
  fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 102:	4c 01       	movw	r8, r24
 104:	00 97       	sbiw	r24, 0x00	; 0
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN6String7replaceERKS_S1_+0x108>
 108:	c7 01       	movw	r24, r14
 10a:	b8 01       	movw	r22, r16
 10c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN6String7replaceERKS_S1_+0x112>
 112:	8c 01       	movw	r16, r24
 114:	0e 0d       	add	r16, r14
 116:	1f 1d       	adc	r17, r15
 118:	c6 0d       	add	r28, r6
 11a:	d7 1d       	adc	r29, r7
 11c:	d2 01       	movw	r26, r4
 11e:	6d 91       	ld	r22, X+
 120:	7c 91       	ld	r23, X
 122:	c8 01       	movw	r24, r16
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	01 f4       	brne	.+0      	; 0x12c <_ZN6String7replaceERKS_S1_+0x12c>
 12c:	c8 15       	cp	r28, r8
 12e:	d9 05       	cpc	r29, r9
 130:	01 f4       	brne	.+0      	; 0x132 <_ZN6String7replaceERKS_S1_+0x132>
 132:	00 c0       	rjmp	.+0      	; 0x134 <_ZN6String7replaceERKS_S1_+0x134>
 134:	f6 01       	movw	r30, r12
 136:	82 81       	ldd	r24, Z+2	; 0x02
 138:	93 81       	ldd	r25, Z+3	; 0x03
 13a:	8c 17       	cp	r24, r28
 13c:	9d 07       	cpc	r25, r29
 13e:	00 f0       	brcs	.+0      	; 0x140 <_ZN6String7replaceERKS_S1_+0x140>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_ZN6String7replaceERKS_S1_+0x142>
 142:	c6 01       	movw	r24, r12
 144:	be 01       	movw	r22, r28
 146:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 14a:	88 23       	and	r24, r24
 14c:	01 f4       	brne	.+0      	; 0x14e <_ZN6String7replaceERKS_S1_+0x14e>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <_ZN6String7replaceERKS_S1_+0x150>
 150:	00 c0       	rjmp	.+0      	; 0x152 <_ZN6String7replaceERKS_S1_+0x152>
 152:	c6 01       	movw	r24, r12
 154:	b2 01       	movw	r22, r4
 156:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 15a:	ec 01       	movw	r28, r24
 15c:	97 fd       	sbrc	r25, 7
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_ZN6String7replaceERKS_S1_+0x160>
 160:	d6 01       	movw	r26, r12
 162:	6d 91       	ld	r22, X+
 164:	7c 91       	ld	r23, X
 166:	11 97       	sbiw	r26, 0x01	; 1
 168:	f2 01       	movw	r30, r4
 16a:	84 81       	ldd	r24, Z+4	; 0x04
 16c:	95 81       	ldd	r25, Z+5	; 0x05
 16e:	8c 0f       	add	r24, r28
 170:	9d 1f       	adc	r25, r29
 172:	68 0f       	add	r22, r24
 174:	79 1f       	adc	r23, r25
 176:	14 96       	adiw	r26, 0x04	; 4
 178:	4d 91       	ld	r20, X+
 17a:	5c 91       	ld	r21, X
 17c:	15 97       	sbiw	r26, 0x05	; 5
 17e:	48 1b       	sub	r20, r24
 180:	59 0b       	sbc	r21, r25
 182:	cb 01       	movw	r24, r22
 184:	86 0d       	add	r24, r6
 186:	97 1d       	adc	r25, r7
 188:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 18c:	d6 01       	movw	r26, r12
 18e:	14 96       	adiw	r26, 0x04	; 4
 190:	8d 91       	ld	r24, X+
 192:	9c 91       	ld	r25, X
 194:	15 97       	sbiw	r26, 0x05	; 5
 196:	86 0d       	add	r24, r6
 198:	97 1d       	adc	r25, r7
 19a:	15 96       	adiw	r26, 0x05	; 5
 19c:	9c 93       	st	X, r25
 19e:	8e 93       	st	-X, r24
 1a0:	14 97       	sbiw	r26, 0x04	; 4
 1a2:	ed 91       	ld	r30, X+
 1a4:	fc 91       	ld	r31, X
 1a6:	11 97       	sbiw	r26, 0x01	; 1
 1a8:	e8 0f       	add	r30, r24
 1aa:	f9 1f       	adc	r31, r25
 1ac:	10 82       	st	Z, r1
 1ae:	8d 91       	ld	r24, X+
 1b0:	9c 91       	ld	r25, X
 1b2:	8c 0f       	add	r24, r28
 1b4:	9d 1f       	adc	r25, r29
 1b6:	f5 01       	movw	r30, r10
 1b8:	60 81       	ld	r22, Z
 1ba:	71 81       	ldd	r23, Z+1	; 0x01
 1bc:	44 81       	ldd	r20, Z+4	; 0x04
 1be:	55 81       	ldd	r21, Z+5	; 0x05
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 1c4:	ae 01       	movw	r20, r28
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <_ZN6String7replaceERKS_S1_+0x1c8>
 1c8:	d6 01       	movw	r26, r12
 1ca:	14 96       	adiw	r26, 0x04	; 4
 1cc:	4d 91       	ld	r20, X+
 1ce:	5c 91       	ld	r21, X
 1d0:	15 97       	sbiw	r26, 0x05	; 5
 1d2:	41 50       	subi	r20, 0x01	; 1
 1d4:	50 40       	sbci	r21, 0x00	; 0
 1d6:	57 ff       	sbrs	r21, 7
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <_ZN6String7replaceERKS_S1_+0x1da>
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	1f 91       	pop	r17
 1e0:	0f 91       	pop	r16
 1e2:	ff 90       	pop	r15
 1e4:	ef 90       	pop	r14
 1e6:	df 90       	pop	r13
 1e8:	cf 90       	pop	r12
 1ea:	bf 90       	pop	r11
 1ec:	af 90       	pop	r10
 1ee:	9f 90       	pop	r9
 1f0:	8f 90       	pop	r8
 1f2:	7f 90       	pop	r7
 1f4:	6f 90       	pop	r6
 1f6:	5f 90       	pop	r5
 1f8:	4f 90       	pop	r4
 1fa:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
	return 0;
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
}
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
	return 0;
  1a:	89 93       	st	Y+, r24
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
}
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
	if (buffer) return atol(buffer);
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	6c 01       	movw	r12, r24
  16:	dc 01       	movw	r26, r24
	return 0;
  18:	ed 90       	ld	r14, X+
  1a:	fc 90       	ld	r15, X
  1c:	11 97       	sbiw	r26, 0x01	; 1
  1e:	e1 14       	cp	r14, r1
}
  20:	f1 04       	cpc	r15, r1
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6String4trimEv+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6String4trimEv+0x26>
  26:	14 96       	adiw	r26, 0x04	; 4
  28:	ad 90       	ld	r10, X+
  2a:	bc 90       	ld	r11, X
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	a1 14       	cp	r10, r1
  30:	b1 04       	cpc	r11, r1
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6String4trimEv+0x34>
  34:	e7 01       	movw	r28, r14
  36:	8e 01       	movw	r16, r28
  38:	21 96       	adiw	r28, 0x01	; 1
  3a:	f8 01       	movw	r30, r16
  3c:	80 81       	ld	r24, Z
  3e:	99 27       	eor	r25, r25
  40:	87 fd       	sbrc	r24, 7
  42:	90 95       	com	r25
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6String4trimEv+0x4c>
  4c:	e5 01       	movw	r28, r10
  4e:	21 97       	sbiw	r28, 0x01	; 1
  50:	ce 0d       	add	r28, r14
  52:	df 1d       	adc	r29, r15
  54:	88 81       	ld	r24, Y
  56:	99 27       	eor	r25, r25
  58:	87 fd       	sbrc	r24, 7
  5a:	90 95       	com	r25
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6String4trimEv+0x64>
  64:	c0 17       	cp	r28, r16
  66:	d1 07       	cpc	r29, r17
  68:	00 f0       	brcs	.+0      	; 0x6a <_ZN6String4trimEv+0x6a>
  6a:	21 97       	sbiw	r28, 0x01	; 1
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6String4trimEv+0x6e>
  6e:	ae 01       	movw	r20, r28
  70:	4f 5f       	subi	r20, 0xFF	; 255
  72:	5f 4f       	sbci	r21, 0xFF	; 255
  74:	40 1b       	sub	r20, r16
  76:	51 0b       	sbc	r21, r17
  78:	d6 01       	movw	r26, r12
  7a:	15 96       	adiw	r26, 0x05	; 5
  7c:	5c 93       	st	X, r21
  7e:	4e 93       	st	-X, r20
  80:	14 97       	sbiw	r26, 0x04	; 4
  82:	e0 16       	cp	r14, r16
  84:	f1 06       	cpc	r15, r17
  86:	00 f4       	brcc	.+0      	; 0x88 <_ZN6String4trimEv+0x88>
  88:	c7 01       	movw	r24, r14
  8a:	b8 01       	movw	r22, r16
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  90:	d6 01       	movw	r26, r12
  92:	ed 91       	ld	r30, X+
  94:	fc 91       	ld	r31, X
  96:	11 97       	sbiw	r26, 0x01	; 1
  98:	14 96       	adiw	r26, 0x04	; 4
  9a:	8d 91       	ld	r24, X+
  9c:	9c 91       	ld	r25, X
  9e:	15 97       	sbiw	r26, 0x05	; 5
  a0:	e8 0f       	add	r30, r24
  a2:	f9 1f       	adc	r31, r25
  a4:	10 82       	st	Z, r1
  a6:	df 91       	pop	r29
  a8:	cf 91       	pop	r28
  aa:	1f 91       	pop	r17
  ac:	0f 91       	pop	r16
  ae:	ff 90       	pop	r15
  b0:	ef 90       	pop	r14
  b2:	df 90       	pop	r13
  b4:	cf 90       	pop	r12
  b6:	bf 90       	pop	r11
  b8:	af 90       	pop	r10
  ba:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:
/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	if (buffer) return atol(buffer);
   4:	fc 01       	movw	r30, r24
   6:	80 81       	ld	r24, Z
   8:	91 81       	ldd	r25, Z+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZNK6String5toIntEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
  12:	8b 01       	movw	r16, r22
  14:	9c 01       	movw	r18, r24
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZNK6String5toIntEv+0x18>
	return 0;
  18:	00 e0       	ldi	r16, 0x00	; 0
  1a:	10 e0       	ldi	r17, 0x00	; 0
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	30 e0       	ldi	r19, 0x00	; 0
}
  20:	b8 01       	movw	r22, r16
  22:	c9 01       	movw	r24, r18
  24:	1f 91       	pop	r17
  26:	0f 91       	pop	r16
  28:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000005e8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002c5f  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.startup.main 0000001a  00000000  00000000  0000327b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.startup.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
{
	init();
   0:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USB.attach();
#endif
	
	setup();
   4:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   8:	c0 e0       	ldi	r28, 0x00	; 0
   a:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f0       	breq	.+0      	; 0x14 <main+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <main>
  18:	00 c0       	rjmp	.+0      	; 0x1a <__zero_reg__+0x19>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000665  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Znwj   00000006  00000000  00000000  00000a71  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZdlPv  00000006  00000000  00000000  00000a77  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__cxa_guard_acquire 00000014  00000000  00000000  00000a7d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__cxa_guard_release 00000008  00000000  00000000  00000a91  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__cxa_guard_abort 00000002  00000000  00000000  00000a99  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.__cxa_pure_virtual 00000002  00000000  00000000  00000a9b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text._Znwj:

00000000 <_Znwj>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 

void __cxa_pure_virtual(void) {};
   0:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
   4:	08 95       	ret

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
   4:	08 95       	ret

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
   0:	21 e0       	ldi	r18, 0x01	; 1
   2:	fc 01       	movw	r30, r24
   4:	20 83       	st	Z, r18
   6:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
   0:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:
   0:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b10  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000f56  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.__vector_23 00000094  00000000  00000000  00001a9a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.millis  00000024  00000000  00000000  00001b2e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.micros  00000054  00000000  00000000  00001b52  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.delay   00000052  00000000  00000000  00001ba6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delayMicroseconds 00000014  00000000  00000000  00001bf8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.init    000000c4  00000000  00000000  00001c0c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .bss.timer0_millis 00000004  00000000  00000000  00001cd0  2**0
                  ALLOC
 12 .bss.timer0_overflow_count 00000004  00000000  00000000  00001cd0  2**0
                  ALLOC
 13 .bss.timer0_fract 00000001  00000000  00000000  00001cd0  2**0
                  ALLOC

Disassembly of section .text.__vector_23:

00000000 <__vector_23>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	1f 92       	push	r1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
	sbi(TCCR0A, WGM00);
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
	sbi(TCCR0B, CS00);
  14:	bf 93       	push	r27
  16:	80 91 00 00 	lds	r24, 0x0000

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  26:	30 91 00 00 	lds	r19, 0x0000

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	23 2f       	mov	r18, r19
  2c:	2d 5f       	subi	r18, 0xFD	; 253
  2e:	2d 37       	cpi	r18, 0x7D	; 125
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	00 f4       	brcc	.+0      	; 0x32 <__vector_23+0x32>
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	a1 1d       	adc	r26, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	b1 1d       	adc	r27, r1
  38:	00 c0       	rjmp	.+0      	; 0x3a <__vector_23+0x3a>
  3a:	23 2f       	mov	r18, r19
  3c:	2a 57       	subi	r18, 0x7A	; 122
  3e:	02 96       	adiw	r24, 0x02	; 2

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
  44:	20 93 00 00 	sts	0x0000, r18
  48:	80 93 00 00 	sts	0x0000, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4c:	90 93 00 00 	sts	0x0000, r25
  50:	a0 93 00 00 	sts	0x0000, r26
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
  54:	b0 93 00 00 	sts	0x0000, r27
  58:	80 91 00 00 	lds	r24, 0x0000
  5c:	90 91 00 00 	lds	r25, 0x0000
	sbi(TCCR3B, CS30);
  60:	a0 91 00 00 	lds	r26, 0x0000
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
  64:	b0 91 00 00 	lds	r27, 0x0000
  68:	01 96       	adiw	r24, 0x01	; 1
  6a:	a1 1d       	adc	r26, r1
  6c:	b1 1d       	adc	r27, r1
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
  6e:	80 93 00 00 	sts	0x0000, r24
  72:	90 93 00 00 	sts	0x0000, r25
  76:	a0 93 00 00 	sts	0x0000, r26
	sbi(TCCR4B, CS40);
  7a:	b0 93 00 00 	sts	0x0000, r27
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
  7e:	bf 91       	pop	r27
  80:	af 91       	pop	r26
  82:	9f 91       	pop	r25
  84:	8f 91       	pop	r24
  86:	3f 91       	pop	r19
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
  88:	2f 91       	pop	r18
  8a:	0f 90       	pop	r0
  8c:	0f be       	out	0x3f, r0	; 63
  8e:	0f 90       	pop	r0
  90:	1f 90       	pop	r1
	sbi(TCCR5B, CS50);
  92:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	0f 93       	push	r16
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	1f 93       	push	r17
   4:	8f b7       	in	r24, 0x3f	; 63
   6:	f8 94       	cli
	sbi(TCCR0A, WGM00);
   8:	00 91 00 00 	lds	r16, 0x0000
   c:	10 91 00 00 	lds	r17, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0B, CS00);
  14:	30 91 00 00 	lds	r19, 0x0000
  18:	8f bf       	out	0x3f, r24	; 63

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	b8 01       	movw	r22, r16
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	0f 93       	push	r16
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	1f 93       	push	r17
   4:	9f b7       	in	r25, 0x3f	; 63
   6:	f8 94       	cli
	sbi(TCCR0A, WGM00);
   8:	00 91 00 00 	lds	r16, 0x0000
   c:	10 91 00 00 	lds	r17, 0x0000
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
  10:	20 91 00 00 	lds	r18, 0x0000
	sbi(TCCR0B, CS00);
  14:	30 91 00 00 	lds	r19, 0x0000
  18:	86 b5       	in	r24, 0x26	; 38

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	a8 9b       	sbis	0x15, 0	; 21
  1c:	00 c0       	rjmp	.+0      	; 0x1e <micros+0x1e>
  1e:	8f 3f       	cpi	r24, 0xFF	; 255
  20:	01 f0       	breq	.+0      	; 0x22 <micros+0x22>
  22:	0f 5f       	subi	r16, 0xFF	; 255
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	2f 4f       	sbci	r18, 0xFF	; 255
  28:	3f 4f       	sbci	r19, 0xFF	; 255

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	9f bf       	out	0x3f, r25	; 63
  2c:	32 2f       	mov	r19, r18
  2e:	21 2f       	mov	r18, r17
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	10 2f       	mov	r17, r16
  32:	00 27       	eor	r16, r16
  34:	08 0f       	add	r16, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	11 1d       	adc	r17, r1
  38:	21 1d       	adc	r18, r1
  3a:	31 1d       	adc	r19, r1
  3c:	42 e0       	ldi	r20, 0x02	; 2
  3e:	00 0f       	add	r16, r16

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	11 1f       	adc	r17, r17
  42:	22 1f       	adc	r18, r18
  44:	33 1f       	adc	r19, r19
  46:	4a 95       	dec	r20
  48:	01 f4       	brne	.+0      	; 0x4a <micros+0x4a>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	b8 01       	movw	r22, r16
  4c:	c9 01       	movw	r24, r18
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	cf 92       	push	r12
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
	sbi(TCCR0A, WGM00);
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	6b 01       	movw	r12, r22
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	7c 01       	movw	r14, r24
  10:	0e 94 00 00 	call	0	; 0x0 <delay>
	sbi(TCCR0B, CS00);
  14:	dc 01       	movw	r26, r24
  16:	cb 01       	movw	r24, r22
  18:	ec 01       	movw	r28, r24

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	00 c0       	rjmp	.+0      	; 0x1c <delay+0x1c>
  1c:	0e 94 00 00 	call	0	; 0x0 <delay>
  20:	6c 1b       	sub	r22, r28
  22:	7d 0b       	sbc	r23, r29
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	83 e0       	ldi	r24, 0x03	; 3
  26:	68 3e       	cpi	r22, 0xE8	; 232
  28:	78 07       	cpc	r23, r24

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	00 f0       	brcs	.+0      	; 0x2c <delay+0x2c>
  2c:	08 94       	sec
  2e:	c1 08       	sbc	r12, r1
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	d1 08       	sbc	r13, r1
  32:	e1 08       	sbc	r14, r1
  34:	f1 08       	sbc	r15, r1
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	c8 51       	subi	r28, 0x18	; 24
  38:	dc 4f       	sbci	r29, 0xFC	; 252
  3a:	c1 14       	cp	r12, r1
  3c:	d1 04       	cpc	r13, r1
  3e:	e1 04       	cpc	r14, r1

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	f1 04       	cpc	r15, r1
  42:	01 f4       	brne	.+0      	; 0x44 <delay+0x44>
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	ff 90       	pop	r15

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	ef 90       	pop	r14
  4c:	df 90       	pop	r13
  4e:	cf 90       	pop	r12
  50:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	01 97       	sbiw	r24, 0x01	; 1
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	01 f0       	breq	.+0      	; 0x4 <delayMicroseconds+0x4>
   4:	88 0f       	add	r24, r24
   6:	99 1f       	adc	r25, r25
	sbi(TCCR0A, WGM00);
   8:	88 0f       	add	r24, r24
   a:	99 1f       	adc	r25, r25
   c:	02 97       	sbiw	r24, 0x02	; 2
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <delayMicroseconds+0x12>
  12:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
  14:	85 b5       	in	r24, 0x25	; 37
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	e1 e8       	ldi	r30, 0x81	; 129
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
  2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	80 81       	ld	r24, Z
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
  48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
  54:	e1 e9       	ldi	r30, 0x91	; 145
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
  5e:	80 81       	ld	r24, Z
  60:	81 60       	ori	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
  64:	e0 e9       	ldi	r30, 0x90	; 144
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	80 83       	st	Z, r24
#endif
	
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
  6e:	e1 ea       	ldi	r30, 0xA1	; 161
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	82 60       	ori	r24, 0x02	; 2
  76:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
  7e:	e0 ea       	ldi	r30, 0xA0	; 160
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	81 60       	ori	r24, 0x01	; 1
  86:	80 83       	st	Z, r24
#endif

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
  88:	e1 e2       	ldi	r30, 0x21	; 33
  8a:	f1 e0       	ldi	r31, 0x01	; 1
  8c:	80 81       	ld	r24, Z
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
  98:	e0 e2       	ldi	r30, 0x20	; 32
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	80 81       	ld	r24, Z
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  be:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
  c2:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000a2c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000eef  00000000  00000000  00000a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.analogReference 00000006  00000000  00000000  0000194f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.analogRead 00000064  00000000  00000000  00001955  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogWrite 000001b8  00000000  00000000  000019b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .data.analog_reference 00000001  00000000  00000000  00001b71  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text.analogReference:

00000000 <analogReference>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	80 93 00 00 	sts	0x0000, r24
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:
   0:	86 33       	cpi	r24, 0x36	; 54
   2:	00 f0       	brcs	.+0      	; 0x4 <analogRead+0x4>
   4:	86 53       	subi	r24, 0x36	; 54
   6:	90 91 7b 00 	lds	r25, 0x007B
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	28 2f       	mov	r18, r24
   c:	26 95       	lsr	r18
   e:	26 95       	lsr	r18
	if (val == 0)
  10:	26 95       	lsr	r18
  12:	30 e0       	ldi	r19, 0x00	; 0
	{
		digitalWrite(pin, LOW);
  14:	21 70       	andi	r18, 0x01	; 1
  16:	30 70       	andi	r19, 0x00	; 0
	}
	else if (val == 255)
  18:	43 e0       	ldi	r20, 0x03	; 3
  1a:	22 0f       	add	r18, r18
  1c:	33 1f       	adc	r19, r19
	{
		digitalWrite(pin, HIGH);
  1e:	4a 95       	dec	r20
  20:	01 f4       	brne	.+0      	; 0x22 <analogRead+0x22>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  22:	97 7f       	andi	r25, 0xF7	; 247
  24:	92 2b       	or	r25, r18
  26:	90 93 7b 00 	sts	0x007B, r25
  2a:	87 70       	andi	r24, 0x07	; 7
  2c:	90 91 00 00 	lds	r25, 0x0000
  30:	92 95       	swap	r25
  32:	99 0f       	add	r25, r25
  34:	99 0f       	add	r25, r25
  36:	90 7c       	andi	r25, 0xC0	; 192
  38:	98 2b       	or	r25, r24
  3a:	90 93 7c 00 	sts	0x007C, r25
  3e:	80 91 7a 00 	lds	r24, 0x007A
  42:	80 64       	ori	r24, 0x40	; 64
  44:	80 93 7a 00 	sts	0x007A, r24
  48:	80 91 7a 00 	lds	r24, 0x007A
  4c:	86 fd       	sbrc	r24, 6
  4e:	00 c0       	rjmp	.+0      	; 0x50 <analogRead+0x50>
  50:	80 91 78 00 	lds	r24, 0x0078
  54:	90 91 79 00 	lds	r25, 0x0079
  58:	39 2f       	mov	r19, r25
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	82 2b       	or	r24, r18
  60:	93 2b       	or	r25, r19
  62:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
	{
		digitalWrite(pin, LOW);
  14:	81 2f       	mov	r24, r17
  16:	00 c0       	rjmp	.+0      	; 0x18 <analogWrite+0x18>
	}
	else if (val == 255)
  18:	cf 3f       	cpi	r28, 0xFF	; 255
  1a:	d1 05       	cpc	r29, r1
  1c:	01 f4       	brne	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
  1e:	81 2f       	mov	r24, r17
  20:	00 c0       	rjmp	.+0      	; 0x22 <analogWrite+0x22>
	}
	else
	{
		switch(digitalPinToTimer(pin))
  22:	e1 2f       	mov	r30, r17
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	e4 91       	lpm	r30, Z
  2c:	e9 30       	cpi	r30, 0x09	; 9
  2e:	01 f4       	brne	.+0      	; 0x30 <analogWrite+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <analogWrite+0x32>
  32:	ea 30       	cpi	r30, 0x0A	; 10
  34:	00 f4       	brcc	.+0      	; 0x36 <analogWrite+0x36>
  36:	e4 30       	cpi	r30, 0x04	; 4
  38:	01 f0       	breq	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	e5 30       	cpi	r30, 0x05	; 5
  3c:	00 f4       	brcc	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	e2 30       	cpi	r30, 0x02	; 2
  40:	01 f0       	breq	.+0      	; 0x42 <analogWrite+0x42>
  42:	e3 30       	cpi	r30, 0x03	; 3
  44:	00 f4       	brcc	.+0      	; 0x46 <analogWrite+0x46>
  46:	e1 30       	cpi	r30, 0x01	; 1
  48:	01 f0       	breq	.+0      	; 0x4a <analogWrite+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <analogWrite+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <analogWrite+0x4e>
  4e:	e7 30       	cpi	r30, 0x07	; 7
  50:	01 f4       	brne	.+0      	; 0x52 <analogWrite+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <analogWrite+0x54>
  54:	e8 30       	cpi	r30, 0x08	; 8
  56:	00 f0       	brcs	.+0      	; 0x58 <analogWrite+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <analogWrite+0x5a>
  5a:	e6 30       	cpi	r30, 0x06	; 6
  5c:	01 f0       	breq	.+0      	; 0x5e <analogWrite+0x5e>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <analogWrite+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <analogWrite+0x62>
  62:	ed 30       	cpi	r30, 0x0D	; 13
  64:	01 f4       	brne	.+0      	; 0x66 <analogWrite+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <analogWrite+0x68>
  68:	ee 30       	cpi	r30, 0x0E	; 14
  6a:	00 f4       	brcc	.+0      	; 0x6c <analogWrite+0x6c>
  6c:	eb 30       	cpi	r30, 0x0B	; 11
  6e:	01 f4       	brne	.+0      	; 0x70 <analogWrite+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <analogWrite+0x72>
  72:	ec 30       	cpi	r30, 0x0C	; 12
  74:	00 f0       	brcs	.+0      	; 0x76 <analogWrite+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <analogWrite+0x78>
  78:	00 c0       	rjmp	.+0      	; 0x7a <analogWrite+0x7a>
  7a:	e0 31       	cpi	r30, 0x10	; 16
  7c:	01 f4       	brne	.+0      	; 0x7e <analogWrite+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <analogWrite+0x80>
  80:	e1 31       	cpi	r30, 0x11	; 17
  82:	01 f4       	brne	.+0      	; 0x84 <analogWrite+0x84>
  84:	00 c0       	rjmp	.+0      	; 0x86 <analogWrite+0x86>
  86:	ef 30       	cpi	r30, 0x0F	; 15
  88:	01 f0       	breq	.+0      	; 0x8a <analogWrite+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <analogWrite+0x8c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <analogWrite+0x8e>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  8e:	84 b5       	in	r24, 0x24	; 36
  90:	80 68       	ori	r24, 0x80	; 128
  92:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  94:	c7 bd       	out	0x27, r28	; 39
				break;
  96:	00 c0       	rjmp	.+0      	; 0x98 <analogWrite+0x98>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  98:	84 b5       	in	r24, 0x24	; 36
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  9e:	c8 bd       	out	0x28, r28	; 40
				break;
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <analogWrite+0xa2>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  a2:	80 91 80 00 	lds	r24, 0x0080
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  ac:	d0 93 89 00 	sts	0x0089, r29
  b0:	c0 93 88 00 	sts	0x0088, r28
				break;
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <analogWrite+0xb6>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  b6:	80 91 80 00 	lds	r24, 0x0080
  ba:	80 62       	ori	r24, 0x20	; 32
  bc:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  c0:	d0 93 8b 00 	sts	0x008B, r29
  c4:	c0 93 8a 00 	sts	0x008A, r28
				break;
  c8:	00 c0       	rjmp	.+0      	; 0xca <analogWrite+0xca>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  ca:	80 91 b0 00 	lds	r24, 0x00B0
  ce:	80 68       	ori	r24, 0x80	; 128
  d0:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  d4:	c0 93 b3 00 	sts	0x00B3, r28
				break;
  d8:	00 c0       	rjmp	.+0      	; 0xda <analogWrite+0xda>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  da:	80 91 b0 00 	lds	r24, 0x00B0
  de:	80 62       	ori	r24, 0x20	; 32
  e0:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  e4:	c0 93 b4 00 	sts	0x00B4, r28
				break;
  e8:	00 c0       	rjmp	.+0      	; 0xea <analogWrite+0xea>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
  ea:	80 91 90 00 	lds	r24, 0x0090
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
  f4:	d0 93 99 00 	sts	0x0099, r29
  f8:	c0 93 98 00 	sts	0x0098, r28
				break;
  fc:	00 c0       	rjmp	.+0      	; 0xfe <analogWrite+0xfe>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
  fe:	80 91 90 00 	lds	r24, 0x0090
 102:	80 62       	ori	r24, 0x20	; 32
 104:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
 108:	d0 93 9b 00 	sts	0x009B, r29
 10c:	c0 93 9a 00 	sts	0x009A, r28
				break;
 110:	00 c0       	rjmp	.+0      	; 0x112 <analogWrite+0x112>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 112:	80 91 90 00 	lds	r24, 0x0090
 116:	88 60       	ori	r24, 0x08	; 8
 118:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
 11c:	d0 93 9d 00 	sts	0x009D, r29
 120:	c0 93 9c 00 	sts	0x009C, r28
				break;
 124:	00 c0       	rjmp	.+0      	; 0x126 <analogWrite+0x126>
			#endif

			#if defined(TCCR4A) && defined(COM4A1)
			case TIMER4A:
				// connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 126:	80 91 a0 00 	lds	r24, 0x00A0
 12a:	80 68       	ori	r24, 0x80	; 128
 12c:	80 93 a0 00 	sts	0x00A0, r24
				OCR4A = val; // set pwm duty
 130:	d0 93 a9 00 	sts	0x00A9, r29
 134:	c0 93 a8 00 	sts	0x00A8, r28
				break;
 138:	00 c0       	rjmp	.+0      	; 0x13a <analogWrite+0x13a>
			#endif

			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 13a:	80 91 a0 00 	lds	r24, 0x00A0
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
 144:	d0 93 ab 00 	sts	0x00AB, r29
 148:	c0 93 aa 00 	sts	0x00AA, r28
				break;
 14c:	00 c0       	rjmp	.+0      	; 0x14e <analogWrite+0x14e>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 14e:	80 91 a0 00 	lds	r24, 0x00A0
 152:	88 60       	ori	r24, 0x08	; 8
 154:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
 158:	d0 93 ad 00 	sts	0x00AD, r29
 15c:	c0 93 ac 00 	sts	0x00AC, r28
				break;
 160:	00 c0       	rjmp	.+0      	; 0x162 <analogWrite+0x162>
			#endif

			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 162:	80 91 20 01 	lds	r24, 0x0120
 166:	80 68       	ori	r24, 0x80	; 128
 168:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
 16c:	d0 93 29 01 	sts	0x0129, r29
 170:	c0 93 28 01 	sts	0x0128, r28
				break;
 174:	00 c0       	rjmp	.+0      	; 0x176 <analogWrite+0x176>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 176:	80 91 20 01 	lds	r24, 0x0120
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
 180:	d0 93 2b 01 	sts	0x012B, r29
 184:	c0 93 2a 01 	sts	0x012A, r28
				break;
 188:	00 c0       	rjmp	.+0      	; 0x18a <analogWrite+0x18a>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 18a:	80 91 20 01 	lds	r24, 0x0120
 18e:	88 60       	ori	r24, 0x08	; 8
 190:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
 194:	d0 93 2d 01 	sts	0x012D, r29
 198:	c0 93 2c 01 	sts	0x012C, r28
				break;
 19c:	00 c0       	rjmp	.+0      	; 0x19e <analogWrite+0x19e>
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
					digitalWrite(pin, LOW);
 19e:	81 2f       	mov	r24, r17
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 1a0:	c0 38       	cpi	r28, 0x80	; 128
 1a2:	d1 05       	cpc	r29, r1
 1a4:	04 f4       	brge	.+0      	; 0x1a6 <analogWrite+0x1a6>
					digitalWrite(pin, LOW);
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <analogWrite+0x1aa>
				} else {
					digitalWrite(pin, HIGH);
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
				}
		}
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000b88  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000010b8  00000000  00000000  00000bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.turnOffPWM 000000e8  00000000  00000000  00001c74  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.pinMode 00000042  00000000  00000000  00001d5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.digitalWrite 0000006e  00000000  00000000  00001d9e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalRead 00000052  00000000  00000000  00001e0c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .progmem.data 00000120  00000000  00000000  00001e5e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	89 30       	cpi	r24, 0x09	; 9
   2:	01 f4       	brne	.+0      	; 0x4 <turnOffPWM+0x4>
	uint8_t timer = digitalPinToTimer(pin);
   4:	00 c0       	rjmp	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	8a 30       	cpi	r24, 0x0A	; 10
   8:	00 f4       	brcc	.+0      	; 0xa <turnOffPWM+0xa>
   a:	84 30       	cpi	r24, 0x04	; 4
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	85 30       	cpi	r24, 0x05	; 5
	uint8_t bit = digitalPinToBitMask(pin);
  10:	00 f4       	brcc	.+0      	; 0x12 <turnOffPWM+0x12>
  12:	82 30       	cpi	r24, 0x02	; 2
  14:	01 f0       	breq	.+0      	; 0x16 <turnOffPWM+0x16>
  16:	83 30       	cpi	r24, 0x03	; 3
	uint8_t port = digitalPinToPort(pin);
  18:	00 f4       	brcc	.+0      	; 0x1a <turnOffPWM+0x1a>
  1a:	81 30       	cpi	r24, 0x01	; 1
  1c:	01 f0       	breq	.+0      	; 0x1e <turnOffPWM+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <turnOffPWM+0x20>

	if (port == NOT_A_PIN) return LOW;
  20:	00 c0       	rjmp	.+0      	; 0x22 <turnOffPWM+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	01 f0       	breq	.+0      	; 0x26 <turnOffPWM+0x26>
  26:	88 30       	cpi	r24, 0x08	; 8
  28:	00 f4       	brcc	.+0      	; 0x2a <turnOffPWM+0x2a>
  2a:	86 30       	cpi	r24, 0x06	; 6

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	01 f0       	breq	.+0      	; 0x2e <turnOffPWM+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <turnOffPWM+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <turnOffPWM+0x32>
  32:	8d 30       	cpi	r24, 0x0D	; 13
  34:	01 f4       	brne	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <turnOffPWM+0x38>
  38:	8e 30       	cpi	r24, 0x0E	; 14
  3a:	00 f4       	brcc	.+0      	; 0x3c <turnOffPWM+0x3c>
  3c:	8b 30       	cpi	r24, 0x0B	; 11
  3e:	01 f0       	breq	.+0      	; 0x40 <turnOffPWM+0x40>
  40:	8c 30       	cpi	r24, 0x0C	; 12
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	00 f4       	brcc	.+0      	; 0x44 <turnOffPWM+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
  46:	80 31       	cpi	r24, 0x10	; 16
  48:	01 f4       	brne	.+0      	; 0x4a <turnOffPWM+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <turnOffPWM+0x4c>
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	81 31       	cpi	r24, 0x11	; 17
  4e:	01 f4       	brne	.+0      	; 0x50 <turnOffPWM+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <turnOffPWM+0x52>
  52:	8f 30       	cpi	r24, 0x0F	; 15
  54:	01 f0       	breq	.+0      	; 0x56 <turnOffPWM+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <turnOffPWM+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <turnOffPWM+0x5a>
  5a:	80 91 80 00 	lds	r24, 0x0080
  5e:	8f 77       	andi	r24, 0x7F	; 127
  60:	00 c0       	rjmp	.+0      	; 0x62 <turnOffPWM+0x62>
  62:	80 91 80 00 	lds	r24, 0x0080
  66:	8f 7d       	andi	r24, 0xDF	; 223
  68:	80 93 80 00 	sts	0x0080, r24
  6c:	08 95       	ret
  6e:	84 b5       	in	r24, 0x24	; 36
  70:	8f 77       	andi	r24, 0x7F	; 127
  72:	00 c0       	rjmp	.+0      	; 0x74 <turnOffPWM+0x74>
  74:	84 b5       	in	r24, 0x24	; 36
  76:	8f 7d       	andi	r24, 0xDF	; 223
  78:	84 bd       	out	0x24, r24	; 36
  7a:	08 95       	ret
  7c:	80 91 b0 00 	lds	r24, 0x00B0
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	00 c0       	rjmp	.+0      	; 0x84 <turnOffPWM+0x84>
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	80 93 b0 00 	sts	0x00B0, r24
  8e:	08 95       	ret
  90:	80 91 90 00 	lds	r24, 0x0090
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	00 c0       	rjmp	.+0      	; 0x98 <turnOffPWM+0x98>
  98:	80 91 90 00 	lds	r24, 0x0090
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <turnOffPWM+0xa0>
  a0:	80 91 90 00 	lds	r24, 0x0090
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	80 93 90 00 	sts	0x0090, r24
  aa:	08 95       	ret
  ac:	80 91 a0 00 	lds	r24, 0x00A0
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <turnOffPWM+0xb4>
  b4:	80 91 a0 00 	lds	r24, 0x00A0
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	00 c0       	rjmp	.+0      	; 0xbc <turnOffPWM+0xbc>
  bc:	80 91 a0 00 	lds	r24, 0x00A0
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	80 93 a0 00 	sts	0x00A0, r24
  c6:	08 95       	ret
  c8:	80 91 20 01 	lds	r24, 0x0120
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <turnOffPWM+0xd0>
  d0:	80 91 20 01 	lds	r24, 0x0120
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 93 20 01 	sts	0x0120, r24
  da:	08 95       	ret
  dc:	80 91 20 01 	lds	r24, 0x0120
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	80 93 20 01 	sts	0x0120, r24
  e6:	08 95       	ret

Disassembly of section .text.pinMode:

00000000 <pinMode>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	90 e0       	ldi	r25, 0x00	; 0
   2:	fc 01       	movw	r30, r24
	uint8_t timer = digitalPinToTimer(pin);
   4:	e0 50       	subi	r30, 0x00	; 0
   6:	f0 40       	sbci	r31, 0x00	; 0
   8:	24 91       	lpm	r18, Z
   a:	fc 01       	movw	r30, r24
   c:	e0 50       	subi	r30, 0x00	; 0
   e:	f0 40       	sbci	r31, 0x00	; 0
	uint8_t bit = digitalPinToBitMask(pin);
  10:	e4 91       	lpm	r30, Z
  12:	ee 23       	and	r30, r30
  14:	01 f0       	breq	.+0      	; 0x16 <pinMode+0x16>
  16:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t port = digitalPinToPort(pin);
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	85 91       	lpm	r24, Z+
  22:	94 91       	lpm	r25, Z

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	dc 01       	movw	r26, r24
  26:	9f b7       	in	r25, 0x3f	; 63
  28:	f8 94       	cli
  2a:	8c 91       	ld	r24, X

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	66 23       	and	r22, r22
  2e:	01 f4       	brne	.+0      	; 0x30 <pinMode+0x30>
  30:	20 95       	com	r18
  32:	82 23       	and	r24, r18
  34:	8c 93       	st	X, r24
  36:	9f bf       	out	0x3f, r25	; 63
  38:	08 95       	ret
  3a:	82 2b       	or	r24, r18
  3c:	8c 93       	st	X, r24
  3e:	9f bf       	out	0x3f, r25	; 63
  40:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	28 2f       	mov	r18, r24
	uint8_t bit = digitalPinToBitMask(pin);
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	f9 01       	movw	r30, r18
  14:	e0 50       	subi	r30, 0x00	; 0
  16:	f0 40       	sbci	r31, 0x00	; 0
	uint8_t port = digitalPinToPort(pin);
  18:	84 91       	lpm	r24, Z
  1a:	f9 01       	movw	r30, r18
  1c:	e0 50       	subi	r30, 0x00	; 0
  1e:	f0 40       	sbci	r31, 0x00	; 0

	if (port == NOT_A_PIN) return LOW;
  20:	14 91       	lpm	r17, Z
  22:	f9 01       	movw	r30, r18

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	e0 50       	subi	r30, 0x00	; 0
  26:	f0 40       	sbci	r31, 0x00	; 0
  28:	04 91       	lpm	r16, Z
  2a:	00 23       	and	r16, r16

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	01 f0       	breq	.+0      	; 0x2e <digitalWrite+0x2e>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <digitalWrite+0x32>
  32:	69 83       	std	Y+1, r22	; 0x01
  34:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>
  38:	69 81       	ldd	r22, Y+1	; 0x01
  3a:	e0 2f       	mov	r30, r16
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	ee 0f       	add	r30, r30
  40:	ff 1f       	adc	r31, r31
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	85 91       	lpm	r24, Z+
  48:	94 91       	lpm	r25, Z
  4a:	dc 01       	movw	r26, r24
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	9f b7       	in	r25, 0x3f	; 63
  4e:	f8 94       	cli
  50:	8c 91       	ld	r24, X
  52:	66 23       	and	r22, r22
  54:	01 f4       	brne	.+0      	; 0x56 <digitalWrite+0x56>
  56:	10 95       	com	r17
  58:	81 23       	and	r24, r17
  5a:	00 c0       	rjmp	.+0      	; 0x5c <digitalWrite+0x5c>
  5c:	81 2b       	or	r24, r17
  5e:	8c 93       	st	X, r24
  60:	9f bf       	out	0x3f, r25	; 63
  62:	0f 90       	pop	r0
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
   4:	28 2f       	mov	r18, r24
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	f9 01       	movw	r30, r18
   a:	e0 50       	subi	r30, 0x00	; 0
   c:	f0 40       	sbci	r31, 0x00	; 0
   e:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
  10:	f9 01       	movw	r30, r18
  12:	e0 50       	subi	r30, 0x00	; 0
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	c4 91       	lpm	r28, Z
	uint8_t port = digitalPinToPort(pin);
  18:	f9 01       	movw	r30, r18
  1a:	e0 50       	subi	r30, 0x00	; 0
  1c:	f0 40       	sbci	r31, 0x00	; 0
  1e:	d4 91       	lpm	r29, Z

	if (port == NOT_A_PIN) return LOW;
  20:	dd 23       	and	r29, r29
  22:	01 f0       	breq	.+0      	; 0x24 <digitalRead+0x24>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <digitalRead+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <digitalRead>

	if (*portInputRegister(port) & bit) return HIGH;
  2c:	ed 2f       	mov	r30, r29
  2e:	f0 e0       	ldi	r31, 0x00	; 0
  30:	ee 0f       	add	r30, r30
  32:	ff 1f       	adc	r31, r31
  34:	e0 50       	subi	r30, 0x00	; 0
  36:	f0 40       	sbci	r31, 0x00	; 0
  38:	85 91       	lpm	r24, Z+
  3a:	94 91       	lpm	r25, Z
  3c:	fc 01       	movw	r30, r24
  3e:	20 81       	ld	r18, Z
  40:	2c 23       	and	r18, r28
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
  42:	81 e0       	ldi	r24, 0x01	; 1
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	01 f4       	brne	.+0      	; 0x48 <digitalRead+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000078c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ec7  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.pulseIn 00000140  00000000  00000000  00001687  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	e0 50       	subi	r30, 0x00	; 0
  1a:	f0 40       	sbci	r31, 0x00	; 0
  1c:	14 91       	lpm	r17, Z
	uint8_t port = digitalPinToPort(pin);
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	fc 01       	movw	r30, r24
  24:	c4 91       	lpm	r28, Z
	uint8_t stateMask = (state ? bit : 0);
  26:	66 23       	and	r22, r22
  28:	01 f4       	brne	.+0      	; 0x2a <pulseIn+0x2a>
  2a:	d0 e0       	ldi	r29, 0x00	; 0
  2c:	00 c0       	rjmp	.+0      	; 0x2e <pulseIn+0x2e>
  2e:	d1 2f       	mov	r29, r17
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  30:	ca 01       	movw	r24, r20
  32:	b9 01       	movw	r22, r18
  34:	20 e8       	ldi	r18, 0x80	; 128
  36:	3e e3       	ldi	r19, 0x3E	; 62
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  40:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  44:	69 01       	movw	r12, r18
  46:	7a 01       	movw	r14, r20
	uint8_t stateMask = (state ? bit : 0);
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	a0 e0       	ldi	r26, 0x00	; 0
  4e:	b0 e0       	ldi	r27, 0x00	; 0
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  50:	2c 2f       	mov	r18, r28
  52:	30 e0       	ldi	r19, 0x00	; 0
  54:	f9 01       	movw	r30, r18
  56:	ee 0f       	add	r30, r30
  58:	ff 1f       	adc	r31, r31
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	a5 90       	lpm	r10, Z+
  60:	b4 90       	lpm	r11, Z
  62:	00 c0       	rjmp	.+0      	; 0x64 <pulseIn+0x64>
		if (numloops++ == maxloops)
  64:	ac 01       	movw	r20, r24
  66:	bd 01       	movw	r22, r26
  68:	4f 5f       	subi	r20, 0xFF	; 255
  6a:	5f 4f       	sbci	r21, 0xFF	; 255
  6c:	6f 4f       	sbci	r22, 0xFF	; 255
  6e:	7f 4f       	sbci	r23, 0xFF	; 255
  70:	8c 15       	cp	r24, r12
  72:	9d 05       	cpc	r25, r13
  74:	ae 05       	cpc	r26, r14
  76:	bf 05       	cpc	r27, r15
  78:	01 f4       	brne	.+0      	; 0x7a <pulseIn+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <pulseIn+0x7c>
  7c:	db 01       	movw	r26, r22
  7e:	ca 01       	movw	r24, r20
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  80:	f5 01       	movw	r30, r10
  82:	40 81       	ld	r20, Z
  84:	41 23       	and	r20, r17
  86:	4d 17       	cp	r20, r29
  88:	01 f0       	breq	.+0      	; 0x8a <pulseIn+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <pulseIn+0x8c>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  8c:	ac 01       	movw	r20, r24
  8e:	bd 01       	movw	r22, r26
  90:	4f 5f       	subi	r20, 0xFF	; 255
  92:	5f 4f       	sbci	r21, 0xFF	; 255
  94:	6f 4f       	sbci	r22, 0xFF	; 255
  96:	7f 4f       	sbci	r23, 0xFF	; 255
  98:	8c 15       	cp	r24, r12
  9a:	9d 05       	cpc	r25, r13
  9c:	ae 05       	cpc	r26, r14
  9e:	bf 05       	cpc	r27, r15
  a0:	01 f4       	brne	.+0      	; 0xa2 <pulseIn+0xa2>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <pulseIn+0xa4>
  a4:	db 01       	movw	r26, r22
  a6:	ca 01       	movw	r24, r20
  a8:	00 c0       	rjmp	.+0      	; 0xaa <pulseIn+0xaa>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	20 50       	subi	r18, 0x00	; 0
  b0:	30 40       	sbci	r19, 0x00	; 0
  b2:	f9 01       	movw	r30, r18
  b4:	a5 90       	lpm	r10, Z+
  b6:	b4 90       	lpm	r11, Z
  b8:	f5 01       	movw	r30, r10
  ba:	40 81       	ld	r20, Z
  bc:	41 23       	and	r20, r17
  be:	4d 17       	cp	r20, r29
  c0:	01 f4       	brne	.+0      	; 0xc2 <pulseIn+0xc2>
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e0       	ldi	r23, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  ca:	f9 01       	movw	r30, r18
  cc:	25 91       	lpm	r18, Z+
  ce:	34 91       	lpm	r19, Z
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <pulseIn+0xd2>
		if (numloops++ == maxloops)
  d2:	8c 15       	cp	r24, r12
  d4:	9d 05       	cpc	r25, r13
  d6:	ae 05       	cpc	r26, r14
  d8:	bf 05       	cpc	r27, r15
  da:	01 f0       	breq	.+0      	; 0xdc <pulseIn+0xdc>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	a1 1d       	adc	r26, r1
  e0:	b1 1d       	adc	r27, r1
			return 0;
		width++;
  e2:	4f 5f       	subi	r20, 0xFF	; 255
  e4:	5f 4f       	sbci	r21, 0xFF	; 255
  e6:	6f 4f       	sbci	r22, 0xFF	; 255
  e8:	7f 4f       	sbci	r23, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  ea:	f9 01       	movw	r30, r18
  ec:	e0 81       	ld	r30, Z
  ee:	e1 23       	and	r30, r17
  f0:	ed 17       	cp	r30, r29
  f2:	01 f0       	breq	.+0      	; 0xf4 <pulseIn+0xf4>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  f4:	cb 01       	movw	r24, r22
  f6:	ba 01       	movw	r22, r20
  f8:	28 e0       	ldi	r18, 0x08	; 8
  fa:	32 e5       	ldi	r19, 0x52	; 82
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 104:	60 58       	subi	r22, 0x80	; 128
 106:	71 4c       	sbci	r23, 0xC1	; 193
 108:	8f 4f       	sbci	r24, 0xFF	; 255
 10a:	9f 4f       	sbci	r25, 0xFF	; 255
 10c:	20 e8       	ldi	r18, 0x80	; 128
 10e:	3e e3       	ldi	r19, 0x3E	; 62
 110:	40 e0       	ldi	r20, 0x00	; 0
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 118:	89 01       	movw	r16, r18
 11a:	9a 01       	movw	r18, r20
 11c:	00 c0       	rjmp	.+0      	; 0x11e <pulseIn+0x11e>
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
		if (numloops++ == maxloops)
			return 0;
 11e:	00 e0       	ldi	r16, 0x00	; 0
 120:	10 e0       	ldi	r17, 0x00	; 0
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	30 e0       	ldi	r19, 0x00	; 0
	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
}
 126:	b8 01       	movw	r22, r16
 128:	c9 01       	movw	r24, r18
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	1f 91       	pop	r17
 130:	0f 91       	pop	r16
 132:	ff 90       	pop	r15
 134:	ef 90       	pop	r14
 136:	df 90       	pop	r13
 138:	cf 90       	pop	r12
 13a:	bf 90       	pop	r11
 13c:	af 90       	pop	r10
 13e:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000007e0  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ee9  00000000  00000000  00000814  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.shiftIn 00000082  00000000  00000000  000016fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text.shiftOut 00000084  00000000  00000000  0000177f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	18 2f       	mov	r17, r24
  12:	f6 2e       	mov	r15, r22
  14:	e4 2e       	mov	r14, r20
  16:	c7 e0       	ldi	r28, 0x07	; 7
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 e0       	ldi	r16, 0x00	; 0
  1c:	87 e0       	ldi	r24, 0x07	; 7
  1e:	c8 2e       	mov	r12, r24
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	d1 2c       	mov	r13, r1
  22:	8f 2d       	mov	r24, r15
  24:	61 e0       	ldi	r22, 0x01	; 1
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	81 2f       	mov	r24, r17
  2c:	ee 20       	and	r14, r14
  2e:	01 f4       	brne	.+0      	; 0x30 <shiftIn+0x30>
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  30:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  34:	96 01       	movw	r18, r12
  36:	2c 1b       	sub	r18, r28
  38:	3d 0b       	sbc	r19, r29
  3a:	ac 01       	movw	r20, r24
  3c:	00 c0       	rjmp	.+0      	; 0x3e <shiftIn+0x3e>
  3e:	44 0f       	add	r20, r20
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	55 1f       	adc	r21, r21
  42:	2a 95       	dec	r18
  44:	02 f4       	brpl	.+0      	; 0x46 <shiftIn+0x46>
  46:	04 2b       	or	r16, r20
  48:	00 c0       	rjmp	.+0      	; 0x4a <shiftIn+0x4a>
  4a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  4e:	0c 2e       	mov	r0, r28
  50:	00 c0       	rjmp	.+0      	; 0x52 <shiftIn+0x52>
  52:	88 0f       	add	r24, r24
  54:	99 1f       	adc	r25, r25
			
		digitalWrite(clockPin, HIGH);
  56:	0a 94       	dec	r0
  58:	02 f4       	brpl	.+0      	; 0x5a <shiftIn+0x5a>
  5a:	08 2b       	or	r16, r24
  5c:	8f 2d       	mov	r24, r15
		digitalWrite(clockPin, LOW);		
  5e:	60 e0       	ldi	r22, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  64:	21 97       	sbiw	r28, 0x01	; 1
  66:	8f ef       	ldi	r24, 0xFF	; 255

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  68:	cf 3f       	cpi	r28, 0xFF	; 255
  6a:	d8 07       	cpc	r29, r24
  6c:	01 f4       	brne	.+0      	; 0x6e <shiftIn+0x6e>
  6e:	80 2f       	mov	r24, r16
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	08 95       	ret

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	18 2f       	mov	r17, r24
  14:	06 2f       	mov	r16, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	e2 2e       	mov	r14, r18
  1e:	ff 24       	eor	r15, r15
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  20:	97 e0       	ldi	r25, 0x07	; 7
  22:	c9 2e       	mov	r12, r25
  24:	d1 2c       	mov	r13, r1
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	bb 20       	and	r11, r11
  28:	01 f4       	brne	.+0      	; 0x2a <shiftOut+0x2a>
		digitalWrite(clockPin, LOW);
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
  2a:	b6 01       	movw	r22, r12
  2c:	6c 1b       	sub	r22, r28
  2e:	7d 0b       	sbc	r23, r29
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  30:	c7 01       	movw	r24, r14
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	95 95       	asr	r25
  36:	87 95       	ror	r24
  38:	6a 95       	dec	r22
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	bc 01       	movw	r22, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <shiftOut+0x40>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	b7 01       	movw	r22, r14
  42:	0c 2e       	mov	r0, r28
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftOut+0x46>
  46:	75 95       	asr	r23
  48:	67 95       	ror	r22
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <shiftOut+0x4e>
  4e:	61 70       	andi	r22, 0x01	; 1
  50:	81 2f       	mov	r24, r17
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
			
		digitalWrite(clockPin, HIGH);
  56:	80 2f       	mov	r24, r16
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);		
  5e:	80 2f       	mov	r24, r16
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  66:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  68:	8f ef       	ldi	r24, 0xFF	; 255
  6a:	cf 3f       	cpi	r28, 0xFF	; 255
  6c:	d8 07       	cpc	r29, r24
  6e:	01 f4       	brne	.+0      	; 0x70 <shiftOut+0x70>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	bf 90       	pop	r11
  82:	08 95       	ret
