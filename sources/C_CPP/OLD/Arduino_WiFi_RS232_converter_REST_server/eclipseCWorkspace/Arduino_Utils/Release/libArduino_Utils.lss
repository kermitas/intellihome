In archive libArduino_Utils.a:

DallasTemperature.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000231c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00005298  00000000  00000000  00002350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN17DallasTemperature19defaultAlarmHandlerEPh 00000002  00000000  00000000  000075e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN17DallasTemperatureC2EP7OneWire 0000001e  00000000  00000000  000075ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN17DallasTemperature14getDeviceCountEv 00000006  00000000  00000000  00007608  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._ZN17DallasTemperature12validAddressEPh 0000001e  00000000  00000000  0000760e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN17DallasTemperature10getAddressEPhh 0000005c  00000000  00000000  0000762c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN17DallasTemperature14readScratchPadEPhS0_ 000000b2  00000000  00000000  00007688  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN17DallasTemperature11isConnectedEPhS0_ 00000022  00000000  00000000  0000773a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN17DallasTemperature11isConnectedEPh 00000030  00000000  00000000  0000775c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN17DallasTemperature15writeScratchPadEPhPKh 000000b0  00000000  00000000  0000778c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN17DallasTemperature15readPowerSupplyEPh 0000004c  00000000  00000000  0000783c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN17DallasTemperature13setResolutionEPhh 0000008c  00000000  00000000  00007888  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN17DallasTemperature13setResolutionEh 00000080  00000000  00000000  00007914  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN17DallasTemperature13getResolutionEv 00000006  00000000  00000000  00007994  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text._ZN17DallasTemperature13getResolutionEPh 00000066  00000000  00000000  0000799a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN17DallasTemperature5beginEv 000000d0  00000000  00000000  00007a00  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN17DallasTemperature20setWaitForConversionEb 00000006  00000000  00000000  00007ad0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._ZN17DallasTemperature20getWaitForConversionEv 00000006  00000000  00000000  00007ad6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._ZN17DallasTemperature21setCheckForConversionEb 00000006  00000000  00000000  00007adc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text._ZN17DallasTemperature21getCheckForConversionEv 00000006  00000000  00000000  00007ae2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._ZN17DallasTemperature21isConversionAvailableEPh 0000003a  00000000  00000000  00007ae8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN17DallasTemperature27blockTillConversionCompleteEPhS0_ 000000ae  00000000  00000000  00007b22  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN17DallasTemperature28requestTemperaturesByAddressEPh 00000098  00000000  00000000  00007bd0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN17DallasTemperature19requestTemperaturesEv 0000003e  00000000  00000000  00007c68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN17DallasTemperature26requestTemperaturesByIndexEh 00000048  00000000  00000000  00007ca6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN17DallasTemperature20calculateTemperatureEPhS0_ 00000150  00000000  00000000  00007cee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN17DallasTemperature8getTempCEPh 00000070  00000000  00000000  00007e3e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN17DallasTemperature15getTempCByIndexEh 00000054  00000000  00000000  00007eae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN17DallasTemperature15getTempFByIndexEh 0000002a  00000000  00000000  00007f02  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN17DallasTemperature8getTempFEPh 0000002a  00000000  00000000  00007f2c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN17DallasTemperature19isParasitePowerModeEv 00000006  00000000  00000000  00007f56  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text._ZN17DallasTemperature16setHighAlarmTempEPhc 0000006c  00000000  00000000  00007f5c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN17DallasTemperature15setLowAlarmTempEPhc 0000006c  00000000  00000000  00007fc8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN17DallasTemperature16getHighAlarmTempEPh 0000003a  00000000  00000000  00008034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN17DallasTemperature15getLowAlarmTempEPh 0000003a  00000000  00000000  0000806e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN17DallasTemperature16resetAlarmSearchEv 00000018  00000000  00000000  000080a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text._ZN17DallasTemperature11alarmSearchEPh 00000148  00000000  00000000  000080c0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN17DallasTemperature8hasAlarmEPh 0000006e  00000000  00000000  00008208  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN17DallasTemperature8hasAlarmEv 00000040  00000000  00000000  00008276  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN17DallasTemperature13processAlarmsEv 00000066  00000000  00000000  000082b6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN17DallasTemperature15setAlarmHandlerEPFvPhE 00000008  00000000  00000000  0000831c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text._ZN17DallasTemperature12toFahrenheitEf 00000026  00000000  00000000  00008324  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN17DallasTemperature9toCelsiusEf 00000026  00000000  00000000  0000834a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZN17DallasTemperature19defaultAlarmHandlerEPh:

00000000 <_ZN17DallasTemperature19defaultAlarmHandlerEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperatureC2EP7OneWire:

00000000 <_ZN17DallasTemperatureC1EP7OneWire>:
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	92 8b       	std	Z+18, r25	; 0x12
   8:	81 8b       	std	Z+17, r24	; 0x11
   a:	76 83       	std	Z+6, r23	; 0x06
   c:	65 83       	std	Z+5, r22	; 0x05
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	10 82       	st	Z, r1
  12:	89 e0       	ldi	r24, 0x09	; 9
  14:	81 83       	std	Z+1, r24	; 0x01
  16:	81 e0       	ldi	r24, 0x01	; 1
}
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	83 83       	std	Z+3, r24	; 0x03
  1c:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature14getDeviceCountEv:

00000000 <_ZN17DallasTemperature14getDeviceCountEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature12validAddressEPh:

00000000 <_ZN17DallasTemperature12validAddressEPh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	eb 01       	movw	r28, r22
   6:	cb 01       	movw	r24, r22
   8:	67 e0       	ldi	r22, 0x07	; 7
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature12validAddressEPh>
   e:	91 e0       	ldi	r25, 0x01	; 1
  10:	2f 81       	ldd	r18, Y+7	; 0x07
  12:	82 13       	cpse	r24, r18
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	89 2f       	mov	r24, r25
}
  18:	df 91       	pop	r29
  1a:	cf 91       	pop	r28
  1c:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature10getAddressEPhh:

00000000 <_ZN17DallasTemperature10getAddressEPhh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	8b 01       	movw	r16, r22
  10:	e4 2e       	mov	r14, r20
  12:	8d 81       	ldd	r24, Y+5	; 0x05
  14:	9e 81       	ldd	r25, Y+6	; 0x06
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature10getAddressEPhh>
}
  1a:	ff 24       	eor	r15, r15
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN17DallasTemperature10getAddressEPhh+0x1e>
  1e:	ce 01       	movw	r24, r28
  20:	b8 01       	movw	r22, r16
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature10getAddressEPhh>
  26:	88 23       	and	r24, r24
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN17DallasTemperature10getAddressEPhh+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN17DallasTemperature10getAddressEPhh+0x2c>
  2c:	8d 81       	ldd	r24, Y+5	; 0x05
  2e:	9e 81       	ldd	r25, Y+6	; 0x06
  30:	b8 01       	movw	r22, r16
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature10getAddressEPhh>
  36:	88 23       	and	r24, r24
  38:	01 f0       	breq	.+0      	; 0x3a <_ZN17DallasTemperature10getAddressEPhh+0x3a>
  3a:	fe 14       	cp	r15, r14
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN17DallasTemperature10getAddressEPhh+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN17DallasTemperature10getAddressEPhh+0x40>
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN17DallasTemperature10getAddressEPhh+0x44>
  44:	80 e0       	ldi	r24, 0x00	; 0
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	ff 90       	pop	r15
  50:	ef 90       	pop	r14
  52:	08 95       	ret
  54:	f3 94       	inc	r15
  56:	ef 14       	cp	r14, r15
  58:	00 f0       	brcs	.+0      	; 0x5a <_ZN17DallasTemperature10getAddressEPhh+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <__SREG__+0x1d>

Disassembly of section .text._ZN17DallasTemperature14readScratchPadEPhS0_:

00000000 <_ZN17DallasTemperature14readScratchPadEPhS0_>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
  12:	8d 81       	ldd	r24, Y+5	; 0x05
  14:	9e 81       	ldd	r25, Y+6	; 0x06
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
}
  1a:	8d 81       	ldd	r24, Y+5	; 0x05
  1c:	9e 81       	ldd	r25, Y+6	; 0x06
  1e:	b7 01       	movw	r22, r14
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  24:	8d 81       	ldd	r24, Y+5	; 0x05
  26:	9e 81       	ldd	r25, Y+6	; 0x06
  28:	6e eb       	ldi	r22, 0xBE	; 190
  2a:	40 e0       	ldi	r20, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  30:	8d 81       	ldd	r24, Y+5	; 0x05
  32:	9e 81       	ldd	r25, Y+6	; 0x06
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  38:	f8 01       	movw	r30, r16
  3a:	80 83       	st	Z, r24
  3c:	8d 81       	ldd	r24, Y+5	; 0x05
  3e:	9e 81       	ldd	r25, Y+6	; 0x06
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  44:	f8 01       	movw	r30, r16
  46:	81 83       	std	Z+1, r24	; 0x01
  48:	8d 81       	ldd	r24, Y+5	; 0x05
  4a:	9e 81       	ldd	r25, Y+6	; 0x06
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  50:	f8 01       	movw	r30, r16
  52:	82 83       	std	Z+2, r24	; 0x02
  54:	8d 81       	ldd	r24, Y+5	; 0x05
  56:	9e 81       	ldd	r25, Y+6	; 0x06
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  5c:	f8 01       	movw	r30, r16
  5e:	83 83       	std	Z+3, r24	; 0x03
  60:	8d 81       	ldd	r24, Y+5	; 0x05
  62:	9e 81       	ldd	r25, Y+6	; 0x06
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  68:	f8 01       	movw	r30, r16
  6a:	84 83       	std	Z+4, r24	; 0x04
  6c:	8d 81       	ldd	r24, Y+5	; 0x05
  6e:	9e 81       	ldd	r25, Y+6	; 0x06
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  74:	f8 01       	movw	r30, r16
  76:	85 83       	std	Z+5, r24	; 0x05
  78:	8d 81       	ldd	r24, Y+5	; 0x05
  7a:	9e 81       	ldd	r25, Y+6	; 0x06
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  80:	f8 01       	movw	r30, r16
  82:	86 83       	std	Z+6, r24	; 0x06
  84:	8d 81       	ldd	r24, Y+5	; 0x05
  86:	9e 81       	ldd	r25, Y+6	; 0x06
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  8c:	f8 01       	movw	r30, r16
  8e:	87 83       	std	Z+7, r24	; 0x07
  90:	8d 81       	ldd	r24, Y+5	; 0x05
  92:	9e 81       	ldd	r25, Y+6	; 0x06
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  98:	f8 01       	movw	r30, r16
  9a:	80 87       	std	Z+8, r24	; 0x08
  9c:	8d 81       	ldd	r24, Y+5	; 0x05
  9e:	9e 81       	ldd	r25, Y+6	; 0x06
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature14readScratchPadEPhS0_>
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	ff 90       	pop	r15
  ae:	ef 90       	pop	r14
  b0:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature11isConnectedEPhS0_:

00000000 <_ZN17DallasTemperature11isConnectedEPhS0_>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ea 01       	movw	r28, r20
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11isConnectedEPhS0_>
   a:	ce 01       	movw	r24, r28
   c:	68 e0       	ldi	r22, 0x08	; 8
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11isConnectedEPhS0_>
  12:	91 e0       	ldi	r25, 0x01	; 1
  14:	28 85       	ldd	r18, Y+8	; 0x08
  16:	82 13       	cpse	r24, r18
}
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	89 2f       	mov	r24, r25
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature11isConnectedEPh:

00000000 <_ZN17DallasTemperature11isConnectedEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	ae 01       	movw	r20, r28
  16:	4f 5f       	subi	r20, 0xFF	; 255
}
  18:	5f 4f       	sbci	r21, 0xFF	; 255
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11isConnectedEPh>
  1e:	29 96       	adiw	r28, 0x09	; 9
  20:	0f b6       	in	r0, 0x3f	; 63
  22:	f8 94       	cli
  24:	de bf       	out	0x3e, r29	; 62
  26:	0f be       	out	0x3f, r0	; 63
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15writeScratchPadEPhPKh:

00000000 <_ZN17DallasTemperature15writeScratchPadEPhPKh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
   e:	eb 01       	movw	r28, r22
  10:	7a 01       	movw	r14, r20
  12:	fc 01       	movw	r30, r24
  14:	85 81       	ldd	r24, Z+5	; 0x05
  16:	96 81       	ldd	r25, Z+6	; 0x06
}
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  1c:	f8 01       	movw	r30, r16
  1e:	85 81       	ldd	r24, Z+5	; 0x05
  20:	96 81       	ldd	r25, Z+6	; 0x06
  22:	be 01       	movw	r22, r28
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  28:	f8 01       	movw	r30, r16
  2a:	85 81       	ldd	r24, Z+5	; 0x05
  2c:	96 81       	ldd	r25, Z+6	; 0x06
  2e:	6e e4       	ldi	r22, 0x4E	; 78
  30:	40 e0       	ldi	r20, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  36:	f8 01       	movw	r30, r16
  38:	85 81       	ldd	r24, Z+5	; 0x05
  3a:	96 81       	ldd	r25, Z+6	; 0x06
  3c:	f7 01       	movw	r30, r14
  3e:	62 81       	ldd	r22, Z+2	; 0x02
  40:	40 e0       	ldi	r20, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  46:	f8 01       	movw	r30, r16
  48:	85 81       	ldd	r24, Z+5	; 0x05
  4a:	96 81       	ldd	r25, Z+6	; 0x06
  4c:	f7 01       	movw	r30, r14
  4e:	63 81       	ldd	r22, Z+3	; 0x03
  50:	40 e0       	ldi	r20, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  56:	88 81       	ld	r24, Y
  58:	80 31       	cpi	r24, 0x10	; 16
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x5c>
  5c:	f8 01       	movw	r30, r16
  5e:	85 81       	ldd	r24, Z+5	; 0x05
  60:	96 81       	ldd	r25, Z+6	; 0x06
  62:	f7 01       	movw	r30, r14
  64:	64 81       	ldd	r22, Z+4	; 0x04
  66:	40 e0       	ldi	r20, 0x00	; 0
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  6c:	f8 01       	movw	r30, r16
  6e:	85 81       	ldd	r24, Z+5	; 0x05
  70:	96 81       	ldd	r25, Z+6	; 0x06
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  76:	f8 01       	movw	r30, r16
  78:	85 81       	ldd	r24, Z+5	; 0x05
  7a:	96 81       	ldd	r25, Z+6	; 0x06
  7c:	68 e4       	ldi	r22, 0x48	; 72
  7e:	40 81       	ld	r20, Z
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  84:	f8 01       	movw	r30, r16
  86:	80 81       	ld	r24, Z
  88:	88 23       	and	r24, r24
  8a:	01 f0       	breq	.+0      	; 0x8c <_ZN17DallasTemperature15writeScratchPadEPhPKh+0x8c>
  8c:	6a e0       	ldi	r22, 0x0A	; 10
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  98:	f8 01       	movw	r30, r16
  9a:	85 81       	ldd	r24, Z+5	; 0x05
  9c:	96 81       	ldd	r25, Z+6	; 0x06
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15writeScratchPadEPhPKh>
  a2:	df 91       	pop	r29
  a4:	cf 91       	pop	r28
  a6:	1f 91       	pop	r17
  a8:	0f 91       	pop	r16
  aa:	ff 90       	pop	r15
  ac:	ef 90       	pop	r14
  ae:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15readPowerSupplyEPh:

00000000 <_ZN17DallasTemperature15readPowerSupplyEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	8d 81       	ldd	r24, Y+5	; 0x05
   e:	9e 81       	ldd	r25, Y+6	; 0x06
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15readPowerSupplyEPh>
  14:	8d 81       	ldd	r24, Y+5	; 0x05
  16:	9e 81       	ldd	r25, Y+6	; 0x06
}
  18:	b8 01       	movw	r22, r16
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15readPowerSupplyEPh>
  1e:	8d 81       	ldd	r24, Y+5	; 0x05
  20:	9e 81       	ldd	r25, Y+6	; 0x06
  22:	64 eb       	ldi	r22, 0xB4	; 180
  24:	40 e0       	ldi	r20, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15readPowerSupplyEPh>
  2a:	8d 81       	ldd	r24, Y+5	; 0x05
  2c:	9e 81       	ldd	r25, Y+6	; 0x06
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15readPowerSupplyEPh>
  32:	08 2f       	mov	r16, r24
  34:	8d 81       	ldd	r24, Y+5	; 0x05
  36:	9e 81       	ldd	r25, Y+6	; 0x06
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15readPowerSupplyEPh>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	01 11       	cpse	r16, r1
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature13setResolutionEPhh:

00000000 <_ZN17DallasTemperature13setResolutionEPhh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2a 97       	sbiw	r28, 0x0a	; 10
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	8b 01       	movw	r16, r22
  20:	24 2f       	mov	r18, r20
  22:	ae 01       	movw	r20, r28
  24:	4f 5f       	subi	r20, 0xFF	; 255
  26:	5f 4f       	sbci	r21, 0xFF	; 255
  28:	2a 87       	std	Y+10, r18	; 0x0a
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13setResolutionEPhh>
  2e:	2a 85       	ldd	r18, Y+10	; 0x0a
  30:	88 23       	and	r24, r24
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN17DallasTemperature13setResolutionEPhh+0x34>
  34:	f8 01       	movw	r30, r16
  36:	80 81       	ld	r24, Z
  38:	80 31       	cpi	r24, 0x10	; 16
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN17DallasTemperature13setResolutionEPhh+0x3c>
  3c:	2a 30       	cpi	r18, 0x0A	; 10
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN17DallasTemperature13setResolutionEPhh+0x40>
  40:	2a 30       	cpi	r18, 0x0A	; 10
  42:	00 f0       	brcs	.+0      	; 0x44 <_ZN17DallasTemperature13setResolutionEPhh+0x44>
  44:	2b 30       	cpi	r18, 0x0B	; 11
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN17DallasTemperature13setResolutionEPhh+0x48>
  48:	2c 30       	cpi	r18, 0x0C	; 12
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN17DallasTemperature13setResolutionEPhh+0x4c>
  4c:	8f e7       	ldi	r24, 0x7F	; 127
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN17DallasTemperature13setResolutionEPhh+0x50>
  50:	8f e5       	ldi	r24, 0x5F	; 95
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN17DallasTemperature13setResolutionEPhh+0x54>
  54:	8f e3       	ldi	r24, 0x3F	; 63
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN17DallasTemperature13setResolutionEPhh+0x58>
  58:	8f e1       	ldi	r24, 0x1F	; 31
  5a:	8d 83       	std	Y+5, r24	; 0x05
  5c:	c7 01       	movw	r24, r14
  5e:	b8 01       	movw	r22, r16
  60:	ae 01       	movw	r20, r28
  62:	4f 5f       	subi	r20, 0xFF	; 255
  64:	5f 4f       	sbci	r21, 0xFF	; 255
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13setResolutionEPhh>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN17DallasTemperature13setResolutionEPhh+0x6c>
  6c:	80 e0       	ldi	r24, 0x00	; 0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN17DallasTemperature13setResolutionEPhh+0x70>
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	2a 96       	adiw	r28, 0x0a	; 10
  74:	0f b6       	in	r0, 0x3f	; 63
  76:	f8 94       	cli
  78:	de bf       	out	0x3e, r29	; 62
  7a:	0f be       	out	0x3f, r0	; 63
  7c:	cd bf       	out	0x3d, r28	; 61
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	1f 91       	pop	r17
  84:	0f 91       	pop	r16
  86:	ff 90       	pop	r15
  88:	ef 90       	pop	r14
  8a:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature13setResolutionEh:

00000000 <_ZN17DallasTemperature13setResolutionEh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	28 97       	sbiw	r28, 0x08	; 8
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	69 30       	cpi	r22, 0x09	; 9
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZN17DallasTemperature13setResolutionEh+0x22>
  22:	6d 30       	cpi	r22, 0x0D	; 13
  24:	00 f0       	brcs	.+0      	; 0x26 <_ZN17DallasTemperature13setResolutionEh+0x26>
  26:	6c e0       	ldi	r22, 0x0C	; 12
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN17DallasTemperature13setResolutionEh+0x2a>
  2a:	69 e0       	ldi	r22, 0x09	; 9
  2c:	f8 01       	movw	r30, r16
  2e:	61 83       	std	Z+1, r22	; 0x01
  30:	ee 24       	eor	r14, r14
  32:	ff 24       	eor	r15, r15
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN17DallasTemperature13setResolutionEh+0x36>
  36:	c8 01       	movw	r24, r16
  38:	be 01       	movw	r22, r28
  3a:	6f 5f       	subi	r22, 0xFF	; 255
  3c:	7f 4f       	sbci	r23, 0xFF	; 255
  3e:	4e 2d       	mov	r20, r14
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13setResolutionEh>
  44:	c8 01       	movw	r24, r16
  46:	be 01       	movw	r22, r28
  48:	6f 5f       	subi	r22, 0xFF	; 255
  4a:	7f 4f       	sbci	r23, 0xFF	; 255
  4c:	f8 01       	movw	r30, r16
  4e:	41 81       	ldd	r20, Z+1	; 0x01
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13setResolutionEh>
  54:	08 94       	sec
  56:	e1 1c       	adc	r14, r1
  58:	f1 1c       	adc	r15, r1
  5a:	f8 01       	movw	r30, r16
  5c:	84 81       	ldd	r24, Z+4	; 0x04
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	e8 16       	cp	r14, r24
  62:	f9 06       	cpc	r15, r25
  64:	04 f0       	brlt	.+0      	; 0x66 <_ZN17DallasTemperature13setResolutionEh+0x66>
  66:	28 96       	adiw	r28, 0x08	; 8
  68:	0f b6       	in	r0, 0x3f	; 63
  6a:	f8 94       	cli
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	0f be       	out	0x3f, r0	; 63
  70:	cd bf       	out	0x3d, r28	; 61
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature13getResolutionEv:

00000000 <_ZN17DallasTemperature13getResolutionEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	81 81       	ldd	r24, Z+1	; 0x01
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature13getResolutionEPh:

00000000 <_ZN17DallasTemperature13getResolutionEPh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	fb 01       	movw	r30, r22
  16:	20 81       	ld	r18, Z
}
  18:	20 31       	cpi	r18, 0x10	; 16
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN17DallasTemperature13getResolutionEPh+0x1c>
  1c:	ae 01       	movw	r20, r28
  1e:	4f 5f       	subi	r20, 0xFF	; 255
  20:	5f 4f       	sbci	r21, 0xFF	; 255
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13getResolutionEPh>
  26:	88 23       	and	r24, r24
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN17DallasTemperature13getResolutionEPh+0x2a>
  2a:	8d 81       	ldd	r24, Y+5	; 0x05
  2c:	8f 33       	cpi	r24, 0x3F	; 63
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN17DallasTemperature13getResolutionEPh+0x30>
  30:	80 34       	cpi	r24, 0x40	; 64
  32:	00 f4       	brcc	.+0      	; 0x34 <_ZN17DallasTemperature13getResolutionEPh+0x34>
  34:	8f 31       	cpi	r24, 0x1F	; 31
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN17DallasTemperature13getResolutionEPh+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN17DallasTemperature13getResolutionEPh+0x3a>
  3a:	8f 35       	cpi	r24, 0x5F	; 95
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN17DallasTemperature13getResolutionEPh+0x3e>
  3e:	8f 37       	cpi	r24, 0x7F	; 127
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN17DallasTemperature13getResolutionEPh+0x42>
  42:	8c e0       	ldi	r24, 0x0C	; 12
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN17DallasTemperature13getResolutionEPh+0x46>
  46:	8a e0       	ldi	r24, 0x0A	; 10
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN17DallasTemperature13getResolutionEPh+0x4a>
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN17DallasTemperature13getResolutionEPh+0x4e>
  4e:	8b e0       	ldi	r24, 0x0B	; 11
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN17DallasTemperature13getResolutionEPh+0x52>
  52:	89 e0       	ldi	r24, 0x09	; 9
  54:	29 96       	adiw	r28, 0x09	; 9
  56:	0f b6       	in	r0, 0x3f	; 63
  58:	f8 94       	cli
  5a:	de bf       	out	0x3e, r29	; 62
  5c:	0f be       	out	0x3f, r0	; 63
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature5beginEv:

00000000 <_ZN17DallasTemperature5beginEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	fc 01       	movw	r30, r24
  20:	85 81       	ldd	r24, Z+5	; 0x05
  22:	96 81       	ldd	r25, Z+6	; 0x06
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  28:	f8 01       	movw	r30, r16
  2a:	14 82       	std	Z+4, r1	; 0x04
  2c:	ff 24       	eor	r15, r15
  2e:	f3 94       	inc	r15
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN17DallasTemperature5beginEv+0x32>
  32:	c8 01       	movw	r24, r16
  34:	be 01       	movw	r22, r28
  36:	6f 5f       	subi	r22, 0xFF	; 255
  38:	7f 4f       	sbci	r23, 0xFF	; 255
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  3e:	88 23       	and	r24, r24
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN17DallasTemperature5beginEv+0x42>
  42:	f8 01       	movw	r30, r16
  44:	80 81       	ld	r24, Z
  46:	88 23       	and	r24, r24
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN17DallasTemperature5beginEv+0x4a>
  4a:	c8 01       	movw	r24, r16
  4c:	be 01       	movw	r22, r28
  4e:	6f 5f       	subi	r22, 0xFF	; 255
  50:	7f 4f       	sbci	r23, 0xFF	; 255
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN17DallasTemperature5beginEv+0x5a>
  5a:	f8 01       	movw	r30, r16
  5c:	f0 82       	st	Z, r15
  5e:	c8 01       	movw	r24, r16
  60:	be 01       	movw	r22, r28
  62:	6f 5f       	subi	r22, 0xFF	; 255
  64:	7f 4f       	sbci	r23, 0xFF	; 255
  66:	ae 01       	movw	r20, r28
  68:	47 5f       	subi	r20, 0xF7	; 247
  6a:	5f 4f       	sbci	r21, 0xFF	; 255
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  70:	f8 01       	movw	r30, r16
  72:	e1 80       	ldd	r14, Z+1	; 0x01
  74:	c8 01       	movw	r24, r16
  76:	be 01       	movw	r22, r28
  78:	6f 5f       	subi	r22, 0xFF	; 255
  7a:	7f 4f       	sbci	r23, 0xFF	; 255
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  80:	8e 15       	cp	r24, r14
  82:	00 f4       	brcc	.+0      	; 0x84 <_ZN17DallasTemperature5beginEv+0x84>
  84:	f8 01       	movw	r30, r16
  86:	81 81       	ldd	r24, Z+1	; 0x01
  88:	00 c0       	rjmp	.+0      	; 0x8a <_ZN17DallasTemperature5beginEv+0x8a>
  8a:	c8 01       	movw	r24, r16
  8c:	be 01       	movw	r22, r28
  8e:	6f 5f       	subi	r22, 0xFF	; 255
  90:	7f 4f       	sbci	r23, 0xFF	; 255
  92:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  96:	f8 01       	movw	r30, r16
  98:	81 83       	std	Z+1, r24	; 0x01
  9a:	84 81       	ldd	r24, Z+4	; 0x04
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	84 83       	std	Z+4, r24	; 0x04
  a0:	f8 01       	movw	r30, r16
  a2:	85 81       	ldd	r24, Z+5	; 0x05
  a4:	96 81       	ldd	r25, Z+6	; 0x06
  a6:	be 01       	movw	r22, r28
  a8:	6f 5f       	subi	r22, 0xFF	; 255
  aa:	7f 4f       	sbci	r23, 0xFF	; 255
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature5beginEv>
  b0:	88 23       	and	r24, r24
  b2:	01 f0       	breq	.+0      	; 0xb4 <_ZN17DallasTemperature5beginEv+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_ZN17DallasTemperature5beginEv+0xb6>
  b6:	61 96       	adiw	r28, 0x11	; 17
  b8:	0f b6       	in	r0, 0x3f	; 63
  ba:	f8 94       	cli
  bc:	de bf       	out	0x3e, r29	; 62
  be:	0f be       	out	0x3f, r0	; 63
  c0:	cd bf       	out	0x3d, r28	; 61
  c2:	df 91       	pop	r29
  c4:	cf 91       	pop	r28
  c6:	1f 91       	pop	r17
  c8:	0f 91       	pop	r16
  ca:	ff 90       	pop	r15
  cc:	ef 90       	pop	r14
  ce:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature20setWaitForConversionEb:

00000000 <_ZN17DallasTemperature20setWaitForConversionEb>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	62 83       	std	Z+2, r22	; 0x02
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature20getWaitForConversionEv:

00000000 <_ZN17DallasTemperature20getWaitForConversionEv>:
   0:	fc 01       	movw	r30, r24
   2:	82 81       	ldd	r24, Z+2	; 0x02
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature21setCheckForConversionEb:

00000000 <_ZN17DallasTemperature21setCheckForConversionEb>:
   0:	fc 01       	movw	r30, r24
   2:	63 83       	std	Z+3, r22	; 0x03
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature21getCheckForConversionEv:

00000000 <_ZN17DallasTemperature21getCheckForConversionEv>:
   0:	fc 01       	movw	r30, r24
   2:	83 81       	ldd	r24, Z+3	; 0x03
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature21isConversionAvailableEPh:

00000000 <_ZN17DallasTemperature21isConversionAvailableEPh>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	ae 01       	movw	r20, r28
  16:	4f 5f       	subi	r20, 0xFF	; 255
}
  18:	5f 4f       	sbci	r21, 0xFF	; 255
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature21isConversionAvailableEPh>
  1e:	81 e0       	ldi	r24, 0x01	; 1
  20:	99 81       	ldd	r25, Y+1	; 0x01
  22:	99 23       	and	r25, r25
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN17DallasTemperature21isConversionAvailableEPh+0x26>
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	29 96       	adiw	r28, 0x09	; 9
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature27blockTillConversionCompleteEPhS0_:

00000000 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	8b 01       	movw	r16, r22
  14:	41 15       	cp	r20, r1
  16:	51 05       	cpc	r21, r1
}
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x1a>
  1a:	8b 81       	ldd	r24, Y+3	; 0x03
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x20>
  20:	88 81       	ld	r24, Y
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x26>
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
  2a:	6b 01       	movw	r12, r22
  2c:	7c 01       	movw	r14, r24
  2e:	ce 01       	movw	r24, r28
  30:	60 e0       	ldi	r22, 0x00	; 0
  32:	70 e0       	ldi	r23, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
  38:	88 23       	and	r24, r24
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x3c>
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
  40:	dc 01       	movw	r26, r24
  42:	cb 01       	movw	r24, r22
  44:	8c 19       	sub	r24, r12
  46:	9d 09       	sbc	r25, r13
  48:	ae 09       	sbc	r26, r14
  4a:	bf 09       	sbc	r27, r15
  4c:	8e 3e       	cpi	r24, 0xEE	; 238
  4e:	22 e0       	ldi	r18, 0x02	; 2
  50:	92 07       	cpc	r25, r18
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	a2 07       	cpc	r26, r18
  56:	20 e0       	ldi	r18, 0x00	; 0
  58:	b2 07       	cpc	r27, r18
  5a:	00 f0       	brcs	.+0      	; 0x5c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x5c>
  5c:	f8 01       	movw	r30, r16
  5e:	80 81       	ld	r24, Z
  60:	89 30       	cpi	r24, 0x09	; 9
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x64>
  64:	89 30       	cpi	r24, 0x09	; 9
  66:	00 f0       	brcs	.+0      	; 0x68 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x68>
  68:	8a 30       	cpi	r24, 0x0A	; 10
  6a:	01 f0       	breq	.+0      	; 0x6c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x6c>
  6c:	8b 30       	cpi	r24, 0x0B	; 11
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x72>
  72:	6e e5       	ldi	r22, 0x5E	; 94
  74:	70 e0       	ldi	r23, 0x00	; 0
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x7c>
  7c:	6c eb       	ldi	r22, 0xBC	; 188
  7e:	70 e0       	ldi	r23, 0x00	; 0
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x86>
  86:	67 e7       	ldi	r22, 0x77	; 119
  88:	71 e0       	ldi	r23, 0x01	; 1
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_+0x90>
  90:	6e ee       	ldi	r22, 0xEE	; 238
  92:	72 e0       	ldi	r23, 0x02	; 2
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature27blockTillConversionCompleteEPhS0_>
  9c:	df 91       	pop	r29
  9e:	cf 91       	pop	r28
  a0:	1f 91       	pop	r17
  a2:	0f 91       	pop	r16
  a4:	ff 90       	pop	r15
  a6:	ef 90       	pop	r14
  a8:	df 90       	pop	r13
  aa:	cf 90       	pop	r12
  ac:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature28requestTemperaturesByAddressEPh:

00000000 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2a 97       	sbiw	r28, 0x0a	; 10
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	7b 01       	movw	r14, r22
  20:	fc 01       	movw	r30, r24
  22:	85 81       	ldd	r24, Z+5	; 0x05
  24:	96 81       	ldd	r25, Z+6	; 0x06
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  2a:	f8 01       	movw	r30, r16
  2c:	85 81       	ldd	r24, Z+5	; 0x05
  2e:	96 81       	ldd	r25, Z+6	; 0x06
  30:	b7 01       	movw	r22, r14
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  36:	f8 01       	movw	r30, r16
  38:	85 81       	ldd	r24, Z+5	; 0x05
  3a:	96 81       	ldd	r25, Z+6	; 0x06
  3c:	64 e4       	ldi	r22, 0x44	; 68
  3e:	40 81       	ld	r20, Z
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  44:	c8 01       	movw	r24, r16
  46:	b7 01       	movw	r22, r14
  48:	ae 01       	movw	r20, r28
  4a:	4e 5f       	subi	r20, 0xFE	; 254
  4c:	5f 4f       	sbci	r21, 0xFF	; 255
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  52:	88 23       	and	r24, r24
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x56>
  56:	f8 01       	movw	r30, r16
  58:	82 81       	ldd	r24, Z+2	; 0x02
  5a:	88 23       	and	r24, r24
  5c:	01 f0       	breq	.+0      	; 0x5e <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x5e>
  5e:	c8 01       	movw	r24, r16
  60:	b7 01       	movw	r22, r14
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  66:	89 83       	std	Y+1, r24	; 0x01
  68:	c8 01       	movw	r24, r16
  6a:	be 01       	movw	r22, r28
  6c:	6f 5f       	subi	r22, 0xFF	; 255
  6e:	7f 4f       	sbci	r23, 0xFF	; 255
  70:	a7 01       	movw	r20, r14
  72:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x78>
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN17DallasTemperature28requestTemperaturesByAddressEPh+0x7c>
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	2a 96       	adiw	r28, 0x0a	; 10
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	ff 90       	pop	r15
  94:	ef 90       	pop	r14
  96:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature19requestTemperaturesEv:

00000000 <_ZN17DallasTemperature19requestTemperaturesEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	8d 81       	ldd	r24, Y+5	; 0x05
   8:	9e 81       	ldd	r25, Y+6	; 0x06
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature19requestTemperaturesEv>
   e:	8d 81       	ldd	r24, Y+5	; 0x05
  10:	9e 81       	ldd	r25, Y+6	; 0x06
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature19requestTemperaturesEv>
  16:	8d 81       	ldd	r24, Y+5	; 0x05
}
  18:	9e 81       	ldd	r25, Y+6	; 0x06
  1a:	64 e4       	ldi	r22, 0x44	; 68
  1c:	48 81       	ld	r20, Y
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature19requestTemperaturesEv>
  22:	8a 81       	ldd	r24, Y+2	; 0x02
  24:	88 23       	and	r24, r24
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN17DallasTemperature19requestTemperaturesEv+0x28>
  28:	be 01       	movw	r22, r28
  2a:	6f 5f       	subi	r22, 0xFF	; 255
  2c:	7f 4f       	sbci	r23, 0xFF	; 255
  2e:	ce 01       	movw	r24, r28
  30:	40 e0       	ldi	r20, 0x00	; 0
  32:	50 e0       	ldi	r21, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature19requestTemperaturesEv>
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature26requestTemperaturesByIndexEh:

00000000 <_ZN17DallasTemperature26requestTemperaturesByIndexEh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	28 97       	sbiw	r28, 0x08	; 8
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
}
  18:	8c 01       	movw	r16, r24
  1a:	46 2f       	mov	r20, r22
  1c:	be 01       	movw	r22, r28
  1e:	6f 5f       	subi	r22, 0xFF	; 255
  20:	7f 4f       	sbci	r23, 0xFF	; 255
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature26requestTemperaturesByIndexEh>
  26:	c8 01       	movw	r24, r16
  28:	be 01       	movw	r22, r28
  2a:	6f 5f       	subi	r22, 0xFF	; 255
  2c:	7f 4f       	sbci	r23, 0xFF	; 255
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature26requestTemperaturesByIndexEh>
  32:	28 96       	adiw	r28, 0x08	; 8
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	f8 94       	cli
  38:	de bf       	out	0x3e, r29	; 62
  3a:	0f be       	out	0x3f, r0	; 63
  3c:	cd bf       	out	0x3d, r28	; 61
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	1f 91       	pop	r17
  44:	0f 91       	pop	r16
  46:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature20calculateTemperatureEPhS0_:

00000000 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	fb 01       	movw	r30, r22
}
  18:	ea 01       	movw	r28, r20
  1a:	99 81       	ldd	r25, Y+1	; 0x01
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	68 81       	ld	r22, Y
  20:	70 e0       	ldi	r23, 0x00	; 0
  22:	68 2b       	or	r22, r24
  24:	79 2b       	or	r23, r25
  26:	80 81       	ld	r24, Z
  28:	82 32       	cpi	r24, 0x22	; 34
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x2c>
  2c:	88 32       	cpi	r24, 0x28	; 40
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x30>
  30:	80 31       	cpi	r24, 0x10	; 16
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x38>
  38:	8c 81       	ldd	r24, Y+4	; 0x04
  3a:	8f 33       	cpi	r24, 0x3F	; 63
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x3e>
  3e:	80 34       	cpi	r24, 0x40	; 64
  40:	00 f4       	brcc	.+0      	; 0x42 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x42>
  42:	8f 31       	cpi	r24, 0x1F	; 31
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4a>
  4a:	8f 35       	cpi	r24, 0x5F	; 95
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x4e>
  4e:	8f 37       	cpi	r24, 0x7F	; 127
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x54>
  54:	88 27       	eor	r24, r24
  56:	77 fd       	sbrc	r23, 7
  58:	80 95       	com	r24
  5a:	98 2f       	mov	r25, r24
  5c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	30 e0       	ldi	r19, 0x00	; 0
  64:	40 e8       	ldi	r20, 0x80	; 128
  66:	5d e3       	ldi	r21, 0x3D	; 61
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x6a>
  6a:	75 95       	asr	r23
  6c:	67 95       	ror	r22
  6e:	88 27       	eor	r24, r24
  70:	77 fd       	sbrc	r23, 7
  72:	80 95       	com	r24
  74:	98 2f       	mov	r25, r24
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  7a:	20 e0       	ldi	r18, 0x00	; 0
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	5e e3       	ldi	r21, 0x3E	; 62
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x88>
  88:	75 95       	asr	r23
  8a:	67 95       	ror	r22
  8c:	75 95       	asr	r23
  8e:	67 95       	ror	r22
  90:	88 27       	eor	r24, r24
  92:	77 fd       	sbrc	r23, 7
  94:	80 95       	com	r24
  96:	98 2f       	mov	r25, r24
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	40 e8       	ldi	r20, 0x80	; 128
  a2:	5e e3       	ldi	r21, 0x3E	; 62
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xa6>
  a6:	93 e0       	ldi	r25, 0x03	; 3
  a8:	75 95       	asr	r23
  aa:	67 95       	ror	r22
  ac:	9a 95       	dec	r25
  ae:	01 f4       	brne	.+0      	; 0xb0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xb0>
  b0:	88 27       	eor	r24, r24
  b2:	77 fd       	sbrc	r23, 7
  b4:	80 95       	com	r24
  b6:	98 2f       	mov	r25, r24
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	40 e0       	ldi	r20, 0x00	; 0
  c2:	5f e3       	ldi	r21, 0x3F	; 63
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0xc6>
  c6:	1f 81       	ldd	r17, Y+7	; 0x07
  c8:	75 95       	asr	r23
  ca:	67 95       	ror	r22
  cc:	88 27       	eor	r24, r24
  ce:	77 fd       	sbrc	r23, 7
  d0:	80 95       	com	r24
  d2:	98 2f       	mov	r25, r24
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	40 e8       	ldi	r20, 0x80	; 128
  de:	5e e3       	ldi	r21, 0x3E	; 62
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  e4:	4b 01       	movw	r8, r22
  e6:	5c 01       	movw	r10, r24
  e8:	61 2f       	mov	r22, r17
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	8e 81       	ldd	r24, Y+6	; 0x06
  ee:	68 1b       	sub	r22, r24
  f0:	71 09       	sbc	r23, r1
  f2:	88 27       	eor	r24, r24
  f4:	77 fd       	sbrc	r23, 7
  f6:	80 95       	com	r24
  f8:	98 2f       	mov	r25, r24
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
  fe:	6b 01       	movw	r12, r22
 100:	7c 01       	movw	r14, r24
 102:	61 2f       	mov	r22, r17
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
 10e:	9b 01       	movw	r18, r22
 110:	ac 01       	movw	r20, r24
 112:	c7 01       	movw	r24, r14
 114:	b6 01       	movw	r22, r12
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
 11a:	9b 01       	movw	r18, r22
 11c:	ac 01       	movw	r20, r24
 11e:	c5 01       	movw	r24, r10
 120:	b4 01       	movw	r22, r8
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature20calculateTemperatureEPhS0_>
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN17DallasTemperature20calculateTemperatureEPhS0_+0x128>
 128:	38 2f       	mov	r19, r24
 12a:	29 2f       	mov	r18, r25
 12c:	86 2f       	mov	r24, r22
 12e:	97 2f       	mov	r25, r23
 130:	a3 2f       	mov	r26, r19
 132:	b2 2f       	mov	r27, r18
 134:	bc 01       	movw	r22, r24
 136:	cd 01       	movw	r24, r26
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	bf 90       	pop	r11
 148:	af 90       	pop	r10
 14a:	9f 90       	pop	r9
 14c:	8f 90       	pop	r8
 14e:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature8getTempCEPh:

00000000 <_ZN17DallasTemperature8getTempCEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	7b 01       	movw	r14, r22
  20:	ae 01       	movw	r20, r28
  22:	4f 5f       	subi	r20, 0xFF	; 255
  24:	5f 4f       	sbci	r21, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8getTempCEPh>
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN17DallasTemperature8getTempCEPh+0x2e>
  2e:	c8 01       	movw	r24, r16
  30:	b7 01       	movw	r22, r14
  32:	ae 01       	movw	r20, r28
  34:	4f 5f       	subi	r20, 0xFF	; 255
  36:	5f 4f       	sbci	r21, 0xFF	; 255
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8getTempCEPh>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN17DallasTemperature8getTempCEPh+0x3e>
  3e:	60 e0       	ldi	r22, 0x00	; 0
  40:	70 e0       	ldi	r23, 0x00	; 0
  42:	8e ef       	ldi	r24, 0xFE	; 254
  44:	92 ec       	ldi	r25, 0xC2	; 194
  46:	38 2f       	mov	r19, r24
  48:	29 2f       	mov	r18, r25
  4a:	86 2f       	mov	r24, r22
  4c:	97 2f       	mov	r25, r23
  4e:	a3 2f       	mov	r26, r19
  50:	b2 2f       	mov	r27, r18
  52:	bc 01       	movw	r22, r24
  54:	cd 01       	movw	r24, r26
  56:	29 96       	adiw	r28, 0x09	; 9
  58:	0f b6       	in	r0, 0x3f	; 63
  5a:	f8 94       	cli
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	0f be       	out	0x3f, r0	; 63
  60:	cd bf       	out	0x3d, r28	; 61
  62:	df 91       	pop	r29
  64:	cf 91       	pop	r28
  66:	1f 91       	pop	r17
  68:	0f 91       	pop	r16
  6a:	ff 90       	pop	r15
  6c:	ef 90       	pop	r14
  6e:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15getTempCByIndexEh:

00000000 <_ZN17DallasTemperature15getTempCByIndexEh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	28 97       	sbiw	r28, 0x08	; 8
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
}
  18:	8c 01       	movw	r16, r24
  1a:	46 2f       	mov	r20, r22
  1c:	be 01       	movw	r22, r28
  1e:	6f 5f       	subi	r22, 0xFF	; 255
  20:	7f 4f       	sbci	r23, 0xFF	; 255
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getTempCByIndexEh>
  26:	c8 01       	movw	r24, r16
  28:	be 01       	movw	r22, r28
  2a:	6f 5f       	subi	r22, 0xFF	; 255
  2c:	7f 4f       	sbci	r23, 0xFF	; 255
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getTempCByIndexEh>
  32:	46 2f       	mov	r20, r22
  34:	57 2f       	mov	r21, r23
  36:	68 2f       	mov	r22, r24
  38:	79 2f       	mov	r23, r25
  3a:	cb 01       	movw	r24, r22
  3c:	ba 01       	movw	r22, r20
  3e:	28 96       	adiw	r28, 0x08	; 8
  40:	0f b6       	in	r0, 0x3f	; 63
  42:	f8 94       	cli
  44:	de bf       	out	0x3e, r29	; 62
  46:	0f be       	out	0x3f, r0	; 63
  48:	cd bf       	out	0x3d, r28	; 61
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15getTempFByIndexEh:

00000000 <_ZN17DallasTemperature15getTempFByIndexEh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getTempFByIndexEh>
   4:	26 e6       	ldi	r18, 0x66	; 102
   6:	36 e6       	ldi	r19, 0x66	; 102
   8:	46 ee       	ldi	r20, 0xE6	; 230
   a:	5f e3       	ldi	r21, 0x3F	; 63
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getTempFByIndexEh>
  10:	20 e0       	ldi	r18, 0x00	; 0
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	40 e0       	ldi	r20, 0x00	; 0
  16:	52 e4       	ldi	r21, 0x42	; 66
}
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getTempFByIndexEh>
  1c:	46 2f       	mov	r20, r22
  1e:	57 2f       	mov	r21, r23
  20:	68 2f       	mov	r22, r24
  22:	79 2f       	mov	r23, r25
  24:	cb 01       	movw	r24, r22
  26:	ba 01       	movw	r22, r20
  28:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature8getTempFEPh:

00000000 <_ZN17DallasTemperature8getTempFEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8getTempFEPh>
   4:	26 e6       	ldi	r18, 0x66	; 102
   6:	36 e6       	ldi	r19, 0x66	; 102
   8:	46 ee       	ldi	r20, 0xE6	; 230
   a:	5f e3       	ldi	r21, 0x3F	; 63
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8getTempFEPh>
  10:	20 e0       	ldi	r18, 0x00	; 0
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	40 e0       	ldi	r20, 0x00	; 0
  16:	52 e4       	ldi	r21, 0x42	; 66
}
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8getTempFEPh>
  1c:	46 2f       	mov	r20, r22
  1e:	57 2f       	mov	r21, r23
  20:	68 2f       	mov	r22, r24
  22:	79 2f       	mov	r23, r25
  24:	cb 01       	movw	r24, r22
  26:	ba 01       	movw	r22, r20
  28:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature19isParasitePowerModeEv:

00000000 <_ZN17DallasTemperature19isParasitePowerModeEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature16setHighAlarmTempEPhc:

00000000 <_ZN17DallasTemperature16setHighAlarmTempEPhc>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	29 97       	sbiw	r28, 0x09	; 9
  14:	0f b6       	in	r0, 0x3f	; 63
  16:	f8 94       	cli
}
  18:	de bf       	out	0x3e, r29	; 62
  1a:	0f be       	out	0x3f, r0	; 63
  1c:	cd bf       	out	0x3d, r28	; 61
  1e:	8c 01       	movw	r16, r24
  20:	7b 01       	movw	r14, r22
  22:	d4 2e       	mov	r13, r20
  24:	ae 01       	movw	r20, r28
  26:	4f 5f       	subi	r20, 0xFF	; 255
  28:	5f 4f       	sbci	r21, 0xFF	; 255
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature16setHighAlarmTempEPhc>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN17DallasTemperature16setHighAlarmTempEPhc+0x32>
  32:	8d 2d       	mov	r24, r13
  34:	89 3c       	cpi	r24, 0xC9	; 201
  36:	04 f4       	brge	.+0      	; 0x38 <_ZN17DallasTemperature16setHighAlarmTempEPhc+0x38>
  38:	89 ec       	ldi	r24, 0xC9	; 201
  3a:	8e 37       	cpi	r24, 0x7E	; 126
  3c:	04 f0       	brlt	.+0      	; 0x3e <_ZN17DallasTemperature16setHighAlarmTempEPhc+0x3e>
  3e:	8d e7       	ldi	r24, 0x7D	; 125
  40:	8b 83       	std	Y+3, r24	; 0x03
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	ae 01       	movw	r20, r28
  48:	4f 5f       	subi	r20, 0xFF	; 255
  4a:	5f 4f       	sbci	r21, 0xFF	; 255
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature16setHighAlarmTempEPhc>
  50:	29 96       	adiw	r28, 0x09	; 9
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	ff 90       	pop	r15
  66:	ef 90       	pop	r14
  68:	df 90       	pop	r13
  6a:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15setLowAlarmTempEPhc:

00000000 <_ZN17DallasTemperature15setLowAlarmTempEPhc>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	29 97       	sbiw	r28, 0x09	; 9
  14:	0f b6       	in	r0, 0x3f	; 63
  16:	f8 94       	cli
}
  18:	de bf       	out	0x3e, r29	; 62
  1a:	0f be       	out	0x3f, r0	; 63
  1c:	cd bf       	out	0x3d, r28	; 61
  1e:	8c 01       	movw	r16, r24
  20:	7b 01       	movw	r14, r22
  22:	d4 2e       	mov	r13, r20
  24:	ae 01       	movw	r20, r28
  26:	4f 5f       	subi	r20, 0xFF	; 255
  28:	5f 4f       	sbci	r21, 0xFF	; 255
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15setLowAlarmTempEPhc>
  2e:	88 23       	and	r24, r24
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN17DallasTemperature15setLowAlarmTempEPhc+0x32>
  32:	8d 2d       	mov	r24, r13
  34:	89 3c       	cpi	r24, 0xC9	; 201
  36:	04 f4       	brge	.+0      	; 0x38 <_ZN17DallasTemperature15setLowAlarmTempEPhc+0x38>
  38:	89 ec       	ldi	r24, 0xC9	; 201
  3a:	8e 37       	cpi	r24, 0x7E	; 126
  3c:	04 f0       	brlt	.+0      	; 0x3e <_ZN17DallasTemperature15setLowAlarmTempEPhc+0x3e>
  3e:	8d e7       	ldi	r24, 0x7D	; 125
  40:	8c 83       	std	Y+4, r24	; 0x04
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	ae 01       	movw	r20, r28
  48:	4f 5f       	subi	r20, 0xFF	; 255
  4a:	5f 4f       	sbci	r21, 0xFF	; 255
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15setLowAlarmTempEPhc>
  50:	29 96       	adiw	r28, 0x09	; 9
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	ff 90       	pop	r15
  66:	ef 90       	pop	r14
  68:	df 90       	pop	r13
  6a:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature16getHighAlarmTempEPh:

00000000 <_ZN17DallasTemperature16getHighAlarmTempEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	ae 01       	movw	r20, r28
  16:	4f 5f       	subi	r20, 0xFF	; 255
}
  18:	5f 4f       	sbci	r21, 0xFF	; 255
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature16getHighAlarmTempEPh>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN17DallasTemperature16getHighAlarmTempEPh+0x22>
  22:	8b 81       	ldd	r24, Y+3	; 0x03
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN17DallasTemperature16getHighAlarmTempEPh+0x26>
  26:	81 e8       	ldi	r24, 0x81	; 129
  28:	29 96       	adiw	r28, 0x09	; 9
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15getLowAlarmTempEPh:

00000000 <_ZN17DallasTemperature15getLowAlarmTempEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	29 97       	sbiw	r28, 0x09	; 9
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	ae 01       	movw	r20, r28
  16:	4f 5f       	subi	r20, 0xFF	; 255
}
  18:	5f 4f       	sbci	r21, 0xFF	; 255
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature15getLowAlarmTempEPh>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN17DallasTemperature15getLowAlarmTempEPh+0x22>
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN17DallasTemperature15getLowAlarmTempEPh+0x26>
  26:	81 e8       	ldi	r24, 0x81	; 129
  28:	29 96       	adiw	r28, 0x09	; 9
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature16resetAlarmSearchEv:

00000000 <_ZN17DallasTemperature16resetAlarmSearchEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	8f ef       	ldi	r24, 0xFF	; 255
   4:	87 87       	std	Z+15, r24	; 0x0f
   6:	10 8a       	std	Z+16, r1	; 0x10
   8:	17 82       	std	Z+7, r1	; 0x07
   a:	10 86       	std	Z+8, r1	; 0x08
   c:	11 86       	std	Z+9, r1	; 0x09
   e:	12 86       	std	Z+10, r1	; 0x0a
  10:	13 86       	std	Z+11, r1	; 0x0b
  12:	14 86       	std	Z+12, r1	; 0x0c
  14:	15 86       	std	Z+13, r1	; 0x0d
  16:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature11alarmSearchEPh:

00000000 <_ZN17DallasTemperature11alarmSearchEPh>:
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
}
  18:	0f 92       	push	r0
  1a:	cd b7       	in	r28, 0x3d	; 61
  1c:	de b7       	in	r29, 0x3e	; 62
  1e:	4c 01       	movw	r8, r24
  20:	5b 01       	movw	r10, r22
  22:	fc 01       	movw	r30, r24
  24:	80 89       	ldd	r24, Z+16	; 0x10
  26:	88 23       	and	r24, r24
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN17DallasTemperature11alarmSearchEPh+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN17DallasTemperature11alarmSearchEPh+0x2c>
  2c:	85 81       	ldd	r24, Z+5	; 0x05
  2e:	96 81       	ldd	r25, Z+6	; 0x06
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11alarmSearchEPh>
  34:	88 23       	and	r24, r24
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN17DallasTemperature11alarmSearchEPh+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN17DallasTemperature11alarmSearchEPh+0x3a>
  3a:	f4 01       	movw	r30, r8
  3c:	85 81       	ldd	r24, Z+5	; 0x05
  3e:	96 81       	ldd	r25, Z+6	; 0x06
  40:	6c ee       	ldi	r22, 0xEC	; 236
  42:	40 e0       	ldi	r20, 0x00	; 0
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11alarmSearchEPh>
  48:	00 e0       	ldi	r16, 0x00	; 0
  4a:	10 e0       	ldi	r17, 0x00	; 0
  4c:	ff 24       	eor	r15, r15
  4e:	f3 94       	inc	r15
  50:	ee 24       	eor	r14, r14
  52:	ea 94       	dec	r14
  54:	41 e0       	ldi	r20, 0x01	; 1
  56:	c4 2e       	mov	r12, r20
  58:	d1 2c       	mov	r13, r1
  5a:	f4 01       	movw	r30, r8
  5c:	85 81       	ldd	r24, Z+5	; 0x05
  5e:	96 81       	ldd	r25, Z+6	; 0x06
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11alarmSearchEPh>
  64:	68 2f       	mov	r22, r24
  66:	f4 01       	movw	r30, r8
  68:	85 81       	ldd	r24, Z+5	; 0x05
  6a:	96 81       	ldd	r25, Z+6	; 0x06
  6c:	69 83       	std	Y+1, r22	; 0x01
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11alarmSearchEPh>
  72:	40 2f       	mov	r20, r16
  74:	46 95       	lsr	r20
  76:	46 95       	lsr	r20
  78:	46 95       	lsr	r20
  7a:	98 01       	movw	r18, r16
  7c:	27 70       	andi	r18, 0x07	; 7
  7e:	30 70       	andi	r19, 0x00	; 0
  80:	f6 01       	movw	r30, r12
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN17DallasTemperature11alarmSearchEPh+0x84>
  84:	ee 0f       	add	r30, r30
  86:	ff 1f       	adc	r31, r31
  88:	2a 95       	dec	r18
  8a:	02 f4       	brpl	.+0      	; 0x8c <_ZN17DallasTemperature11alarmSearchEPh+0x8c>
  8c:	9f 01       	movw	r18, r30
  8e:	69 81       	ldd	r22, Y+1	; 0x01
  90:	66 23       	and	r22, r22
  92:	01 f0       	breq	.+0      	; 0x94 <_ZN17DallasTemperature11alarmSearchEPh+0x94>
  94:	88 23       	and	r24, r24
  96:	01 f0       	breq	.+0      	; 0x98 <_ZN17DallasTemperature11alarmSearchEPh+0x98>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN17DallasTemperature11alarmSearchEPh+0x9a>
  9a:	88 23       	and	r24, r24
  9c:	01 f0       	breq	.+0      	; 0x9e <_ZN17DallasTemperature11alarmSearchEPh+0x9e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN17DallasTemperature11alarmSearchEPh+0xa0>
  a0:	f4 01       	movw	r30, r8
  a2:	87 85       	ldd	r24, Z+15	; 0x0f
  a4:	99 27       	eor	r25, r25
  a6:	87 fd       	sbrc	r24, 7
  a8:	90 95       	com	r25
  aa:	08 17       	cp	r16, r24
  ac:	19 07       	cpc	r17, r25
  ae:	01 f4       	brne	.+0      	; 0xb0 <_ZN17DallasTemperature11alarmSearchEPh+0xb0>
  b0:	e7 86       	std	Z+15, r14	; 0x0f
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN17DallasTemperature11alarmSearchEPh+0xb4>
  b4:	f4 01       	movw	r30, r8
  b6:	08 17       	cp	r16, r24
  b8:	19 07       	cpc	r17, r25
  ba:	04 f4       	brge	.+0      	; 0xbc <_ZN17DallasTemperature11alarmSearchEPh+0xbc>
  bc:	e4 0f       	add	r30, r20
  be:	f1 1d       	adc	r31, r1
  c0:	87 81       	ldd	r24, Z+7	; 0x07
  c2:	82 23       	and	r24, r18
  c4:	01 f4       	brne	.+0      	; 0xc6 <_ZN17DallasTemperature11alarmSearchEPh+0xc6>
  c6:	e0 2e       	mov	r14, r16
  c8:	00 c0       	rjmp	.+0      	; 0xca <_ZN17DallasTemperature11alarmSearchEPh+0xca>
  ca:	07 87       	std	Z+15, r16	; 0x0f
  cc:	ff 24       	eor	r15, r15
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN17DallasTemperature11alarmSearchEPh+0xd0>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	f4 01       	movw	r30, r8
  d4:	e4 0f       	add	r30, r20
  d6:	f1 1d       	adc	r31, r1
  d8:	87 81       	ldd	r24, Z+7	; 0x07
  da:	82 2b       	or	r24, r18
  dc:	87 83       	std	Z+7, r24	; 0x07
  de:	f4 01       	movw	r30, r8
  e0:	85 81       	ldd	r24, Z+5	; 0x05
  e2:	96 81       	ldd	r25, Z+6	; 0x06
  e4:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature11alarmSearchEPh>
  e8:	0f 5f       	subi	r16, 0xFF	; 255
  ea:	1f 4f       	sbci	r17, 0xFF	; 255
  ec:	00 34       	cpi	r16, 0x40	; 64
  ee:	11 05       	cpc	r17, r1
  f0:	01 f0       	breq	.+0      	; 0xf2 <_ZN17DallasTemperature11alarmSearchEPh+0xf2>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN17DallasTemperature11alarmSearchEPh+0xf4>
  f4:	ff 20       	and	r15, r15
  f6:	01 f0       	breq	.+0      	; 0xf8 <_ZN17DallasTemperature11alarmSearchEPh+0xf8>
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	f4 01       	movw	r30, r8
  fc:	80 8b       	std	Z+16, r24	; 0x10
  fe:	d5 01       	movw	r26, r10
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	f4 01       	movw	r30, r8
 106:	e8 0f       	add	r30, r24
 108:	f9 1f       	adc	r31, r25
 10a:	27 81       	ldd	r18, Z+7	; 0x07
 10c:	2d 93       	st	X+, r18
 10e:	01 96       	adiw	r24, 0x01	; 1
 110:	88 30       	cpi	r24, 0x08	; 8
 112:	91 05       	cpc	r25, r1
 114:	01 f4       	brne	.+0      	; 0x116 <_ZN17DallasTemperature11alarmSearchEPh+0x116>
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN17DallasTemperature11alarmSearchEPh+0x11a>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0f 90       	pop	r0
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	8f 90       	pop	r8
 136:	08 95       	ret
 138:	f4 01       	movw	r30, r8
 13a:	e4 0f       	add	r30, r20
 13c:	f1 1d       	adc	r31, r1
 13e:	20 95       	com	r18
 140:	87 81       	ldd	r24, Z+7	; 0x07
 142:	28 23       	and	r18, r24
 144:	27 83       	std	Z+7, r18	; 0x07
 146:	00 c0       	rjmp	.+0      	; 0x148 <__SREG__+0x109>

Disassembly of section .text._ZN17DallasTemperature8hasAlarmEPh:

00000000 <_ZN17DallasTemperature8hasAlarmEPh>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
}
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	7b 01       	movw	r14, r22
  20:	ae 01       	movw	r20, r28
  22:	4f 5f       	subi	r20, 0xFF	; 255
  24:	5f 4f       	sbci	r21, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8hasAlarmEPh>
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN17DallasTemperature8hasAlarmEPh+0x2e>
  2e:	c8 01       	movw	r24, r16
  30:	b7 01       	movw	r22, r14
  32:	ae 01       	movw	r20, r28
  34:	4f 5f       	subi	r20, 0xFF	; 255
  36:	5f 4f       	sbci	r21, 0xFF	; 255
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8hasAlarmEPh>
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8hasAlarmEPh>
  40:	8c 81       	ldd	r24, Y+4	; 0x04
  42:	86 17       	cp	r24, r22
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN17DallasTemperature8hasAlarmEPh+0x46>
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	9b 81       	ldd	r25, Y+3	; 0x03
  4a:	69 17       	cp	r22, r25
  4c:	04 f4       	brge	.+0      	; 0x4e <_ZN17DallasTemperature8hasAlarmEPh+0x4e>
  4e:	80 e0       	ldi	r24, 0x00	; 0
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN17DallasTemperature8hasAlarmEPh+0x52>
  52:	81 e0       	ldi	r24, 0x01	; 1
  54:	29 96       	adiw	r28, 0x09	; 9
  56:	0f b6       	in	r0, 0x3f	; 63
  58:	f8 94       	cli
  5a:	de bf       	out	0x3e, r29	; 62
  5c:	0f be       	out	0x3f, r0	; 63
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	1f 91       	pop	r17
  66:	0f 91       	pop	r16
  68:	ff 90       	pop	r15
  6a:	ef 90       	pop	r14
  6c:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature8hasAlarmEv:

00000000 <_ZN17DallasTemperature8hasAlarmEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	28 97       	sbiw	r28, 0x08	; 8
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
}
  18:	8c 01       	movw	r16, r24
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8hasAlarmEv>
  1e:	c8 01       	movw	r24, r16
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature8hasAlarmEv>
  2a:	28 96       	adiw	r28, 0x08	; 8
  2c:	0f b6       	in	r0, 0x3f	; 63
  2e:	f8 94       	cli
  30:	de bf       	out	0x3e, r29	; 62
  32:	0f be       	out	0x3f, r0	; 63
  34:	cd bf       	out	0x3d, r28	; 61
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature13processAlarmsEv:

00000000 <_ZN17DallasTemperature13processAlarmsEv>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	28 97       	sbiw	r28, 0x08	; 8
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
}
  18:	8c 01       	movw	r16, r24
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13processAlarmsEv>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN17DallasTemperature13processAlarmsEv+0x20>
  20:	c8 01       	movw	r24, r16
  22:	be 01       	movw	r22, r28
  24:	6f 5f       	subi	r22, 0xFF	; 255
  26:	7f 4f       	sbci	r23, 0xFF	; 255
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13processAlarmsEv>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN17DallasTemperature13processAlarmsEv+0x30>
  30:	d8 01       	movw	r26, r16
  32:	51 96       	adiw	r26, 0x11	; 17
  34:	ed 91       	ld	r30, X+
  36:	fc 91       	ld	r31, X
  38:	52 97       	sbiw	r26, 0x12	; 18
  3a:	ce 01       	movw	r24, r28
  3c:	01 96       	adiw	r24, 0x01	; 1
  3e:	09 95       	icall
  40:	c8 01       	movw	r24, r16
  42:	be 01       	movw	r22, r28
  44:	6f 5f       	subi	r22, 0xFF	; 255
  46:	7f 4f       	sbci	r23, 0xFF	; 255
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature13processAlarmsEv>
  4c:	88 23       	and	r24, r24
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN17DallasTemperature13processAlarmsEv+0x50>
  50:	28 96       	adiw	r28, 0x08	; 8
  52:	0f b6       	in	r0, 0x3f	; 63
  54:	f8 94       	cli
  56:	de bf       	out	0x3e, r29	; 62
  58:	0f be       	out	0x3f, r0	; 63
  5a:	cd bf       	out	0x3d, r28	; 61
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature15setAlarmHandlerEPFvPhE:

00000000 <_ZN17DallasTemperature15setAlarmHandlerEPFvPhE>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	fc 01       	movw	r30, r24
   2:	72 8b       	std	Z+18, r23	; 0x12
   4:	61 8b       	std	Z+17, r22	; 0x11
   6:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature12toFahrenheitEf:

00000000 <_ZN17DallasTemperature12toFahrenheitEf>:
   0:	26 e6       	ldi	r18, 0x66	; 102
   2:	36 e6       	ldi	r19, 0x66	; 102
   4:	46 ee       	ldi	r20, 0xE6	; 230
   6:	5f e3       	ldi	r21, 0x3F	; 63
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature12toFahrenheitEf>
   c:	20 e0       	ldi	r18, 0x00	; 0
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	40 e0       	ldi	r20, 0x00	; 0
  12:	52 e4       	ldi	r21, 0x42	; 66
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature12toFahrenheitEf>
}
  18:	46 2f       	mov	r20, r22
  1a:	57 2f       	mov	r21, r23
  1c:	68 2f       	mov	r22, r24
  1e:	79 2f       	mov	r23, r25
  20:	cb 01       	movw	r24, r22
  22:	ba 01       	movw	r22, r20
  24:	08 95       	ret

Disassembly of section .text._ZN17DallasTemperature9toCelsiusEf:

00000000 <_ZN17DallasTemperature9toCelsiusEf>:
}

// Convert float fahrenheit to celsius
float DallasTemperature::toCelsius(float fahrenheit)
{
  return (fahrenheit - 32) / 1.8;
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	40 e0       	ldi	r20, 0x00	; 0
   6:	52 e4       	ldi	r21, 0x42	; 66
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature9toCelsiusEf>
   c:	26 e6       	ldi	r18, 0x66	; 102
   e:	36 e6       	ldi	r19, 0x66	; 102
  10:	46 ee       	ldi	r20, 0xE6	; 230
  12:	5f e3       	ldi	r21, 0x3F	; 63
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN17DallasTemperature9toCelsiusEf>
}
  18:	46 2f       	mov	r20, r22
  1a:	57 2f       	mov	r21, r23
  1c:	68 2f       	mov	r22, r24
  1e:	79 2f       	mov	r23, r25
  20:	cb 01       	movw	r24, r22
  22:	ba 01       	movw	r22, r20
  24:	08 95       	ret

File.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000015cc  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00006e01  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN4File5writeEh 0000002c  00000000  00000000  00008401  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN4File5flushEv 00000010  00000000  00000000  0000842d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN4File5writeEPKhj 00000038  00000000  00000000  0000843d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6SdFile4readEv 00000030  00000000  00000000  00008475  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN4File4readEv 00000016  00000000  00000000  000084a5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN4File4peekEv 0000004c  00000000  00000000  000084bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN4FileC2E6SdFilePKc 0000008a  00000000  00000000  00008507  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN4FileC2Ev 00000026  00000000  00000000  00008591  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN4FileD2Ev 0000000c  00000000  00000000  000085b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN4File4nameEv 00000004  00000000  00000000  000085c3  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text._ZN4File11isDirectoryEv 0000001e  00000000  00000000  000085c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN4File4readEPvj 00000016  00000000  00000000  000085e5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN4File4seekEm 00000014  00000000  00000000  000085fb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN4File8positionEv 0000002e  00000000  00000000  0000860f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN4File4sizeEv 0000002e  00000000  00000000  0000863d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN4File9availableEv 00000066  00000000  00000000  0000866b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN4File5closeEv 00000024  00000000  00000000  000086d1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN4FilecvbEv 0000001e  00000000  00000000  000086f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .rodata._ZTV4File 00000010  00000000  00000000  00008713  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 24 .rodata._ZTV6Stream 00000010  00000000  00000000  00008723  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN4File5writeEh:

00000000 <_ZN4File5writeEh>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	69 83       	std	Y+1, r22	; 0x01
   c:	dc 01       	movw	r26, r24
    return  _file->isOpen();
   e:	ed 91       	ld	r30, X+
  10:	fc 91       	ld	r31, X
  12:	02 80       	ldd	r0, Z+2	; 0x02
  14:	f3 81       	ldd	r31, Z+3	; 0x03
  16:	e0 2d       	mov	r30, r0
  18:	be 01       	movw	r22, r28
  return false;
  1a:	6f 5f       	subi	r22, 0xFF	; 255
}
  1c:	7f 4f       	sbci	r23, 0xFF	; 255
  1e:	41 e0       	ldi	r20, 0x01	; 1
  20:	50 e0       	ldi	r21, 0x00	; 0
  22:	09 95       	icall
  24:	0f 90       	pop	r0
  26:	df 91       	pop	r29
  28:	cf 91       	pop	r28
  2a:	08 95       	ret

Disassembly of section .text._ZN4File5flushEv:

00000000 <_ZN4File5flushEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	fc 01       	movw	r30, r24
   2:	81 8d       	ldd	r24, Z+25	; 0x19
   4:	92 8d       	ldd	r25, Z+26	; 0x1a
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZN4File5flushEv+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN4File5flushEv>
    return  _file->isOpen();
   e:	08 95       	ret

Disassembly of section .text._ZN4File5writeEPKhj:

00000000 <_ZN4File5writeEPKhj>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	89 8d       	ldd	r24, Y+25	; 0x19
   8:	9a 8d       	ldd	r25, Y+26	; 0x1a
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN4File5writeEPKhj+0xe>
    return  _file->isOpen();
   e:	fc 01       	movw	r30, r24
  10:	13 82       	std	Z+3, r1	; 0x03
  12:	12 82       	std	Z+2, r1	; 0x02
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN4File5writeEPKhj>
  18:	e9 8d       	ldd	r30, Y+25	; 0x19
  return false;
  1a:	fa 8d       	ldd	r31, Y+26	; 0x1a
}
  1c:	22 81       	ldd	r18, Z+2	; 0x02
  1e:	33 81       	ldd	r19, Z+3	; 0x03
  20:	21 15       	cp	r18, r1
  22:	31 05       	cpc	r19, r1
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN4File5writeEPKhj+0x26>
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	9b 83       	std	Y+3, r25	; 0x03
  2c:	8a 83       	std	Y+2, r24	; 0x02
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6SdFile4readEv:

00000000 <_ZN6SdFile4readEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	be 01       	movw	r22, r28
   c:	6f 5f       	subi	r22, 0xFF	; 255
    return  _file->isOpen();
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	41 e0       	ldi	r20, 0x01	; 1
  12:	50 e0       	ldi	r21, 0x00	; 0
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4readEv>
  18:	81 30       	cpi	r24, 0x01	; 1
  return false;
  1a:	91 05       	cpc	r25, r1
}
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN6SdFile4readEv+0x1e>
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6SdFile4readEv+0x24>
  24:	8f ef       	ldi	r24, 0xFF	; 255
  26:	9f ef       	ldi	r25, 0xFF	; 255
  28:	0f 90       	pop	r0
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	08 95       	ret

Disassembly of section .text._ZN4File4readEv:

00000000 <_ZN4File4readEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	fc 01       	movw	r30, r24
   2:	81 8d       	ldd	r24, Z+25	; 0x19
   4:	92 8d       	ldd	r25, Z+26	; 0x1a
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZN4File4readEv+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN4File4readEv>
    return  _file->isOpen();
   e:	08 95       	ret
  10:	8f ef       	ldi	r24, 0xFF	; 255
  12:	9f ef       	ldi	r25, 0xFF	; 255
  14:	08 95       	ret

Disassembly of section .text._ZN4File4peekEv:

00000000 <_ZN4File4peekEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	89 8d       	ldd	r24, Y+25	; 0x19
   c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    return  _file->isOpen();
   e:	00 97       	sbiw	r24, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN4File4peekEv+0x12>
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN4File4peekEv>
  16:	8c 01       	movw	r16, r24
  18:	8f ef       	ldi	r24, 0xFF	; 255
  return false;
  1a:	0f 3f       	cpi	r16, 0xFF	; 255
}
  1c:	18 07       	cpc	r17, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN4File4peekEv+0x20>
  20:	89 8d       	ldd	r24, Y+25	; 0x19
  22:	9a 8d       	ldd	r25, Y+26	; 0x1a
  24:	fc 01       	movw	r30, r24
  26:	42 85       	ldd	r20, Z+10	; 0x0a
  28:	53 85       	ldd	r21, Z+11	; 0x0b
  2a:	64 85       	ldd	r22, Z+12	; 0x0c
  2c:	75 85       	ldd	r23, Z+13	; 0x0d
  2e:	41 50       	subi	r20, 0x01	; 1
  30:	50 40       	sbci	r21, 0x00	; 0
  32:	60 40       	sbci	r22, 0x00	; 0
  34:	70 40       	sbci	r23, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN4File4peekEv>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN4File4peekEv+0x3c>
  3c:	00 e0       	ldi	r16, 0x00	; 0
  3e:	10 e0       	ldi	r17, 0x00	; 0
  40:	c8 01       	movw	r24, r16
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	08 95       	ret

Disassembly of section .text._ZN4FileC2E6SdFilePKc:

00000000 <_ZN4FileC1E6SdFilePKc>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN4FileC1E6SdFilePKc+0xe>
    return  _file->isOpen();
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	7c 01       	movw	r14, r24
  14:	8a 01       	movw	r16, r20
  16:	dc 01       	movw	r26, r24
  18:	13 96       	adiw	r26, 0x03	; 3
  return false;
  1a:	1c 92       	st	X, r1
}
  1c:	1e 92       	st	-X, r1
  1e:	12 97       	sbiw	r26, 0x02	; 2
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	f7 01       	movw	r30, r14
  2a:	84 83       	std	Z+4, r24	; 0x04
  2c:	95 83       	std	Z+5, r25	; 0x05
  2e:	a6 83       	std	Z+6, r26	; 0x06
  30:	b7 83       	std	Z+7, r27	; 0x07
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	91 83       	std	Z+1, r25	; 0x01
  38:	80 83       	st	Z, r24
  3a:	8d e1       	ldi	r24, 0x1D	; 29
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	69 83       	std	Y+1, r22	; 0x01
  40:	7a 83       	std	Y+2, r23	; 0x02
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN4FileC1E6SdFilePKc>
  46:	fc 01       	movw	r30, r24
  48:	d7 01       	movw	r26, r14
  4a:	5a 96       	adiw	r26, 0x1a	; 26
  4c:	9c 93       	st	X, r25
  4e:	8e 93       	st	-X, r24
  50:	59 97       	sbiw	r26, 0x19	; 25
  52:	69 81       	ldd	r22, Y+1	; 0x01
  54:	7a 81       	ldd	r23, Y+2	; 0x02
  56:	00 97       	sbiw	r24, 0x00	; 0
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN4FileC1E6SdFilePKc+0x5a>
  5a:	db 01       	movw	r26, r22
  5c:	8d e1       	ldi	r24, 0x1D	; 29
  5e:	0d 90       	ld	r0, X+
  60:	01 92       	st	Z+, r0
  62:	81 50       	subi	r24, 0x01	; 1
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN4FileC1E6SdFilePKc+0x66>
  66:	c7 01       	movw	r24, r14
  68:	0c 96       	adiw	r24, 0x0c	; 12
  6a:	b8 01       	movw	r22, r16
  6c:	4c e0       	ldi	r20, 0x0C	; 12
  6e:	50 e0       	ldi	r21, 0x00	; 0
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN4FileC1E6SdFilePKc>
  74:	f7 01       	movw	r30, r14
  76:	10 8e       	std	Z+24, r1	; 0x18
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	df 91       	pop	r29
  7e:	cf 91       	pop	r28
  80:	1f 91       	pop	r17
  82:	0f 91       	pop	r16
  84:	ff 90       	pop	r15
  86:	ef 90       	pop	r14
  88:	08 95       	ret

Disassembly of section .text._ZN4FileC2Ev:

00000000 <_ZN4FileC1Ev>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	fc 01       	movw	r30, r24
   2:	13 82       	std	Z+3, r1	; 0x03
   4:	12 82       	std	Z+2, r1	; 0x02
   6:	48 ee       	ldi	r20, 0xE8	; 232
   8:	53 e0       	ldi	r21, 0x03	; 3
   a:	60 e0       	ldi	r22, 0x00	; 0
   c:	70 e0       	ldi	r23, 0x00	; 0
    return  _file->isOpen();
   e:	44 83       	std	Z+4, r20	; 0x04
  10:	55 83       	std	Z+5, r21	; 0x05
  12:	66 83       	std	Z+6, r22	; 0x06
  14:	77 83       	std	Z+7, r23	; 0x07
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	90 e0       	ldi	r25, 0x00	; 0
  return false;
  1a:	91 83       	std	Z+1, r25	; 0x01
}
  1c:	80 83       	st	Z, r24
  1e:	12 8e       	std	Z+26, r1	; 0x1a
  20:	11 8e       	std	Z+25, r1	; 0x19
  22:	14 86       	std	Z+12, r1	; 0x0c
  24:	08 95       	ret

Disassembly of section .text._ZN4FileD2Ev:

00000000 <_ZN4FileD1Ev>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	08 95       	ret

Disassembly of section .text._ZN4File4nameEv:

00000000 <_ZN4File4nameEv>:
   0:	0c 96       	adiw	r24, 0x0c	; 12
   2:	08 95       	ret

Disassembly of section .text._ZN4File11isDirectoryEv:

00000000 <_ZN4File11isDirectoryEv>:
   0:	dc 01       	movw	r26, r24
   2:	59 96       	adiw	r26, 0x19	; 25
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	5a 97       	sbiw	r26, 0x1a	; 26
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN4File11isDirectoryEv+0xe>
    return  _file->isOpen();
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	95 81       	ldd	r25, Z+5	; 0x05
  12:	92 30       	cpi	r25, 0x02	; 2
  14:	00 f4       	brcc	.+0      	; 0x16 <_ZN4File11isDirectoryEv+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	08 95       	ret
  return false;
  1a:	80 e0       	ldi	r24, 0x00	; 0
}
  1c:	08 95       	ret

Disassembly of section .text._ZN4File4readEPvj:

00000000 <_ZN4File4readEPvj>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	fc 01       	movw	r30, r24
   2:	81 8d       	ldd	r24, Z+25	; 0x19
   4:	92 8d       	ldd	r25, Z+26	; 0x1a
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZN4File4readEPvj+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN4File4readEPvj>
    return  _file->isOpen();
   e:	08 95       	ret
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	08 95       	ret

Disassembly of section .text._ZN4File4seekEm:

00000000 <_ZN4File4seekEm>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	fc 01       	movw	r30, r24
   2:	81 8d       	ldd	r24, Z+25	; 0x19
   4:	92 8d       	ldd	r25, Z+26	; 0x1a
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f0       	breq	.+0      	; 0xa <_ZN4File4seekEm+0xa>
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN4File4seekEm>
    return  _file->isOpen();
   e:	08 95       	ret
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	08 95       	ret

Disassembly of section .text._ZN4File8positionEv:

00000000 <_ZN4File8positionEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	dc 01       	movw	r26, r24
   6:	59 96       	adiw	r26, 0x19	; 25
   8:	ed 91       	ld	r30, X+
   a:	fc 91       	ld	r31, X
   c:	5a 97       	sbiw	r26, 0x1a	; 26
    return  _file->isOpen();
   e:	30 97       	sbiw	r30, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN4File8positionEv+0x12>
  12:	02 85       	ldd	r16, Z+10	; 0x0a
  14:	13 85       	ldd	r17, Z+11	; 0x0b
  16:	24 85       	ldd	r18, Z+12	; 0x0c
  18:	35 85       	ldd	r19, Z+13	; 0x0d
  return false;
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN4File8positionEv+0x1c>
}
  1c:	0f ef       	ldi	r16, 0xFF	; 255
  1e:	1f ef       	ldi	r17, 0xFF	; 255
  20:	2f ef       	ldi	r18, 0xFF	; 255
  22:	3f ef       	ldi	r19, 0xFF	; 255
  24:	b8 01       	movw	r22, r16
  26:	c9 01       	movw	r24, r18
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN4File4sizeEv:

00000000 <_ZN4File4sizeEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	dc 01       	movw	r26, r24
   6:	59 96       	adiw	r26, 0x19	; 25
   8:	ed 91       	ld	r30, X+
   a:	fc 91       	ld	r31, X
   c:	5a 97       	sbiw	r26, 0x1a	; 26
    return  _file->isOpen();
   e:	30 97       	sbiw	r30, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN4File4sizeEv+0x12>
  12:	03 89       	ldd	r16, Z+19	; 0x13
  14:	14 89       	ldd	r17, Z+20	; 0x14
  16:	25 89       	ldd	r18, Z+21	; 0x15
  18:	36 89       	ldd	r19, Z+22	; 0x16
  return false;
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN4File4sizeEv+0x1c>
}
  1c:	00 e0       	ldi	r16, 0x00	; 0
  1e:	10 e0       	ldi	r17, 0x00	; 0
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	b8 01       	movw	r22, r16
  26:	c9 01       	movw	r24, r18
  28:	1f 91       	pop	r17
  2a:	0f 91       	pop	r16
  2c:	08 95       	ret

Disassembly of section .text._ZN4File9availableEv:

00000000 <_ZN4File9availableEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
    return  _file->isOpen();
   e:	89 8d       	ldd	r24, Y+25	; 0x19
  10:	9a 8d       	ldd	r25, Y+26	; 0x1a
  12:	00 97       	sbiw	r24, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN4File9availableEv+0x16>
  16:	ce 01       	movw	r24, r28
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN4File9availableEv>
  return false;
}
  1c:	6b 01       	movw	r12, r22
  1e:	7c 01       	movw	r14, r24
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN4File9availableEv>
  26:	dc 01       	movw	r26, r24
  28:	cb 01       	movw	r24, r22
  2a:	c8 1a       	sub	r12, r24
  2c:	d9 0a       	sbc	r13, r25
  2e:	ea 0a       	sbc	r14, r26
  30:	fb 0a       	sbc	r15, r27
  32:	80 e0       	ldi	r24, 0x00	; 0
  34:	c8 16       	cp	r12, r24
  36:	80 e8       	ldi	r24, 0x80	; 128
  38:	d8 06       	cpc	r13, r24
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	e8 06       	cpc	r14, r24
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	f8 06       	cpc	r15, r24
  42:	00 f0       	brcs	.+0      	; 0x44 <_ZN4File9availableEv+0x44>
  44:	8f ef       	ldi	r24, 0xFF	; 255
  46:	c8 2e       	mov	r12, r24
  48:	8f e7       	ldi	r24, 0x7F	; 127
  4a:	d8 2e       	mov	r13, r24
  4c:	e1 2c       	mov	r14, r1
  4e:	f1 2c       	mov	r15, r1
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN4File9availableEv+0x52>
  52:	cc 24       	eor	r12, r12
  54:	dd 24       	eor	r13, r13
  56:	c6 01       	movw	r24, r12
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	08 95       	ret

Disassembly of section .text._ZN4File5closeEv:

00000000 <_ZN4File5closeEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	89 8d       	ldd	r24, Y+25	; 0x19
   8:	9a 8d       	ldd	r25, Y+26	; 0x1a
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN4File5closeEv+0xe>
    return  _file->isOpen();
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN4File5closeEv>
  12:	89 8d       	ldd	r24, Y+25	; 0x19
  14:	9a 8d       	ldd	r25, Y+26	; 0x1a
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN4File5closeEv>
  return false;
  1a:	1a 8e       	std	Y+26, r1	; 0x1a
}
  1c:	19 8e       	std	Y+25, r1	; 0x19
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZN4FilecvbEv:

00000000 <_ZN4FilecvbEv>:
    */
  }
}

File::operator bool() {
  if (_file) 
   0:	dc 01       	movw	r26, r24
   2:	59 96       	adiw	r26, 0x19	; 25
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	5a 97       	sbiw	r26, 0x1a	; 26
   a:	30 97       	sbiw	r30, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN4FilecvbEv+0xe>
    return  _file->isOpen();
   e:	81 e0       	ldi	r24, 0x01	; 1
  10:	95 81       	ldd	r25, Z+5	; 0x05
  12:	99 23       	and	r25, r25
  14:	01 f4       	brne	.+0      	; 0x16 <_ZN4FilecvbEv+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	08 95       	ret
  return false;
  1a:	80 e0       	ldi	r24, 0x00	; 0
}
  1c:	08 95       	ret

MemoryFree.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000021c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000004a8  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text.freeRamMemory 00000038  00000000  00000000  000006f8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text.freeRamMemory:

00000000 <freeRamMemory>:
extern void *__brkval;

#include "MemoryFree.h"

int freeRamMemory()
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <freeRamMemory+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
  int free_memory;

  if((int)__brkval == 0)
   a:	80 91 00 00 	lds	r24, 0x0000
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	9e 01       	movw	r18, r28
  14:	2f 5f       	subi	r18, 0xFF	; 255
  16:	3f 4f       	sbci	r19, 0xFF	; 255
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <freeRamMemory+0x1c>
     free_memory = ((int)&free_memory) - ((int)&__bss_end);
  1c:	20 50       	subi	r18, 0x00	; 0
  1e:	30 40       	sbci	r19, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <freeRamMemory+0x22>
  else
    free_memory = ((int)&free_memory) - ((int)__brkval);
  22:	28 1b       	sub	r18, r24
  24:	39 0b       	sbc	r19, r25
  26:	3a 83       	std	Y+2, r19	; 0x02
  28:	29 83       	std	Y+1, r18	; 0x01

  return free_memory;
}
  2a:	89 81       	ldd	r24, Y+1	; 0x01
  2c:	9a 81       	ldd	r25, Y+2	; 0x02
  2e:	0f 90       	pop	r0
  30:	0f 90       	pop	r0
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

OneWire.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000036f9  00000000  00000000  000015dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN7OneWire5resetEv 00000084  00000000  00000000  00004cd5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN7OneWire9write_bitEh 0000005a  00000000  00000000  00004d59  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN7OneWire8read_bitEv 00000056  00000000  00000000  00004db3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN7OneWire5writeEhh 00000088  00000000  00000000  00004e09  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN7OneWire11write_bytesEPKhjb 00000088  00000000  00000000  00004e91  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN7OneWire4readEv 00000038  00000000  00000000  00004f19  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7OneWire10read_bytesEPhj 00000042  00000000  00000000  00004f51  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7OneWire6selectEPh 0000005e  00000000  00000000  00004f93  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7OneWire4skipEv 0000000a  00000000  00000000  00004ff1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7OneWire7depowerEv 0000001a  00000000  00000000  00004ffb  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text._ZN7OneWire12reset_searchEv 0000001a  00000000  00000000  00005015  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text._ZN7OneWireC2Eh 00000048  00000000  00000000  0000502f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7OneWire6searchEPh 00000110  00000000  00000000  00005077  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7OneWire4crc8EPhh 0000001a  00000000  00000000  00005187  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN7OneWire5crc16EPhj 0000008e  00000000  00000000  000051a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN7OneWire11check_crc16EPhjS0_ 00000034  00000000  00000000  0000522f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .progmem.data 00000100  00000000  00000000  00005263  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 22 .rodata._ZZN7OneWire5crc16EPhjE9oddparity 00000010  00000000  00000000  00005363  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN7OneWire5resetEv:

00000000 <_ZN7OneWire5resetEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
    uint16_t crc = ~crc16(input, len);
   6:	cf 93       	push	r28
   8:	df 93       	push	r29
   a:	fc 01       	movw	r30, r24
   c:	10 81       	ld	r17, Z
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	c1 81       	ldd	r28, Z+1	; 0x01
  10:	d2 81       	ldd	r29, Z+2	; 0x02
  12:	f8 94       	cli
  14:	89 81       	ldd	r24, Y+1	; 0x01
  16:	01 2f       	mov	r16, r17
  18:	00 95       	com	r16
  1a:	80 23       	and	r24, r16
  1c:	89 83       	std	Y+1, r24	; 0x01
  1e:	78 94       	sei
  20:	8d e7       	ldi	r24, 0x7D	; 125
  22:	f8 2e       	mov	r15, r24
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	fa 94       	dec	r15
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN7OneWire5resetEv+0x28>
  28:	82 e0       	ldi	r24, 0x02	; 2
  2a:	90 e0       	ldi	r25, 0x00	; 0
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire5resetEv>
}
  30:	88 81       	ld	r24, Y
  32:	81 23       	and	r24, r17
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN7OneWire5resetEv+0x36>
  36:	f8 94       	cli
  38:	8a 81       	ldd	r24, Y+2	; 0x02
  3a:	80 23       	and	r24, r16
  3c:	8a 83       	std	Y+2, r24	; 0x02
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	81 2b       	or	r24, r17
  42:	89 83       	std	Y+1, r24	; 0x01
  44:	78 94       	sei
  46:	84 ef       	ldi	r24, 0xF4	; 244
  48:	91 e0       	ldi	r25, 0x01	; 1
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire5resetEv>
  4e:	f8 94       	cli
  50:	89 81       	ldd	r24, Y+1	; 0x01
  52:	80 23       	and	r24, r16
  54:	89 83       	std	Y+1, r24	; 0x01
  56:	80 e5       	ldi	r24, 0x50	; 80
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire5resetEv>
  5e:	88 81       	ld	r24, Y
  60:	81 23       	and	r24, r17
  62:	c1 e0       	ldi	r28, 0x01	; 1
  64:	01 f0       	breq	.+0      	; 0x66 <_ZN7OneWire5resetEv+0x66>
  66:	c0 e0       	ldi	r28, 0x00	; 0
  68:	78 94       	sei
  6a:	84 ea       	ldi	r24, 0xA4	; 164
  6c:	91 e0       	ldi	r25, 0x01	; 1
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire5resetEv>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN7OneWire5resetEv+0x74>
  74:	c0 e0       	ldi	r28, 0x00	; 0
  76:	8c 2f       	mov	r24, r28
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	1f 91       	pop	r17
  7e:	0f 91       	pop	r16
  80:	ff 90       	pop	r15
  82:	08 95       	ret

Disassembly of section .text._ZN7OneWire9write_bitEh:

00000000 <_ZN7OneWire9write_bitEh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
    uint16_t crc = ~crc16(input, len);
   6:	fc 01       	movw	r30, r24
   8:	10 81       	ld	r17, Z
   a:	c1 81       	ldd	r28, Z+1	; 0x01
   c:	d2 81       	ldd	r29, Z+2	; 0x02
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	91 2f       	mov	r25, r17
  10:	90 95       	com	r25
  12:	f8 94       	cli
  14:	8a 81       	ldd	r24, Y+2	; 0x02
  16:	89 23       	and	r24, r25
  18:	8a 83       	std	Y+2, r24	; 0x02
  1a:	89 81       	ldd	r24, Y+1	; 0x01
  1c:	81 2b       	or	r24, r17
  1e:	89 83       	std	Y+1, r24	; 0x01
  20:	60 ff       	sbrs	r22, 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN7OneWire9write_bitEh+0x24>
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	8a e0       	ldi	r24, 0x0A	; 10
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire9write_bitEh>
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	8a 81       	ldd	r24, Y+2	; 0x02
}
  2e:	81 2b       	or	r24, r17
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	78 94       	sei
  34:	87 e3       	ldi	r24, 0x37	; 55
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN7OneWire9write_bitEh+0x3a>
  3a:	81 e4       	ldi	r24, 0x41	; 65
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire9write_bitEh>
  42:	8a 81       	ldd	r24, Y+2	; 0x02
  44:	81 2b       	or	r24, r17
  46:	8a 83       	std	Y+2, r24	; 0x02
  48:	78 94       	sei
  4a:	85 e0       	ldi	r24, 0x05	; 5
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire9write_bitEh>
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	1f 91       	pop	r17
  58:	08 95       	ret

Disassembly of section .text._ZN7OneWire8read_bitEv:

00000000 <_ZN7OneWire8read_bitEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
    uint16_t crc = ~crc16(input, len);
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	10 81       	ld	r17, Z
   c:	c1 81       	ldd	r28, Z+1	; 0x01
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	d2 81       	ldd	r29, Z+2	; 0x02
  10:	f8 94       	cli
  12:	89 81       	ldd	r24, Y+1	; 0x01
  14:	81 2b       	or	r24, r17
  16:	89 83       	std	Y+1, r24	; 0x01
  18:	8a 81       	ldd	r24, Y+2	; 0x02
  1a:	01 2f       	mov	r16, r17
  1c:	00 95       	com	r16
  1e:	80 23       	and	r24, r16
  20:	8a 83       	std	Y+2, r24	; 0x02
  22:	83 e0       	ldi	r24, 0x03	; 3
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire8read_bitEv>
  2a:	89 81       	ldd	r24, Y+1	; 0x01
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	80 23       	and	r24, r16
}
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	8a e0       	ldi	r24, 0x0A	; 10
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire8read_bitEv>
  38:	c8 81       	ld	r28, Y
  3a:	78 94       	sei
  3c:	85 e3       	ldi	r24, 0x35	; 53
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire8read_bitEv>
  44:	1c 23       	and	r17, r28
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN7OneWire8read_bitEv+0x4a>
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	08 95       	ret

Disassembly of section .text._ZN7OneWire5writeEhh:

00000000 <_ZN7OneWire5writeEhh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
    uint16_t crc = ~crc16(input, len);
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	df 93       	push	r29
  10:	0f 92       	push	r0
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	8c 01       	movw	r16, r24
  18:	f6 2e       	mov	r15, r22
  1a:	28 e0       	ldi	r18, 0x08	; 8
  1c:	c2 2e       	mov	r12, r18
  1e:	d1 2c       	mov	r13, r1
  20:	ee 24       	eor	r14, r14
  22:	e3 94       	inc	r14
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	8e 2d       	mov	r24, r14
  26:	8f 21       	and	r24, r15
  28:	61 e0       	ldi	r22, 0x01	; 1
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN7OneWire5writeEhh+0x2c>
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	60 e0       	ldi	r22, 0x00	; 0
}
  2e:	c8 01       	movw	r24, r16
  30:	49 83       	std	Y+1, r20	; 0x01
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire5writeEhh>
  36:	ee 0c       	add	r14, r14
  38:	08 94       	sec
  3a:	c1 08       	sbc	r12, r1
  3c:	d1 08       	sbc	r13, r1
  3e:	49 81       	ldd	r20, Y+1	; 0x01
  40:	c1 14       	cp	r12, r1
  42:	d1 04       	cpc	r13, r1
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN7OneWire5writeEhh+0x46>
  46:	44 23       	and	r20, r20
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN7OneWire5writeEhh+0x4a>
  4a:	f8 94       	cli
  4c:	d8 01       	movw	r26, r16
  4e:	11 96       	adiw	r26, 0x01	; 1
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	12 97       	sbiw	r26, 0x02	; 2
  56:	91 81       	ldd	r25, Z+1	; 0x01
  58:	8c 91       	ld	r24, X
  5a:	80 95       	com	r24
  5c:	89 23       	and	r24, r25
  5e:	81 83       	std	Z+1, r24	; 0x01
  60:	11 96       	adiw	r26, 0x01	; 1
  62:	ed 91       	ld	r30, X+
  64:	fc 91       	ld	r31, X
  66:	12 97       	sbiw	r26, 0x02	; 2
  68:	92 81       	ldd	r25, Z+2	; 0x02
  6a:	8c 91       	ld	r24, X
  6c:	80 95       	com	r24
  6e:	89 23       	and	r24, r25
  70:	82 83       	std	Z+2, r24	; 0x02
  72:	78 94       	sei
  74:	0f 90       	pop	r0
  76:	df 91       	pop	r29
  78:	cf 91       	pop	r28
  7a:	1f 91       	pop	r17
  7c:	0f 91       	pop	r16
  7e:	ff 90       	pop	r15
  80:	ef 90       	pop	r14
  82:	df 90       	pop	r13
  84:	cf 90       	pop	r12
  86:	08 95       	ret

Disassembly of section .text._ZN7OneWire11write_bytesEPKhjb:

00000000 <_ZN7OneWire11write_bytesEPKhjb>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
    uint16_t crc = ~crc16(input, len);
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	0f 92       	push	r0
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	5c 01       	movw	r10, r24
  1c:	6a 01       	movw	r12, r20
  1e:	7b 01       	movw	r14, r22
  20:	00 e0       	ldi	r16, 0x00	; 0
  22:	10 e0       	ldi	r17, 0x00	; 0
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7OneWire11write_bytesEPKhjb+0x26>
  26:	d7 01       	movw	r26, r14
  28:	6d 91       	ld	r22, X+
  2a:	7d 01       	movw	r14, r26
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	c5 01       	movw	r24, r10
}
  2e:	40 e0       	ldi	r20, 0x00	; 0
  30:	29 83       	std	Y+1, r18	; 0x01
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire11write_bytesEPKhjb>
  36:	0f 5f       	subi	r16, 0xFF	; 255
  38:	1f 4f       	sbci	r17, 0xFF	; 255
  3a:	29 81       	ldd	r18, Y+1	; 0x01
  3c:	0c 15       	cp	r16, r12
  3e:	1d 05       	cpc	r17, r13
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN7OneWire11write_bytesEPKhjb+0x42>
  42:	22 23       	and	r18, r18
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN7OneWire11write_bytesEPKhjb+0x46>
  46:	f8 94       	cli
  48:	d5 01       	movw	r26, r10
  4a:	11 96       	adiw	r26, 0x01	; 1
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	12 97       	sbiw	r26, 0x02	; 2
  52:	91 81       	ldd	r25, Z+1	; 0x01
  54:	8c 91       	ld	r24, X
  56:	80 95       	com	r24
  58:	89 23       	and	r24, r25
  5a:	81 83       	std	Z+1, r24	; 0x01
  5c:	11 96       	adiw	r26, 0x01	; 1
  5e:	ed 91       	ld	r30, X+
  60:	fc 91       	ld	r31, X
  62:	12 97       	sbiw	r26, 0x02	; 2
  64:	92 81       	ldd	r25, Z+2	; 0x02
  66:	8c 91       	ld	r24, X
  68:	80 95       	com	r24
  6a:	89 23       	and	r24, r25
  6c:	82 83       	std	Z+2, r24	; 0x02
  6e:	78 94       	sei
  70:	0f 90       	pop	r0
  72:	df 91       	pop	r29
  74:	cf 91       	pop	r28
  76:	1f 91       	pop	r17
  78:	0f 91       	pop	r16
  7a:	ff 90       	pop	r15
  7c:	ef 90       	pop	r14
  7e:	df 90       	pop	r13
  80:	cf 90       	pop	r12
  82:	bf 90       	pop	r11
  84:	af 90       	pop	r10
  86:	08 95       	ret

Disassembly of section .text._ZN7OneWire4readEv:

00000000 <_ZN7OneWire4readEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
    uint16_t crc = ~crc16(input, len);
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8c 01       	movw	r16, r24
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	c8 e0       	ldi	r28, 0x08	; 8
  10:	d0 e0       	ldi	r29, 0x00	; 0
  12:	ff 24       	eor	r15, r15
  14:	ee 24       	eor	r14, r14
  16:	e3 94       	inc	r14
  18:	c8 01       	movw	r24, r16
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire4readEv>
  1e:	81 11       	cpse	r24, r1
  20:	fe 28       	or	r15, r14
  22:	ee 0c       	add	r14, r14
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	21 97       	sbiw	r28, 0x01	; 1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN7OneWire4readEv+0x28>
  28:	8f 2d       	mov	r24, r15
  2a:	df 91       	pop	r29
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	cf 91       	pop	r28
}
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	ff 90       	pop	r15
  34:	ef 90       	pop	r14
  36:	08 95       	ret

Disassembly of section .text._ZN7OneWire10read_bytesEPhj:

00000000 <_ZN7OneWire10read_bytesEPhj>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
    uint16_t crc = ~crc16(input, len);
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN7OneWire10read_bytesEPhj+0x1c>
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire10read_bytesEPhj>
  22:	f8 01       	movw	r30, r16
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	81 93       	st	Z+, r24
  26:	8f 01       	movw	r16, r30
  28:	21 96       	adiw	r28, 0x01	; 1
  2a:	ce 15       	cp	r28, r14
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	df 05       	cpc	r29, r15
}
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN7OneWire10read_bytesEPhj+0x30>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  38:	ff 90       	pop	r15
  3a:	ef 90       	pop	r14
  3c:	df 90       	pop	r13
  3e:	cf 90       	pop	r12
  40:	08 95       	ret

Disassembly of section .text._ZN7OneWire6selectEPh:

00000000 <_ZN7OneWire6selectEPh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
    uint16_t crc = ~crc16(input, len);
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	df 93       	push	r29
  10:	0f 92       	push	r0
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	7c 01       	movw	r14, r24
  18:	c6 2e       	mov	r12, r22
  1a:	65 e5       	ldi	r22, 0x55	; 85
  1c:	40 e0       	ldi	r20, 0x00	; 0
  1e:	79 83       	std	Y+1, r23	; 0x01
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6selectEPh>
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	0c 2d       	mov	r16, r12
  26:	79 81       	ldd	r23, Y+1	; 0x01
  28:	17 2f       	mov	r17, r23
  2a:	cc 24       	eor	r12, r12
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	dd 24       	eor	r13, r13
}
  2e:	f8 01       	movw	r30, r16
  30:	61 91       	ld	r22, Z+
  32:	8f 01       	movw	r16, r30
  34:	c7 01       	movw	r24, r14
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6selectEPh>
  3c:	08 94       	sec
  3e:	c1 1c       	adc	r12, r1
  40:	d1 1c       	adc	r13, r1
  42:	f8 e0       	ldi	r31, 0x08	; 8
  44:	cf 16       	cp	r12, r31
  46:	d1 04       	cpc	r13, r1
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN7OneWire6selectEPh+0x4a>
  4a:	0f 90       	pop	r0
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	df 90       	pop	r13
  5a:	cf 90       	pop	r12
  5c:	08 95       	ret

Disassembly of section .text._ZN7OneWire4skipEv:

00000000 <_ZN7OneWire4skipEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	6c ec       	ldi	r22, 0xCC	; 204
   2:	40 e0       	ldi	r20, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire4skipEv>
    uint16_t crc = ~crc16(input, len);
   8:	08 95       	ret

Disassembly of section .text._ZN7OneWire7depowerEv:

00000000 <_ZN7OneWire7depowerEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	dc 01       	movw	r26, r24
   2:	f8 94       	cli
   4:	11 96       	adiw	r26, 0x01	; 1
    uint16_t crc = ~crc16(input, len);
   6:	ed 91       	ld	r30, X+
   8:	fc 91       	ld	r31, X
   a:	12 97       	sbiw	r26, 0x02	; 2
   c:	91 81       	ldd	r25, Z+1	; 0x01
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	8c 91       	ld	r24, X
  10:	80 95       	com	r24
  12:	89 23       	and	r24, r25
  14:	81 83       	std	Z+1, r24	; 0x01
  16:	78 94       	sei
  18:	08 95       	ret

Disassembly of section .text._ZN7OneWire12reset_searchEv:

00000000 <_ZN7OneWire12reset_searchEv>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	fc 01       	movw	r30, r24
   2:	13 86       	std	Z+11, r1	; 0x0b
   4:	15 86       	std	Z+13, r1	; 0x0d
    uint16_t crc = ~crc16(input, len);
   6:	14 86       	std	Z+12, r1	; 0x0c
   8:	12 86       	std	Z+10, r1	; 0x0a
   a:	11 86       	std	Z+9, r1	; 0x09
   c:	10 86       	std	Z+8, r1	; 0x08
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	17 82       	std	Z+7, r1	; 0x07
  10:	16 82       	std	Z+6, r1	; 0x06
  12:	15 82       	std	Z+5, r1	; 0x05
  14:	14 82       	std	Z+4, r1	; 0x04
  16:	13 82       	std	Z+3, r1	; 0x03
  18:	08 95       	ret

Disassembly of section .text._ZN7OneWireC2Eh:

00000000 <_ZN7OneWireC1Eh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
    uint16_t crc = ~crc16(input, len);
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
   a:	86 2f       	mov	r24, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWireC1Eh>
  12:	61 2f       	mov	r22, r17
  14:	70 e0       	ldi	r23, 0x00	; 0
  16:	fb 01       	movw	r30, r22
  18:	e0 50       	subi	r30, 0x00	; 0
  1a:	f0 40       	sbci	r31, 0x00	; 0
  1c:	e4 91       	lpm	r30, Z
  1e:	e8 83       	st	Y, r30
  20:	fb 01       	movw	r30, r22
  22:	e0 50       	subi	r30, 0x00	; 0
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	e4 91       	lpm	r30, Z
  28:	f0 e0       	ldi	r31, 0x00	; 0
  2a:	ee 0f       	add	r30, r30
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	ff 1f       	adc	r31, r31
}
  2e:	e0 50       	subi	r30, 0x00	; 0
  30:	f0 40       	sbci	r31, 0x00	; 0
  32:	85 91       	lpm	r24, Z+
  34:	94 91       	lpm	r25, Z
  36:	89 83       	std	Y+1, r24	; 0x01
  38:	9a 83       	std	Y+2, r25	; 0x02
  3a:	ce 01       	movw	r24, r28
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWireC1Eh>
  40:	df 91       	pop	r29
  42:	cf 91       	pop	r28
  44:	1f 91       	pop	r17
  46:	08 95       	ret

Disassembly of section .text._ZN7OneWire6searchEPh:

00000000 <_ZN7OneWire6searchEPh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
    uint16_t crc = ~crc16(input, len);
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	ec 01       	movw	r28, r24
  14:	6b 01       	movw	r12, r22
  16:	8d 85       	ldd	r24, Y+13	; 0x0d
  18:	88 23       	and	r24, r24
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN7OneWire6searchEPh+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN7OneWire6searchEPh+0x1e>
  1e:	ce 01       	movw	r24, r28
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6searchEPh>
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN7OneWire6searchEPh+0x28>
  28:	1b 86       	std	Y+11, r1	; 0x0b
  2a:	1d 86       	std	Y+13, r1	; 0x0d
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	1c 86       	std	Y+12, r1	; 0x0c
}
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7OneWire6searchEPh+0x30>
  30:	ce 01       	movw	r24, r28
  32:	60 ef       	ldi	r22, 0xF0	; 240
  34:	40 e0       	ldi	r20, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6searchEPh>
  3a:	01 e0       	ldi	r16, 0x01	; 1
  3c:	ff 24       	eor	r15, r15
  3e:	ee 24       	eor	r14, r14
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	ce 01       	movw	r24, r28
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6searchEPh>
  48:	b8 2e       	mov	r11, r24
  4a:	ce 01       	movw	r24, r28
  4c:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6searchEPh>
  50:	91 e0       	ldi	r25, 0x01	; 1
  52:	b9 16       	cp	r11, r25
  54:	01 f4       	brne	.+0      	; 0x56 <_ZN7OneWire6searchEPh+0x56>
  56:	81 30       	cpi	r24, 0x01	; 1
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN7OneWire6searchEPh+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN7OneWire6searchEPh+0x5c>
  5c:	b8 16       	cp	r11, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN7OneWire6searchEPh+0x60>
  60:	8b 85       	ldd	r24, Y+11	; 0x0b
  62:	18 17       	cp	r17, r24
  64:	00 f4       	brcc	.+0      	; 0x66 <_ZN7OneWire6searchEPh+0x66>
  66:	fe 01       	movw	r30, r28
  68:	ef 0d       	add	r30, r15
  6a:	f1 1d       	adc	r31, r1
  6c:	83 81       	ldd	r24, Z+3	; 0x03
  6e:	80 23       	and	r24, r16
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN7OneWire6searchEPh+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <_ZN7OneWire6searchEPh+0x74>
  74:	18 17       	cp	r17, r24
  76:	01 f0       	breq	.+0      	; 0x78 <_ZN7OneWire6searchEPh+0x78>
  78:	60 e0       	ldi	r22, 0x00	; 0
  7a:	19 30       	cpi	r17, 0x09	; 9
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN7OneWire6searchEPh+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN7OneWire6searchEPh+0x80>
  80:	1c 87       	std	Y+12, r17	; 0x0c
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN7OneWire6searchEPh+0x84>
  84:	fe 01       	movw	r30, r28
  86:	ef 0d       	add	r30, r15
  88:	f1 1d       	adc	r31, r1
  8a:	83 81       	ldd	r24, Z+3	; 0x03
  8c:	80 2b       	or	r24, r16
  8e:	83 83       	std	Z+3, r24	; 0x03
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN7OneWire6searchEPh+0x94>
  94:	6b 2d       	mov	r22, r11
  96:	fe 01       	movw	r30, r28
  98:	ef 0d       	add	r30, r15
  9a:	f1 1d       	adc	r31, r1
  9c:	90 2f       	mov	r25, r16
  9e:	90 95       	com	r25
  a0:	83 81       	ldd	r24, Z+3	; 0x03
  a2:	89 23       	and	r24, r25
  a4:	83 83       	std	Z+3, r24	; 0x03
  a6:	ce 01       	movw	r24, r28
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire6searchEPh>
  ac:	1f 5f       	subi	r17, 0xFF	; 255
  ae:	00 0f       	add	r16, r16
  b0:	01 f4       	brne	.+0      	; 0xb2 <_ZN7OneWire6searchEPh+0xb2>
  b2:	f3 94       	inc	r15
  b4:	01 e0       	ldi	r16, 0x01	; 1
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	8f 15       	cp	r24, r15
  ba:	00 f4       	brcc	.+0      	; 0xbc <_ZN7OneWire6searchEPh+0xbc>
  bc:	11 34       	cpi	r17, 0x41	; 65
  be:	00 f0       	brcs	.+0      	; 0xc0 <_ZN7OneWire6searchEPh+0xc0>
  c0:	eb 86       	std	Y+11, r14	; 0x0b
  c2:	ee 20       	and	r14, r14
  c4:	01 f4       	brne	.+0      	; 0xc6 <_ZN7OneWire6searchEPh+0xc6>
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	8d 87       	std	Y+13, r24	; 0x0d
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN7OneWire6searchEPh+0xcc>
  cc:	1b 86       	std	Y+11, r1	; 0x0b
  ce:	1d 86       	std	Y+13, r1	; 0x0d
  d0:	1c 86       	std	Y+12, r1	; 0x0c
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	d6 01       	movw	r26, r12
  d6:	20 e0       	ldi	r18, 0x00	; 0
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	fe 01       	movw	r30, r28
  dc:	e2 0f       	add	r30, r18
  de:	f3 1f       	adc	r31, r19
  e0:	93 81       	ldd	r25, Z+3	; 0x03
  e2:	9d 93       	st	X+, r25
  e4:	2f 5f       	subi	r18, 0xFF	; 255
  e6:	3f 4f       	sbci	r19, 0xFF	; 255
  e8:	28 30       	cpi	r18, 0x08	; 8
  ea:	31 05       	cpc	r19, r1
  ec:	01 f4       	brne	.+0      	; 0xee <_ZN7OneWire6searchEPh+0xee>
  ee:	df 91       	pop	r29
  f0:	cf 91       	pop	r28
  f2:	1f 91       	pop	r17
  f4:	0f 91       	pop	r16
  f6:	ff 90       	pop	r15
  f8:	ef 90       	pop	r14
  fa:	df 90       	pop	r13
  fc:	cf 90       	pop	r12
  fe:	bf 90       	pop	r11
 100:	08 95       	ret
 102:	e1 2e       	mov	r14, r17
 104:	00 c0       	rjmp	.+0      	; 0x106 <_ZN7OneWire6searchEPh+0x106>
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	88 23       	and	r24, r24
 10a:	01 f0       	breq	.+0      	; 0x10c <_ZN7OneWire6searchEPh+0x10c>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	00 c0       	rjmp	.+0      	; 0x110 <__SREG__+0xd1>

Disassembly of section .text._ZN7OneWire4crc8EPhh:

00000000 <_ZN7OneWire4crc8EPhh>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	dc 01       	movw	r26, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	00 c0       	rjmp	.+0      	; 0x6 <_ZN7OneWire4crc8EPhh+0x6>
    uint16_t crc = ~crc16(input, len);
   6:	ed 91       	ld	r30, X+
   8:	e8 27       	eor	r30, r24
   a:	f0 e0       	ldi	r31, 0x00	; 0
   c:	e0 50       	subi	r30, 0x00	; 0
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	f0 40       	sbci	r31, 0x00	; 0
  10:	84 91       	lpm	r24, Z
  12:	61 50       	subi	r22, 0x01	; 1
  14:	66 23       	and	r22, r22
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN7OneWire4crc8EPhh+0x18>
  18:	08 95       	ret

Disassembly of section .text._ZN7OneWire5crc16EPhj:

00000000 <_ZN7OneWire5crc16EPhj>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
    uint16_t crc = ~crc16(input, len);
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8b 01       	movw	r16, r22
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	ec 01       	movw	r28, r24
  10:	60 e0       	ldi	r22, 0x00	; 0
  12:	70 e0       	ldi	r23, 0x00	; 0
  14:	20 e0       	ldi	r18, 0x00	; 0
  16:	30 e0       	ldi	r19, 0x00	; 0
  18:	81 e0       	ldi	r24, 0x01	; 1
  1a:	e8 2e       	mov	r14, r24
  1c:	80 ec       	ldi	r24, 0xC0	; 192
  1e:	f8 2e       	mov	r15, r24
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN7OneWire5crc16EPhj+0x22>
  22:	e9 91       	ld	r30, Y+
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	c9 01       	movw	r24, r18
  28:	90 70       	andi	r25, 0x00	; 0
  2a:	e8 27       	eor	r30, r24
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	f9 27       	eor	r31, r25
}
  2e:	cf 01       	movw	r24, r30
  30:	90 70       	andi	r25, 0x00	; 0
  32:	43 2f       	mov	r20, r19
  34:	55 27       	eor	r21, r21
  36:	ef 70       	andi	r30, 0x0F	; 15
  38:	f0 70       	andi	r31, 0x00	; 0
  3a:	e0 50       	subi	r30, 0x00	; 0
  3c:	f0 40       	sbci	r31, 0x00	; 0
  3e:	dc 01       	movw	r26, r24
  40:	b2 95       	swap	r27
  42:	a2 95       	swap	r26
  44:	af 70       	andi	r26, 0x0F	; 15
  46:	ab 27       	eor	r26, r27
  48:	bf 70       	andi	r27, 0x0F	; 15
  4a:	ab 27       	eor	r26, r27
  4c:	a0 50       	subi	r26, 0x00	; 0
  4e:	b0 40       	sbci	r27, 0x00	; 0
  50:	30 81       	ld	r19, Z
  52:	2c 91       	ld	r18, X
  54:	32 17       	cp	r19, r18
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN7OneWire5crc16EPhj+0x58>
  58:	4e 25       	eor	r20, r14
  5a:	5f 25       	eor	r21, r15
  5c:	e6 e0       	ldi	r30, 0x06	; 6
  5e:	88 0f       	add	r24, r24
  60:	99 1f       	adc	r25, r25
  62:	ea 95       	dec	r30
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN7OneWire5crc16EPhj+0x66>
  66:	9c 01       	movw	r18, r24
  68:	22 0f       	add	r18, r18
  6a:	33 1f       	adc	r19, r19
  6c:	28 27       	eor	r18, r24
  6e:	39 27       	eor	r19, r25
  70:	24 27       	eor	r18, r20
  72:	35 27       	eor	r19, r21
  74:	6f 5f       	subi	r22, 0xFF	; 255
  76:	7f 4f       	sbci	r23, 0xFF	; 255
  78:	60 17       	cp	r22, r16
  7a:	71 07       	cpc	r23, r17
  7c:	01 f4       	brne	.+0      	; 0x7e <_ZN7OneWire5crc16EPhj+0x7e>
  7e:	c9 01       	movw	r24, r18
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	1f 91       	pop	r17
  86:	0f 91       	pop	r16
  88:	ff 90       	pop	r15
  8a:	ef 90       	pop	r14
  8c:	08 95       	ret

Disassembly of section .text._ZN7OneWire11check_crc16EPhjS0_:

00000000 <_ZN7OneWire11check_crc16EPhjS0_>:
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ea 01       	movw	r28, r20
    uint16_t crc = ~crc16(input, len);
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7OneWire11check_crc16EPhjS0_>
   a:	80 95       	com	r24
   c:	90 95       	com	r25
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
   e:	ac 01       	movw	r20, r24
  10:	50 70       	andi	r21, 0x00	; 0
  12:	28 81       	ld	r18, Y
  14:	30 e0       	ldi	r19, 0x00	; 0
  16:	42 17       	cp	r20, r18
  18:	53 07       	cpc	r21, r19
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN7OneWire11check_crc16EPhjS0_+0x1c>
  1c:	49 2f       	mov	r20, r25
  1e:	55 27       	eor	r21, r21
  20:	29 81       	ldd	r18, Y+1	; 0x01
  22:	30 e0       	ldi	r19, 0x00	; 0
	return crc;
}
#endif

#if ONEWIRE_CRC16
bool OneWire::check_crc16(uint8_t* input, uint16_t len, uint8_t* inverted_crc)
  24:	81 e0       	ldi	r24, 0x01	; 1
  26:	42 17       	cp	r20, r18
  28:	53 07       	cpc	r21, r19
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN7OneWire11check_crc16EPhjS0_+0x2c>
{
    uint16_t crc = ~crc16(input, len);
    return (crc & 0xFF) == inverted_crc[0] && (crc >> 8) == inverted_crc[1];
  2c:	80 e0       	ldi	r24, 0x00	; 0
}
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

PinHighLowRunnable.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00000708  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00002f82  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN18PinHighLowRunnableD2Ev 00000010  00000000  00000000  000036be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN18PinHighLowRunnableD0Ev 00000020  00000000  00000000  000036ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN18PinHighLowRunnable3runEv 00000024  00000000  00000000  000036ee  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN18PinHighLowRunnableC2Ejb 00000066  00000000  00000000  00003712  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .rodata._ZTV18PinHighLowRunnable 0000000a  00000000  00000000  00003778  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN18PinHighLowRunnableD2Ev:

00000000 <_ZN18PinHighLowRunnableD1Ev>:
 *      Author: root
 */

#include "PinHighLowRunnable.h"

PinHighLowRunnable::PinHighLowRunnable( unsigned int _pin , bool isStartStateHigh )
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableD1Ev>
   e:	08 95       	ret

Disassembly of section .text._ZN18PinHighLowRunnableD0Ev:

00000000 <_ZN18PinHighLowRunnableD0Ev>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	99 83       	std	Y+1, r25	; 0x01
   c:	88 83       	st	Y, r24
   e:	ce 01       	movw	r24, r28
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableD0Ev>
  14:	ce 01       	movw	r24, r28
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableD0Ev>
  1a:	df 91       	pop	r29
  1c:	cf 91       	pop	r28
  1e:	08 95       	ret

Disassembly of section .text._ZN18PinHighLowRunnable3runEv:

00000000 <_ZN18PinHighLowRunnable3runEv>:
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	81 30       	cpi	r24, 0x01	; 1
   8:	91 05       	cpc	r25, r1
   a:	01 f4       	brne	.+0      	; 0xc <_ZN18PinHighLowRunnable3runEv+0xc>
   c:	15 82       	std	Z+5, r1	; 0x05
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN18PinHighLowRunnable3runEv+0x12>
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	95 83       	std	Z+5, r25	; 0x05
  18:	84 83       	std	Z+4, r24	; 0x04
  1a:	82 81       	ldd	r24, Z+2	; 0x02
  1c:	64 81       	ldd	r22, Z+4	; 0x04
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnable3runEv>
  22:	08 95       	ret

Disassembly of section .text._ZN18PinHighLowRunnableC2Ejb:

00000000 <_ZN18PinHighLowRunnableC1Ejb>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	00 d0       	rcall	.+0      	; 0xa <_ZN18PinHighLowRunnableC1Ejb+0xa>
   a:	0f 92       	push	r0
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	8c 01       	movw	r16, r24
  12:	49 83       	std	Y+1, r20	; 0x01
  14:	6a 83       	std	Y+2, r22	; 0x02
  16:	7b 83       	std	Y+3, r23	; 0x03
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableC1Ejb>
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	f8 01       	movw	r30, r16
  22:	31 83       	std	Z+1, r19	; 0x01
  24:	20 83       	st	Z, r18
{
	pin = _pin;
  26:	6a 81       	ldd	r22, Y+2	; 0x02
  28:	62 83       	std	Z+2, r22	; 0x02
  2a:	7b 81       	ldd	r23, Y+3	; 0x03
  2c:	73 83       	std	Z+3, r23	; 0x03

	if( isStartStateHigh )
  2e:	49 81       	ldd	r20, Y+1	; 0x01
  30:	44 23       	and	r20, r20
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN18PinHighLowRunnableC1Ejb+0x34>
		ledState = HIGH;
  34:	21 e0       	ldi	r18, 0x01	; 1
  36:	30 e0       	ldi	r19, 0x00	; 0
  38:	35 83       	std	Z+5, r19	; 0x05
  3a:	24 83       	std	Z+4, r18	; 0x04
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN18PinHighLowRunnableC1Ejb+0x3e>
	else
		ledState = LOW;
  3e:	f8 01       	movw	r30, r16
  40:	15 82       	std	Z+5, r1	; 0x05
  42:	14 82       	std	Z+4, r1	; 0x04

	pinMode( pin , OUTPUT );
  44:	86 2f       	mov	r24, r22
  46:	61 e0       	ldi	r22, 0x01	; 1
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableC1Ejb>
	digitalWrite( pin , ledState );
  4c:	f8 01       	movw	r30, r16
  4e:	82 81       	ldd	r24, Z+2	; 0x02
  50:	64 81       	ldd	r22, Z+4	; 0x04
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN18PinHighLowRunnableC1Ejb>
}
  56:	0f 90       	pop	r0
  58:	0f 90       	pop	r0
  5a:	0f 90       	pop	r0
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	1f 91       	pop	r17
  62:	0f 91       	pop	r16
  64:	08 95       	ret

Runnable.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000030c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000722  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN8Runnable3runEv 00000002  00000000  00000000  00000a62  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .text._ZN8RunnableD2Ev 0000000c  00000000  00000000  00000a64  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN8RunnableD0Ev 00000010  00000000  00000000  00000a70  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN8RunnableC2Ev 0000000c  00000000  00000000  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .rodata._ZTV8Runnable 0000000a  00000000  00000000  00000a8c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text._ZN8Runnable3runEv:

00000000 <_ZN8Runnable3runEv>:
 *      Author: root
 */

#include "Runnable.h"

Runnable::Runnable()
   0:	08 95       	ret

Disassembly of section .text._ZN8RunnableD2Ev:

00000000 <_ZN8RunnableD1Ev>:
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
{
}
   a:	08 95       	ret

Disassembly of section .text._ZN8RunnableD0Ev:

00000000 <_ZN8RunnableD0Ev>:
 *      Author: root
 */

#include "Runnable.h"

Runnable::Runnable()
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
{
}
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN8RunnableD0Ev>
   e:	08 95       	ret

Disassembly of section .text._ZN8RunnableC2Ev:

00000000 <_ZN8RunnableC1Ev>:
 *      Author: root
 */

#include "Runnable.h"

Runnable::Runnable()
   0:	20 e0       	ldi	r18, 0x00	; 0
   2:	30 e0       	ldi	r19, 0x00	; 0
   4:	fc 01       	movw	r30, r24
   6:	31 83       	std	Z+1, r19	; 0x01
   8:	20 83       	st	Z, r18
{
}
   a:	08 95       	ret

SD.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000036  2**0
                  ALLOC
  3 .stab         00001e18  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00006ea8  00000000  00000000  00001e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._Z19callback_pathExistsR6SdFilePchPv 00000058  00000000  00000000  00008cf8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._Z15callback_removeR6SdFilePchPv 0000000e  00000000  00000000  00008d50  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z20callback_makeDirPathR6SdFilePchPv 0000005e  00000000  00000000  00008d5e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z14callback_rmdirR6SdFilePchPv 0000005e  00000000  00000000  00008dbc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z20getNextPathComponentPcPjS_ 00000072  00000000  00000000  00008e1a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z8walkPathPcR6SdFilePFhS1_S_hPvES2_ 00000132  00000000  00000000  00008e8c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7SDClass5beginEh 00000054  00000000  00000000  00008fbe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6SdFileC1ERKS_ 000000a2  00000000  00000000  00009012  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7SDClass12getParentDirEPKcPi 00000130  00000000  00000000  000090b4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7SDClass4openEPKch 00000118  00000000  00000000  000091e4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN7SDClass6existsEPc 00000018  00000000  00000000  000092fc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN7SDClass5mkdirEPc 00000018  00000000  00000000  00009314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7SDClass5rmdirEPc 00000018  00000000  00000000  0000932c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7SDClass6removeEPc 00000018  00000000  00000000  00009344  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN4File12openNextFileEh 000000dc  00000000  00000000  0000935c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN4File15rewindDirectoryEv 00000028  00000000  00000000  00009438  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text.startup._GLOBAL__sub_I__Z20getNextPathComponentPcPjS_ 00000046  00000000  00000000  00009460  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .ctors        00000002  00000000  00000000  000094a6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .bss.SD       00000049  00000000  00000000  000094a8  2**0
                  ALLOC

Disassembly of section .text._Z19callback_pathExistsR6SdFilePchPv:

00000000 <_Z19callback_pathExistsR6SdFilePchPv>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	6d 97       	sbiw	r28, 0x1d	; 29
   c:	0f b6       	in	r0, 0x3f	; 63
   e:	f8 94       	cli
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	de bf       	out	0x3e, r29	; 62
  12:	0f be       	out	0x3f, r0	; 63
  14:	cd bf       	out	0x3d, r28	; 61
  16:	9c 01       	movw	r18, r24
  18:	ab 01       	movw	r20, r22
  1a:	1c 82       	std	Y+4, r1	; 0x04
  1c:	1b 82       	std	Y+3, r1	; 0x03
  1e:	80 e0       	ldi	r24, 0x00	; 0
  20:	90 e0       	ldi	r25, 0x00	; 0
  22:	9a 83       	std	Y+2, r25	; 0x02
  24:	89 83       	std	Y+1, r24	; 0x01
  26:	1e 82       	std	Y+6, r1	; 0x06
  28:	ce 01       	movw	r24, r28
  2a:	01 96       	adiw	r24, 0x01	; 1
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  2c:	b9 01       	movw	r22, r18
  2e:	21 e0       	ldi	r18, 0x01	; 1
  30:	0e 94 00 00 	call	0	; 0x0 <_Z19callback_pathExistsR6SdFilePchPv>
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	18 2f       	mov	r17, r24
  36:	88 23       	and	r24, r24
  38:	01 f0       	breq	.+0      	; 0x3a <_Z19callback_pathExistsR6SdFilePchPv+0x3a>
  3a:	ce 01       	movw	r24, r28
  3c:	01 96       	adiw	r24, 0x01	; 1
  3e:	0e 94 00 00 	call	0	; 0x0 <_Z19callback_pathExistsR6SdFilePchPv>
  42:	81 2f       	mov	r24, r17
void File::rewindDirectory(void) {  
  if (isDirectory())
    _file->rewind();
}

SDClass SD;
  44:	6d 96       	adiw	r28, 0x1d	; 29
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	08 95       	ret

Disassembly of section .text._Z15callback_removeR6SdFilePchPv:

00000000 <_Z15callback_removeR6SdFilePchPv>:
   0:	44 23       	and	r20, r20
   2:	01 f0       	breq	.+0      	; 0x4 <_Z15callback_removeR6SdFilePchPv+0x4>
   4:	0e 94 00 00 	call	0	; 0x0 <_Z15callback_removeR6SdFilePchPv>
   8:	08 95       	ret
   a:	81 e0       	ldi	r24, 0x01	; 1
   c:	08 95       	ret

Disassembly of section .text._Z20callback_makeDirPathR6SdFilePchPv:

00000000 <_Z20callback_makeDirPathR6SdFilePchPv>:
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	6d 97       	sbiw	r28, 0x1d	; 29
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	7b 01       	movw	r14, r22
  20:	1c 82       	std	Y+4, r1	; 0x04
  22:	1b 82       	std	Y+3, r1	; 0x03
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	9a 83       	std	Y+2, r25	; 0x02
  2a:	89 83       	std	Y+1, r24	; 0x01
  2c:	1e 82       	std	Y+6, r1	; 0x06
  2e:	c8 01       	movw	r24, r16
  30:	0e 94 00 00 	call	0	; 0x0 <_Z20callback_makeDirPathR6SdFilePchPv>
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	88 23       	and	r24, r24
  36:	01 f4       	brne	.+0      	; 0x38 <_Z20callback_makeDirPathR6SdFilePchPv+0x38>
  38:	ce 01       	movw	r24, r28
  3a:	01 96       	adiw	r24, 0x01	; 1
  3c:	b8 01       	movw	r22, r16
  3e:	a7 01       	movw	r20, r14
  40:	0e 94 00 00 	call	0	; 0x0 <_Z20callback_makeDirPathR6SdFilePchPv>
  44:	6d 96       	adiw	r28, 0x1d	; 29
  46:	0f b6       	in	r0, 0x3f	; 63
  48:	f8 94       	cli
  4a:	de bf       	out	0x3e, r29	; 62
  4c:	0f be       	out	0x3f, r0	; 63
  4e:	cd bf       	out	0x3d, r28	; 61
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	08 95       	ret

Disassembly of section .text._Z14callback_rmdirR6SdFilePchPv:

00000000 <_Z14callback_rmdirR6SdFilePchPv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	6d 97       	sbiw	r28, 0x1d	; 29
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 01       	movw	r18, r24
  16:	fb 01       	movw	r30, r22
  18:	44 23       	and	r20, r20
  1a:	01 f0       	breq	.+0      	; 0x1c <_Z14callback_rmdirR6SdFilePchPv+0x1c>
  1c:	1c 82       	std	Y+4, r1	; 0x04
  1e:	1b 82       	std	Y+3, r1	; 0x03
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	9a 83       	std	Y+2, r25	; 0x02
  26:	89 83       	std	Y+1, r24	; 0x01
  28:	1e 82       	std	Y+6, r1	; 0x06
  2a:	ce 01       	movw	r24, r28
  2c:	01 96       	adiw	r24, 0x01	; 1
  2e:	b9 01       	movw	r22, r18
  30:	af 01       	movw	r20, r30
  32:	21 e0       	ldi	r18, 0x01	; 1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	0e 94 00 00 	call	0	; 0x0 <_Z14callback_rmdirR6SdFilePchPv>
  38:	88 23       	and	r24, r24
  3a:	01 f0       	breq	.+0      	; 0x3c <_Z14callback_rmdirR6SdFilePchPv+0x3c>
  3c:	ce 01       	movw	r24, r28
  3e:	01 96       	adiw	r24, 0x01	; 1
  40:	0e 94 00 00 	call	0	; 0x0 <_Z14callback_rmdirR6SdFilePchPv>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z14callback_rmdirR6SdFilePchPv+0x46>
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	00 c0       	rjmp	.+0      	; 0x4a <_Z14callback_rmdirR6SdFilePchPv+0x4a>
  4a:	81 e0       	ldi	r24, 0x01	; 1
  4c:	6d 96       	adiw	r28, 0x1d	; 29
  4e:	0f b6       	in	r0, 0x3f	; 63
  50:	f8 94       	cli
  52:	de bf       	out	0x3e, r29	; 62
  54:	0f be       	out	0x3f, r0	; 63
  56:	cd bf       	out	0x3d, r28	; 61
  58:	df 91       	pop	r29
  5a:	cf 91       	pop	r28
  5c:	08 95       	ret

Disassembly of section .text._Z20getNextPathComponentPcPjS_:

00000000 <_Z20getNextPathComponentPcPjS_>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
   6:	fb 01       	movw	r30, r22
   8:	80 81       	ld	r24, Z
   a:	91 81       	ldd	r25, Z+1	; 0x01
   c:	fd 01       	movw	r30, r26
   e:	e8 0f       	add	r30, r24
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	f9 1f       	adc	r31, r25
  12:	20 81       	ld	r18, Z
  14:	2f 32       	cpi	r18, 0x2F	; 47
  16:	01 f4       	brne	.+0      	; 0x18 <_Z20getNextPathComponentPcPjS_+0x18>
  18:	01 96       	adiw	r24, 0x01	; 1
  1a:	ea 01       	movw	r28, r20
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	30 e0       	ldi	r19, 0x00	; 0
  20:	fd 01       	movw	r30, r26
  22:	e8 0f       	add	r30, r24
  24:	f9 1f       	adc	r31, r25
  26:	e0 81       	ld	r30, Z
  28:	ef 32       	cpi	r30, 0x2F	; 47
  2a:	01 f0       	breq	.+0      	; 0x2c <_Z20getNextPathComponentPcPjS_+0x2c>
  2c:	ee 23       	and	r30, r30
  2e:	01 f0       	breq	.+0      	; 0x30 <_Z20getNextPathComponentPcPjS_+0x30>
  30:	e9 93       	st	Y+, r30
  32:	2f 5f       	subi	r18, 0xFF	; 255
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	01 96       	adiw	r24, 0x01	; 1
  38:	2c 30       	cpi	r18, 0x0C	; 12
  3a:	31 05       	cpc	r19, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <_Z20getNextPathComponentPcPjS_+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_Z20getNextPathComponentPcPjS_+0x40>
  40:	01 96       	adiw	r24, 0x01	; 1
  42:	fb 01       	movw	r30, r22
  44:	91 83       	std	Z+1, r25	; 0x01
  46:	80 83       	st	Z, r24
  48:	a8 0f       	add	r26, r24
  4a:	b9 1f       	adc	r27, r25
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	9c 91       	ld	r25, X
  50:	99 23       	and	r25, r25
  52:	01 f4       	brne	.+0      	; 0x54 <_Z20getNextPathComponentPcPjS_+0x54>
  54:	80 e0       	ldi	r24, 0x00	; 0
  56:	df 91       	pop	r29
  58:	cf 91       	pop	r28
  5a:	08 95       	ret
  5c:	24 0f       	add	r18, r20
  5e:	35 1f       	adc	r19, r21
  60:	f9 01       	movw	r30, r18
  62:	10 82       	st	Z, r1
  64:	fd 01       	movw	r30, r26
  66:	e8 0f       	add	r30, r24
  68:	f9 1f       	adc	r31, r25
  6a:	20 81       	ld	r18, Z
  6c:	2f 32       	cpi	r18, 0x2F	; 47
  6e:	01 f4       	brne	.+0      	; 0x70 <_Z20getNextPathComponentPcPjS_+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <__SREG__+0x33>

Disassembly of section .text._Z8walkPathPcR6SdFilePFhS1_S_hPvES2_:

00000000 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>:
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	c9 54       	subi	r28, 0x49	; 73
  2a:	d0 40       	sbci	r29, 0x00	; 0
  2c:	0f b6       	in	r0, 0x3f	; 63
  2e:	f8 94       	cli
  30:	de bf       	out	0x3e, r29	; 62
  32:	0f be       	out	0x3f, r0	; 63
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	cd bf       	out	0x3d, r28	; 61
  36:	3c 01       	movw	r6, r24
  38:	6b 01       	movw	r12, r22
  3a:	1a 01       	movw	r2, r20
  3c:	29 01       	movw	r4, r18
  3e:	18 aa       	std	Y+48, r1	; 0x30
  40:	1f a6       	std	Y+47, r1	; 0x2f
  42:	80 e0       	ldi	r24, 0x00	; 0
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	9e a7       	std	Y+46, r25	; 0x2e
  48:	8d a7       	std	Y+45, r24	; 0x2d
  4a:	1a aa       	std	Y+50, r1	; 0x32
  4c:	1b 8a       	std	Y+19, r1	; 0x13
  4e:	1a 8a       	std	Y+18, r1	; 0x12
  50:	99 8b       	std	Y+17, r25	; 0x11
  52:	88 8b       	std	Y+16, r24	; 0x10
  54:	1d 8a       	std	Y+21, r1	; 0x15
  56:	1a 82       	std	Y+2, r1	; 0x02
  58:	19 82       	std	Y+1, r1	; 0x01
  5a:	7b 01       	movw	r14, r22
  5c:	ed e2       	ldi	r30, 0x2D	; 45
  5e:	ae 2e       	mov	r10, r30
  60:	b1 2c       	mov	r11, r1
  62:	ac 0e       	add	r10, r28
  64:	bd 1e       	adc	r11, r29
  66:	01 e0       	ldi	r16, 0x01	; 1
  68:	f0 e1       	ldi	r31, 0x10	; 16
  6a:	8f 2e       	mov	r8, r31
  6c:	91 2c       	mov	r9, r1
  6e:	8c 0e       	add	r8, r28
  70:	9d 1e       	adc	r9, r29
  72:	00 c0       	rjmp	.+0      	; 0x74 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x74>
  74:	9e 2d       	mov	r25, r14
  76:	8f 2d       	mov	r24, r15
  78:	00 c0       	rjmp	.+0      	; 0x7a <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0x7a>
  7a:	98 2d       	mov	r25, r8
  7c:	89 2d       	mov	r24, r9
  7e:	75 01       	movw	r14, r10
  80:	a9 2e       	mov	r10, r25
  82:	b8 2e       	mov	r11, r24
  84:	c3 01       	movw	r24, r6
  86:	be 01       	movw	r22, r28
  88:	6f 5f       	subi	r22, 0xFF	; 255
  8a:	7f 4f       	sbci	r23, 0xFF	; 255
  8c:	ae 01       	movw	r20, r28
  8e:	4d 5f       	subi	r20, 0xFD	; 253
  90:	5f 4f       	sbci	r21, 0xFF	; 255
  92:	0e 94 00 00 	call	0	; 0x0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
  96:	18 2f       	mov	r17, r24
  98:	48 2f       	mov	r20, r24
  9a:	40 27       	eor	r20, r16
  9c:	c7 01       	movw	r24, r14
  9e:	be 01       	movw	r22, r28
  a0:	6d 5f       	subi	r22, 0xFD	; 253
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	92 01       	movw	r18, r4
  a6:	f1 01       	movw	r30, r2
  a8:	09 95       	icall
  aa:	88 23       	and	r24, r24
  ac:	01 f4       	brne	.+0      	; 0xae <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xae>
  ae:	ec 14       	cp	r14, r12
  b0:	fd 04       	cpc	r15, r13
  b2:	01 f0       	breq	.+0      	; 0xb4 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xb4>
  b4:	c7 01       	movw	r24, r14
  b6:	0e 94 00 00 	call	0	; 0x0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xbc>
  bc:	11 23       	and	r17, r17
  be:	01 f0       	breq	.+0      	; 0xc0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xc0>
  c0:	c5 01       	movw	r24, r10
  c2:	b7 01       	movw	r22, r14
  c4:	ae 01       	movw	r20, r28
  c6:	4d 5f       	subi	r20, 0xFD	; 253
  c8:	5f 4f       	sbci	r21, 0xFF	; 255
  ca:	21 e0       	ldi	r18, 0x01	; 1
  cc:	0e 94 00 00 	call	0	; 0x0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
  d0:	18 2f       	mov	r17, r24
  d2:	ec 14       	cp	r14, r12
  d4:	fd 04       	cpc	r15, r13
  d6:	01 f0       	breq	.+0      	; 0xd8 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xd8>
  d8:	c7 01       	movw	r24, r14
  da:	0e 94 00 00 	call	0	; 0x0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
  de:	11 23       	and	r17, r17
  e0:	01 f0       	breq	.+0      	; 0xe2 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe2>
  e2:	ec 14       	cp	r14, r12
  e4:	fd 04       	cpc	r15, r13
  e6:	01 f4       	brne	.+0      	; 0xe8 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xe8>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xea>
  ea:	ec 14       	cp	r14, r12
  ec:	fd 04       	cpc	r15, r13
  ee:	01 f0       	breq	.+0      	; 0xf0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xf0>
  f0:	c7 01       	movw	r24, r14
  f2:	0e 94 00 00 	call	0	; 0x0 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xf8>
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_Z8walkPathPcR6SdFilePFhS1_S_hPvES2_+0xfc>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	c7 5b       	subi	r28, 0xB7	; 183
 100:	df 4f       	sbci	r29, 0xFF	; 255
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	1f 91       	pop	r17
 112:	0f 91       	pop	r16
 114:	ff 90       	pop	r15
 116:	ef 90       	pop	r14
 118:	df 90       	pop	r13
 11a:	cf 90       	pop	r12
 11c:	bf 90       	pop	r11
 11e:	af 90       	pop	r10
 120:	9f 90       	pop	r9
 122:	8f 90       	pop	r8
 124:	7f 90       	pop	r7
 126:	6f 90       	pop	r6
 128:	5f 90       	pop	r5
 12a:	4f 90       	pop	r4
 12c:	3f 90       	pop	r3
 12e:	2f 90       	pop	r2
 130:	08 95       	ret

Disassembly of section .text._ZN7SDClass5beginEh:

00000000 <_ZN7SDClass5beginEh>:
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
   a:	46 2f       	mov	r20, r22
   c:	61 e0       	ldi	r22, 0x01	; 1
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5beginEh>
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  12:	88 23       	and	r24, r24
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN7SDClass5beginEh+0x16>
  16:	e8 01       	movw	r28, r16
  18:	2c 96       	adiw	r28, 0x0c	; 12
  1a:	ce 01       	movw	r24, r28
  1c:	b8 01       	movw	r22, r16
  1e:	41 e0       	ldi	r20, 0x01	; 1
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5beginEh>
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN7SDClass5beginEh+0x28>
  28:	ce 01       	movw	r24, r28
  2a:	b8 01       	movw	r22, r16
  2c:	40 e0       	ldi	r20, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5beginEh>
  32:	88 23       	and	r24, r24
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN7SDClass5beginEh+0x36>
  36:	c8 01       	movw	r24, r16
  38:	8a 96       	adiw	r24, 0x2a	; 42
  3a:	be 01       	movw	r22, r28
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5beginEh>
  40:	91 e0       	ldi	r25, 0x01	; 1
  42:	88 23       	and	r24, r24
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN7SDClass5beginEh+0x46>
  46:	90 e0       	ldi	r25, 0x00	; 0
  48:	89 2f       	mov	r24, r25
  4a:	df 91       	pop	r29
  4c:	cf 91       	pop	r28
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	08 95       	ret

Disassembly of section .text._ZN6SdFileC1ERKS_:

00000000 <_ZN6SdFileC1ERKS_>:
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
   4:	12 96       	adiw	r26, 0x02	; 2
   6:	8d 91       	ld	r24, X+
   8:	9c 91       	ld	r25, X
   a:	13 97       	sbiw	r26, 0x03	; 3
   c:	93 83       	std	Z+3, r25	; 0x03
   e:	82 83       	std	Z+2, r24	; 0x02
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	91 83       	std	Z+1, r25	; 0x01
  16:	80 83       	st	Z, r24
  18:	14 96       	adiw	r26, 0x04	; 4
  1a:	8c 91       	ld	r24, X
  1c:	14 97       	sbiw	r26, 0x04	; 4
  1e:	84 83       	std	Z+4, r24	; 0x04
  20:	15 96       	adiw	r26, 0x05	; 5
  22:	8c 91       	ld	r24, X
  24:	15 97       	sbiw	r26, 0x05	; 5
  26:	85 83       	std	Z+5, r24	; 0x05
  28:	16 96       	adiw	r26, 0x06	; 6
  2a:	4d 91       	ld	r20, X+
  2c:	5d 91       	ld	r21, X+
  2e:	6d 91       	ld	r22, X+
  30:	7c 91       	ld	r23, X
  32:	19 97       	sbiw	r26, 0x09	; 9
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	46 83       	std	Z+6, r20	; 0x06
  36:	57 83       	std	Z+7, r21	; 0x07
  38:	60 87       	std	Z+8, r22	; 0x08
  3a:	71 87       	std	Z+9, r23	; 0x09
  3c:	1a 96       	adiw	r26, 0x0a	; 10
  3e:	4d 91       	ld	r20, X+
  40:	5d 91       	ld	r21, X+
  42:	6d 91       	ld	r22, X+
  44:	7c 91       	ld	r23, X
  46:	1d 97       	sbiw	r26, 0x0d	; 13
  48:	42 87       	std	Z+10, r20	; 0x0a
  4a:	53 87       	std	Z+11, r21	; 0x0b
  4c:	64 87       	std	Z+12, r22	; 0x0c
  4e:	75 87       	std	Z+13, r23	; 0x0d
  50:	1e 96       	adiw	r26, 0x0e	; 14
  52:	4d 91       	ld	r20, X+
  54:	5d 91       	ld	r21, X+
  56:	6d 91       	ld	r22, X+
  58:	7c 91       	ld	r23, X
  5a:	51 97       	sbiw	r26, 0x11	; 17
  5c:	46 87       	std	Z+14, r20	; 0x0e
  5e:	57 87       	std	Z+15, r21	; 0x0f
  60:	60 8b       	std	Z+16, r22	; 0x10
  62:	71 8b       	std	Z+17, r23	; 0x11
  64:	52 96       	adiw	r26, 0x12	; 18
  66:	8c 91       	ld	r24, X
  68:	52 97       	sbiw	r26, 0x12	; 18
  6a:	82 8b       	std	Z+18, r24	; 0x12
  6c:	53 96       	adiw	r26, 0x13	; 19
  6e:	4d 91       	ld	r20, X+
  70:	5d 91       	ld	r21, X+
  72:	6d 91       	ld	r22, X+
  74:	7c 91       	ld	r23, X
  76:	56 97       	sbiw	r26, 0x16	; 22
  78:	43 8b       	std	Z+19, r20	; 0x13
  7a:	54 8b       	std	Z+20, r21	; 0x14
  7c:	65 8b       	std	Z+21, r22	; 0x15
  7e:	76 8b       	std	Z+22, r23	; 0x16
  80:	57 96       	adiw	r26, 0x17	; 23
  82:	4d 91       	ld	r20, X+
  84:	5d 91       	ld	r21, X+
  86:	6d 91       	ld	r22, X+
  88:	7c 91       	ld	r23, X
  8a:	5a 97       	sbiw	r26, 0x1a	; 26
  8c:	47 8b       	std	Z+23, r20	; 0x17
  8e:	50 8f       	std	Z+24, r21	; 0x18
  90:	61 8f       	std	Z+25, r22	; 0x19
  92:	72 8f       	std	Z+26, r23	; 0x1a
  94:	5b 96       	adiw	r26, 0x1b	; 27
  96:	8d 91       	ld	r24, X+
  98:	9c 91       	ld	r25, X
  9a:	5c 97       	sbiw	r26, 0x1c	; 28
  9c:	94 8f       	std	Z+28, r25	; 0x1c
  9e:	83 8f       	std	Z+27, r24	; 0x1b
  a0:	08 95       	ret

Disassembly of section .text._ZN7SDClass12getParentDirEPKcPi:

00000000 <_ZN7SDClass12getParentDirEPKcPi>:
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	c7 54       	subi	r28, 0x47	; 71
  26:	d0 40       	sbci	r29, 0x00	; 0
  28:	0f b6       	in	r0, 0x3f	; 63
  2a:	f8 94       	cli
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	0f be       	out	0x3f, r0	; 63
  30:	cd bf       	out	0x3d, r28	; 61
  32:	4c 01       	movw	r8, r24
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	3a 01       	movw	r6, r20
  36:	29 01       	movw	r4, r18
  38:	8e 01       	movw	r16, r28
  3a:	05 5d       	subi	r16, 0xD5	; 213
  3c:	1f 4f       	sbci	r17, 0xFF	; 255
  3e:	66 5d       	subi	r22, 0xD6	; 214
  40:	7f 4f       	sbci	r23, 0xFF	; 255
  42:	c8 01       	movw	r24, r16
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  48:	19 8a       	std	Y+17, r1	; 0x11
  4a:	18 8a       	std	Y+16, r1	; 0x10
  4c:	80 e0       	ldi	r24, 0x00	; 0
  4e:	90 e0       	ldi	r25, 0x00	; 0
  50:	9f 87       	std	Y+15, r25	; 0x0f
  52:	8e 87       	std	Y+14, r24	; 0x0e
  54:	1b 8a       	std	Y+19, r1	; 0x13
  56:	73 01       	movw	r14, r6
  58:	ae e0       	ldi	r26, 0x0E	; 14
  5a:	aa 2e       	mov	r10, r26
  5c:	b1 2c       	mov	r11, r1
  5e:	ac 0e       	add	r10, r28
  60:	bd 1e       	adc	r11, r29
  62:	68 01       	movw	r12, r16
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN7SDClass12getParentDirEPKcPi+0x66>
  66:	f7 01       	movw	r30, r14
  68:	20 81       	ld	r18, Z
  6a:	2f 32       	cpi	r18, 0x2F	; 47
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN7SDClass12getParentDirEPKcPi+0x6e>
  6e:	08 94       	sec
  70:	e1 1c       	adc	r14, r1
  72:	f1 1c       	adc	r15, r1
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN7SDClass12getParentDirEPKcPi+0x76>
  76:	8e 19       	sub	r24, r14
  78:	8d 30       	cpi	r24, 0x0D	; 13
  7a:	00 f0       	brcs	.+0      	; 0x7c <_ZN7SDClass12getParentDirEPKcPi+0x7c>
  7c:	8c e0       	ldi	r24, 0x0C	; 12
  7e:	08 2f       	mov	r16, r24
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	ce 01       	movw	r24, r28
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	b7 01       	movw	r22, r14
  88:	a8 01       	movw	r20, r16
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  8e:	e1 e0       	ldi	r30, 0x01	; 1
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	ec 0f       	add	r30, r28
  94:	fd 1f       	adc	r31, r29
  96:	e0 0f       	add	r30, r16
  98:	f1 1f       	adc	r31, r17
  9a:	10 82       	st	Z, r1
  9c:	c5 01       	movw	r24, r10
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  a2:	c5 01       	movw	r24, r10
  a4:	b6 01       	movw	r22, r12
  a6:	ae 01       	movw	r20, r28
  a8:	4f 5f       	subi	r20, 0xFF	; 255
  aa:	5f 4f       	sbci	r21, 0xFF	; 255
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  b2:	88 23       	and	r24, r24
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN7SDClass12getParentDirEPKcPi+0xb6>
  b6:	f4 01       	movw	r30, r8
  b8:	13 82       	std	Z+3, r1	; 0x03
  ba:	12 82       	std	Z+2, r1	; 0x02
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	91 83       	std	Z+1, r25	; 0x01
  c2:	80 83       	st	Z, r24
  c4:	15 82       	std	Z+5, r1	; 0x05
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN7SDClass12getParentDirEPKcPi+0xc8>
  c8:	e0 0e       	add	r14, r16
  ca:	f1 1e       	adc	r15, r17
  cc:	c6 01       	movw	r24, r12
  ce:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  d2:	9c 2d       	mov	r25, r12
  d4:	8d 2d       	mov	r24, r13
  d6:	65 01       	movw	r12, r10
  d8:	a9 2e       	mov	r10, r25
  da:	b8 2e       	mov	r11, r24
  dc:	c7 01       	movw	r24, r14
  de:	6f e2       	ldi	r22, 0x2F	; 47
  e0:	70 e0       	ldi	r23, 0x00	; 0
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	01 f0       	breq	.+0      	; 0xea <_ZN7SDClass12getParentDirEPKcPi+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN7SDClass12getParentDirEPKcPi+0xec>
  ec:	e6 18       	sub	r14, r6
  ee:	f7 08       	sbc	r15, r7
  f0:	f2 01       	movw	r30, r4
  f2:	f1 82       	std	Z+1, r15	; 0x01
  f4:	e0 82       	st	Z, r14
  f6:	c4 01       	movw	r24, r8
  f8:	b6 01       	movw	r22, r12
  fa:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass12getParentDirEPKcPi>
  fe:	c4 01       	movw	r24, r8
 100:	c9 5b       	subi	r28, 0xB9	; 185
 102:	df 4f       	sbci	r29, 0xFF	; 255
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	0f 91       	pop	r16
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	bf 90       	pop	r11
 120:	af 90       	pop	r10
 122:	9f 90       	pop	r9
 124:	8f 90       	pop	r8
 126:	7f 90       	pop	r7
 128:	6f 90       	pop	r6
 12a:	5f 90       	pop	r5
 12c:	4f 90       	pop	r4
 12e:	08 95       	ret

Disassembly of section .text._ZN7SDClass4openEPKch:

00000000 <_ZN7SDClass4openEPKch>:
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	df 93       	push	r29
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	c6 57       	subi	r28, 0x76	; 118
  18:	d0 40       	sbci	r29, 0x00	; 0
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	7c 01       	movw	r14, r24
  26:	5a 01       	movw	r10, r20
  28:	d2 2e       	mov	r13, r18
  2a:	ce 01       	movw	r24, r28
  2c:	86 5a       	subi	r24, 0xA6	; 166
  2e:	9f 4f       	sbci	r25, 0xFF	; 255
  30:	9e 01       	movw	r18, r28
  32:	2f 5f       	subi	r18, 0xFF	; 255
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	3f 4f       	sbci	r19, 0xFF	; 255
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  3a:	09 81       	ldd	r16, Y+1	; 0x01
  3c:	1a 81       	ldd	r17, Y+2	; 0x02
  3e:	0a 0d       	add	r16, r10
  40:	1b 1d       	adc	r17, r11
  42:	f8 01       	movw	r30, r16
  44:	80 81       	ld	r24, Z
  46:	88 23       	and	r24, r24
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN7SDClass4openEPKch+0x4a>
  4a:	ce 01       	movw	r24, r28
  4c:	cd 96       	adiw	r24, 0x3d	; 61
  4e:	be 01       	movw	r22, r28
  50:	66 5a       	subi	r22, 0xA6	; 166
  52:	7f 4f       	sbci	r23, 0xFF	; 255
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  58:	c7 01       	movw	r24, r14
  5a:	be 01       	movw	r22, r28
  5c:	63 5c       	subi	r22, 0xC3	; 195
  5e:	7f 4f       	sbci	r23, 0xFF	; 255
  60:	40 e0       	ldi	r20, 0x00	; 0
  62:	50 e0       	ldi	r21, 0x00	; 0
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN7SDClass4openEPKch+0x66>
  66:	1b a2       	std	Y+35, r1	; 0x23
  68:	1a a2       	std	Y+34, r1	; 0x22
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	99 a3       	std	Y+33, r25	; 0x21
  70:	88 a3       	std	Y+32, r24	; 0x20
  72:	1d a2       	std	Y+37, r1	; 0x25
  74:	a0 96       	adiw	r28, 0x20	; 32
  76:	8f ad       	ldd	r24, Y+63	; 0x3f
  78:	a0 97       	sbiw	r28, 0x20	; 32
  7a:	88 23       	and	r24, r24
  7c:	01 f0       	breq	.+0      	; 0x7e <_ZN7SDClass4openEPKch+0x7e>
  7e:	82 50       	subi	r24, 0x02	; 2
  80:	82 30       	cpi	r24, 0x02	; 2
  82:	00 f4       	brcc	.+0      	; 0x84 <_ZN7SDClass4openEPKch+0x84>
  84:	ce 01       	movw	r24, r28
  86:	80 96       	adiw	r24, 0x20	; 32
  88:	60 e0       	ldi	r22, 0x00	; 0
  8a:	70 e0       	ldi	r23, 0x00	; 0
  8c:	a8 01       	movw	r20, r16
  8e:	2d 2d       	mov	r18, r13
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  94:	88 23       	and	r24, r24
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN7SDClass4openEPKch+0x98>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN7SDClass4openEPKch+0x9a>
  9a:	ce 01       	movw	r24, r28
  9c:	80 96       	adiw	r24, 0x20	; 32
  9e:	be 01       	movw	r22, r28
  a0:	66 5a       	subi	r22, 0xA6	; 166
  a2:	7f 4f       	sbci	r23, 0xFF	; 255
  a4:	a8 01       	movw	r20, r16
  a6:	2d 2d       	mov	r18, r13
  a8:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  ac:	88 23       	and	r24, r24
  ae:	01 f4       	brne	.+0      	; 0xb0 <_ZN7SDClass4openEPKch+0xb0>
  b0:	c7 01       	movw	r24, r14
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN7SDClass4openEPKch+0xb8>
  b8:	ce 01       	movw	r24, r28
  ba:	86 5a       	subi	r24, 0xA6	; 166
  bc:	9f 4f       	sbci	r25, 0xFF	; 255
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  c2:	8d 2d       	mov	r24, r13
  c4:	86 70       	andi	r24, 0x06	; 6
  c6:	01 f0       	breq	.+0      	; 0xc8 <_ZN7SDClass4openEPKch+0xc8>
  c8:	4b a9       	ldd	r20, Y+51	; 0x33
  ca:	5c a9       	ldd	r21, Y+52	; 0x34
  cc:	6d a9       	ldd	r22, Y+53	; 0x35
  ce:	7e a9       	ldd	r23, Y+54	; 0x36
  d0:	ce 01       	movw	r24, r28
  d2:	80 96       	adiw	r24, 0x20	; 32
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  d8:	ce 01       	movw	r24, r28
  da:	03 96       	adiw	r24, 0x03	; 3
  dc:	be 01       	movw	r22, r28
  de:	60 5e       	subi	r22, 0xE0	; 224
  e0:	7f 4f       	sbci	r23, 0xFF	; 255
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  e6:	c7 01       	movw	r24, r14
  e8:	be 01       	movw	r22, r28
  ea:	6d 5f       	subi	r22, 0xFD	; 253
  ec:	7f 4f       	sbci	r23, 0xFF	; 255
  ee:	a8 01       	movw	r20, r16
  f0:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass4openEPKch>
  f4:	c7 01       	movw	r24, r14
  f6:	ca 58       	subi	r28, 0x8A	; 138
  f8:	df 4f       	sbci	r29, 0xFF	; 255
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	1f 91       	pop	r17
 10a:	0f 91       	pop	r16
 10c:	ff 90       	pop	r15
 10e:	ef 90       	pop	r14
 110:	df 90       	pop	r13
 112:	bf 90       	pop	r11
 114:	af 90       	pop	r10
 116:	08 95       	ret

Disassembly of section .text._ZN7SDClass6existsEPc:

00000000 <_ZN7SDClass6existsEPc>:
   0:	9c 01       	movw	r18, r24
   2:	26 5d       	subi	r18, 0xD6	; 214
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	40 e0       	ldi	r20, 0x00	; 0
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	20 e0       	ldi	r18, 0x00	; 0
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass6existsEPc>
  16:	08 95       	ret

Disassembly of section .text._ZN7SDClass5mkdirEPc:

00000000 <_ZN7SDClass5mkdirEPc>:
   0:	9c 01       	movw	r18, r24
   2:	26 5d       	subi	r18, 0xD6	; 214
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	40 e0       	ldi	r20, 0x00	; 0
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5mkdirEPc>
  16:	08 95       	ret

Disassembly of section .text._ZN7SDClass5rmdirEPc:

00000000 <_ZN7SDClass5rmdirEPc>:
   0:	9c 01       	movw	r18, r24
   2:	26 5d       	subi	r18, 0xD6	; 214
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	40 e0       	ldi	r20, 0x00	; 0
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass5rmdirEPc>
  16:	08 95       	ret

Disassembly of section .text._ZN7SDClass6removeEPc:

00000000 <_ZN7SDClass6removeEPc>:
   0:	9c 01       	movw	r18, r24
   2:	26 5d       	subi	r18, 0xD6	; 214
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	40 e0       	ldi	r20, 0x00	; 0
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7SDClass6removeEPc>
  16:	08 95       	ret

Disassembly of section .text._ZN4File12openNextFileEh:

00000000 <_ZN4File12openNextFileEh>:
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	cd b7       	in	r28, 0x3d	; 61
  10:	de b7       	in	r29, 0x3e	; 62
  12:	c7 56       	subi	r28, 0x67	; 103
  14:	d0 40       	sbci	r29, 0x00	; 0
  16:	0f b6       	in	r0, 0x3f	; 63
  18:	f8 94       	cli
  1a:	de bf       	out	0x3e, r29	; 62
  1c:	0f be       	out	0x3f, r0	; 63
  1e:	cd bf       	out	0x3d, r28	; 61
  20:	8c 01       	movw	r16, r24
  22:	7b 01       	movw	r14, r22
  24:	d4 2e       	mov	r13, r20
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN4File12openNextFileEh+0x28>
  28:	29 96       	adiw	r28, 0x09	; 9
  2a:	8f ad       	ldd	r24, Y+63	; 0x3f
  2c:	29 97       	sbiw	r28, 0x09	; 9
  2e:	88 23       	and	r24, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN4File12openNextFileEh+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN4File12openNextFileEh+0x34>
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	85 3e       	cpi	r24, 0xE5	; 229
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN4File12openNextFileEh+0x38>
  38:	8e 32       	cpi	r24, 0x2E	; 46
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN4File12openNextFileEh+0x3c>
  3c:	64 96       	adiw	r28, 0x14	; 20
  3e:	8f ad       	ldd	r24, Y+63	; 0x3f
  40:	64 97       	sbiw	r28, 0x14	; 20
  42:	83 fd       	sbrc	r24, 3
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN4File12openNextFileEh+0x46>
  46:	1e a6       	std	Y+46, r1	; 0x2e
  48:	1d a6       	std	Y+45, r1	; 0x2d
  4a:	80 e0       	ldi	r24, 0x00	; 0
  4c:	90 e0       	ldi	r25, 0x00	; 0
  4e:	9c a7       	std	Y+44, r25	; 0x2c
  50:	8b a7       	std	Y+43, r24	; 0x2b
  52:	18 aa       	std	Y+48, r1	; 0x30
  54:	ce 01       	movw	r24, r28
  56:	88 5b       	subi	r24, 0xB8	; 184
  58:	9f 4f       	sbci	r25, 0xFF	; 255
  5a:	be 01       	movw	r22, r28
  5c:	6f 5f       	subi	r22, 0xFF	; 255
  5e:	7f 4f       	sbci	r23, 0xFF	; 255
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  64:	f7 01       	movw	r30, r14
  66:	61 8d       	ldd	r22, Z+25	; 0x19
  68:	72 8d       	ldd	r23, Z+26	; 0x1a
  6a:	ce 01       	movw	r24, r28
  6c:	8b 96       	adiw	r24, 0x2b	; 43
  6e:	ae 01       	movw	r20, r28
  70:	4f 5f       	subi	r20, 0xFF	; 255
  72:	5f 4f       	sbci	r21, 0xFF	; 255
  74:	2d 2d       	mov	r18, r13
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  7a:	88 23       	and	r24, r24
  7c:	01 f0       	breq	.+0      	; 0x7e <_ZN4File12openNextFileEh+0x7e>
  7e:	ce 01       	movw	r24, r28
  80:	0e 96       	adiw	r24, 0x0e	; 14
  82:	be 01       	movw	r22, r28
  84:	65 5d       	subi	r22, 0xD5	; 213
  86:	7f 4f       	sbci	r23, 0xFF	; 255
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  8c:	c8 01       	movw	r24, r16
  8e:	be 01       	movw	r22, r28
  90:	62 5f       	subi	r22, 0xF2	; 242
  92:	7f 4f       	sbci	r23, 0xFF	; 255
  94:	ae 01       	movw	r20, r28
  96:	4f 5f       	subi	r20, 0xFF	; 255
  98:	5f 4f       	sbci	r21, 0xFF	; 255
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN4File12openNextFileEh+0xa0>
  a0:	f7 01       	movw	r30, r14
  a2:	81 8d       	ldd	r24, Z+25	; 0x19
  a4:	92 8d       	ldd	r25, Z+26	; 0x1a
  a6:	be 01       	movw	r22, r28
  a8:	68 5b       	subi	r22, 0xB8	; 184
  aa:	7f 4f       	sbci	r23, 0xFF	; 255
  ac:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  b0:	18 16       	cp	r1, r24
  b2:	04 f4       	brge	.+0      	; 0xb4 <_ZN4File12openNextFileEh+0xb4>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_ZN4File12openNextFileEh+0xb6>
  b6:	c8 01       	movw	r24, r16
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN4File12openNextFileEh>
  bc:	c8 01       	movw	r24, r16
  be:	c9 59       	subi	r28, 0x99	; 153
  c0:	df 4f       	sbci	r29, 0xFF	; 255
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	08 95       	ret

Disassembly of section .text._ZN4File15rewindDirectoryEv:

00000000 <_ZN4File15rewindDirectoryEv>:
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN4File15rewindDirectoryEv>
   a:	88 23       	and	r24, r24
   c:	01 f0       	breq	.+0      	; 0xe <_ZN4File15rewindDirectoryEv+0xe>
   e:	e9 8d       	ldd	r30, Y+25	; 0x19
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
  10:	fa 8d       	ldd	r31, Y+26	; 0x1a
  12:	16 82       	std	Z+6, r1	; 0x06
  14:	17 82       	std	Z+7, r1	; 0x07
  16:	10 86       	std	Z+8, r1	; 0x08
  18:	11 86       	std	Z+9, r1	; 0x09
  1a:	12 86       	std	Z+10, r1	; 0x0a
  1c:	13 86       	std	Z+11, r1	; 0x0b
  1e:	14 86       	std	Z+12, r1	; 0x0c
  20:	15 86       	std	Z+13, r1	; 0x0d
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text.startup._GLOBAL__sub_I__Z20getNextPathComponentPcPjS_:

00000000 <_GLOBAL__sub_I__Z20getNextPathComponentPcPjS_>:
   0:	10 92 00 00 	sts	0x0000, r1
   4:	10 92 00 00 	sts	0x0000, r1
   8:	10 92 00 00 	sts	0x0000, r1
   c:	10 92 00 00 	sts	0x0000, r1
  10:	82 e0       	ldi	r24, 0x02	; 2
  12:	90 e0       	ldi	r25, 0x00	; 0
  14:	a0 e0       	ldi	r26, 0x00	; 0
  16:	b0 e0       	ldi	r27, 0x00	; 0
  18:	80 93 00 00 	sts	0x0000, r24
  1c:	90 93 00 00 	sts	0x0000, r25
  20:	a0 93 00 00 	sts	0x0000, r26
  24:	b0 93 00 00 	sts	0x0000, r27
  28:	10 92 00 00 	sts	0x0000, r1
  2c:	10 92 00 00 	sts	0x0000, r1
  30:	10 92 00 00 	sts	0x0000, r1
 * \brief Access FAT16 and FAT32 files on SD and SDHC cards.
 */
class SdFile : public Print {
 public:
  /** Create an instance of SdFile. */
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	90 93 00 00 	sts	0x0000, r25
  3c:	80 93 00 00 	sts	0x0000, r24
  40:	10 92 00 00 	sts	0x0000, r1
  44:	08 95       	ret

Sd2Card.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00002034  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00004e24  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZL7spiSendh 0000000a  00000000  00000000  00006e8c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZL6spiRecv 0000000a  00000000  00000000  00006e96  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN7Sd2Card14chipSelectHighEv 0000000c  00000000  00000000  00006ea0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN7Sd2Card13chipSelectLowEv 0000000c  00000000  00000000  00006eac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN7Sd2Card7readEndEv 00000046  00000000  00000000  00006eb8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN7Sd2Card16partialBlockReadEh 00000028  00000000  00000000  00006efe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN7Sd2Card10setSckRateEh 00000044  00000000  00000000  00006f26  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN7Sd2Card11waitNotBusyEj 00000038  00000000  00000000  00006f6a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN7Sd2Card11cardCommandEhm 0000009e  00000000  00000000  00006fa2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN7Sd2Card4initEhh 00000192  00000000  00000000  00007040  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN7Sd2Card14waitStartBlockEv 00000050  00000000  00000000  000071d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN7Sd2Card12readRegisterEhPv 00000072  00000000  00000000  00007222  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN7Sd2Card22eraseSingleBlockEnableEv 00000044  00000000  00000000  00007294  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN7Sd2Card5eraseEmm 000000c8  00000000  00000000  000072d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN7Sd2Card8cardSizeEv 0000010c  00000000  00000000  000073a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN7Sd2Card8readDataEmjjPh 00000140  00000000  00000000  000074ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN7Sd2Card9readBlockEmPh 00000020  00000000  00000000  000075ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN7Sd2Card9writeDataEhPKh 00000062  00000000  00000000  0000760c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN7Sd2Card9writeDataEPKh 0000003a  00000000  00000000  0000766e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN7Sd2Card10writeBlockEmPKh 000000b2  00000000  00000000  000076a8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN7Sd2Card10writeStartEmm 000000a0  00000000  00000000  0000775a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN7Sd2Card9writeStopEv 00000042  00000000  00000000  000077fa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE

Disassembly of section .text._ZL7spiSendh:

00000000 <_ZL7spiSendh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8e bd       	out	0x2e, r24	; 46
   2:	0d b4       	in	r0, 0x2d	; 45
   4:	07 fe       	sbrs	r0, 7
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	00 c0       	rjmp	.+0      	; 0x8 <_ZL7spiSendh+0x8>
   8:	08 95       	ret

Disassembly of section .text._ZL6spiRecv:

00000000 <_ZL6spiRecv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8f ef       	ldi	r24, 0xFF	; 255
   2:	0e 94 00 00 	call	0	; 0x0 <_ZL6spiRecv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	8e b5       	in	r24, 0x2e	; 46
   8:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card14chipSelectHighEv:

00000000 <_ZN7Sd2Card14chipSelectHighEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	61 e0       	ldi	r22, 0x01	; 1
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card14chipSelectHighEv>
   a:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card13chipSelectLowEv:

00000000 <_ZN7Sd2Card13chipSelectLowEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	fc 01       	movw	r30, r24
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	60 e0       	ldi	r22, 0x00	; 0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card13chipSelectLowEv>
   a:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card7readEndEv:

00000000 <_ZN7Sd2Card7readEndEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	8e 81       	ldd	r24, Y+6	; 0x06
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_ZN7Sd2Card7readEndEv+0xc>
   c:	8f ef       	ldi	r24, 0xFF	; 255
   e:	8e bd       	out	0x2e, r24	; 46
  10:	4f ef       	ldi	r20, 0xFF	; 255
  spiSend(STOP_TRAN_TOKEN);
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN7Sd2Card7readEndEv+0x14>
  14:	0d b4       	in	r0, 0x2d	; 45
  16:	07 fe       	sbrs	r0, 7
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN7Sd2Card7readEndEv+0x1a>
  1a:	4e bd       	out	0x2e, r20	; 46
  1c:	8f 81       	ldd	r24, Y+7	; 0x07
  1e:	98 85       	ldd	r25, Y+8	; 0x08
  20:	9c 01       	movw	r18, r24
  22:	2f 5f       	subi	r18, 0xFF	; 255
  24:	3f 4f       	sbci	r19, 0xFF	; 255
  chipSelectHigh();
  26:	38 87       	std	Y+8, r19	; 0x08
  28:	2f 83       	std	Y+7, r18	; 0x07
  2a:	22 e0       	ldi	r18, 0x02	; 2
  return true;
  2c:	81 30       	cpi	r24, 0x01	; 1
  2e:	92 07       	cpc	r25, r18
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
  30:	00 f0       	brcs	.+0      	; 0x32 <_ZN7Sd2Card7readEndEv+0x32>
  32:	0d b4       	in	r0, 0x2d	; 45

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	07 fe       	sbrs	r0, 7
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN7Sd2Card7readEndEv+0x38>
  38:	ce 01       	movw	r24, r28
  return false;
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card7readEndEv>
}
  3e:	1e 82       	std	Y+6, r1	; 0x06
  40:	df 91       	pop	r29
  42:	cf 91       	pop	r28
  44:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card16partialBlockReadEh:

00000000 <_ZN7Sd2Card16partialBlockReadEh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 93       	push	r29
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8c 01       	movw	r16, r24
  10:	69 83       	std	Y+1, r22	; 0x01
  spiSend(STOP_TRAN_TOKEN);
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card16partialBlockReadEh>
  16:	69 81       	ldd	r22, Y+1	; 0x01
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	f8 01       	movw	r30, r16
  1a:	61 87       	std	Z+9, r22	; 0x09
  1c:	0f 90       	pop	r0
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	1f 91       	pop	r17
  24:	0f 91       	pop	r16
  chipSelectHigh();
  26:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card10setSckRateEh:

00000000 <_ZN7Sd2Card10setSckRateEh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	67 30       	cpi	r22, 0x07	; 7
   2:	00 f0       	brcs	.+0      	; 0x4 <_ZN7Sd2Card10setSckRateEh+0x4>
   4:	26 e1       	ldi	r18, 0x16	; 22
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	fc 01       	movw	r30, r24
   8:	25 83       	std	Z+5, r18	; 0x05
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	08 95       	ret
   e:	96 2f       	mov	r25, r22
  10:	8d b5       	in	r24, 0x2d	; 45
  spiSend(STOP_TRAN_TOKEN);
  12:	60 fd       	sbrc	r22, 0
  14:	00 c0       	rjmp	.+0      	; 0x16 <_ZN7Sd2Card10setSckRateEh+0x16>
  16:	66 30       	cpi	r22, 0x06	; 6
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN7Sd2Card10setSckRateEh+0x1a>
  1a:	8e 7f       	andi	r24, 0xFE	; 254
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN7Sd2Card10setSckRateEh+0x1e>
  1e:	81 60       	ori	r24, 0x01	; 1
  20:	8d bd       	out	0x2d, r24	; 45
  22:	8c b5       	in	r24, 0x2c	; 44
  24:	8c 7f       	andi	r24, 0xFC	; 252
  chipSelectHigh();
  26:	8c bd       	out	0x2c, r24	; 44
  28:	3c b5       	in	r19, 0x2c	; 44
  2a:	92 ff       	sbrs	r25, 2
  return true;
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN7Sd2Card10setSckRateEh+0x2e>
  2e:	22 e0       	ldi	r18, 0x02	; 2
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN7Sd2Card10setSckRateEh+0x32>
  32:	20 e0       	ldi	r18, 0x00	; 0

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	91 ff       	sbrs	r25, 1
  38:	80 e0       	ldi	r24, 0x00	; 0
  return false;
  3a:	83 2b       	or	r24, r19
}
  3c:	82 2b       	or	r24, r18
  3e:	8c bd       	out	0x2c, r24	; 44
  40:	81 e0       	ldi	r24, 0x01	; 1
  42:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card11waitNotBusyEj:

00000000 <_ZN7Sd2Card11waitNotBusyEj>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 93       	push	r29
   8:	eb 01       	movw	r28, r22
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11waitNotBusyEj>
   e:	8b 01       	movw	r16, r22
  10:	9c 01       	movw	r18, r24
  spiSend(STOP_TRAN_TOKEN);
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11waitNotBusyEj>
  16:	8f 3f       	cpi	r24, 0xFF	; 255
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN7Sd2Card11waitNotBusyEj+0x1a>
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11waitNotBusyEj>
  1e:	60 1b       	sub	r22, r16
  20:	71 0b       	sbc	r23, r17
  22:	6c 17       	cp	r22, r28
  24:	7d 07       	cpc	r23, r29
  chipSelectHigh();
  26:	00 f0       	brcs	.+0      	; 0x28 <_ZN7Sd2Card11waitNotBusyEj+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN7Sd2Card11waitNotBusyEj+0x2c>
  return true;
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	1f 91       	pop	r17

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card11cardCommandEhm:

00000000 <_ZN7Sd2Card11cardCommandEhm>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	bf 92       	push	r11
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  spiSend(STOP_TRAN_TOKEN);
  12:	8c 01       	movw	r16, r24
  14:	f6 2e       	mov	r15, r22
  16:	49 01       	movw	r8, r18
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	5a 01       	movw	r10, r20
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  1e:	c8 01       	movw	r24, r16
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  24:	c8 01       	movw	r24, r16
  chipSelectHigh();
  26:	6c e2       	ldi	r22, 0x2C	; 44
  28:	71 e0       	ldi	r23, 0x01	; 1
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  return true;
  2e:	8f 2d       	mov	r24, r15
  30:	80 64       	ori	r24, 0x40	; 64
  32:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  36:	c8 e1       	ldi	r28, 0x18	; 24
  38:	d0 e0       	ldi	r29, 0x00	; 0
  return false;
  3a:	d5 01       	movw	r26, r10
}
  3c:	c4 01       	movw	r24, r8
  3e:	0c 2e       	mov	r0, r28
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN7Sd2Card11cardCommandEhm+0x42>
  42:	b6 95       	lsr	r27
  44:	a7 95       	ror	r26
  46:	97 95       	ror	r25
  48:	87 95       	ror	r24
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <_ZN7Sd2Card11cardCommandEhm+0x4e>
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  52:	28 97       	sbiw	r28, 0x08	; 8
  54:	8f ef       	ldi	r24, 0xFF	; 255
  56:	c8 3f       	cpi	r28, 0xF8	; 248
  58:	d8 07       	cpc	r29, r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN7Sd2Card11cardCommandEhm+0x5c>
  5c:	ff 20       	and	r15, r15
  5e:	01 f0       	breq	.+0      	; 0x60 <_ZN7Sd2Card11cardCommandEhm+0x60>
  60:	e8 e0       	ldi	r30, 0x08	; 8
  62:	fe 16       	cp	r15, r30
  64:	01 f0       	breq	.+0      	; 0x66 <_ZN7Sd2Card11cardCommandEhm+0x66>
  66:	8f ef       	ldi	r24, 0xFF	; 255
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN7Sd2Card11cardCommandEhm+0x6a>
  6a:	85 e9       	ldi	r24, 0x95	; 149
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN7Sd2Card11cardCommandEhm+0x6e>
  6e:	87 e8       	ldi	r24, 0x87	; 135
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  74:	c0 e0       	ldi	r28, 0x00	; 0
  76:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card11cardCommandEhm>
  7a:	f8 01       	movw	r30, r16
  7c:	82 87       	std	Z+10, r24	; 0x0a
  7e:	87 ff       	sbrs	r24, 7
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN7Sd2Card11cardCommandEhm+0x82>
  82:	cf 3f       	cpi	r28, 0xFF	; 255
  84:	01 f0       	breq	.+0      	; 0x86 <_ZN7Sd2Card11cardCommandEhm+0x86>
  86:	cf 5f       	subi	r28, 0xFF	; 255
  88:	00 c0       	rjmp	.+0      	; 0x8a <_ZN7Sd2Card11cardCommandEhm+0x8a>
  8a:	df 91       	pop	r29
  8c:	cf 91       	pop	r28
  8e:	1f 91       	pop	r17
  90:	0f 91       	pop	r16
  92:	ff 90       	pop	r15
  94:	bf 90       	pop	r11
  96:	af 90       	pop	r10
  98:	9f 90       	pop	r9
  9a:	8f 90       	pop	r8
  9c:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card4initEhh:

00000000 <_ZN7Sd2Card4initEhh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  spiSend(STOP_TRAN_TOKEN);
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	06 2f       	mov	r16, r22
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	1b 86       	std	Y+11, r1	; 0x0b
  1a:	19 86       	std	Y+9, r1	; 0x09
  1c:	1e 82       	std	Y+6, r1	; 0x06
  1e:	1d 82       	std	Y+5, r1	; 0x05
  20:	4c 83       	std	Y+4, r20	; 0x04
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  chipSelectHigh();
  26:	dc 01       	movw	r26, r24
  28:	cb 01       	movw	r24, r22
  2a:	5c 01       	movw	r10, r24
  return true;
  2c:	8c 81       	ldd	r24, Y+4	; 0x04
  2e:	61 e0       	ldi	r22, 0x01	; 1
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	ce 01       	movw	r24, r28
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  return false;
  3a:	8c e0       	ldi	r24, 0x0C	; 12
}
  3c:	60 e0       	ldi	r22, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  42:	8b e0       	ldi	r24, 0x0B	; 11
  44:	61 e0       	ldi	r22, 0x01	; 1
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  4a:	8d e0       	ldi	r24, 0x0D	; 13
  4c:	61 e0       	ldi	r22, 0x01	; 1
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  52:	8a e0       	ldi	r24, 0x0A	; 10
  54:	61 e0       	ldi	r22, 0x01	; 1
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  5a:	8a e0       	ldi	r24, 0x0A	; 10
  5c:	61 e0       	ldi	r22, 0x01	; 1
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  62:	83 e5       	ldi	r24, 0x53	; 83
  64:	8c bd       	out	0x2c, r24	; 44
  66:	8d b5       	in	r24, 0x2d	; 45
  68:	8e 7f       	andi	r24, 0xFE	; 254
  6a:	8d bd       	out	0x2d, r24	; 45
  6c:	1a e0       	ldi	r17, 0x0A	; 10
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  74:	11 50       	subi	r17, 0x01	; 1
  76:	01 f4       	brne	.+0      	; 0x78 <_ZN7Sd2Card4initEhh+0x78>
  78:	ce 01       	movw	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZN7Sd2Card4initEhh+0x80>
  80:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  84:	6a 19       	sub	r22, r10
  86:	7b 09       	sbc	r23, r11
  88:	87 e0       	ldi	r24, 0x07	; 7
  8a:	61 3d       	cpi	r22, 0xD1	; 209
  8c:	78 07       	cpc	r23, r24
  8e:	00 f0       	brcs	.+0      	; 0x90 <_ZN7Sd2Card4initEhh+0x90>
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN7Sd2Card4initEhh+0x94>
  94:	ce 01       	movw	r24, r28
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	50 e0       	ldi	r21, 0x00	; 0
  a0:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  a4:	18 2f       	mov	r17, r24
  a6:	8a 87       	std	Y+10, r24	; 0x0a
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	01 f4       	brne	.+0      	; 0xac <_ZN7Sd2Card4initEhh+0xac>
  ac:	ce 01       	movw	r24, r28
  ae:	68 e0       	ldi	r22, 0x08	; 8
  b0:	2a ea       	ldi	r18, 0xAA	; 170
  b2:	31 e0       	ldi	r19, 0x01	; 1
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  bc:	82 ff       	sbrs	r24, 2
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN7Sd2Card4initEhh+0xc0>
  c0:	1b 87       	std	Y+11, r17	; 0x0b
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN7Sd2Card4initEhh+0xc4>
  c4:	14 e0       	ldi	r17, 0x04	; 4
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  ca:	8a 87       	std	Y+10, r24	; 0x0a
  cc:	11 50       	subi	r17, 0x01	; 1
  ce:	01 f4       	brne	.+0      	; 0xd0 <_ZN7Sd2Card4initEhh+0xd0>
  d0:	8a 3a       	cpi	r24, 0xAA	; 170
  d2:	01 f0       	breq	.+0      	; 0xd4 <_ZN7Sd2Card4initEhh+0xd4>
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <_ZN7Sd2Card4initEhh+0xd8>
  d8:	82 e0       	ldi	r24, 0x02	; 2
  da:	8b 87       	std	Y+11, r24	; 0x0b
  dc:	8b 85       	ldd	r24, Y+11	; 0x0b
  de:	82 30       	cpi	r24, 0x02	; 2
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZN7Sd2Card4initEhh+0xe2>
  e2:	c1 2c       	mov	r12, r1
  e4:	d1 2c       	mov	r13, r1
  e6:	e1 2c       	mov	r14, r1
  e8:	80 e4       	ldi	r24, 0x40	; 64
  ea:	f8 2e       	mov	r15, r24
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN7Sd2Card4initEhh+0xee>
  ee:	cc 24       	eor	r12, r12
  f0:	dd 24       	eor	r13, r13
  f2:	76 01       	movw	r14, r12
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <_ZN7Sd2Card4initEhh+0xf6>
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
  fa:	6a 19       	sub	r22, r10
  fc:	7b 09       	sbc	r23, r11
  fe:	87 e0       	ldi	r24, 0x07	; 7
 100:	61 3d       	cpi	r22, 0xD1	; 209
 102:	78 07       	cpc	r23, r24
 104:	00 f0       	brcs	.+0      	; 0x106 <_ZN7Sd2Card4initEhh+0x106>
 106:	88 e0       	ldi	r24, 0x08	; 8
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN7Sd2Card4initEhh+0x10a>
 10a:	ce 01       	movw	r24, r28
 10c:	67 e3       	ldi	r22, 0x37	; 55
 10e:	20 e0       	ldi	r18, 0x00	; 0
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	40 e0       	ldi	r20, 0x00	; 0
 114:	50 e0       	ldi	r21, 0x00	; 0
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 11a:	ce 01       	movw	r24, r28
 11c:	69 e2       	ldi	r22, 0x29	; 41
 11e:	a7 01       	movw	r20, r14
 120:	96 01       	movw	r18, r12
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 126:	8a 87       	std	Y+10, r24	; 0x0a
 128:	88 23       	and	r24, r24
 12a:	01 f4       	brne	.+0      	; 0x12c <_ZN7Sd2Card4initEhh+0x12c>
 12c:	8b 85       	ldd	r24, Y+11	; 0x0b
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	01 f4       	brne	.+0      	; 0x132 <_ZN7Sd2Card4initEhh+0x132>
 132:	ce 01       	movw	r24, r28
 134:	6a e3       	ldi	r22, 0x3A	; 58
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e0       	ldi	r20, 0x00	; 0
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 142:	88 23       	and	r24, r24
 144:	01 f0       	breq	.+0      	; 0x146 <_ZN7Sd2Card4initEhh+0x146>
 146:	86 e0       	ldi	r24, 0x06	; 6
 148:	8d 83       	std	Y+5, r24	; 0x05
 14a:	ce 01       	movw	r24, r28
 14c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	00 c0       	rjmp	.+0      	; 0x154 <_ZN7Sd2Card4initEhh+0x154>
 154:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 158:	80 7c       	andi	r24, 0xC0	; 192
 15a:	80 3c       	cpi	r24, 0xC0	; 192
 15c:	01 f4       	brne	.+0      	; 0x15e <_ZN7Sd2Card4initEhh+0x15e>
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	8b 87       	std	Y+11, r24	; 0x0b
 162:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 16a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 16e:	ce 01       	movw	r24, r28
 170:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 174:	ce 01       	movw	r24, r28
 176:	60 2f       	mov	r22, r16
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card4initEhh>
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	ff 90       	pop	r15
 186:	ef 90       	pop	r14
 188:	df 90       	pop	r13
 18a:	cf 90       	pop	r12
 18c:	bf 90       	pop	r11
 18e:	af 90       	pop	r10
 190:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card14waitStartBlockEv:

00000000 <_ZN7Sd2Card14waitStartBlockEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card14waitStartBlockEv>
   e:	8b 01       	movw	r16, r22
  10:	9c 01       	movw	r18, r24
  spiSend(STOP_TRAN_TOKEN);
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN7Sd2Card14waitStartBlockEv+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card14waitStartBlockEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	60 1b       	sub	r22, r16
  1a:	71 0b       	sbc	r23, r17
  1c:	81 e0       	ldi	r24, 0x01	; 1
  1e:	6d 32       	cpi	r22, 0x2D	; 45
  20:	78 07       	cpc	r23, r24
  22:	00 f0       	brcs	.+0      	; 0x24 <_ZN7Sd2Card14waitStartBlockEv+0x24>
  24:	8f e0       	ldi	r24, 0x0F	; 15
  chipSelectHigh();
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN7Sd2Card14waitStartBlockEv+0x28>
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card14waitStartBlockEv>
  return true;
  2c:	8a 87       	std	Y+10, r24	; 0x0a
  2e:	8f 3f       	cpi	r24, 0xFF	; 255
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN7Sd2Card14waitStartBlockEv+0x32>
  32:	8e 3f       	cpi	r24, 0xFE	; 254

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN7Sd2Card14waitStartBlockEv+0x36>
  36:	8d e0       	ldi	r24, 0x0D	; 13
  38:	8d 83       	std	Y+5, r24	; 0x05
  return false;
  3a:	ce 01       	movw	r24, r28
}
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card14waitStartBlockEv>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN7Sd2Card14waitStartBlockEv+0x44>
  44:	81 e0       	ldi	r24, 0x01	; 1
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card12readRegisterEhPv:

00000000 <_ZN7Sd2Card12readRegisterEhPv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	8a 01       	movw	r16, r20
  10:	20 e0       	ldi	r18, 0x00	; 0
  spiSend(STOP_TRAN_TOKEN);
  12:	30 e0       	ldi	r19, 0x00	; 0
  14:	40 e0       	ldi	r20, 0x00	; 0
  16:	50 e0       	ldi	r21, 0x00	; 0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN7Sd2Card12readRegisterEhPv+0x20>
  20:	8e e0       	ldi	r24, 0x0E	; 14
  22:	8d 83       	std	Y+5, r24	; 0x05
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7Sd2Card12readRegisterEhPv+0x26>
  chipSelectHigh();
  26:	ce 01       	movw	r24, r28
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  return true;
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN7Sd2Card12readRegisterEhPv+0x30>
  30:	78 01       	movw	r14, r16
  32:	00 e0       	ldi	r16, 0x00	; 0

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	10 e0       	ldi	r17, 0x00	; 0
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  return false;
  3a:	f7 01       	movw	r30, r14
}
  3c:	81 93       	st	Z+, r24
  3e:	7f 01       	movw	r14, r30
  40:	0f 5f       	subi	r16, 0xFF	; 255
  42:	1f 4f       	sbci	r17, 0xFF	; 255
  44:	00 31       	cpi	r16, 0x10	; 16
  46:	11 05       	cpc	r17, r1
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN7Sd2Card12readRegisterEhPv+0x4a>
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  52:	ce 01       	movw	r24, r28
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN7Sd2Card12readRegisterEhPv+0x5c>
  5c:	ce 01       	movw	r24, r28
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card12readRegisterEhPv>
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	df 91       	pop	r29
  66:	cf 91       	pop	r28
  68:	1f 91       	pop	r17
  6a:	0f 91       	pop	r16
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card22eraseSingleBlockEnableEv:

00000000 <_ZN7Sd2Card22eraseSingleBlockEnableEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	de b7       	in	r29, 0x3e	; 62
   8:	60 97       	sbiw	r28, 0x10	; 16
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  spiSend(STOP_TRAN_TOKEN);
  12:	cd bf       	out	0x3d, r28	; 61
  14:	69 e0       	ldi	r22, 0x09	; 9
  16:	ae 01       	movw	r20, r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	4f 5f       	subi	r20, 0xFF	; 255
  1a:	5f 4f       	sbci	r21, 0xFF	; 255
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card22eraseSingleBlockEnableEv>
  20:	88 23       	and	r24, r24
  22:	01 f0       	breq	.+0      	; 0x24 <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x24>
  24:	8b 85       	ldd	r24, Y+11	; 0x0b
  chipSelectHigh();
  26:	82 95       	swap	r24
  28:	86 95       	lsr	r24
  2a:	86 95       	lsr	r24
  return true;
  2c:	81 70       	andi	r24, 0x01	; 1
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7Sd2Card22eraseSingleBlockEnableEv+0x30>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	60 96       	adiw	r28, 0x10	; 16

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	0f b6       	in	r0, 0x3f	; 63
  36:	f8 94       	cli
  38:	de bf       	out	0x3e, r29	; 62
  return false;
  3a:	0f be       	out	0x3f, r0	; 63
}
  3c:	cd bf       	out	0x3d, r28	; 61
  3e:	df 91       	pop	r29
  40:	cf 91       	pop	r28
  42:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card5eraseEmm:

00000000 <_ZN7Sd2Card5eraseEmm>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  spiSend(STOP_TRAN_TOKEN);
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	ec 01       	movw	r28, r24
  1a:	6a 01       	movw	r12, r20
  1c:	7b 01       	movw	r14, r22
  1e:	48 01       	movw	r8, r16
  20:	59 01       	movw	r10, r18
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  chipSelectHigh();
  26:	88 23       	and	r24, r24
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN7Sd2Card5eraseEmm+0x2a>
  2a:	8b e0       	ldi	r24, 0x0B	; 11
  return true;
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN7Sd2Card5eraseEmm+0x2e>
  2e:	8b 85       	ldd	r24, Y+11	; 0x0b
  30:	83 30       	cpi	r24, 0x03	; 3
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN7Sd2Card5eraseEmm+0x34>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	99 e0       	ldi	r25, 0x09	; 9
  36:	cc 0c       	add	r12, r12
  38:	dd 1c       	adc	r13, r13
  return false;
  3a:	ee 1c       	adc	r14, r14
}
  3c:	ff 1c       	adc	r15, r15
  3e:	9a 95       	dec	r25
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN7Sd2Card5eraseEmm+0x42>
  42:	29 e0       	ldi	r18, 0x09	; 9
  44:	88 0c       	add	r8, r8
  46:	99 1c       	adc	r9, r9
  48:	aa 1c       	adc	r10, r10
  4a:	bb 1c       	adc	r11, r11
  4c:	2a 95       	dec	r18
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN7Sd2Card5eraseEmm+0x50>
  50:	ce 01       	movw	r24, r28
  52:	60 e2       	ldi	r22, 0x20	; 32
  54:	a7 01       	movw	r20, r14
  56:	96 01       	movw	r18, r12
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  5c:	88 23       	and	r24, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN7Sd2Card5eraseEmm+0x60>
  60:	ce 01       	movw	r24, r28
  62:	61 e2       	ldi	r22, 0x21	; 33
  64:	a5 01       	movw	r20, r10
  66:	94 01       	movw	r18, r8
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  6c:	88 23       	and	r24, r24
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZN7Sd2Card5eraseEmm+0x70>
  70:	ce 01       	movw	r24, r28
  72:	66 e2       	ldi	r22, 0x26	; 38
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	40 e0       	ldi	r20, 0x00	; 0
  7a:	50 e0       	ldi	r21, 0x00	; 0
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  80:	88 23       	and	r24, r24
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN7Sd2Card5eraseEmm+0x84>
  84:	8a e0       	ldi	r24, 0x0A	; 10
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN7Sd2Card5eraseEmm+0x88>
  88:	8c e0       	ldi	r24, 0x0C	; 12
  8a:	8d 83       	std	Y+5, r24	; 0x05
  8c:	ce 01       	movw	r24, r28
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN7Sd2Card5eraseEmm+0x96>
  96:	ce 01       	movw	r24, r28
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	1f 91       	pop	r17
  a4:	0f 91       	pop	r16
  a6:	ff 90       	pop	r15
  a8:	ef 90       	pop	r14
  aa:	df 90       	pop	r13
  ac:	cf 90       	pop	r12
  ae:	bf 90       	pop	r11
  b0:	af 90       	pop	r10
  b2:	9f 90       	pop	r9
  b4:	8f 90       	pop	r8
  b6:	08 95       	ret
  b8:	ce 01       	movw	r24, r28
  ba:	60 e1       	ldi	r22, 0x10	; 16
  bc:	77 e2       	ldi	r23, 0x27	; 39
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card5eraseEmm>
  c2:	88 23       	and	r24, r24
  c4:	01 f0       	breq	.+0      	; 0xc6 <_ZN7Sd2Card5eraseEmm+0xc6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <__SREG__+0x89>

Disassembly of section .text._ZN7Sd2Card8cardSizeEv:

00000000 <_ZN7Sd2Card8cardSizeEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 93       	push	r29
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	60 97       	sbiw	r28, 0x10	; 16
   e:	0f b6       	in	r0, 0x3f	; 63
  10:	f8 94       	cli
  spiSend(STOP_TRAN_TOKEN);
  12:	de bf       	out	0x3e, r29	; 62
  14:	0f be       	out	0x3f, r0	; 63
  16:	cd bf       	out	0x3d, r28	; 61
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	8c 01       	movw	r16, r24
  1a:	69 e0       	ldi	r22, 0x09	; 9
  1c:	ae 01       	movw	r20, r28
  1e:	4f 5f       	subi	r20, 0xFF	; 255
  20:	5f 4f       	sbci	r21, 0xFF	; 255
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card8cardSizeEv>
  chipSelectHigh();
  26:	88 23       	and	r24, r24
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN7Sd2Card8cardSizeEv+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN7Sd2Card8cardSizeEv+0x2c>
  return true;
  2c:	89 81       	ldd	r24, Y+1	; 0x01
  2e:	80 7c       	andi	r24, 0xC0	; 192
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN7Sd2Card8cardSizeEv+0x32>
  32:	2f 81       	ldd	r18, Y+7	; 0x07

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	23 70       	andi	r18, 0x03	; 3
  36:	92 2f       	mov	r25, r18
  38:	99 0f       	add	r25, r25
  return false;
  3a:	99 0f       	add	r25, r25
}
  3c:	80 e0       	ldi	r24, 0x00	; 0
  3e:	08 85       	ldd	r16, Y+8	; 0x08
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	00 0f       	add	r16, r16
  44:	11 1f       	adc	r17, r17
  46:	00 0f       	add	r16, r16
  48:	11 1f       	adc	r17, r17
  4a:	08 2b       	or	r16, r24
  4c:	19 2b       	or	r17, r25
  4e:	89 85       	ldd	r24, Y+9	; 0x09
  50:	82 95       	swap	r24
  52:	86 95       	lsr	r24
  54:	86 95       	lsr	r24
  56:	83 70       	andi	r24, 0x03	; 3
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	08 2b       	or	r16, r24
  5c:	19 2b       	or	r17, r25
  5e:	0f 5f       	subi	r16, 0xFF	; 255
  60:	1f 4f       	sbci	r17, 0xFF	; 255
  62:	20 e0       	ldi	r18, 0x00	; 0
  64:	30 e0       	ldi	r19, 0x00	; 0
  66:	4a 85       	ldd	r20, Y+10	; 0x0a
  68:	43 70       	andi	r20, 0x03	; 3
  6a:	44 0f       	add	r20, r20
  6c:	8b 85       	ldd	r24, Y+11	; 0x0b
  6e:	88 1f       	adc	r24, r24
  70:	88 27       	eor	r24, r24
  72:	88 1f       	adc	r24, r24
  74:	48 2b       	or	r20, r24
  76:	8e 81       	ldd	r24, Y+6	; 0x06
  78:	8f 70       	andi	r24, 0x0F	; 15
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	84 0f       	add	r24, r20
  7e:	91 1d       	adc	r25, r1
  80:	07 97       	sbiw	r24, 0x07	; 7
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN7Sd2Card8cardSizeEv+0x84>
  84:	00 0f       	add	r16, r16
  86:	11 1f       	adc	r17, r17
  88:	22 1f       	adc	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	8a 95       	dec	r24
  8e:	02 f4       	brpl	.+0      	; 0x90 <_ZN7Sd2Card8cardSizeEv+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN7Sd2Card8cardSizeEv+0x92>
  92:	80 34       	cpi	r24, 0x40	; 64
  94:	01 f4       	brne	.+0      	; 0x96 <_ZN7Sd2Card8cardSizeEv+0x96>
  96:	08 85       	ldd	r16, Y+8	; 0x08
  98:	06 95       	lsr	r16
  9a:	06 95       	lsr	r16
  9c:	10 e0       	ldi	r17, 0x00	; 0
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	98 01       	movw	r18, r16
  a4:	11 27       	eor	r17, r17
  a6:	00 27       	eor	r16, r16
  a8:	8a 85       	ldd	r24, Y+10	; 0x0a
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	a0 e0       	ldi	r26, 0x00	; 0
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	08 2b       	or	r16, r24
  b2:	19 2b       	or	r17, r25
  b4:	2a 2b       	or	r18, r26
  b6:	3b 2b       	or	r19, r27
  b8:	99 85       	ldd	r25, Y+9	; 0x09
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	aa 27       	eor	r26, r26
  be:	97 fd       	sbrc	r25, 7
  c0:	a0 95       	com	r26
  c2:	ba 2f       	mov	r27, r26
  c4:	08 2b       	or	r16, r24
  c6:	19 2b       	or	r17, r25
  c8:	2a 2b       	or	r18, r26
  ca:	3b 2b       	or	r19, r27
  cc:	0f 5f       	subi	r16, 0xFF	; 255
  ce:	1f 4f       	sbci	r17, 0xFF	; 255
  d0:	2f 4f       	sbci	r18, 0xFF	; 255
  d2:	3f 4f       	sbci	r19, 0xFF	; 255
  d4:	5a e0       	ldi	r21, 0x0A	; 10
  d6:	00 0f       	add	r16, r16
  d8:	11 1f       	adc	r17, r17
  da:	22 1f       	adc	r18, r18
  dc:	33 1f       	adc	r19, r19
  de:	5a 95       	dec	r21
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZN7Sd2Card8cardSizeEv+0xe2>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZN7Sd2Card8cardSizeEv+0xe4>
  e4:	89 e0       	ldi	r24, 0x09	; 9
  e6:	f8 01       	movw	r30, r16
  e8:	85 83       	std	Z+5, r24	; 0x05
  ea:	00 e0       	ldi	r16, 0x00	; 0
  ec:	10 e0       	ldi	r17, 0x00	; 0
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b8 01       	movw	r22, r16
  f4:	c9 01       	movw	r24, r18
  f6:	60 96       	adiw	r28, 0x10	; 16
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	1f 91       	pop	r17
 108:	0f 91       	pop	r16
 10a:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card8readDataEmjjPh:

00000000 <_ZN7Sd2Card8readDataEmjjPh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  spiSend(STOP_TRAN_TOKEN);
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	ec 01       	movw	r28, r24
  1a:	4a 01       	movw	r8, r20
  1c:	5b 01       	movw	r10, r22
  1e:	69 01       	movw	r12, r18
  20:	01 15       	cp	r16, r1
  22:	11 05       	cpc	r17, r1
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN7Sd2Card8readDataEmjjPh+0x26>
  chipSelectHigh();
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN7Sd2Card8readDataEmjjPh+0x28>
  28:	c8 01       	movw	r24, r16
  2a:	82 0f       	add	r24, r18
  return true;
  2c:	93 1f       	adc	r25, r19
  2e:	22 e0       	ldi	r18, 0x02	; 2
  30:	81 30       	cpi	r24, 0x01	; 1
  32:	92 07       	cpc	r25, r18

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	00 f0       	brcs	.+0      	; 0x36 <_ZN7Sd2Card8readDataEmjjPh+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN7Sd2Card8readDataEmjjPh+0x38>
  38:	8e 81       	ldd	r24, Y+6	; 0x06
  return false;
  3a:	88 23       	and	r24, r24
}
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN7Sd2Card8readDataEmjjPh+0x3e>
  3e:	88 81       	ld	r24, Y
  40:	99 81       	ldd	r25, Y+1	; 0x01
  42:	aa 81       	ldd	r26, Y+2	; 0x02
  44:	bb 81       	ldd	r27, Y+3	; 0x03
  46:	48 17       	cp	r20, r24
  48:	59 07       	cpc	r21, r25
  4a:	6a 07       	cpc	r22, r26
  4c:	7b 07       	cpc	r23, r27
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN7Sd2Card8readDataEmjjPh+0x50>
  50:	8f 81       	ldd	r24, Y+7	; 0x07
  52:	98 85       	ldd	r25, Y+8	; 0x08
  54:	c8 16       	cp	r12, r24
  56:	d9 06       	cpc	r13, r25
  58:	00 f4       	brcc	.+0      	; 0x5a <_ZN7Sd2Card8readDataEmjjPh+0x5a>
  5a:	88 82       	st	Y, r8
  5c:	99 82       	std	Y+1, r9	; 0x01
  5e:	aa 82       	std	Y+2, r10	; 0x02
  60:	bb 82       	std	Y+3, r11	; 0x03
  62:	8b 85       	ldd	r24, Y+11	; 0x0b
  64:	83 30       	cpi	r24, 0x03	; 3
  66:	01 f0       	breq	.+0      	; 0x68 <_ZN7Sd2Card8readDataEmjjPh+0x68>
  68:	79 e0       	ldi	r23, 0x09	; 9
  6a:	88 0c       	add	r8, r8
  6c:	99 1c       	adc	r9, r9
  6e:	aa 1c       	adc	r10, r10
  70:	bb 1c       	adc	r11, r11
  72:	7a 95       	dec	r23
  74:	01 f4       	brne	.+0      	; 0x76 <_ZN7Sd2Card8readDataEmjjPh+0x76>
  76:	ce 01       	movw	r24, r28
  78:	61 e1       	ldi	r22, 0x11	; 17
  7a:	a5 01       	movw	r20, r10
  7c:	94 01       	movw	r18, r8
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card8readDataEmjjPh>
  82:	88 23       	and	r24, r24
  84:	01 f0       	breq	.+0      	; 0x86 <_ZN7Sd2Card8readDataEmjjPh+0x86>
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	8d 83       	std	Y+5, r24	; 0x05
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN7Sd2Card8readDataEmjjPh+0x8c>
  8c:	ce 01       	movw	r24, r28
  8e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card8readDataEmjjPh>
  92:	88 23       	and	r24, r24
  94:	01 f4       	brne	.+0      	; 0x96 <_ZN7Sd2Card8readDataEmjjPh+0x96>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN7Sd2Card8readDataEmjjPh+0x98>
  98:	18 86       	std	Y+8, r1	; 0x08
  9a:	1f 82       	std	Y+7, r1	; 0x07
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	8e 83       	std	Y+6, r24	; 0x06
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8e bd       	out	0x2e, r24	; 46
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN7Sd2Card8readDataEmjjPh+0xa8>
  a8:	0d b4       	in	r0, 0x2d	; 45
  aa:	07 fe       	sbrs	r0, 7
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN7Sd2Card8readDataEmjjPh+0xae>
  ae:	2e bd       	out	0x2e, r18	; 46
  b0:	8f 81       	ldd	r24, Y+7	; 0x07
  b2:	98 85       	ldd	r25, Y+8	; 0x08
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	98 87       	std	Y+8, r25	; 0x08
  b8:	8f 83       	std	Y+7, r24	; 0x07
  ba:	8f 81       	ldd	r24, Y+7	; 0x07
  bc:	98 85       	ldd	r25, Y+8	; 0x08
  be:	8c 15       	cp	r24, r12
  c0:	9d 05       	cpc	r25, r13
  c2:	00 f0       	brcs	.+0      	; 0xc4 <_ZN7Sd2Card8readDataEmjjPh+0xc4>
  c4:	98 01       	movw	r18, r16
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	30 40       	sbci	r19, 0x00	; 0
  ca:	f7 01       	movw	r30, r14
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	4f ef       	ldi	r20, 0xFF	; 255
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN7Sd2Card8readDataEmjjPh+0xd4>
  d4:	0d b4       	in	r0, 0x2d	; 45
  d6:	07 fe       	sbrs	r0, 7
  d8:	00 c0       	rjmp	.+0      	; 0xda <_ZN7Sd2Card8readDataEmjjPh+0xda>
  da:	5e b5       	in	r21, 0x2e	; 46
  dc:	51 93       	st	Z+, r21
  de:	4e bd       	out	0x2e, r20	; 46
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	82 17       	cp	r24, r18
  e4:	93 07       	cpc	r25, r19
  e6:	00 f0       	brcs	.+0      	; 0xe8 <_ZN7Sd2Card8readDataEmjjPh+0xe8>
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	00 c0       	rjmp	.+0      	; 0xee <_ZN7Sd2Card8readDataEmjjPh+0xee>
  ee:	8e b5       	in	r24, 0x2e	; 46
  f0:	2e 0d       	add	r18, r14
  f2:	3f 1d       	adc	r19, r15
  f4:	f9 01       	movw	r30, r18
  f6:	80 83       	st	Z, r24
  f8:	8f 81       	ldd	r24, Y+7	; 0x07
  fa:	98 85       	ldd	r25, Y+8	; 0x08
  fc:	80 0f       	add	r24, r16
  fe:	91 1f       	adc	r25, r17
 100:	98 87       	std	Y+8, r25	; 0x08
 102:	8f 83       	std	Y+7, r24	; 0x07
 104:	29 85       	ldd	r18, Y+9	; 0x09
 106:	22 23       	and	r18, r18
 108:	01 f0       	breq	.+0      	; 0x10a <_ZN7Sd2Card8readDataEmjjPh+0x10a>
 10a:	f2 e0       	ldi	r31, 0x02	; 2
 10c:	80 30       	cpi	r24, 0x00	; 0
 10e:	9f 07       	cpc	r25, r31
 110:	00 f0       	brcs	.+0      	; 0x112 <_ZN7Sd2Card8readDataEmjjPh+0x112>
 112:	ce 01       	movw	r24, r28
 114:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card8readDataEmjjPh>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN7Sd2Card8readDataEmjjPh+0x11a>
 11a:	ce 01       	movw	r24, r28
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card8readDataEmjjPh>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	00 c0       	rjmp	.+0      	; 0x124 <_ZN7Sd2Card8readDataEmjjPh+0x124>
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	ff 90       	pop	r15
 130:	ef 90       	pop	r14
 132:	df 90       	pop	r13
 134:	cf 90       	pop	r12
 136:	bf 90       	pop	r11
 138:	af 90       	pop	r10
 13a:	9f 90       	pop	r9
 13c:	8f 90       	pop	r8
 13e:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card9readBlockEmPh:

00000000 <_ZN7Sd2Card9readBlockEmPh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	1f 93       	push	r17
   8:	79 01       	movw	r14, r18
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	30 e0       	ldi	r19, 0x00	; 0
   e:	00 e0       	ldi	r16, 0x00	; 0
  10:	12 e0       	ldi	r17, 0x02	; 2
  spiSend(STOP_TRAN_TOKEN);
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9readBlockEmPh>
  16:	1f 91       	pop	r17
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	0f 91       	pop	r16
  1a:	ff 90       	pop	r15
  1c:	ef 90       	pop	r14
  1e:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card9writeDataEhPKh:

00000000 <_ZN7Sd2Card9writeDataEhPKh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	6e bd       	out	0x2e, r22	; 46
   8:	fa 01       	movw	r30, r20
   a:	80 e0       	ldi	r24, 0x00	; 0
   c:	90 e0       	ldi	r25, 0x00	; 0
   e:	0d b4       	in	r0, 0x2d	; 45
  10:	07 fe       	sbrs	r0, 7
  spiSend(STOP_TRAN_TOKEN);
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN7Sd2Card9writeDataEhPKh+0x14>
  14:	20 81       	ld	r18, Z
  16:	2e bd       	out	0x2e, r18	; 46
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	0d b4       	in	r0, 0x2d	; 45
  1a:	07 fe       	sbrs	r0, 7
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN7Sd2Card9writeDataEhPKh+0x1e>
  1e:	21 81       	ldd	r18, Z+1	; 0x01
  20:	2e bd       	out	0x2e, r18	; 46
  22:	02 96       	adiw	r24, 0x02	; 2
  24:	32 96       	adiw	r30, 0x02	; 2
  chipSelectHigh();
  26:	22 e0       	ldi	r18, 0x02	; 2
  28:	80 30       	cpi	r24, 0x00	; 0
  2a:	92 07       	cpc	r25, r18
  return true;
  2c:	01 f4       	brne	.+0      	; 0x2e <_ZN7Sd2Card9writeDataEhPKh+0x2e>
  2e:	0d b4       	in	r0, 0x2d	; 45
  30:	07 fe       	sbrs	r0, 7
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN7Sd2Card9writeDataEhPKh+0x34>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	8f ef       	ldi	r24, 0xFF	; 255
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEhPKh>
  return false;
  3a:	8f ef       	ldi	r24, 0xFF	; 255
}
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEhPKh>
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEhPKh>
  44:	8a 87       	std	Y+10, r24	; 0x0a
  46:	8f 71       	andi	r24, 0x1F	; 31
  48:	85 30       	cpi	r24, 0x05	; 5
  4a:	01 f0       	breq	.+0      	; 0x4c <_ZN7Sd2Card9writeDataEhPKh+0x4c>
  4c:	81 e1       	ldi	r24, 0x11	; 17
  4e:	8d 83       	std	Y+5, r24	; 0x05
  50:	ce 01       	movw	r24, r28
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEhPKh>
  56:	80 e0       	ldi	r24, 0x00	; 0
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN7Sd2Card9writeDataEhPKh+0x5a>
  5a:	81 e0       	ldi	r24, 0x01	; 1
  5c:	df 91       	pop	r29
  5e:	cf 91       	pop	r28
  60:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card9writeDataEPKh:

00000000 <_ZN7Sd2Card9writeDataEPKh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
   c:	68 e5       	ldi	r22, 0x58	; 88
   e:	72 e0       	ldi	r23, 0x02	; 2
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEPKh>
  spiSend(STOP_TRAN_TOKEN);
  14:	88 23       	and	r24, r24
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN7Sd2Card9writeDataEPKh+0x18>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	83 e1       	ldi	r24, 0x13	; 19
  1a:	8d 83       	std	Y+5, r24	; 0x05
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEPKh>
  22:	80 e0       	ldi	r24, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7Sd2Card9writeDataEPKh+0x26>
  chipSelectHigh();
  26:	ce 01       	movw	r24, r28
  28:	6c ef       	ldi	r22, 0xFC	; 252
  2a:	a8 01       	movw	r20, r16
  return true;
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeDataEPKh>
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  38:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card10writeBlockEmPKh:

00000000 <_ZN7Sd2Card10writeBlockEmPKh>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  spiSend(STOP_TRAN_TOKEN);
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
  16:	89 01       	movw	r16, r18
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	41 15       	cp	r20, r1
  1a:	51 05       	cpc	r21, r1
  1c:	61 05       	cpc	r22, r1
  1e:	71 05       	cpc	r23, r1
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN7Sd2Card10writeBlockEmPKh+0x22>
  22:	82 e1       	ldi	r24, 0x12	; 18
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN7Sd2Card10writeBlockEmPKh+0x26>
  chipSelectHigh();
  26:	8b 85       	ldd	r24, Y+11	; 0x0b
  28:	83 30       	cpi	r24, 0x03	; 3
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN7Sd2Card10writeBlockEmPKh+0x2c>
  return true;
  2c:	e9 e0       	ldi	r30, 0x09	; 9
  2e:	cc 0c       	add	r12, r12
  30:	dd 1c       	adc	r13, r13
  32:	ee 1c       	adc	r14, r14

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	ff 1c       	adc	r15, r15
  36:	ea 95       	dec	r30
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN7Sd2Card10writeBlockEmPKh+0x3a>
  return false;
  3a:	ce 01       	movw	r24, r28
}
  3c:	68 e1       	ldi	r22, 0x18	; 24
  3e:	a7 01       	movw	r20, r14
  40:	96 01       	movw	r18, r12
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN7Sd2Card10writeBlockEmPKh+0x4a>
  4a:	84 e0       	ldi	r24, 0x04	; 4
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN7Sd2Card10writeBlockEmPKh+0x4e>
  4e:	ce 01       	movw	r24, r28
  50:	6e ef       	ldi	r22, 0xFE	; 254
  52:	a8 01       	movw	r20, r16
  54:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  58:	88 23       	and	r24, r24
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
  5c:	ce 01       	movw	r24, r28
  5e:	68 e5       	ldi	r22, 0x58	; 88
  60:	72 e0       	ldi	r23, 0x02	; 2
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  66:	88 23       	and	r24, r24
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN7Sd2Card10writeBlockEmPKh+0x6a>
  6a:	85 e1       	ldi	r24, 0x15	; 21
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN7Sd2Card10writeBlockEmPKh+0x6e>
  6e:	ce 01       	movw	r24, r28
  70:	6d e0       	ldi	r22, 0x0D	; 13
  72:	20 e0       	ldi	r18, 0x00	; 0
  74:	30 e0       	ldi	r19, 0x00	; 0
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  7e:	88 23       	and	r24, r24
  80:	01 f4       	brne	.+0      	; 0x82 <_ZN7Sd2Card10writeBlockEmPKh+0x82>
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  86:	88 23       	and	r24, r24
  88:	01 f0       	breq	.+0      	; 0x8a <_ZN7Sd2Card10writeBlockEmPKh+0x8a>
  8a:	84 e1       	ldi	r24, 0x14	; 20
  8c:	8d 83       	std	Y+5, r24	; 0x05
  8e:	ce 01       	movw	r24, r28
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	df 91       	pop	r29
  98:	cf 91       	pop	r28
  9a:	1f 91       	pop	r17
  9c:	0f 91       	pop	r16
  9e:	ff 90       	pop	r15
  a0:	ef 90       	pop	r14
  a2:	df 90       	pop	r13
  a4:	cf 90       	pop	r12
  a6:	08 95       	ret
  a8:	ce 01       	movw	r24, r28
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeBlockEmPKh>
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <__SREG__+0x73>

Disassembly of section .text._ZN7Sd2Card10writeStartEmm:

00000000 <_ZN7Sd2Card10writeStartEmm>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  spiSend(STOP_TRAN_TOKEN);
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	ec 01       	movw	r28, r24
  1a:	6a 01       	movw	r12, r20
  1c:	7b 01       	movw	r14, r22
  1e:	48 01       	movw	r8, r16
  20:	59 01       	movw	r10, r18
  22:	41 15       	cp	r20, r1
  24:	51 05       	cpc	r21, r1
  chipSelectHigh();
  26:	61 05       	cpc	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN7Sd2Card10writeStartEmm+0x2c>
  return true;
  2c:	82 e1       	ldi	r24, 0x12	; 18
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7Sd2Card10writeStartEmm+0x30>
  30:	67 e3       	ldi	r22, 0x37	; 55
  32:	20 e0       	ldi	r18, 0x00	; 0

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	40 e0       	ldi	r20, 0x00	; 0
  38:	50 e0       	ldi	r21, 0x00	; 0
  return false;
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeStartEmm>
}
  3e:	ce 01       	movw	r24, r28
  40:	67 e1       	ldi	r22, 0x17	; 23
  42:	a5 01       	movw	r20, r10
  44:	94 01       	movw	r18, r8
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeStartEmm>
  4a:	88 23       	and	r24, r24
  4c:	01 f0       	breq	.+0      	; 0x4e <_ZN7Sd2Card10writeStartEmm+0x4e>
  4e:	87 e0       	ldi	r24, 0x07	; 7
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN7Sd2Card10writeStartEmm+0x52>
  52:	8b 85       	ldd	r24, Y+11	; 0x0b
  54:	83 30       	cpi	r24, 0x03	; 3
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN7Sd2Card10writeStartEmm+0x58>
  58:	f9 e0       	ldi	r31, 0x09	; 9
  5a:	cc 0c       	add	r12, r12
  5c:	dd 1c       	adc	r13, r13
  5e:	ee 1c       	adc	r14, r14
  60:	ff 1c       	adc	r15, r15
  62:	fa 95       	dec	r31
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN7Sd2Card10writeStartEmm+0x66>
  66:	ce 01       	movw	r24, r28
  68:	69 e1       	ldi	r22, 0x19	; 25
  6a:	a7 01       	movw	r20, r14
  6c:	96 01       	movw	r18, r12
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeStartEmm>
  72:	88 23       	and	r24, r24
  74:	01 f0       	breq	.+0      	; 0x76 <_ZN7Sd2Card10writeStartEmm+0x76>
  76:	85 e0       	ldi	r24, 0x05	; 5
  78:	8d 83       	std	Y+5, r24	; 0x05
  7a:	ce 01       	movw	r24, r28
  7c:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card10writeStartEmm>
  80:	80 e0       	ldi	r24, 0x00	; 0
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN7Sd2Card10writeStartEmm+0x84>
  84:	81 e0       	ldi	r24, 0x01	; 1
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	9f 90       	pop	r9
  9c:	8f 90       	pop	r8
  9e:	08 95       	ret

Disassembly of section .text._ZN7Sd2Card9writeStopEv:

00000000 <_ZN7Sd2Card9writeStopEv>:
/** End a write multiple blocks sequence.
 *
* \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeStop(void) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
   6:	68 e5       	ldi	r22, 0x58	; 88
   8:	72 e0       	ldi	r23, 0x02	; 2
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeStopEv>
   e:	88 23       	and	r24, r24
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN7Sd2Card9writeStopEv+0x12>
  spiSend(STOP_TRAN_TOKEN);
  12:	8d ef       	ldi	r24, 0xFD	; 253
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeStopEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) goto fail;
  18:	ce 01       	movw	r24, r28
  1a:	68 e5       	ldi	r22, 0x58	; 88
  1c:	72 e0       	ldi	r23, 0x02	; 2
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeStopEv>
  22:	88 23       	and	r24, r24
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN7Sd2Card9writeStopEv+0x26>
  chipSelectHigh();
  26:	ce 01       	movw	r24, r28
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeStopEv>
  return true;
  2c:	81 e0       	ldi	r24, 0x01	; 1
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN7Sd2Card9writeStopEv+0x30>
  30:	80 e1       	ldi	r24, 0x10	; 16
  32:	8d 83       	std	Y+5, r24	; 0x05

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
  34:	ce 01       	movw	r24, r28
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN7Sd2Card9writeStopEv>
  return false;
  3a:	80 e0       	ldi	r24, 0x00	; 0
}
  3c:	df 91       	pop	r29
  3e:	cf 91       	pop	r28
  40:	08 95       	ret

SdFile.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         00003f0c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000088df  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN6SdFile10addClusterEv 00000054  00000000  00000000  0000c81f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN6SdFile13addDirClusterEv 000000c8  00000000  00000000  0000c873  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6SdFile13cacheDirEntryEh 0000003a  00000000  00000000  0000c93b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6SdFile15contiguousRangeEPmS0_ 0000015e  00000000  00000000  0000c975  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6SdFile7dirNameERK14directoryEntryPc 0000003a  00000000  00000000  0000cad3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6SdFile10make83NameEPKcPh 0000006e  00000000  00000000  0000cb0d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6SdFile8openRootEP8SdVolume 000000a2  00000000  00000000  0000cb7b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6SdFile12printDirNameERK14directoryEntryh 00000078  00000000  00000000  0000cc1d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6SdFile14printTwoDigitsEh 00000036  00000000  00000000  0000cc95  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6SdFile12printFatTimeEj 00000050  00000000  00000000  0000cccb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6SdFile12printFatDateEj 00000058  00000000  00000000  0000cd1b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6SdFile4readEPvj 00000294  00000000  00000000  0000cd73  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6SdFile7readDirEP14directoryEntry 00000068  00000000  00000000  0000d007  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6SdFile12readDirCacheEv 00000094  00000000  00000000  0000d06f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6SdFile7seekSetEm 00000134  00000000  00000000  0000d103  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6SdFile4syncEv 0000008a  00000000  00000000  0000d237  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6SdFile8dirEntryEP14directoryEntry 00000042  00000000  00000000  0000d2c1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN6SdFile5closeEv 0000001c  00000000  00000000  0000d303  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN6SdFile9timestampEhjhhhhh 00000138  00000000  00000000  0000d31f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN6SdFile8truncateEm 0000019a  00000000  00000000  0000d457  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN6SdFile6removeEv 00000038  00000000  00000000  0000d5f1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN6SdFile5rmDirEv 00000072  00000000  00000000  0000d629  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN6SdFile15openCachedEntryEhh 000000de  00000000  00000000  0000d69b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN6SdFile4openEPS_jh 00000080  00000000  00000000  0000d779  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN6SdFile8rmRfStarEv 00000152  00000000  00000000  0000d7f9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN6SdFile2lsEhh 000001dc  00000000  00000000  0000d94b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN6SdFile4openEPS_PKch 000001ec  00000000  00000000  0000db27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN6SdFile6removeEPS_PKc 00000054  00000000  00000000  0000dd13  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZN6SdFile7makeDirEPS_PKc 000001a2  00000000  00000000  0000dd67  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZN6SdFile16createContiguousEPS_PKcm 00000098  00000000  00000000  0000df09  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6SdFile5writeEPKvj 0000035e  00000000  00000000  0000dfa1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6SdFile5writeEh 00000022  00000000  00000000  0000e2ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6SdFile5writeEPKc 00000018  00000000  00000000  0000e321  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6SdFile7write_PEPKc 00000032  00000000  00000000  0000e339  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6SdFile9writeln_PEPKc 00000016  00000000  00000000  0000e36b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .rodata._ZTV6SdFile 00000008  00000000  00000000  0000e381  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 41 .bss._ZN6SdFile12oldDateTime_E 00000002  00000000  00000000  0000e389  2**0
                  ALLOC
 42 .bss._ZN6SdFile9dateTime_E 00000002  00000000  00000000  0000e389  2**0
                  ALLOC
 43 .progmem.data 00000010  00000000  00000000  0000e389  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text._ZN6SdFile10addClusterEv:

00000000 <_ZN6SdFile10addClusterEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	9c 01       	movw	r18, r24
   8:	2a 5f       	subi	r18, 0xFA	; 250
  println();
   a:	3f 4f       	sbci	r19, 0xFF	; 255
   c:	8b 8d       	ldd	r24, Y+27	; 0x1b
   e:	9c 8d       	ldd	r25, Y+28	; 0x1c
}
  10:	41 e0       	ldi	r20, 0x01	; 1
  12:	50 e0       	ldi	r21, 0x00	; 0
  14:	60 e0       	ldi	r22, 0x00	; 0
  16:	70 e0       	ldi	r23, 0x00	; 0
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile10addClusterEv>
  1c:	88 23       	and	r24, r24
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6SdFile10addClusterEv+0x20>
  20:	8f 89       	ldd	r24, Y+23	; 0x17
  22:	98 8d       	ldd	r25, Y+24	; 0x18
  24:	a9 8d       	ldd	r26, Y+25	; 0x19
  26:	ba 8d       	ldd	r27, Y+26	; 0x1a
  28:	00 97       	sbiw	r24, 0x00	; 0
  2a:	a1 05       	cpc	r26, r1
  2c:	b1 05       	cpc	r27, r1
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6SdFile10addClusterEv+0x30>
  30:	8e 81       	ldd	r24, Y+6	; 0x06
  32:	9f 81       	ldd	r25, Y+7	; 0x07
  34:	a8 85       	ldd	r26, Y+8	; 0x08
  36:	b9 85       	ldd	r27, Y+9	; 0x09
  38:	8f 8b       	std	Y+23, r24	; 0x17
  3a:	98 8f       	std	Y+24, r25	; 0x18
  3c:	a9 8f       	std	Y+25, r26	; 0x19
  3e:	ba 8f       	std	Y+26, r27	; 0x1a
  40:	8c 81       	ldd	r24, Y+4	; 0x04
  42:	80 68       	ori	r24, 0x80	; 128
  44:	8c 83       	std	Y+4, r24	; 0x04
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6SdFile10addClusterEv+0x48>
  48:	80 e0       	ldi	r24, 0x00	; 0
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZN6SdFile10addClusterEv+0x4c>
  4c:	81 e0       	ldi	r24, 0x01	; 1
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	08 95       	ret

Disassembly of section .text._ZN6SdFile13addDirClusterEv:

00000000 <_ZN6SdFile13addDirClusterEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
  write_P(str);
   6:	ff 92       	push	r15
   8:	1f 93       	push	r17
  println();
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
}
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile13addDirClusterEv>
  14:	88 23       	and	r24, r24
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6SdFile13addDirClusterEv+0x18>
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZN6SdFile13addDirClusterEv+0x1a>
  1a:	eb 8d       	ldd	r30, Y+27	; 0x1b
  1c:	fc 8d       	ldd	r31, Y+28	; 0x1c
  1e:	ce 80       	ldd	r12, Y+6	; 0x06
  20:	df 80       	ldd	r13, Y+7	; 0x07
  22:	e8 84       	ldd	r14, Y+8	; 0x08
  24:	f9 84       	ldd	r15, Y+9	; 0x09
  26:	8e ef       	ldi	r24, 0xFE	; 254
  28:	9f ef       	ldi	r25, 0xFF	; 255
  2a:	af ef       	ldi	r26, 0xFF	; 255
  2c:	bf ef       	ldi	r27, 0xFF	; 255
  2e:	c8 0e       	add	r12, r24
  30:	d9 1e       	adc	r13, r25
  32:	ea 1e       	adc	r14, r26
  34:	fb 1e       	adc	r15, r27
  36:	05 84       	ldd	r0, Z+13	; 0x0d
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN6SdFile13addDirClusterEv+0x3a>
  3a:	cc 0c       	add	r12, r12
  3c:	dd 1c       	adc	r13, r13
  3e:	ee 1c       	adc	r14, r14
  40:	ff 1c       	adc	r15, r15
  42:	0a 94       	dec	r0
  44:	02 f4       	brpl	.+0      	; 0x46 <_ZN6SdFile13addDirClusterEv+0x46>
  46:	86 85       	ldd	r24, Z+14	; 0x0e
  48:	97 85       	ldd	r25, Z+15	; 0x0f
  4a:	a0 89       	ldd	r26, Z+16	; 0x10
  4c:	b1 89       	ldd	r27, Z+17	; 0x11
  4e:	c8 0e       	add	r12, r24
  50:	d9 1e       	adc	r13, r25
  52:	ea 1e       	adc	r14, r26
  54:	fb 1e       	adc	r15, r27
  56:	14 81       	ldd	r17, Z+4	; 0x04
  58:	08 94       	sec
  5a:	c1 08       	sbc	r12, r1
  5c:	d1 08       	sbc	r13, r1
  5e:	e1 08       	sbc	r14, r1
  60:	f1 08       	sbc	r15, r1
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN6SdFile13addDirClusterEv+0x64>
  64:	c7 01       	movw	r24, r14
  66:	b6 01       	movw	r22, r12
  68:	61 0f       	add	r22, r17
  6a:	71 1d       	adc	r23, r1
  6c:	81 1d       	adc	r24, r1
  6e:	91 1d       	adc	r25, r1
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile13addDirClusterEv>
  74:	88 23       	and	r24, r24
  76:	01 f0       	breq	.+0      	; 0x78 <_ZN6SdFile13addDirClusterEv+0x78>
  78:	11 50       	subi	r17, 0x01	; 1
  7a:	11 23       	and	r17, r17
  7c:	01 f4       	brne	.+0      	; 0x7e <_ZN6SdFile13addDirClusterEv+0x7e>
  7e:	eb 8d       	ldd	r30, Y+27	; 0x1b
  80:	fc 8d       	ldd	r31, Y+28	; 0x1c
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	92 e0       	ldi	r25, 0x02	; 2
  86:	a0 e0       	ldi	r26, 0x00	; 0
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	05 84       	ldd	r0, Z+13	; 0x0d
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN6SdFile13addDirClusterEv+0x8e>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	0a 94       	dec	r0
  98:	02 f4       	brpl	.+0      	; 0x9a <_ZN6SdFile13addDirClusterEv+0x9a>
  9a:	4b 89       	ldd	r20, Y+19	; 0x13
  9c:	5c 89       	ldd	r21, Y+20	; 0x14
  9e:	6d 89       	ldd	r22, Y+21	; 0x15
  a0:	7e 89       	ldd	r23, Y+22	; 0x16
  a2:	48 0f       	add	r20, r24
  a4:	59 1f       	adc	r21, r25
  a6:	6a 1f       	adc	r22, r26
  a8:	7b 1f       	adc	r23, r27
  aa:	4b 8b       	std	Y+19, r20	; 0x13
  ac:	5c 8b       	std	Y+20, r21	; 0x14
  ae:	6d 8b       	std	Y+21, r22	; 0x15
  b0:	7e 8b       	std	Y+22, r23	; 0x16
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <_ZN6SdFile13addDirClusterEv+0xb6>
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	ff 90       	pop	r15
  c0:	ef 90       	pop	r14
  c2:	df 90       	pop	r13
  c4:	cf 90       	pop	r12
  c6:	08 95       	ret

Disassembly of section .text._ZN6SdFile13cacheDirEntryEh:

00000000 <_ZN6SdFile13cacheDirEntryEh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	46 2f       	mov	r20, r22
   8:	8e 85       	ldd	r24, Y+14	; 0x0e
  println();
   a:	9f 85       	ldd	r25, Y+15	; 0x0f
   c:	a8 89       	ldd	r26, Y+16	; 0x10
   e:	b9 89       	ldd	r27, Y+17	; 0x11
}
  10:	bc 01       	movw	r22, r24
  12:	cd 01       	movw	r24, r26
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile13cacheDirEntryEh>
  18:	88 23       	and	r24, r24
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6SdFile13cacheDirEntryEh+0x1c>
  1c:	8a 89       	ldd	r24, Y+18	; 0x12
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	25 e0       	ldi	r18, 0x05	; 5
  22:	88 0f       	add	r24, r24
  24:	99 1f       	adc	r25, r25
  26:	2a 95       	dec	r18
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6SdFile13cacheDirEntryEh+0x2a>
  2a:	80 50       	subi	r24, 0x00	; 0
  2c:	90 40       	sbci	r25, 0x00	; 0
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6SdFile13cacheDirEntryEh+0x30>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	08 95       	ret

Disassembly of section .text._ZN6SdFile15contiguousRangeEPmS0_:

00000000 <_ZN6SdFile15contiguousRangeEPmS0_>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
  write_P(str);
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
  println();
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
}
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	00 d0       	rcall	.+0      	; 0x1e <_ZN6SdFile15contiguousRangeEPmS0_+0x1e>
  1e:	00 d0       	rcall	.+0      	; 0x20 <_ZN6SdFile15contiguousRangeEPmS0_+0x20>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	8c 01       	movw	r16, r24
  26:	5b 01       	movw	r10, r22
  28:	4a 01       	movw	r8, r20
  2a:	dc 01       	movw	r26, r24
  2c:	57 96       	adiw	r26, 0x17	; 23
  2e:	cd 90       	ld	r12, X+
  30:	dd 90       	ld	r13, X+
  32:	ed 90       	ld	r14, X+
  34:	fc 90       	ld	r15, X
  36:	5a 97       	sbiw	r26, 0x1a	; 26
  38:	c1 14       	cp	r12, r1
  3a:	d1 04       	cpc	r13, r1
  3c:	e1 04       	cpc	r14, r1
  3e:	f1 04       	cpc	r15, r1
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN6SdFile15contiguousRangeEPmS0_+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6SdFile15contiguousRangeEPmS0_+0x44>
  44:	6a 01       	movw	r12, r20
  46:	7b 01       	movw	r14, r22
  48:	f8 01       	movw	r30, r16
  4a:	83 8d       	ldd	r24, Z+27	; 0x1b
  4c:	94 8d       	ldd	r25, Z+28	; 0x1c
  4e:	b7 01       	movw	r22, r14
  50:	a6 01       	movw	r20, r12
  52:	9e 01       	movw	r18, r28
  54:	2f 5f       	subi	r18, 0xFF	; 255
  56:	3f 4f       	sbci	r19, 0xFF	; 255
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile15contiguousRangeEPmS0_>
  5c:	88 23       	and	r24, r24
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6SdFile15contiguousRangeEPmS0_+0x60>
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6SdFile15contiguousRangeEPmS0_+0x62>
  62:	49 81       	ldd	r20, Y+1	; 0x01
  64:	5a 81       	ldd	r21, Y+2	; 0x02
  66:	6b 81       	ldd	r22, Y+3	; 0x03
  68:	7c 81       	ldd	r23, Y+4	; 0x04
  6a:	d7 01       	movw	r26, r14
  6c:	c6 01       	movw	r24, r12
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	48 17       	cp	r20, r24
  76:	59 07       	cpc	r21, r25
  78:	6a 07       	cpc	r22, r26
  7a:	7b 07       	cpc	r23, r27
  7c:	01 f0       	breq	.+0      	; 0x7e <_ZN6SdFile15contiguousRangeEPmS0_+0x7e>
  7e:	d8 01       	movw	r26, r16
  80:	5b 96       	adiw	r26, 0x1b	; 27
  82:	6d 90       	ld	r6, X+
  84:	7c 90       	ld	r7, X
  86:	5c 97       	sbiw	r26, 0x1c	; 28
  88:	f3 01       	movw	r30, r6
  8a:	87 89       	ldd	r24, Z+23	; 0x17
  8c:	80 31       	cpi	r24, 0x10	; 16
  8e:	01 f4       	brne	.+0      	; 0x90 <_ZN6SdFile15contiguousRangeEPmS0_+0x90>
  90:	88 ef       	ldi	r24, 0xF8	; 248
  92:	9f ef       	ldi	r25, 0xFF	; 255
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	00 c0       	rjmp	.+0      	; 0x9a <_ZN6SdFile15contiguousRangeEPmS0_+0x9a>
  9a:	88 ef       	ldi	r24, 0xF8	; 248
  9c:	9f ef       	ldi	r25, 0xFF	; 255
  9e:	af ef       	ldi	r26, 0xFF	; 255
  a0:	bf e0       	ldi	r27, 0x0F	; 15
  a2:	48 17       	cp	r20, r24
  a4:	59 07       	cpc	r21, r25
  a6:	6a 07       	cpc	r22, r26
  a8:	7b 07       	cpc	r23, r27
  aa:	00 f4       	brcc	.+0      	; 0xac <_ZN6SdFile15contiguousRangeEPmS0_+0xac>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6SdFile15contiguousRangeEPmS0_+0xae>
  ae:	f8 01       	movw	r30, r16
  b0:	87 89       	ldd	r24, Z+23	; 0x17
  b2:	90 8d       	ldd	r25, Z+24	; 0x18
  b4:	a1 8d       	ldd	r26, Z+25	; 0x19
  b6:	b2 8d       	ldd	r27, Z+26	; 0x1a
  b8:	02 97       	sbiw	r24, 0x02	; 2
  ba:	a1 09       	sbc	r26, r1
  bc:	b1 09       	sbc	r27, r1
  be:	f3 01       	movw	r30, r6
  c0:	05 84       	ldd	r0, Z+13	; 0x0d
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6SdFile15contiguousRangeEPmS0_+0xc4>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	aa 1f       	adc	r26, r26
  ca:	bb 1f       	adc	r27, r27
  cc:	0a 94       	dec	r0
  ce:	02 f4       	brpl	.+0      	; 0xd0 <_ZN6SdFile15contiguousRangeEPmS0_+0xd0>
  d0:	46 85       	ldd	r20, Z+14	; 0x0e
  d2:	57 85       	ldd	r21, Z+15	; 0x0f
  d4:	60 89       	ldd	r22, Z+16	; 0x10
  d6:	71 89       	ldd	r23, Z+17	; 0x11
  d8:	84 0f       	add	r24, r20
  da:	95 1f       	adc	r25, r21
  dc:	a6 1f       	adc	r26, r22
  de:	b7 1f       	adc	r27, r23
  e0:	f5 01       	movw	r30, r10
  e2:	80 83       	st	Z, r24
  e4:	91 83       	std	Z+1, r25	; 0x01
  e6:	a2 83       	std	Z+2, r26	; 0x02
  e8:	b3 83       	std	Z+3, r27	; 0x03
  ea:	f3 01       	movw	r30, r6
  ec:	86 85       	ldd	r24, Z+14	; 0x0e
  ee:	97 85       	ldd	r25, Z+15	; 0x0f
  f0:	a0 89       	ldd	r26, Z+16	; 0x10
  f2:	b1 89       	ldd	r27, Z+17	; 0x11
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	a1 09       	sbc	r26, r1
  f8:	b1 09       	sbc	r27, r1
  fa:	24 81       	ldd	r18, Z+4	; 0x04
  fc:	82 0f       	add	r24, r18
  fe:	91 1d       	adc	r25, r1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	b7 01       	movw	r22, r14
 106:	a6 01       	movw	r20, r12
 108:	42 50       	subi	r20, 0x02	; 2
 10a:	50 40       	sbci	r21, 0x00	; 0
 10c:	60 40       	sbci	r22, 0x00	; 0
 10e:	70 40       	sbci	r23, 0x00	; 0
 110:	05 84       	ldd	r0, Z+13	; 0x0d
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN6SdFile15contiguousRangeEPmS0_+0x114>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	66 1f       	adc	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	0a 94       	dec	r0
 11e:	02 f4       	brpl	.+0      	; 0x120 <_ZN6SdFile15contiguousRangeEPmS0_+0x120>
 120:	84 0f       	add	r24, r20
 122:	95 1f       	adc	r25, r21
 124:	a6 1f       	adc	r26, r22
 126:	b7 1f       	adc	r27, r23
 128:	f4 01       	movw	r30, r8
 12a:	80 83       	st	Z, r24
 12c:	91 83       	std	Z+1, r25	; 0x01
 12e:	a2 83       	std	Z+2, r26	; 0x02
 130:	b3 83       	std	Z+3, r27	; 0x03
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	00 c0       	rjmp	.+0      	; 0x136 <_ZN6SdFile15contiguousRangeEPmS0_+0x136>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	1f 91       	pop	r17
 146:	0f 91       	pop	r16
 148:	ff 90       	pop	r15
 14a:	ef 90       	pop	r14
 14c:	df 90       	pop	r13
 14e:	cf 90       	pop	r12
 150:	bf 90       	pop	r11
 152:	af 90       	pop	r10
 154:	9f 90       	pop	r9
 156:	8f 90       	pop	r8
 158:	7f 90       	pop	r7
 15a:	6f 90       	pop	r6
 15c:	08 95       	ret

Disassembly of section .text._ZN6SdFile7dirNameERK14directoryEntryPc:

00000000 <_ZN6SdFile7dirNameERK14directoryEntryPc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	fc 01       	movw	r30, r24
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	80 e0       	ldi	r24, 0x00	; 0
  write_P(str);
   6:	2e e2       	ldi	r18, 0x2E	; 46
   8:	30 81       	ld	r19, Z
  println();
   a:	30 32       	cpi	r19, 0x20	; 32
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6SdFile7dirNameERK14directoryEntryPc+0xe>
   e:	98 30       	cpi	r25, 0x08	; 8
}
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x12>
  12:	db 01       	movw	r26, r22
  14:	a8 0f       	add	r26, r24
  16:	b1 1d       	adc	r27, r1
  18:	2c 93       	st	X, r18
  1a:	8f 5f       	subi	r24, 0xFF	; 255
  1c:	db 01       	movw	r26, r22
  1e:	a8 0f       	add	r26, r24
  20:	b1 1d       	adc	r27, r1
  22:	30 81       	ld	r19, Z
  24:	3c 93       	st	X, r19
  26:	8f 5f       	subi	r24, 0xFF	; 255
  28:	9f 5f       	subi	r25, 0xFF	; 255
  2a:	31 96       	adiw	r30, 0x01	; 1
  2c:	9b 30       	cpi	r25, 0x0B	; 11
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6SdFile7dirNameERK14directoryEntryPc+0x30>
  30:	68 0f       	add	r22, r24
  32:	71 1d       	adc	r23, r1
  34:	fb 01       	movw	r30, r22
  36:	10 82       	st	Z, r1
  38:	08 95       	ret

Disassembly of section .text._ZN6SdFile10make83NameEPKcPh:

00000000 <_ZN6SdFile10make83NameEPKcPh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	dc 01       	movw	r26, r24
   2:	fb 01       	movw	r30, r22
   4:	8b e0       	ldi	r24, 0x0B	; 11
  write_P(str);
   6:	90 e2       	ldi	r25, 0x20	; 32
   8:	91 93       	st	Z+, r25
  println();
   a:	81 50       	subi	r24, 0x01	; 1
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6SdFile10make83NameEPKcPh+0xe>
   e:	30 e0       	ldi	r19, 0x00	; 0
}
  10:	47 e0       	ldi	r20, 0x07	; 7
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN6SdFile10make83NameEPKcPh+0x14>
  14:	2e 32       	cpi	r18, 0x2E	; 46
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6SdFile10make83NameEPKcPh+0x18>
  18:	4a 30       	cpi	r20, 0x0A	; 10
  1a:	01 f0       	breq	.+0      	; 0x1c <_ZN6SdFile10make83NameEPKcPh+0x1c>
  1c:	38 e0       	ldi	r19, 0x08	; 8
  1e:	4a e0       	ldi	r20, 0x0A	; 10
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6SdFile10make83NameEPKcPh+0x22>
  22:	e2 17       	cp	r30, r18
  24:	01 f4       	brne	.+0      	; 0x26 <_ZN6SdFile10make83NameEPKcPh+0x26>
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZN6SdFile10make83NameEPKcPh+0x28>
  28:	80 e0       	ldi	r24, 0x00	; 0
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	fc 01       	movw	r30, r24
  2e:	01 96       	adiw	r24, 0x01	; 1
  30:	e4 91       	lpm	r30, Z
  32:	ee 23       	and	r30, r30
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN6SdFile10make83NameEPKcPh+0x36>
  36:	43 17       	cp	r20, r19
  38:	00 f0       	brcs	.+0      	; 0x3a <_ZN6SdFile10make83NameEPKcPh+0x3a>
  3a:	21 32       	cpi	r18, 0x21	; 33
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZN6SdFile10make83NameEPKcPh+0x3e>
  3e:	2f 37       	cpi	r18, 0x7F	; 127
  40:	00 f4       	brcc	.+0      	; 0x42 <_ZN6SdFile10make83NameEPKcPh+0x42>
  42:	fb 01       	movw	r30, r22
  44:	e3 0f       	add	r30, r19
  46:	f1 1d       	adc	r31, r1
  48:	82 2f       	mov	r24, r18
  4a:	81 56       	subi	r24, 0x61	; 97
  4c:	8a 31       	cpi	r24, 0x1A	; 26
  4e:	00 f4       	brcc	.+0      	; 0x50 <_ZN6SdFile10make83NameEPKcPh+0x50>
  50:	20 52       	subi	r18, 0x20	; 32
  52:	20 83       	st	Z, r18
  54:	3f 5f       	subi	r19, 0xFF	; 255
  56:	2d 91       	ld	r18, X+
  58:	22 23       	and	r18, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6SdFile10make83NameEPKcPh+0x5c>
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	fb 01       	movw	r30, r22
  60:	90 81       	ld	r25, Z
  62:	90 32       	cpi	r25, 0x20	; 32
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN6SdFile10make83NameEPKcPh+0x66>
  66:	80 e0       	ldi	r24, 0x00	; 0
  68:	08 95       	ret
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	08 95       	ret

Disassembly of section .text._ZN6SdFile8openRootEP8SdVolume:

00000000 <_ZN6SdFile8openRootEP8SdVolume>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  println();
   a:	8b 01       	movw	r16, r22
   c:	8d 81       	ldd	r24, Y+5	; 0x05
   e:	88 23       	and	r24, r24
}
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN6SdFile8openRootEP8SdVolume+0x12>
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN6SdFile8openRootEP8SdVolume+0x14>
  14:	fb 01       	movw	r30, r22
  16:	87 89       	ldd	r24, Z+23	; 0x17
  18:	80 31       	cpi	r24, 0x10	; 16
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6SdFile8openRootEP8SdVolume+0x1c>
  1c:	82 e0       	ldi	r24, 0x02	; 2
  1e:	8d 83       	std	Y+5, r24	; 0x05
  20:	1f 8a       	std	Y+23, r1	; 0x17
  22:	18 8e       	std	Y+24, r1	; 0x18
  24:	19 8e       	std	Y+25, r1	; 0x19
  26:	1a 8e       	std	Y+26, r1	; 0x1a
  28:	80 8d       	ldd	r24, Z+24	; 0x18
  2a:	91 8d       	ldd	r25, Z+25	; 0x19
  2c:	a0 e0       	ldi	r26, 0x00	; 0
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	35 e0       	ldi	r19, 0x05	; 5
  32:	88 0f       	add	r24, r24
  34:	99 1f       	adc	r25, r25
  36:	aa 1f       	adc	r26, r26
  38:	bb 1f       	adc	r27, r27
  3a:	3a 95       	dec	r19
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN6SdFile8openRootEP8SdVolume+0x3e>
  3e:	8b 8b       	std	Y+19, r24	; 0x13
  40:	9c 8b       	std	Y+20, r25	; 0x14
  42:	ad 8b       	std	Y+21, r26	; 0x15
  44:	be 8b       	std	Y+22, r27	; 0x16
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6SdFile8openRootEP8SdVolume+0x48>
  48:	80 32       	cpi	r24, 0x20	; 32
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6SdFile8openRootEP8SdVolume+0x4c>
  4c:	83 e0       	ldi	r24, 0x03	; 3
  4e:	8d 83       	std	Y+5, r24	; 0x05
  50:	fb 01       	movw	r30, r22
  52:	42 8d       	ldd	r20, Z+26	; 0x1a
  54:	53 8d       	ldd	r21, Z+27	; 0x1b
  56:	64 8d       	ldd	r22, Z+28	; 0x1c
  58:	75 8d       	ldd	r23, Z+29	; 0x1d
  5a:	4f 8b       	std	Y+23, r20	; 0x17
  5c:	58 8f       	std	Y+24, r21	; 0x18
  5e:	69 8f       	std	Y+25, r22	; 0x19
  60:	7a 8f       	std	Y+26, r23	; 0x1a
  62:	9e 01       	movw	r18, r28
  64:	2d 5e       	subi	r18, 0xED	; 237
  66:	3f 4f       	sbci	r19, 0xFF	; 255
  68:	c8 01       	movw	r24, r16
  6a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8openRootEP8SdVolume>
  6e:	88 23       	and	r24, r24
  70:	01 f0       	breq	.+0      	; 0x72 <_ZN6SdFile8openRootEP8SdVolume+0x72>
  72:	1c 8f       	std	Y+28, r17	; 0x1c
  74:	0b 8f       	std	Y+27, r16	; 0x1b
  76:	81 e0       	ldi	r24, 0x01	; 1
  78:	8c 83       	std	Y+4, r24	; 0x04
  7a:	1e 82       	std	Y+6, r1	; 0x06
  7c:	1f 82       	std	Y+7, r1	; 0x07
  7e:	18 86       	std	Y+8, r1	; 0x08
  80:	19 86       	std	Y+9, r1	; 0x09
  82:	1a 86       	std	Y+10, r1	; 0x0a
  84:	1b 86       	std	Y+11, r1	; 0x0b
  86:	1c 86       	std	Y+12, r1	; 0x0c
  88:	1d 86       	std	Y+13, r1	; 0x0d
  8a:	1e 86       	std	Y+14, r1	; 0x0e
  8c:	1f 86       	std	Y+15, r1	; 0x0f
  8e:	18 8a       	std	Y+16, r1	; 0x10
  90:	19 8a       	std	Y+17, r1	; 0x11
  92:	1a 8a       	std	Y+18, r1	; 0x12
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN6SdFile8openRootEP8SdVolume+0x96>
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	08 95       	ret

Disassembly of section .text._ZN6SdFile12printDirNameERK14directoryEntryh:

00000000 <_ZN6SdFile12printDirNameERK14directoryEntryh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
  write_P(str);
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
  println();
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	8c 01       	movw	r16, r24
}
  10:	d6 2e       	mov	r13, r22
  12:	ec 01       	movw	r28, r24
  14:	ee 24       	eor	r14, r14
  16:	ff 24       	eor	r15, r15
  18:	88 81       	ld	r24, Y
  1a:	80 32       	cpi	r24, 0x20	; 32
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZN6SdFile12printDirNameERK14directoryEntryh+0x1e>
  1e:	88 e0       	ldi	r24, 0x08	; 8
  20:	e8 16       	cp	r14, r24
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x24>
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	90 e0       	ldi	r25, 0x00	; 0
  28:	6e e2       	ldi	r22, 0x2E	; 46
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printDirNameERK14directoryEntryh>
  2e:	f3 94       	inc	r15
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	68 81       	ld	r22, Y
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printDirNameERK14directoryEntryh>
  3a:	f3 94       	inc	r15
  3c:	e3 94       	inc	r14
  3e:	21 96       	adiw	r28, 0x01	; 1
  40:	eb e0       	ldi	r30, 0x0B	; 11
  42:	ee 16       	cp	r14, r30
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x46>
  46:	f8 01       	movw	r30, r16
  48:	83 85       	ldd	r24, Z+11	; 0x0b
  4a:	88 71       	andi	r24, 0x18	; 24
  4c:	80 31       	cpi	r24, 0x10	; 16
  4e:	01 f4       	brne	.+0      	; 0x50 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x50>
  50:	80 e0       	ldi	r24, 0x00	; 0
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	6f e2       	ldi	r22, 0x2F	; 47
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x58>
  58:	80 e0       	ldi	r24, 0x00	; 0
  5a:	90 e0       	ldi	r25, 0x00	; 0
  5c:	60 e2       	ldi	r22, 0x20	; 32
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printDirNameERK14directoryEntryh>
  62:	f3 94       	inc	r15
  64:	fd 14       	cp	r15, r13
  66:	00 f0       	brcs	.+0      	; 0x68 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x68>
  68:	df 91       	pop	r29
  6a:	cf 91       	pop	r28
  6c:	1f 91       	pop	r17
  6e:	0f 91       	pop	r16
  70:	ff 90       	pop	r15
  72:	ef 90       	pop	r14
  74:	df 90       	pop	r13
  76:	08 95       	ret

Disassembly of section .text._ZN6SdFile14printTwoDigitsEh:

00000000 <_ZN6SdFile14printTwoDigitsEh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN6SdFile14printTwoDigitsEh+0x6>
  write_P(str);
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
  println();
   a:	de b7       	in	r29, 0x3e	; 62
   c:	6a e0       	ldi	r22, 0x0A	; 10
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile14printTwoDigitsEh>
}
  12:	80 5d       	subi	r24, 0xD0	; 208
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	90 5d       	subi	r25, 0xD0	; 208
  18:	9a 83       	std	Y+2, r25	; 0x02
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile14printTwoDigitsEh>
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	0f 90       	pop	r0
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6SdFile12printFatTimeEj:

00000000 <_ZN6SdFile12printFatTimeEj>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  println();
   a:	8d 2f       	mov	r24, r29
   c:	86 95       	lsr	r24
   e:	86 95       	lsr	r24
}
  10:	86 95       	lsr	r24
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatTimeEj>
  16:	00 e0       	ldi	r16, 0x00	; 0
  18:	10 e0       	ldi	r17, 0x00	; 0
  1a:	c8 01       	movw	r24, r16
  1c:	6a e3       	ldi	r22, 0x3A	; 58
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatTimeEj>
  22:	ce 01       	movw	r24, r28
  24:	45 e0       	ldi	r20, 0x05	; 5
  26:	96 95       	lsr	r25
  28:	87 95       	ror	r24
  2a:	4a 95       	dec	r20
  2c:	01 f4       	brne	.+0      	; 0x2e <_ZN6SdFile12printFatTimeEj+0x2e>
  2e:	8f 73       	andi	r24, 0x3F	; 63
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatTimeEj>
  34:	c8 01       	movw	r24, r16
  36:	6a e3       	ldi	r22, 0x3A	; 58
  38:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatTimeEj>
  3c:	8c 2f       	mov	r24, r28
  3e:	8f 71       	andi	r24, 0x1F	; 31
  40:	88 0f       	add	r24, r24
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatTimeEj>
  46:	df 91       	pop	r29
  48:	cf 91       	pop	r28
  4a:	1f 91       	pop	r17
  4c:	0f 91       	pop	r16
  4e:	08 95       	ret

Disassembly of section .text._ZN6SdFile12printFatDateEj:

00000000 <_ZN6SdFile12printFatDateEj>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  println();
   a:	c0 e0       	ldi	r28, 0x00	; 0
   c:	d0 e0       	ldi	r29, 0x00	; 0
   e:	bc 01       	movw	r22, r24
}
  10:	67 2f       	mov	r22, r23
  12:	77 27       	eor	r23, r23
  14:	66 95       	lsr	r22
  16:	64 54       	subi	r22, 0x44	; 68
  18:	78 4f       	sbci	r23, 0xF8	; 248
  1a:	ce 01       	movw	r24, r28
  1c:	4a e0       	ldi	r20, 0x0A	; 10
  1e:	50 e0       	ldi	r21, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatDateEj>
  24:	ce 01       	movw	r24, r28
  26:	6d e2       	ldi	r22, 0x2D	; 45
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatDateEj>
  2c:	c8 01       	movw	r24, r16
  2e:	65 e0       	ldi	r22, 0x05	; 5
  30:	96 95       	lsr	r25
  32:	87 95       	ror	r24
  34:	6a 95       	dec	r22
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6SdFile12printFatDateEj+0x38>
  38:	8f 70       	andi	r24, 0x0F	; 15
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatDateEj>
  3e:	ce 01       	movw	r24, r28
  40:	6d e2       	ldi	r22, 0x2D	; 45
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatDateEj>
  46:	80 2f       	mov	r24, r16
  48:	8f 71       	andi	r24, 0x1F	; 31
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12printFatDateEj>
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	08 95       	ret

Disassembly of section .text._ZN6SdFile4readEPvj:

00000000 <_ZN6SdFile4readEPvj>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
  write_P(str);
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
  println();
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
}
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	00 d0       	rcall	.+0      	; 0x26 <_ZN6SdFile4readEPvj+0x26>
  26:	00 d0       	rcall	.+0      	; 0x28 <_ZN6SdFile4readEPvj+0x28>
  28:	00 d0       	rcall	.+0      	; 0x2a <_ZN6SdFile4readEPvj+0x2a>
  2a:	cd b7       	in	r28, 0x3d	; 61
  2c:	de b7       	in	r29, 0x3e	; 62
  2e:	9c 83       	std	Y+4, r25	; 0x04
  30:	8b 83       	std	Y+3, r24	; 0x03
  32:	86 2e       	mov	r8, r22
  34:	27 2e       	mov	r2, r23
  36:	2a 01       	movw	r4, r20
  38:	dc 01       	movw	r26, r24
  3a:	15 96       	adiw	r26, 0x05	; 5
  3c:	8c 91       	ld	r24, X
  3e:	15 97       	sbiw	r26, 0x05	; 5
  40:	88 23       	and	r24, r24
  42:	01 f4       	brne	.+0      	; 0x44 <_ZN6SdFile4readEPvj+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6SdFile4readEPvj+0x46>
  46:	14 96       	adiw	r26, 0x04	; 4
  48:	8c 91       	ld	r24, X
  4a:	14 97       	sbiw	r26, 0x04	; 4
  4c:	80 ff       	sbrs	r24, 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6SdFile4readEPvj+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN6SdFile4readEPvj+0x52>
  52:	2a 01       	movw	r4, r20
  54:	48 1a       	sub	r4, r24
  56:	59 0a       	sbc	r5, r25
  58:	32 01       	movw	r6, r4
  5a:	a8 2c       	mov	r10, r8
  5c:	b2 2c       	mov	r11, r2
  5e:	eb 81       	ldd	r30, Y+3	; 0x03
  60:	fc 81       	ldd	r31, Y+4	; 0x04
  62:	36 96       	adiw	r30, 0x06	; 6
  64:	fa 83       	std	Y+2, r31	; 0x02
  66:	e9 83       	std	Y+1, r30	; 0x01
  68:	21 2c       	mov	r2, r1
  6a:	02 e0       	ldi	r16, 0x02	; 2
  6c:	30 2e       	mov	r3, r16
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN6SdFile4readEPvj+0x70>
  70:	eb 81       	ldd	r30, Y+3	; 0x03
  72:	fc 81       	ldd	r31, Y+4	; 0x04
  74:	82 85       	ldd	r24, Z+10	; 0x0a
  76:	93 85       	ldd	r25, Z+11	; 0x0b
  78:	a4 85       	ldd	r26, Z+12	; 0x0c
  7a:	b5 85       	ldd	r27, Z+13	; 0x0d
  7c:	7f ef       	ldi	r23, 0xFF	; 255
  7e:	87 2e       	mov	r8, r23
  80:	71 e0       	ldi	r23, 0x01	; 1
  82:	97 2e       	mov	r9, r23
  84:	88 22       	and	r8, r24
  86:	99 22       	and	r9, r25
  88:	25 81       	ldd	r18, Z+5	; 0x05
  8a:	6c 01       	movw	r12, r24
  8c:	7d 01       	movw	r14, r26
  8e:	19 e0       	ldi	r17, 0x09	; 9
  90:	f6 94       	lsr	r15
  92:	e7 94       	ror	r14
  94:	d7 94       	ror	r13
  96:	c7 94       	ror	r12
  98:	1a 95       	dec	r17
  9a:	01 f4       	brne	.+0      	; 0x9c <_ZN6SdFile4readEPvj+0x9c>
  9c:	43 8d       	ldd	r20, Z+27	; 0x1b
  9e:	54 8d       	ldd	r21, Z+28	; 0x1c
  a0:	5e 83       	std	Y+6, r21	; 0x06
  a2:	4d 83       	std	Y+5, r20	; 0x05
  a4:	22 30       	cpi	r18, 0x02	; 2
  a6:	01 f4       	brne	.+0      	; 0xa8 <_ZN6SdFile4readEPvj+0xa8>
  a8:	da 01       	movw	r26, r20
  aa:	5a 96       	adiw	r26, 0x1a	; 26
  ac:	4d 91       	ld	r20, X+
  ae:	5d 91       	ld	r21, X+
  b0:	6d 91       	ld	r22, X+
  b2:	7c 91       	ld	r23, X
  b4:	5d 97       	sbiw	r26, 0x1d	; 29
  b6:	4c 0d       	add	r20, r12
  b8:	5d 1d       	adc	r21, r13
  ba:	6e 1d       	adc	r22, r14
  bc:	7f 1d       	adc	r23, r15
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN6SdFile4readEPvj+0xc0>
  c0:	ed 81       	ldd	r30, Y+5	; 0x05
  c2:	fe 81       	ldd	r31, Y+6	; 0x06
  c4:	04 81       	ldd	r16, Z+4	; 0x04
  c6:	01 50       	subi	r16, 0x01	; 1
  c8:	0c 21       	and	r16, r12
  ca:	81 14       	cp	r8, r1
  cc:	91 04       	cpc	r9, r1
  ce:	01 f4       	brne	.+0      	; 0xd0 <_ZN6SdFile4readEPvj+0xd0>
  d0:	00 23       	and	r16, r16
  d2:	01 f4       	brne	.+0      	; 0xd4 <_ZN6SdFile4readEPvj+0xd4>
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	a1 05       	cpc	r26, r1
  d8:	b1 05       	cpc	r27, r1
  da:	01 f4       	brne	.+0      	; 0xdc <_ZN6SdFile4readEPvj+0xdc>
  dc:	eb 81       	ldd	r30, Y+3	; 0x03
  de:	fc 81       	ldd	r31, Y+4	; 0x04
  e0:	87 89       	ldd	r24, Z+23	; 0x17
  e2:	90 8d       	ldd	r25, Z+24	; 0x18
  e4:	a1 8d       	ldd	r26, Z+25	; 0x19
  e6:	b2 8d       	ldd	r27, Z+26	; 0x1a
  e8:	86 83       	std	Z+6, r24	; 0x06
  ea:	97 83       	std	Z+7, r25	; 0x07
  ec:	a0 87       	std	Z+8, r26	; 0x08
  ee:	b1 87       	std	Z+9, r27	; 0x09
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6SdFile4readEPvj+0xf2>
  f2:	ab 81       	ldd	r26, Y+3	; 0x03
  f4:	bc 81       	ldd	r27, Y+4	; 0x04
  f6:	16 96       	adiw	r26, 0x06	; 6
  f8:	4d 91       	ld	r20, X+
  fa:	5d 91       	ld	r21, X+
  fc:	6d 91       	ld	r22, X+
  fe:	7c 91       	ld	r23, X
 100:	19 97       	sbiw	r26, 0x09	; 9
 102:	8d 81       	ldd	r24, Y+5	; 0x05
 104:	9e 81       	ldd	r25, Y+6	; 0x06
 106:	29 81       	ldd	r18, Y+1	; 0x01
 108:	3a 81       	ldd	r19, Y+2	; 0x02
 10a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4readEPvj>
 10e:	88 23       	and	r24, r24
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6SdFile4readEPvj+0x112>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN6SdFile4readEPvj+0x114>
 114:	ab 81       	ldd	r26, Y+3	; 0x03
 116:	bc 81       	ldd	r27, Y+4	; 0x04
 118:	5b 96       	adiw	r26, 0x1b	; 27
 11a:	ed 91       	ld	r30, X+
 11c:	fc 91       	ld	r31, X
 11e:	5c 97       	sbiw	r26, 0x1c	; 28
 120:	16 96       	adiw	r26, 0x06	; 6
 122:	4d 91       	ld	r20, X+
 124:	5d 91       	ld	r21, X+
 126:	6d 91       	ld	r22, X+
 128:	7c 91       	ld	r23, X
 12a:	19 97       	sbiw	r26, 0x09	; 9
 12c:	42 50       	subi	r20, 0x02	; 2
 12e:	50 40       	sbci	r21, 0x00	; 0
 130:	60 40       	sbci	r22, 0x00	; 0
 132:	70 40       	sbci	r23, 0x00	; 0
 134:	05 84       	ldd	r0, Z+13	; 0x0d
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN6SdFile4readEPvj+0x138>
 138:	44 0f       	add	r20, r20
 13a:	55 1f       	adc	r21, r21
 13c:	66 1f       	adc	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	0a 94       	dec	r0
 142:	02 f4       	brpl	.+0      	; 0x144 <_ZN6SdFile4readEPvj+0x144>
 144:	86 85       	ldd	r24, Z+14	; 0x0e
 146:	97 85       	ldd	r25, Z+15	; 0x0f
 148:	a0 89       	ldd	r26, Z+16	; 0x10
 14a:	b1 89       	ldd	r27, Z+17	; 0x11
 14c:	48 0f       	add	r20, r24
 14e:	59 1f       	adc	r21, r25
 150:	6a 1f       	adc	r22, r26
 152:	7b 1f       	adc	r23, r27
 154:	40 0f       	add	r20, r16
 156:	51 1d       	adc	r21, r1
 158:	61 1d       	adc	r22, r1
 15a:	71 1d       	adc	r23, r1
 15c:	c1 01       	movw	r24, r2
 15e:	88 19       	sub	r24, r8
 160:	99 09       	sbc	r25, r9
 162:	63 01       	movw	r12, r6
 164:	86 15       	cp	r24, r6
 166:	97 05       	cpc	r25, r7
 168:	00 f4       	brcc	.+0      	; 0x16a <_ZN6SdFile4readEPvj+0x16a>
 16a:	6c 01       	movw	r12, r24
 16c:	eb 81       	ldd	r30, Y+3	; 0x03
 16e:	fc 81       	ldd	r31, Y+4	; 0x04
 170:	84 81       	ldd	r24, Z+4	; 0x04
 172:	86 fd       	sbrc	r24, 6
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZN6SdFile4readEPvj+0x176>
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	cf 16       	cp	r12, r31
 17a:	f2 e0       	ldi	r31, 0x02	; 2
 17c:	df 06       	cpc	r13, r31
 17e:	01 f0       	breq	.+0      	; 0x180 <_ZN6SdFile4readEPvj+0x180>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_ZN6SdFile4readEPvj+0x182>
 182:	80 91 00 00 	lds	r24, 0x0000
 186:	90 91 00 00 	lds	r25, 0x0000
 18a:	a0 91 00 00 	lds	r26, 0x0000
 18e:	b0 91 00 00 	lds	r27, 0x0000
 192:	48 17       	cp	r20, r24
 194:	59 07       	cpc	r21, r25
 196:	6a 07       	cpc	r22, r26
 198:	7b 07       	cpc	r23, r27
 19a:	01 f4       	brne	.+0      	; 0x19c <_ZN6SdFile4readEPvj+0x19c>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <_ZN6SdFile4readEPvj+0x19e>
 19e:	80 91 00 00 	lds	r24, 0x0000
 1a2:	90 91 00 00 	lds	r25, 0x0000
 1a6:	94 01       	movw	r18, r8
 1a8:	86 01       	movw	r16, r12
 1aa:	75 01       	movw	r14, r10
 1ac:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4readEPvj>
 1b0:	88 23       	and	r24, r24
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <_ZN6SdFile4readEPvj+0x1b4>
 1b4:	ac 0c       	add	r10, r12
 1b6:	bd 1c       	adc	r11, r13
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_ZN6SdFile4readEPvj+0x1ba>
 1ba:	94 01       	movw	r18, r8
 1bc:	20 50       	subi	r18, 0x00	; 0
 1be:	30 40       	sbci	r19, 0x00	; 0
 1c0:	c9 01       	movw	r24, r18
 1c2:	8c 0d       	add	r24, r12
 1c4:	9d 1d       	adc	r25, r13
 1c6:	f9 01       	movw	r30, r18
 1c8:	d5 01       	movw	r26, r10
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <_ZN6SdFile4readEPvj+0x1cc>
 1cc:	41 91       	ld	r20, Z+
 1ce:	4d 93       	st	X+, r20
 1d0:	e8 17       	cp	r30, r24
 1d2:	f9 07       	cpc	r31, r25
 1d4:	01 f4       	brne	.+0      	; 0x1d6 <_ZN6SdFile4readEPvj+0x1d6>
 1d6:	e2 1b       	sub	r30, r18
 1d8:	f3 0b       	sbc	r31, r19
 1da:	ae 0e       	add	r10, r30
 1dc:	bf 1e       	adc	r11, r31
 1de:	a6 01       	movw	r20, r12
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	70 e0       	ldi	r23, 0x00	; 0
 1e4:	eb 81       	ldd	r30, Y+3	; 0x03
 1e6:	fc 81       	ldd	r31, Y+4	; 0x04
 1e8:	82 85       	ldd	r24, Z+10	; 0x0a
 1ea:	93 85       	ldd	r25, Z+11	; 0x0b
 1ec:	a4 85       	ldd	r26, Z+12	; 0x0c
 1ee:	b5 85       	ldd	r27, Z+13	; 0x0d
 1f0:	84 0f       	add	r24, r20
 1f2:	95 1f       	adc	r25, r21
 1f4:	a6 1f       	adc	r26, r22
 1f6:	b7 1f       	adc	r27, r23
 1f8:	82 87       	std	Z+10, r24	; 0x0a
 1fa:	93 87       	std	Z+11, r25	; 0x0b
 1fc:	a4 87       	std	Z+12, r26	; 0x0c
 1fe:	b5 87       	std	Z+13, r27	; 0x0d
 200:	6c 18       	sub	r6, r12
 202:	7d 08       	sbc	r7, r13
 204:	61 14       	cp	r6, r1
 206:	71 04       	cpc	r7, r1
 208:	01 f0       	breq	.+0      	; 0x20a <_ZN6SdFile4readEPvj+0x20a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <_ZN6SdFile4readEPvj+0x20c>
 20c:	c2 01       	movw	r24, r4
 20e:	00 c0       	rjmp	.+0      	; 0x210 <_ZN6SdFile4readEPvj+0x210>
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	9f ef       	ldi	r25, 0xFF	; 255
 214:	26 96       	adiw	r28, 0x06	; 6
 216:	0f b6       	in	r0, 0x3f	; 63
 218:	f8 94       	cli
 21a:	de bf       	out	0x3e, r29	; 62
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	cd bf       	out	0x3d, r28	; 61
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	bf 90       	pop	r11
 232:	af 90       	pop	r10
 234:	9f 90       	pop	r9
 236:	8f 90       	pop	r8
 238:	7f 90       	pop	r7
 23a:	6f 90       	pop	r6
 23c:	5f 90       	pop	r5
 23e:	4f 90       	pop	r4
 240:	3f 90       	pop	r3
 242:	2f 90       	pop	r2
 244:	08 95       	ret
 246:	ab 81       	ldd	r26, Y+3	; 0x03
 248:	bc 81       	ldd	r27, Y+4	; 0x04
 24a:	53 96       	adiw	r26, 0x13	; 19
 24c:	4d 91       	ld	r20, X+
 24e:	5d 91       	ld	r21, X+
 250:	6d 91       	ld	r22, X+
 252:	7c 91       	ld	r23, X
 254:	56 97       	sbiw	r26, 0x16	; 22
 256:	1a 96       	adiw	r26, 0x0a	; 10
 258:	8d 91       	ld	r24, X+
 25a:	9d 91       	ld	r25, X+
 25c:	0d 90       	ld	r0, X+
 25e:	bc 91       	ld	r27, X
 260:	a0 2d       	mov	r26, r0
 262:	82 01       	movw	r16, r4
 264:	20 e0       	ldi	r18, 0x00	; 0
 266:	30 e0       	ldi	r19, 0x00	; 0
 268:	6a 01       	movw	r12, r20
 26a:	7b 01       	movw	r14, r22
 26c:	c8 1a       	sub	r12, r24
 26e:	d9 0a       	sbc	r13, r25
 270:	ea 0a       	sbc	r14, r26
 272:	fb 0a       	sbc	r15, r27
 274:	c0 16       	cp	r12, r16
 276:	d1 06       	cpc	r13, r17
 278:	e2 06       	cpc	r14, r18
 27a:	f3 06       	cpc	r15, r19
 27c:	00 f4       	brcc	.+0      	; 0x27e <_ZN6SdFile4readEPvj+0x27e>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <_ZN6SdFile4readEPvj+0x280>
 280:	00 c0       	rjmp	.+0      	; 0x282 <_ZN6SdFile4readEPvj+0x282>
 282:	cb 01       	movw	r24, r22
 284:	ba 01       	movw	r22, r20
 286:	40 e0       	ldi	r20, 0x00	; 0
 288:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4readEPvj>
 28c:	88 23       	and	r24, r24
 28e:	01 f0       	breq	.+0      	; 0x290 <_ZN6SdFile4readEPvj+0x290>
 290:	00 c0       	rjmp	.+0      	; 0x292 <_ZN6SdFile4readEPvj+0x292>
 292:	00 c0       	rjmp	.+0      	; 0x294 <__SREG__+0x255>

Disassembly of section .text._ZN6SdFile7readDirEP14directoryEntry:

00000000 <_ZN6SdFile7readDirEP14directoryEntry>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  println();
   a:	eb 01       	movw	r28, r22
   c:	fc 01       	movw	r30, r24
   e:	85 81       	ldd	r24, Z+5	; 0x05
}
  10:	82 30       	cpi	r24, 0x02	; 2
  12:	00 f0       	brcs	.+0      	; 0x14 <_ZN6SdFile7readDirEP14directoryEntry+0x14>
  14:	82 85       	ldd	r24, Z+10	; 0x0a
  16:	93 85       	ldd	r25, Z+11	; 0x0b
  18:	a4 85       	ldd	r26, Z+12	; 0x0c
  1a:	b5 85       	ldd	r27, Z+13	; 0x0d
  1c:	8f 71       	andi	r24, 0x1F	; 31
  1e:	90 70       	andi	r25, 0x00	; 0
  20:	a0 70       	andi	r26, 0x00	; 0
  22:	b0 70       	andi	r27, 0x00	; 0
  24:	00 97       	sbiw	r24, 0x00	; 0
  26:	a1 05       	cpc	r26, r1
  28:	b1 05       	cpc	r27, r1
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN6SdFile7readDirEP14directoryEntry+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6SdFile7readDirEP14directoryEntry+0x2e>
  2e:	98 81       	ld	r25, Y
  30:	99 23       	and	r25, r25
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6SdFile7readDirEP14directoryEntry+0x34>
  34:	95 3e       	cpi	r25, 0xE5	; 229
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN6SdFile7readDirEP14directoryEntry+0x38>
  38:	9e 32       	cpi	r25, 0x2E	; 46
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN6SdFile7readDirEP14directoryEntry+0x3c>
  3c:	9b 85       	ldd	r25, Y+11	; 0x0b
  3e:	93 ff       	sbrs	r25, 3
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6SdFile7readDirEP14directoryEntry+0x42>
  42:	c8 01       	movw	r24, r16
  44:	be 01       	movw	r22, r28
  46:	40 e2       	ldi	r20, 0x20	; 32
  48:	50 e0       	ldi	r21, 0x00	; 0
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7readDirEP14directoryEntry>
  4e:	80 32       	cpi	r24, 0x20	; 32
  50:	01 f0       	breq	.+0      	; 0x52 <_ZN6SdFile7readDirEP14directoryEntry+0x52>
  52:	88 0f       	add	r24, r24
  54:	88 0b       	sbc	r24, r24
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6SdFile7readDirEP14directoryEntry+0x58>
  58:	8f ef       	ldi	r24, 0xFF	; 255
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN6SdFile7readDirEP14directoryEntry+0x5c>
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	08 95       	ret

Disassembly of section .text._ZN6SdFile12readDirCacheEv:

00000000 <_ZN6SdFile12readDirCacheEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
  write_P(str);
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  println();
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}
  10:	0f 92       	push	r0
  12:	cd b7       	in	r28, 0x3d	; 61
  14:	de b7       	in	r29, 0x3e	; 62
  16:	8c 01       	movw	r16, r24
  18:	fc 01       	movw	r30, r24
  1a:	85 81       	ldd	r24, Z+5	; 0x05
  1c:	82 30       	cpi	r24, 0x02	; 2
  1e:	00 f0       	brcs	.+0      	; 0x20 <_ZN6SdFile12readDirCacheEv+0x20>
  20:	c2 84       	ldd	r12, Z+10	; 0x0a
  22:	d3 84       	ldd	r13, Z+11	; 0x0b
  24:	e4 84       	ldd	r14, Z+12	; 0x0c
  26:	f5 84       	ldd	r15, Z+13	; 0x0d
  28:	c8 01       	movw	r24, r16
  2a:	be 01       	movw	r22, r28
  2c:	6f 5f       	subi	r22, 0xFF	; 255
  2e:	7f 4f       	sbci	r23, 0xFF	; 255
  30:	41 e0       	ldi	r20, 0x01	; 1
  32:	50 e0       	ldi	r21, 0x00	; 0
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile12readDirCacheEv>
  38:	81 30       	cpi	r24, 0x01	; 1
  3a:	91 05       	cpc	r25, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZN6SdFile12readDirCacheEv+0x3e>
  3e:	80 e0       	ldi	r24, 0x00	; 0
  40:	90 e0       	ldi	r25, 0x00	; 0
  42:	0f 90       	pop	r0
  44:	df 91       	pop	r29
  46:	cf 91       	pop	r28
  48:	1f 91       	pop	r17
  4a:	0f 91       	pop	r16
  4c:	ff 90       	pop	r15
  4e:	ef 90       	pop	r14
  50:	df 90       	pop	r13
  52:	cf 90       	pop	r12
  54:	08 95       	ret
  56:	f8 01       	movw	r30, r16
  58:	82 85       	ldd	r24, Z+10	; 0x0a
  5a:	93 85       	ldd	r25, Z+11	; 0x0b
  5c:	a4 85       	ldd	r26, Z+12	; 0x0c
  5e:	b5 85       	ldd	r27, Z+13	; 0x0d
  60:	4f 96       	adiw	r24, 0x1f	; 31
  62:	a1 1d       	adc	r26, r1
  64:	b1 1d       	adc	r27, r1
  66:	82 87       	std	Z+10, r24	; 0x0a
  68:	93 87       	std	Z+11, r25	; 0x0b
  6a:	a4 87       	std	Z+12, r26	; 0x0c
  6c:	b5 87       	std	Z+13, r27	; 0x0d
  6e:	d7 01       	movw	r26, r14
  70:	c6 01       	movw	r24, r12
  72:	25 e0       	ldi	r18, 0x05	; 5
  74:	b6 95       	lsr	r27
  76:	a7 95       	ror	r26
  78:	97 95       	ror	r25
  7a:	87 95       	ror	r24
  7c:	2a 95       	dec	r18
  7e:	01 f4       	brne	.+0      	; 0x80 <_ZN6SdFile12readDirCacheEv+0x80>
  80:	8f 70       	andi	r24, 0x0F	; 15
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	35 e0       	ldi	r19, 0x05	; 5
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	3a 95       	dec	r19
  8c:	01 f4       	brne	.+0      	; 0x8e <_ZN6SdFile12readDirCacheEv+0x8e>
  8e:	80 50       	subi	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	00 c0       	rjmp	.+0      	; 0x94 <__SREG__+0x55>

Disassembly of section .text._ZN6SdFile7seekSetEm:

00000000 <_ZN6SdFile7seekSetEm>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  write_P(str);
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
  println();
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
}
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	ec 01       	movw	r28, r24
  1a:	4a 01       	movw	r8, r20
  1c:	5b 01       	movw	r10, r22
  1e:	2d 81       	ldd	r18, Y+5	; 0x05
  20:	22 23       	and	r18, r18
  22:	01 f4       	brne	.+0      	; 0x24 <_ZN6SdFile7seekSetEm+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6SdFile7seekSetEm+0x26>
  26:	8b 89       	ldd	r24, Y+19	; 0x13
  28:	9c 89       	ldd	r25, Y+20	; 0x14
  2a:	ad 89       	ldd	r26, Y+21	; 0x15
  2c:	be 89       	ldd	r27, Y+22	; 0x16
  2e:	84 17       	cp	r24, r20
  30:	95 07       	cpc	r25, r21
  32:	a6 07       	cpc	r26, r22
  34:	b7 07       	cpc	r27, r23
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZN6SdFile7seekSetEm+0x38>
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN6SdFile7seekSetEm+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6SdFile7seekSetEm+0x3c>
  3c:	81 14       	cp	r8, r1
  3e:	91 04       	cpc	r9, r1
  40:	a1 04       	cpc	r10, r1
  42:	b1 04       	cpc	r11, r1
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN6SdFile7seekSetEm+0x46>
  46:	1e 82       	std	Y+6, r1	; 0x06
  48:	1f 82       	std	Y+7, r1	; 0x07
  4a:	18 86       	std	Y+8, r1	; 0x08
  4c:	19 86       	std	Y+9, r1	; 0x09
  4e:	1a 86       	std	Y+10, r1	; 0x0a
  50:	1b 86       	std	Y+11, r1	; 0x0b
  52:	1c 86       	std	Y+12, r1	; 0x0c
  54:	1d 86       	std	Y+13, r1	; 0x0d
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZN6SdFile7seekSetEm+0x58>
  58:	4a 85       	ldd	r20, Y+10	; 0x0a
  5a:	5b 85       	ldd	r21, Y+11	; 0x0b
  5c:	6c 85       	ldd	r22, Y+12	; 0x0c
  5e:	7d 85       	ldd	r23, Y+13	; 0x0d
  60:	eb 8d       	ldd	r30, Y+27	; 0x1b
  62:	fc 8d       	ldd	r31, Y+28	; 0x1c
  64:	25 85       	ldd	r18, Z+13	; 0x0d
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	27 5f       	subi	r18, 0xF7	; 247
  6a:	3f 4f       	sbci	r19, 0xFF	; 255
  6c:	db 01       	movw	r26, r22
  6e:	ca 01       	movw	r24, r20
  70:	01 97       	sbiw	r24, 0x01	; 1
  72:	a1 09       	sbc	r26, r1
  74:	b1 09       	sbc	r27, r1
  76:	02 2e       	mov	r0, r18
  78:	00 c0       	rjmp	.+0      	; 0x7a <_ZN6SdFile7seekSetEm+0x7a>
  7a:	b6 95       	lsr	r27
  7c:	a7 95       	ror	r26
  7e:	97 95       	ror	r25
  80:	87 95       	ror	r24
  82:	0a 94       	dec	r0
  84:	02 f4       	brpl	.+0      	; 0x86 <_ZN6SdFile7seekSetEm+0x86>
  86:	75 01       	movw	r14, r10
  88:	64 01       	movw	r12, r8
  8a:	08 94       	sec
  8c:	c1 08       	sbc	r12, r1
  8e:	d1 08       	sbc	r13, r1
  90:	e1 08       	sbc	r14, r1
  92:	f1 08       	sbc	r15, r1
  94:	00 c0       	rjmp	.+0      	; 0x96 <_ZN6SdFile7seekSetEm+0x96>
  96:	f6 94       	lsr	r15
  98:	e7 94       	ror	r14
  9a:	d7 94       	ror	r13
  9c:	c7 94       	ror	r12
  9e:	2a 95       	dec	r18
  a0:	02 f4       	brpl	.+0      	; 0xa2 <_ZN6SdFile7seekSetEm+0xa2>
  a2:	c8 16       	cp	r12, r24
  a4:	d9 06       	cpc	r13, r25
  a6:	ea 06       	cpc	r14, r26
  a8:	fb 06       	cpc	r15, r27
  aa:	00 f0       	brcs	.+0      	; 0xac <_ZN6SdFile7seekSetEm+0xac>
  ac:	41 15       	cp	r20, r1
  ae:	51 05       	cpc	r21, r1
  b0:	61 05       	cpc	r22, r1
  b2:	71 05       	cpc	r23, r1
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN6SdFile7seekSetEm+0xb6>
  b6:	8f 89       	ldd	r24, Y+23	; 0x17
  b8:	98 8d       	ldd	r25, Y+24	; 0x18
  ba:	a9 8d       	ldd	r26, Y+25	; 0x19
  bc:	ba 8d       	ldd	r27, Y+26	; 0x1a
  be:	8e 83       	std	Y+6, r24	; 0x06
  c0:	9f 83       	std	Y+7, r25	; 0x07
  c2:	a8 87       	std	Y+8, r26	; 0x08
  c4:	b9 87       	std	Y+9, r27	; 0x09
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN6SdFile7seekSetEm+0xc8>
  c8:	c8 1a       	sub	r12, r24
  ca:	d9 0a       	sbc	r13, r25
  cc:	ea 0a       	sbc	r14, r26
  ce:	fb 0a       	sbc	r15, r27
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN6SdFile7seekSetEm+0xd2>
  d2:	4e 81       	ldd	r20, Y+6	; 0x06
  d4:	5f 81       	ldd	r21, Y+7	; 0x07
  d6:	68 85       	ldd	r22, Y+8	; 0x08
  d8:	79 85       	ldd	r23, Y+9	; 0x09
  da:	8b 8d       	ldd	r24, Y+27	; 0x1b
  dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
  de:	98 01       	movw	r18, r16
  e0:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7seekSetEm>
  e4:	08 94       	sec
  e6:	c1 08       	sbc	r12, r1
  e8:	d1 08       	sbc	r13, r1
  ea:	e1 08       	sbc	r14, r1
  ec:	f1 08       	sbc	r15, r1
  ee:	88 23       	and	r24, r24
  f0:	01 f4       	brne	.+0      	; 0xf2 <_ZN6SdFile7seekSetEm+0xf2>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZN6SdFile7seekSetEm+0xf4>
  f4:	8e 01       	movw	r16, r28
  f6:	0a 5f       	subi	r16, 0xFA	; 250
  f8:	1f 4f       	sbci	r17, 0xFF	; 255
  fa:	c1 14       	cp	r12, r1
  fc:	d1 04       	cpc	r13, r1
  fe:	e1 04       	cpc	r14, r1
 100:	f1 04       	cpc	r15, r1
 102:	01 f4       	brne	.+0      	; 0x104 <_ZN6SdFile7seekSetEm+0x104>
 104:	8a 86       	std	Y+10, r8	; 0x0a
 106:	9b 86       	std	Y+11, r9	; 0x0b
 108:	ac 86       	std	Y+12, r10	; 0x0c
 10a:	bd 86       	std	Y+13, r11	; 0x0d
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	00 c0       	rjmp	.+0      	; 0x110 <_ZN6SdFile7seekSetEm+0x110>
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	0f 91       	pop	r16
 11a:	ff 90       	pop	r15
 11c:	ef 90       	pop	r14
 11e:	df 90       	pop	r13
 120:	cf 90       	pop	r12
 122:	bf 90       	pop	r11
 124:	af 90       	pop	r10
 126:	9f 90       	pop	r9
 128:	8f 90       	pop	r8
 12a:	08 95       	ret
 12c:	22 30       	cpi	r18, 0x02	; 2
 12e:	01 f0       	breq	.+0      	; 0x130 <_ZN6SdFile7seekSetEm+0x130>
 130:	00 c0       	rjmp	.+0      	; 0x132 <_ZN6SdFile7seekSetEm+0x132>
 132:	00 c0       	rjmp	.+0      	; 0x134 <__SREG__+0xf5>

Disassembly of section .text._ZN6SdFile4syncEv:

00000000 <_ZN6SdFile4syncEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  println();
   a:	fc 01       	movw	r30, r24
   c:	85 81       	ldd	r24, Z+5	; 0x05
   e:	88 23       	and	r24, r24
}
  10:	01 f0       	breq	.+0      	; 0x12 <_ZN6SdFile4syncEv+0x12>
  12:	84 81       	ldd	r24, Z+4	; 0x04
  14:	87 ff       	sbrs	r24, 7
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN6SdFile4syncEv+0x18>
  18:	c8 01       	movw	r24, r16
  1a:	61 e0       	ldi	r22, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4syncEv>
  20:	ec 01       	movw	r28, r24
  22:	00 97       	sbiw	r24, 0x00	; 0
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN6SdFile4syncEv+0x26>
  26:	f8 01       	movw	r30, r16
  28:	85 81       	ldd	r24, Z+5	; 0x05
  2a:	82 30       	cpi	r24, 0x02	; 2
  2c:	00 f4       	brcc	.+0      	; 0x2e <_ZN6SdFile4syncEv+0x2e>
  2e:	83 89       	ldd	r24, Z+19	; 0x13
  30:	94 89       	ldd	r25, Z+20	; 0x14
  32:	a5 89       	ldd	r26, Z+21	; 0x15
  34:	b6 89       	ldd	r27, Z+22	; 0x16
  36:	8c 8f       	std	Y+28, r24	; 0x1c
  38:	9d 8f       	std	Y+29, r25	; 0x1d
  3a:	ae 8f       	std	Y+30, r26	; 0x1e
  3c:	bf 8f       	std	Y+31, r27	; 0x1f
  3e:	f8 01       	movw	r30, r16
  40:	87 89       	ldd	r24, Z+23	; 0x17
  42:	90 8d       	ldd	r25, Z+24	; 0x18
  44:	a1 8d       	ldd	r26, Z+25	; 0x19
  46:	b2 8d       	ldd	r27, Z+26	; 0x1a
  48:	9b 8f       	std	Y+27, r25	; 0x1b
  4a:	8a 8f       	std	Y+26, r24	; 0x1a
  4c:	bd 8b       	std	Y+21, r27	; 0x15
  4e:	ac 8b       	std	Y+20, r26	; 0x14
  50:	e0 91 00 00 	lds	r30, 0x0000
  54:	f0 91 00 00 	lds	r31, 0x0000
  58:	30 97       	sbiw	r30, 0x00	; 0
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZN6SdFile4syncEv+0x5c>
  5c:	be 01       	movw	r22, r28
  5e:	6a 5e       	subi	r22, 0xEA	; 234
  60:	7f 4f       	sbci	r23, 0xFF	; 255
  62:	ce 01       	movw	r24, r28
  64:	48 96       	adiw	r24, 0x18	; 24
  66:	09 95       	icall
  68:	88 8d       	ldd	r24, Y+24	; 0x18
  6a:	99 8d       	ldd	r25, Y+25	; 0x19
  6c:	9b 8b       	std	Y+19, r25	; 0x13
  6e:	8a 8b       	std	Y+18, r24	; 0x12
  70:	f8 01       	movw	r30, r16
  72:	84 81       	ldd	r24, Z+4	; 0x04
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	84 83       	std	Z+4, r24	; 0x04
  78:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4syncEv>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <_ZN6SdFile4syncEv+0x7e>
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	df 91       	pop	r29
  82:	cf 91       	pop	r28
  84:	1f 91       	pop	r17
  86:	0f 91       	pop	r16
  88:	08 95       	ret

Disassembly of section .text._ZN6SdFile8dirEntryEP14directoryEntry:

00000000 <_ZN6SdFile8dirEntryEP14directoryEntry>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
  println();
   a:	16 2f       	mov	r17, r22
   c:	07 2f       	mov	r16, r23
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8dirEntryEP14directoryEntry>
}
  12:	88 23       	and	r24, r24
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6SdFile8dirEntryEP14directoryEntry+0x16>
  16:	ce 01       	movw	r24, r28
  18:	60 e0       	ldi	r22, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8dirEntryEP14directoryEntry>
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6SdFile8dirEntryEP14directoryEntry+0x22>
  22:	e1 2f       	mov	r30, r17
  24:	f0 2f       	mov	r31, r16
  26:	dc 01       	movw	r26, r24
  28:	80 e2       	ldi	r24, 0x20	; 32
  2a:	0d 90       	ld	r0, X+
  2c:	01 92       	st	Z+, r0
  2e:	81 50       	subi	r24, 0x01	; 1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6SdFile8dirEntryEP14directoryEntry+0x32>
  32:	81 e0       	ldi	r24, 0x01	; 1
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN6SdFile8dirEntryEP14directoryEntry+0x36>
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	08 95       	ret

Disassembly of section .text._ZN6SdFile5closeEv:

00000000 <_ZN6SdFile5closeEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5closeEv>
  println();
   a:	88 23       	and	r24, r24
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6SdFile5closeEv+0xe>
   e:	1d 82       	std	Y+5, r1	; 0x05
}
  10:	81 e0       	ldi	r24, 0x01	; 1
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN6SdFile5closeEv+0x14>
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	df 91       	pop	r29
  18:	cf 91       	pop	r28
  1a:	08 95       	ret

Disassembly of section .text._ZN6SdFile9timestampEhjhhhhh:

00000000 <_ZN6SdFile9timestampEhjhhhhh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
  write_P(str);
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
  println();
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	ef 92       	push	r14
}
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	0f 92       	push	r0
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
  20:	4c 01       	movw	r8, r24
  22:	f6 2e       	mov	r15, r22
  24:	3a 01       	movw	r6, r20
  26:	dc 01       	movw	r26, r24
  28:	15 96       	adiw	r26, 0x05	; 5
  2a:	8c 91       	ld	r24, X
  2c:	15 97       	sbiw	r26, 0x05	; 5
  2e:	88 23       	and	r24, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6SdFile9timestampEhjhhhhh+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6SdFile9timestampEhjhhhhh+0x34>
  34:	b7 e0       	ldi	r27, 0x07	; 7
  36:	4c 3b       	cpi	r20, 0xBC	; 188
  38:	5b 07       	cpc	r21, r27
  3a:	00 f4       	brcc	.+0      	; 0x3c <_ZN6SdFile9timestampEhjhhhhh+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6SdFile9timestampEhjhhhhh+0x3e>
  3e:	e8 e0       	ldi	r30, 0x08	; 8
  40:	4c 33       	cpi	r20, 0x3C	; 60
  42:	5e 07       	cpc	r21, r30
  44:	00 f0       	brcs	.+0      	; 0x46 <_ZN6SdFile9timestampEhjhhhhh+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <_ZN6SdFile9timestampEhjhhhhh+0x48>
  48:	22 23       	and	r18, r18
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6SdFile9timestampEhjhhhhh+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6SdFile9timestampEhjhhhhh+0x4e>
  4e:	2d 30       	cpi	r18, 0x0D	; 13
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6SdFile9timestampEhjhhhhh+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN6SdFile9timestampEhjhhhhh+0x54>
  54:	00 23       	and	r16, r16
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN6SdFile9timestampEhjhhhhh+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZN6SdFile9timestampEhjhhhhh+0x5a>
  5a:	00 32       	cpi	r16, 0x20	; 32
  5c:	00 f0       	brcs	.+0      	; 0x5e <_ZN6SdFile9timestampEhjhhhhh+0x5e>
  5e:	00 c0       	rjmp	.+0      	; 0x60 <_ZN6SdFile9timestampEhjhhhhh+0x60>
  60:	f7 e1       	ldi	r31, 0x17	; 23
  62:	fe 15       	cp	r31, r14
  64:	00 f4       	brcc	.+0      	; 0x66 <_ZN6SdFile9timestampEhjhhhhh+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN6SdFile9timestampEhjhhhhh+0x68>
  68:	8b e3       	ldi	r24, 0x3B	; 59
  6a:	8c 15       	cp	r24, r12
  6c:	00 f4       	brcc	.+0      	; 0x6e <_ZN6SdFile9timestampEhjhhhhh+0x6e>
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN6SdFile9timestampEhjhhhhh+0x70>
  70:	8a 15       	cp	r24, r10
  72:	00 f4       	brcc	.+0      	; 0x74 <_ZN6SdFile9timestampEhjhhhhh+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN6SdFile9timestampEhjhhhhh+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN6SdFile9timestampEhjhhhhh+0x78>
  78:	10 e0       	ldi	r17, 0x00	; 0
  7a:	c3 01       	movw	r24, r6
  7c:	8c 5b       	subi	r24, 0xBC	; 188
  7e:	97 40       	sbci	r25, 0x07	; 7
  80:	98 2f       	mov	r25, r24
  82:	88 27       	eor	r24, r24
  84:	99 0f       	add	r25, r25
  86:	08 2b       	or	r16, r24
  88:	19 2b       	or	r17, r25
  8a:	82 2f       	mov	r24, r18
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	55 e0       	ldi	r21, 0x05	; 5
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	5a 95       	dec	r21
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN6SdFile9timestampEhjhhhhh+0x98>
  98:	08 2b       	or	r16, r24
  9a:	19 2b       	or	r17, r25
  9c:	bb 24       	eor	r11, r11
  9e:	2c 2d       	mov	r18, r12
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	65 e0       	ldi	r22, 0x05	; 5
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	6a 95       	dec	r22
  aa:	01 f4       	brne	.+0      	; 0xac <_ZN6SdFile9timestampEhjhhhhh+0xac>
  ac:	9e 2d       	mov	r25, r14
  ae:	99 0f       	add	r25, r25
  b0:	99 0f       	add	r25, r25
  b2:	99 0f       	add	r25, r25
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	28 2b       	or	r18, r24
  b8:	39 2b       	or	r19, r25
  ba:	c5 01       	movw	r24, r10
  bc:	95 95       	asr	r25
  be:	87 95       	ror	r24
  c0:	28 2b       	or	r18, r24
  c2:	39 2b       	or	r19, r25
  c4:	f0 fe       	sbrs	r15, 0
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN6SdFile9timestampEhjhhhhh+0xc8>
  c8:	13 8b       	std	Z+19, r17	; 0x13
  ca:	02 8b       	std	Z+18, r16	; 0x12
  cc:	f1 fe       	sbrs	r15, 1
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN6SdFile9timestampEhjhhhhh+0xd0>
  d0:	11 8b       	std	Z+17, r17	; 0x11
  d2:	00 8b       	std	Z+16, r16	; 0x10
  d4:	37 87       	std	Z+15, r19	; 0x0f
  d6:	26 87       	std	Z+14, r18	; 0x0e
  d8:	a0 fe       	sbrs	r10, 0
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN6SdFile9timestampEhjhhhhh+0xdc>
  dc:	84 e6       	ldi	r24, 0x64	; 100
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_ZN6SdFile9timestampEhjhhhhh+0xe0>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	85 87       	std	Z+13, r24	; 0x0d
  e4:	f2 fe       	sbrs	r15, 2
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <_ZN6SdFile9timestampEhjhhhhh+0xe8>
  e8:	11 8f       	std	Z+25, r17	; 0x19
  ea:	00 8f       	std	Z+24, r16	; 0x18
  ec:	37 8b       	std	Z+23, r19	; 0x17
  ee:	26 8b       	std	Z+22, r18	; 0x16
  f0:	80 91 00 00 	lds	r24, 0x0000
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	80 93 00 00 	sts	0x0000, r24
  fa:	c4 01       	movw	r24, r8
  fc:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile9timestampEhjhhhhh>
 100:	00 c0       	rjmp	.+0      	; 0x102 <_ZN6SdFile9timestampEhjhhhhh+0x102>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	0f 90       	pop	r0
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	ff 90       	pop	r15
 110:	ef 90       	pop	r14
 112:	cf 90       	pop	r12
 114:	bf 90       	pop	r11
 116:	af 90       	pop	r10
 118:	9f 90       	pop	r9
 11a:	8f 90       	pop	r8
 11c:	7f 90       	pop	r7
 11e:	6f 90       	pop	r6
 120:	08 95       	ret
 122:	c4 01       	movw	r24, r8
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	29 83       	std	Y+1, r18	; 0x01
 128:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile9timestampEhjhhhhh>
 12c:	fc 01       	movw	r30, r24
 12e:	29 81       	ldd	r18, Y+1	; 0x01
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	01 f0       	breq	.+0      	; 0x134 <_ZN6SdFile9timestampEhjhhhhh+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <_ZN6SdFile9timestampEhjhhhhh+0x136>
 136:	00 c0       	rjmp	.+0      	; 0x138 <__SREG__+0xf9>

Disassembly of section .text._ZN6SdFile8truncateEm:

00000000 <_ZN6SdFile8truncateEm>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
  write_P(str);
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
  println();
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
}
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	00 d0       	rcall	.+0      	; 0x1e <_ZN6SdFile8truncateEm+0x1e>
  1e:	00 d0       	rcall	.+0      	; 0x20 <_ZN6SdFile8truncateEm+0x20>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	7c 01       	movw	r14, r24
  26:	4a 01       	movw	r8, r20
  28:	5b 01       	movw	r10, r22
  2a:	dc 01       	movw	r26, r24
  2c:	15 96       	adiw	r26, 0x05	; 5
  2e:	8c 91       	ld	r24, X
  30:	15 97       	sbiw	r26, 0x05	; 5
  32:	81 30       	cpi	r24, 0x01	; 1
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN6SdFile8truncateEm+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <_ZN6SdFile8truncateEm+0x38>
  38:	14 96       	adiw	r26, 0x04	; 4
  3a:	8c 91       	ld	r24, X
  3c:	14 97       	sbiw	r26, 0x04	; 4
  3e:	81 ff       	sbrs	r24, 1
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6SdFile8truncateEm+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6SdFile8truncateEm+0x44>
  44:	00 97       	sbiw	r24, 0x00	; 0
  46:	a1 05       	cpc	r26, r1
  48:	b1 05       	cpc	r27, r1
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZN6SdFile8truncateEm+0x4c>
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6SdFile8truncateEm+0x4e>
  4e:	f7 01       	movw	r30, r14
  50:	42 84       	ldd	r4, Z+10	; 0x0a
  52:	53 84       	ldd	r5, Z+11	; 0x0b
  54:	64 84       	ldd	r6, Z+12	; 0x0c
  56:	75 84       	ldd	r7, Z+13	; 0x0d
  58:	c7 01       	movw	r24, r14
  5a:	b5 01       	movw	r22, r10
  5c:	a4 01       	movw	r20, r8
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
  62:	88 23       	and	r24, r24
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN6SdFile8truncateEm+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN6SdFile8truncateEm+0x68>
  68:	d7 01       	movw	r26, r14
  6a:	5b 96       	adiw	r26, 0x1b	; 27
  6c:	8d 91       	ld	r24, X+
  6e:	9c 91       	ld	r25, X
  70:	5c 97       	sbiw	r26, 0x1c	; 28
  72:	81 14       	cp	r8, r1
  74:	91 04       	cpc	r9, r1
  76:	a1 04       	cpc	r10, r1
  78:	b1 04       	cpc	r11, r1
  7a:	01 f4       	brne	.+0      	; 0x7c <_ZN6SdFile8truncateEm+0x7c>
  7c:	57 96       	adiw	r26, 0x17	; 23
  7e:	4d 91       	ld	r20, X+
  80:	5d 91       	ld	r21, X+
  82:	6d 91       	ld	r22, X+
  84:	7c 91       	ld	r23, X
  86:	5a 97       	sbiw	r26, 0x1a	; 26
  88:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
  8c:	88 23       	and	r24, r24
  8e:	01 f4       	brne	.+0      	; 0x90 <_ZN6SdFile8truncateEm+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN6SdFile8truncateEm+0x92>
  92:	f7 01       	movw	r30, r14
  94:	17 8a       	std	Z+23, r1	; 0x17
  96:	10 8e       	std	Z+24, r1	; 0x18
  98:	11 8e       	std	Z+25, r1	; 0x19
  9a:	12 8e       	std	Z+26, r1	; 0x1a
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN6SdFile8truncateEm+0x9e>
  9e:	d7 01       	movw	r26, r14
  a0:	16 96       	adiw	r26, 0x06	; 6
  a2:	4d 91       	ld	r20, X+
  a4:	5d 91       	ld	r21, X+
  a6:	6d 91       	ld	r22, X+
  a8:	7c 91       	ld	r23, X
  aa:	19 97       	sbiw	r26, 0x09	; 9
  ac:	9e 01       	movw	r18, r28
  ae:	2f 5f       	subi	r18, 0xFF	; 255
  b0:	3f 4f       	sbci	r19, 0xFF	; 255
  b2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
  b6:	88 23       	and	r24, r24
  b8:	01 f4       	brne	.+0      	; 0xba <_ZN6SdFile8truncateEm+0xba>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN6SdFile8truncateEm+0xbc>
  bc:	d7 01       	movw	r26, r14
  be:	5b 96       	adiw	r26, 0x1b	; 27
  c0:	ed 91       	ld	r30, X+
  c2:	fc 91       	ld	r31, X
  c4:	5c 97       	sbiw	r26, 0x1c	; 28
  c6:	49 81       	ldd	r20, Y+1	; 0x01
  c8:	5a 81       	ldd	r21, Y+2	; 0x02
  ca:	6b 81       	ldd	r22, Y+3	; 0x03
  cc:	7c 81       	ldd	r23, Y+4	; 0x04
  ce:	87 89       	ldd	r24, Z+23	; 0x17
  d0:	80 31       	cpi	r24, 0x10	; 16
  d2:	01 f4       	brne	.+0      	; 0xd4 <_ZN6SdFile8truncateEm+0xd4>
  d4:	88 ef       	ldi	r24, 0xF8	; 248
  d6:	9f ef       	ldi	r25, 0xFF	; 255
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	00 c0       	rjmp	.+0      	; 0xde <_ZN6SdFile8truncateEm+0xde>
  de:	88 ef       	ldi	r24, 0xF8	; 248
  e0:	9f ef       	ldi	r25, 0xFF	; 255
  e2:	af ef       	ldi	r26, 0xFF	; 255
  e4:	bf e0       	ldi	r27, 0x0F	; 15
  e6:	48 17       	cp	r20, r24
  e8:	59 07       	cpc	r21, r25
  ea:	6a 07       	cpc	r22, r26
  ec:	7b 07       	cpc	r23, r27
  ee:	00 f4       	brcc	.+0      	; 0xf0 <_ZN6SdFile8truncateEm+0xf0>
  f0:	cf 01       	movw	r24, r30
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
  f6:	88 23       	and	r24, r24
  f8:	01 f0       	breq	.+0      	; 0xfa <_ZN6SdFile8truncateEm+0xfa>
  fa:	f7 01       	movw	r30, r14
  fc:	46 81       	ldd	r20, Z+6	; 0x06
  fe:	57 81       	ldd	r21, Z+7	; 0x07
 100:	60 85       	ldd	r22, Z+8	; 0x08
 102:	71 85       	ldd	r23, Z+9	; 0x09
 104:	83 8d       	ldd	r24, Z+27	; 0x1b
 106:	94 8d       	ldd	r25, Z+28	; 0x1c
 108:	0f ef       	ldi	r16, 0xFF	; 255
 10a:	1f ef       	ldi	r17, 0xFF	; 255
 10c:	2f ef       	ldi	r18, 0xFF	; 255
 10e:	3f e0       	ldi	r19, 0x0F	; 15
 110:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
 114:	88 23       	and	r24, r24
 116:	01 f0       	breq	.+0      	; 0x118 <_ZN6SdFile8truncateEm+0x118>
 118:	d7 01       	movw	r26, r14
 11a:	53 96       	adiw	r26, 0x13	; 19
 11c:	8d 92       	st	X+, r8
 11e:	9d 92       	st	X+, r9
 120:	ad 92       	st	X+, r10
 122:	bc 92       	st	X, r11
 124:	56 97       	sbiw	r26, 0x16	; 22
 126:	14 96       	adiw	r26, 0x04	; 4
 128:	8c 91       	ld	r24, X
 12a:	14 97       	sbiw	r26, 0x04	; 4
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	14 96       	adiw	r26, 0x04	; 4
 130:	8c 93       	st	X, r24
 132:	c7 01       	movw	r24, r14
 134:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
 138:	88 23       	and	r24, r24
 13a:	01 f0       	breq	.+0      	; 0x13c <_ZN6SdFile8truncateEm+0x13c>
 13c:	b5 01       	movw	r22, r10
 13e:	a4 01       	movw	r20, r8
 140:	48 14       	cp	r4, r8
 142:	59 04       	cpc	r5, r9
 144:	6a 04       	cpc	r6, r10
 146:	7b 04       	cpc	r7, r11
 148:	00 f4       	brcc	.+0      	; 0x14a <_ZN6SdFile8truncateEm+0x14a>
 14a:	b3 01       	movw	r22, r6
 14c:	a2 01       	movw	r20, r4
 14e:	c7 01       	movw	r24, r14
 150:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8truncateEm>
 154:	00 c0       	rjmp	.+0      	; 0x156 <_ZN6SdFile8truncateEm+0x156>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN6SdFile8truncateEm+0x15a>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	0f 90       	pop	r0
 164:	df 91       	pop	r29
 166:	cf 91       	pop	r28
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	bf 90       	pop	r11
 172:	af 90       	pop	r10
 174:	9f 90       	pop	r9
 176:	8f 90       	pop	r8
 178:	7f 90       	pop	r7
 17a:	6f 90       	pop	r6
 17c:	5f 90       	pop	r5
 17e:	4f 90       	pop	r4
 180:	08 95       	ret
 182:	f7 01       	movw	r30, r14
 184:	83 89       	ldd	r24, Z+19	; 0x13
 186:	94 89       	ldd	r25, Z+20	; 0x14
 188:	a5 89       	ldd	r26, Z+21	; 0x15
 18a:	b6 89       	ldd	r27, Z+22	; 0x16
 18c:	84 17       	cp	r24, r20
 18e:	95 07       	cpc	r25, r21
 190:	a6 07       	cpc	r26, r22
 192:	b7 07       	cpc	r27, r23
 194:	00 f0       	brcs	.+0      	; 0x196 <_ZN6SdFile8truncateEm+0x196>
 196:	00 c0       	rjmp	.+0      	; 0x198 <_ZN6SdFile8truncateEm+0x198>
 198:	00 c0       	rjmp	.+0      	; 0x19a <__SREG__+0x15b>

Disassembly of section .text._ZN6SdFile6removeEv:

00000000 <_ZN6SdFile6removeEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	40 e0       	ldi	r20, 0x00	; 0
   8:	50 e0       	ldi	r21, 0x00	; 0
  println();
   a:	60 e0       	ldi	r22, 0x00	; 0
   c:	70 e0       	ldi	r23, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile6removeEv>
}
  12:	88 23       	and	r24, r24
  14:	01 f0       	breq	.+0      	; 0x16 <_ZN6SdFile6removeEv+0x16>
  16:	ce 01       	movw	r24, r28
  18:	61 e0       	ldi	r22, 0x01	; 1
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile6removeEv>
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6SdFile6removeEv+0x22>
  22:	25 ee       	ldi	r18, 0xE5	; 229
  24:	fc 01       	movw	r30, r24
  26:	20 83       	st	Z, r18
  28:	1d 82       	std	Y+5, r1	; 0x05
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile6removeEv>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6SdFile6removeEv+0x30>
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6SdFile5rmDirEv:

00000000 <_ZN6SdFile5rmDirEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	8d 81       	ldd	r24, Y+5	; 0x05
   8:	84 30       	cpi	r24, 0x04	; 4
  println();
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6SdFile5rmDirEv+0xc>
   c:	1e 82       	std	Y+6, r1	; 0x06
   e:	1f 82       	std	Y+7, r1	; 0x07
}
  10:	18 86       	std	Y+8, r1	; 0x08
  12:	19 86       	std	Y+9, r1	; 0x09
  14:	1a 86       	std	Y+10, r1	; 0x0a
  16:	1b 86       	std	Y+11, r1	; 0x0b
  18:	1c 86       	std	Y+12, r1	; 0x0c
  1a:	1d 86       	std	Y+13, r1	; 0x0d
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN6SdFile5rmDirEv+0x1e>
  1e:	ce 01       	movw	r24, r28
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5rmDirEv>
  24:	fc 01       	movw	r30, r24
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN6SdFile5rmDirEv+0x2a>
  2a:	80 81       	ld	r24, Z
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6SdFile5rmDirEv+0x30>
  30:	85 3e       	cpi	r24, 0xE5	; 229
  32:	01 f0       	breq	.+0      	; 0x34 <_ZN6SdFile5rmDirEv+0x34>
  34:	8e 32       	cpi	r24, 0x2E	; 46
  36:	01 f0       	breq	.+0      	; 0x38 <_ZN6SdFile5rmDirEv+0x38>
  38:	83 85       	ldd	r24, Z+11	; 0x0b
  3a:	83 ff       	sbrs	r24, 3
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6SdFile5rmDirEv+0x3e>
  3e:	4a 85       	ldd	r20, Y+10	; 0x0a
  40:	5b 85       	ldd	r21, Y+11	; 0x0b
  42:	6c 85       	ldd	r22, Y+12	; 0x0c
  44:	7d 85       	ldd	r23, Y+13	; 0x0d
  46:	8b 89       	ldd	r24, Y+19	; 0x13
  48:	9c 89       	ldd	r25, Y+20	; 0x14
  4a:	ad 89       	ldd	r26, Y+21	; 0x15
  4c:	be 89       	ldd	r27, Y+22	; 0x16
  4e:	48 17       	cp	r20, r24
  50:	59 07       	cpc	r21, r25
  52:	6a 07       	cpc	r22, r26
  54:	7b 07       	cpc	r23, r27
  56:	00 f0       	brcs	.+0      	; 0x58 <_ZN6SdFile5rmDirEv+0x58>
  58:	81 e0       	ldi	r24, 0x01	; 1
  5a:	8d 83       	std	Y+5, r24	; 0x05
  5c:	8c 81       	ldd	r24, Y+4	; 0x04
  5e:	82 60       	ori	r24, 0x02	; 2
  60:	8c 83       	std	Y+4, r24	; 0x04
  62:	ce 01       	movw	r24, r28
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5rmDirEv>
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN6SdFile5rmDirEv+0x6a>
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

Disassembly of section .text._ZN6SdFile15openCachedEntryEhh:

00000000 <_ZN6SdFile15openCachedEntryEhh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
  write_P(str);
   6:	ec 01       	movw	r28, r24
   8:	14 2f       	mov	r17, r20
  println();
   a:	e6 2f       	mov	r30, r22
   c:	f0 e0       	ldi	r31, 0x00	; 0
   e:	35 e0       	ldi	r19, 0x05	; 5
}
  10:	ee 0f       	add	r30, r30
  12:	ff 1f       	adc	r31, r31
  14:	3a 95       	dec	r19
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6SdFile15openCachedEntryEhh+0x18>
  18:	e0 50       	subi	r30, 0x00	; 0
  1a:	f0 40       	sbci	r31, 0x00	; 0
  1c:	83 85       	ldd	r24, Z+11	; 0x0b
  1e:	81 71       	andi	r24, 0x11	; 17
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6SdFile15openCachedEntryEhh+0x22>
  22:	84 2f       	mov	r24, r20
  24:	82 74       	andi	r24, 0x42	; 66
  26:	01 f0       	breq	.+0      	; 0x28 <_ZN6SdFile15openCachedEntryEhh+0x28>
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6SdFile15openCachedEntryEhh+0x2a>
  2a:	6a 8b       	std	Y+18, r22	; 0x12
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 91 00 00 	lds	r25, 0x0000
  34:	a0 91 00 00 	lds	r26, 0x0000
  38:	b0 91 00 00 	lds	r27, 0x0000
  3c:	8e 87       	std	Y+14, r24	; 0x0e
  3e:	9f 87       	std	Y+15, r25	; 0x0f
  40:	a8 8b       	std	Y+16, r26	; 0x10
  42:	b9 8b       	std	Y+17, r27	; 0x11
  44:	44 89       	ldd	r20, Z+20	; 0x14
  46:	55 89       	ldd	r21, Z+21	; 0x15
  48:	60 e0       	ldi	r22, 0x00	; 0
  4a:	70 e0       	ldi	r23, 0x00	; 0
  4c:	ba 01       	movw	r22, r20
  4e:	55 27       	eor	r21, r21
  50:	44 27       	eor	r20, r20
  52:	82 8d       	ldd	r24, Z+26	; 0x1a
  54:	93 8d       	ldd	r25, Z+27	; 0x1b
  56:	a0 e0       	ldi	r26, 0x00	; 0
  58:	b0 e0       	ldi	r27, 0x00	; 0
  5a:	48 2b       	or	r20, r24
  5c:	59 2b       	or	r21, r25
  5e:	6a 2b       	or	r22, r26
  60:	7b 2b       	or	r23, r27
  62:	4f 8b       	std	Y+23, r20	; 0x17
  64:	58 8f       	std	Y+24, r21	; 0x18
  66:	69 8f       	std	Y+25, r22	; 0x19
  68:	7a 8f       	std	Y+26, r23	; 0x1a
  6a:	83 85       	ldd	r24, Z+11	; 0x0b
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	88 71       	andi	r24, 0x18	; 24
  70:	90 70       	andi	r25, 0x00	; 0
  72:	00 97       	sbiw	r24, 0x00	; 0
  74:	01 f4       	brne	.+0      	; 0x76 <_ZN6SdFile15openCachedEntryEhh+0x76>
  76:	84 8d       	ldd	r24, Z+28	; 0x1c
  78:	95 8d       	ldd	r25, Z+29	; 0x1d
  7a:	a6 8d       	ldd	r26, Z+30	; 0x1e
  7c:	b7 8d       	ldd	r27, Z+31	; 0x1f
  7e:	8b 8b       	std	Y+19, r24	; 0x13
  80:	9c 8b       	std	Y+20, r25	; 0x14
  82:	ad 8b       	std	Y+21, r26	; 0x15
  84:	be 8b       	std	Y+22, r27	; 0x16
  86:	81 e0       	ldi	r24, 0x01	; 1
  88:	00 c0       	rjmp	.+0      	; 0x8a <_ZN6SdFile15openCachedEntryEhh+0x8a>
  8a:	80 31       	cpi	r24, 0x10	; 16
  8c:	91 05       	cpc	r25, r1
  8e:	01 f4       	brne	.+0      	; 0x90 <_ZN6SdFile15openCachedEntryEhh+0x90>
  90:	9e 01       	movw	r18, r28
  92:	2d 5e       	subi	r18, 0xED	; 237
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	8b 8d       	ldd	r24, Y+27	; 0x1b
  98:	9c 8d       	ldd	r25, Y+28	; 0x1c
  9a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile15openCachedEntryEhh>
  9e:	88 23       	and	r24, r24
  a0:	01 f0       	breq	.+0      	; 0xa2 <_ZN6SdFile15openCachedEntryEhh+0xa2>
  a2:	84 e0       	ldi	r24, 0x04	; 4
  a4:	8d 83       	std	Y+5, r24	; 0x05
  a6:	81 2f       	mov	r24, r17
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8c 83       	std	Y+4, r24	; 0x04
  ac:	1e 82       	std	Y+6, r1	; 0x06
  ae:	1f 82       	std	Y+7, r1	; 0x07
  b0:	18 86       	std	Y+8, r1	; 0x08
  b2:	19 86       	std	Y+9, r1	; 0x09
  b4:	1a 86       	std	Y+10, r1	; 0x0a
  b6:	1b 86       	std	Y+11, r1	; 0x0b
  b8:	1c 86       	std	Y+12, r1	; 0x0c
  ba:	1d 86       	std	Y+13, r1	; 0x0d
  bc:	16 ff       	sbrs	r17, 6
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN6SdFile15openCachedEntryEhh+0xc0>
  c0:	ce 01       	movw	r24, r28
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	70 e0       	ldi	r23, 0x00	; 0
  ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile15openCachedEntryEhh>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN6SdFile15openCachedEntryEhh+0xd0>
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN6SdFile15openCachedEntryEhh+0xd4>
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	08 95       	ret

Disassembly of section .text._ZN6SdFile4openEPS_jh:

00000000 <_ZN6SdFile4openEPS_jh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ff 92       	push	r15
  write_P(str);
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
  println();
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	8c 01       	movw	r16, r24
}
  10:	eb 01       	movw	r28, r22
  12:	6a 01       	movw	r12, r20
  14:	f2 2e       	mov	r15, r18
  16:	fc 01       	movw	r30, r24
  18:	85 81       	ldd	r24, Z+5	; 0x05
  1a:	88 23       	and	r24, r24
  1c:	01 f4       	brne	.+0      	; 0x1e <_ZN6SdFile4openEPS_jh+0x1e>
  1e:	82 2f       	mov	r24, r18
  20:	80 73       	andi	r24, 0x30	; 48
  22:	80 33       	cpi	r24, 0x30	; 48
  24:	01 f0       	breq	.+0      	; 0x26 <_ZN6SdFile4openEPS_jh+0x26>
  26:	8b 8d       	ldd	r24, Y+27	; 0x1b
  28:	9c 8d       	ldd	r25, Y+28	; 0x1c
  2a:	94 8f       	std	Z+28, r25	; 0x1c
  2c:	83 8f       	std	Z+27, r24	; 0x1b
  2e:	65 e0       	ldi	r22, 0x05	; 5
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	6a 95       	dec	r22
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6SdFile4openEPS_jh+0x38>
  38:	60 e0       	ldi	r22, 0x00	; 0
  3a:	70 e0       	ldi	r23, 0x00	; 0
  3c:	ce 01       	movw	r24, r28
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_jh>
  42:	88 23       	and	r24, r24
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN6SdFile4openEPS_jh+0x46>
  46:	ce 01       	movw	r24, r28
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_jh>
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	01 f0       	breq	.+0      	; 0x50 <_ZN6SdFile4openEPS_jh+0x50>
  50:	fc 01       	movw	r30, r24
  52:	80 81       	ld	r24, Z
  54:	88 23       	and	r24, r24
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN6SdFile4openEPS_jh+0x58>
  58:	85 3e       	cpi	r24, 0xE5	; 229
  5a:	01 f0       	breq	.+0      	; 0x5c <_ZN6SdFile4openEPS_jh+0x5c>
  5c:	8e 32       	cpi	r24, 0x2E	; 46
  5e:	01 f0       	breq	.+0      	; 0x60 <_ZN6SdFile4openEPS_jh+0x60>
  60:	6c 2d       	mov	r22, r12
  62:	6f 70       	andi	r22, 0x0F	; 15
  64:	c8 01       	movw	r24, r16
  66:	4f 2d       	mov	r20, r15
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_jh>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6SdFile4openEPS_jh+0x6e>
  6e:	80 e0       	ldi	r24, 0x00	; 0
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret

Disassembly of section .text._ZN6SdFile8rmRfStarEv:

00000000 <_ZN6SdFile8rmRfStarEv>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
  write_P(str);
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
  println();
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
}
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	6d 97       	sbiw	r28, 0x1d	; 29
  1e:	0f b6       	in	r0, 0x3f	; 63
  20:	f8 94       	cli
  22:	de bf       	out	0x3e, r29	; 62
  24:	0f be       	out	0x3f, r0	; 63
  26:	cd bf       	out	0x3d, r28	; 61
  28:	7c 01       	movw	r14, r24
  2a:	fc 01       	movw	r30, r24
  2c:	16 82       	std	Z+6, r1	; 0x06
  2e:	17 82       	std	Z+7, r1	; 0x07
  30:	10 86       	std	Z+8, r1	; 0x08
  32:	11 86       	std	Z+9, r1	; 0x09
  34:	12 86       	std	Z+10, r1	; 0x0a
  36:	13 86       	std	Z+11, r1	; 0x0b
  38:	14 86       	std	Z+12, r1	; 0x0c
  3a:	15 86       	std	Z+13, r1	; 0x0d
  3c:	a0 e0       	ldi	r26, 0x00	; 0
  3e:	ca 2e       	mov	r12, r26
  40:	a0 e0       	ldi	r26, 0x00	; 0
  42:	da 2e       	mov	r13, r26
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN6SdFile8rmRfStarEv+0x46>
  46:	1c 82       	std	Y+4, r1	; 0x04
  48:	1b 82       	std	Y+3, r1	; 0x03
  4a:	da 82       	std	Y+2, r13	; 0x02
  4c:	c9 82       	std	Y+1, r12	; 0x01
  4e:	1e 82       	std	Y+6, r1	; 0x06
  50:	c7 01       	movw	r24, r14
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
  56:	fc 01       	movw	r30, r24
  58:	00 97       	sbiw	r24, 0x00	; 0
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6SdFile8rmRfStarEv+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_ZN6SdFile8rmRfStarEv+0x5e>
  5e:	80 81       	ld	r24, Z
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN6SdFile8rmRfStarEv+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6SdFile8rmRfStarEv+0x66>
  66:	85 3e       	cpi	r24, 0xE5	; 229
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN6SdFile8rmRfStarEv+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN6SdFile8rmRfStarEv+0x6c>
  6c:	8e 32       	cpi	r24, 0x2E	; 46
  6e:	01 f4       	brne	.+0      	; 0x70 <_ZN6SdFile8rmRfStarEv+0x70>
  70:	00 c0       	rjmp	.+0      	; 0x72 <_ZN6SdFile8rmRfStarEv+0x72>
  72:	83 85       	ldd	r24, Z+11	; 0x0b
  74:	83 fd       	sbrc	r24, 3
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN6SdFile8rmRfStarEv+0x78>
  78:	95 01       	movw	r18, r10
  7a:	84 01       	movw	r16, r8
  7c:	e5 e0       	ldi	r30, 0x05	; 5
  7e:	36 95       	lsr	r19
  80:	27 95       	ror	r18
  82:	17 95       	ror	r17
  84:	07 95       	ror	r16
  86:	ea 95       	dec	r30
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN6SdFile8rmRfStarEv+0x8a>
  8a:	48 01       	movw	r8, r16
  8c:	ce 01       	movw	r24, r28
  8e:	01 96       	adiw	r24, 0x01	; 1
  90:	b7 01       	movw	r22, r14
  92:	a8 01       	movw	r20, r16
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
  9a:	88 23       	and	r24, r24
  9c:	01 f4       	brne	.+0      	; 0x9e <_ZN6SdFile8rmRfStarEv+0x9e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6SdFile8rmRfStarEv+0xa0>
  a0:	8e 81       	ldd	r24, Y+6	; 0x06
  a2:	84 30       	cpi	r24, 0x04	; 4
  a4:	01 f4       	brne	.+0      	; 0xa6 <_ZN6SdFile8rmRfStarEv+0xa6>
  a6:	ce 01       	movw	r24, r28
  a8:	01 96       	adiw	r24, 0x01	; 1
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN6SdFile8rmRfStarEv+0xb0>
  b0:	8d 81       	ldd	r24, Y+5	; 0x05
  b2:	82 60       	ori	r24, 0x02	; 2
  b4:	8d 83       	std	Y+5, r24	; 0x05
  b6:	ce 01       	movw	r24, r28
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
  be:	88 23       	and	r24, r24
  c0:	01 f0       	breq	.+0      	; 0xc2 <_ZN6SdFile8rmRfStarEv+0xc2>
  c2:	08 94       	sec
  c4:	81 1c       	adc	r8, r1
  c6:	91 1c       	adc	r9, r1
  c8:	75 e0       	ldi	r23, 0x05	; 5
  ca:	88 0c       	add	r8, r8
  cc:	99 1c       	adc	r9, r9
  ce:	7a 95       	dec	r23
  d0:	01 f4       	brne	.+0      	; 0xd2 <_ZN6SdFile8rmRfStarEv+0xd2>
  d2:	a4 01       	movw	r20, r8
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	f7 01       	movw	r30, r14
  da:	82 85       	ldd	r24, Z+10	; 0x0a
  dc:	93 85       	ldd	r25, Z+11	; 0x0b
  de:	a4 85       	ldd	r26, Z+12	; 0x0c
  e0:	b5 85       	ldd	r27, Z+13	; 0x0d
  e2:	84 17       	cp	r24, r20
  e4:	95 07       	cpc	r25, r21
  e6:	a6 07       	cpc	r26, r22
  e8:	b7 07       	cpc	r27, r23
  ea:	01 f0       	breq	.+0      	; 0xec <_ZN6SdFile8rmRfStarEv+0xec>
  ec:	c7 01       	movw	r24, r14
  ee:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
  f2:	88 23       	and	r24, r24
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN6SdFile8rmRfStarEv+0xf6>
  f6:	f7 01       	movw	r30, r14
  f8:	82 84       	ldd	r8, Z+10	; 0x0a
  fa:	93 84       	ldd	r9, Z+11	; 0x0b
  fc:	a4 84       	ldd	r10, Z+12	; 0x0c
  fe:	b5 84       	ldd	r11, Z+13	; 0x0d
 100:	83 89       	ldd	r24, Z+19	; 0x13
 102:	94 89       	ldd	r25, Z+20	; 0x14
 104:	a5 89       	ldd	r26, Z+21	; 0x15
 106:	b6 89       	ldd	r27, Z+22	; 0x16
 108:	88 16       	cp	r8, r24
 10a:	99 06       	cpc	r9, r25
 10c:	aa 06       	cpc	r10, r26
 10e:	bb 06       	cpc	r11, r27
 110:	00 f4       	brcc	.+0      	; 0x112 <_ZN6SdFile8rmRfStarEv+0x112>
 112:	00 c0       	rjmp	.+0      	; 0x114 <_ZN6SdFile8rmRfStarEv+0x114>
 114:	f7 01       	movw	r30, r14
 116:	85 81       	ldd	r24, Z+5	; 0x05
 118:	82 50       	subi	r24, 0x02	; 2
 11a:	82 30       	cpi	r24, 0x02	; 2
 11c:	00 f0       	brcs	.+0      	; 0x11e <_ZN6SdFile8rmRfStarEv+0x11e>
 11e:	c7 01       	movw	r24, r14
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile8rmRfStarEv>
 124:	00 c0       	rjmp	.+0      	; 0x126 <_ZN6SdFile8rmRfStarEv+0x126>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	00 c0       	rjmp	.+0      	; 0x12a <_ZN6SdFile8rmRfStarEv+0x12a>
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	6d 96       	adiw	r28, 0x1d	; 29
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	ff 90       	pop	r15
 142:	ef 90       	pop	r14
 144:	df 90       	pop	r13
 146:	cf 90       	pop	r12
 148:	bf 90       	pop	r11
 14a:	af 90       	pop	r10
 14c:	9f 90       	pop	r9
 14e:	8f 90       	pop	r8
 150:	08 95       	ret

Disassembly of section .text._ZN6SdFile2lsEhh:

00000000 <_ZN6SdFile2lsEhh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
  write_P(str);
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
  println();
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
}
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	6f 97       	sbiw	r28, 0x1f	; 31
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	6c 01       	movw	r12, r24
  36:	b6 2e       	mov	r11, r22
  38:	fc 01       	movw	r30, r24
  3a:	16 82       	std	Z+6, r1	; 0x06
  3c:	17 82       	std	Z+7, r1	; 0x07
  3e:	10 86       	std	Z+8, r1	; 0x08
  40:	11 86       	std	Z+9, r1	; 0x09
  42:	12 86       	std	Z+10, r1	; 0x0a
  44:	13 86       	std	Z+11, r1	; 0x0b
  46:	14 86       	std	Z+12, r1	; 0x0c
  48:	15 86       	std	Z+13, r1	; 0x0d
  4a:	64 2e       	mov	r6, r20
  4c:	77 24       	eor	r7, r7
  4e:	86 2f       	mov	r24, r22
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	03 e0       	ldi	r16, 0x03	; 3
  54:	40 2e       	mov	r4, r16
  56:	51 2c       	mov	r5, r1
  58:	48 22       	and	r4, r24
  5a:	59 22       	and	r5, r25
  5c:	21 e0       	ldi	r18, 0x01	; 1
  5e:	22 2e       	mov	r2, r18
  60:	31 2c       	mov	r3, r1
  62:	28 22       	and	r2, r24
  64:	39 22       	and	r3, r25
  66:	9c 01       	movw	r18, r24
  68:	24 70       	andi	r18, 0x04	; 4
  6a:	30 70       	andi	r19, 0x00	; 0
  6c:	3f 8f       	std	Y+31, r19	; 0x1f
  6e:	2e 8f       	std	Y+30, r18	; 0x1e
  70:	52 e0       	ldi	r21, 0x02	; 2
  72:	a5 2e       	mov	r10, r21
  74:	a4 0e       	add	r10, r20
  76:	62 e0       	ldi	r22, 0x02	; 2
  78:	86 2e       	mov	r8, r22
  7a:	91 2c       	mov	r9, r1
  7c:	88 22       	and	r8, r24
  7e:	99 22       	and	r9, r25
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN6SdFile2lsEhh+0x82>
  82:	f8 01       	movw	r30, r16
  84:	80 81       	ld	r24, Z
  86:	88 23       	and	r24, r24
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN6SdFile2lsEhh+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN6SdFile2lsEhh+0x8c>
  8c:	85 3e       	cpi	r24, 0xE5	; 229
  8e:	01 f4       	brne	.+0      	; 0x90 <_ZN6SdFile2lsEhh+0x90>
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN6SdFile2lsEhh+0x92>
  92:	8e 32       	cpi	r24, 0x2E	; 46
  94:	01 f4       	brne	.+0      	; 0x96 <_ZN6SdFile2lsEhh+0x96>
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN6SdFile2lsEhh+0x98>
  98:	83 85       	ldd	r24, Z+11	; 0x0b
  9a:	83 fd       	sbrc	r24, 3
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN6SdFile2lsEhh+0x9e>
  9e:	ee 24       	eor	r14, r14
  a0:	ff 24       	eor	r15, r15
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6SdFile2lsEhh+0xa4>
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	60 e2       	ldi	r22, 0x20	; 32
  aa:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
  ae:	08 94       	sec
  b0:	e1 1c       	adc	r14, r1
  b2:	f1 1c       	adc	r15, r1
  b4:	e6 14       	cp	r14, r6
  b6:	f7 04       	cpc	r15, r7
  b8:	04 f0       	brlt	.+0      	; 0xba <_ZN6SdFile2lsEhh+0xba>
  ba:	41 14       	cp	r4, r1
  bc:	51 04       	cpc	r5, r1
  be:	01 f0       	breq	.+0      	; 0xc0 <_ZN6SdFile2lsEhh+0xc0>
  c0:	6e e0       	ldi	r22, 0x0E	; 14
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN6SdFile2lsEhh+0xc4>
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	c8 01       	movw	r24, r16
  c8:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
  cc:	21 14       	cp	r2, r1
  ce:	31 04       	cpc	r3, r1
  d0:	01 f0       	breq	.+0      	; 0xd2 <_ZN6SdFile2lsEhh+0xd2>
  d2:	f8 01       	movw	r30, r16
  d4:	80 8d       	ldd	r24, Z+24	; 0x18
  d6:	91 8d       	ldd	r25, Z+25	; 0x19
  d8:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	60 e2       	ldi	r22, 0x20	; 32
  e2:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
  e6:	f8 01       	movw	r30, r16
  e8:	86 89       	ldd	r24, Z+22	; 0x16
  ea:	97 89       	ldd	r25, Z+23	; 0x17
  ec:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
  f0:	f8 01       	movw	r30, r16
  f2:	83 85       	ldd	r24, Z+11	; 0x0b
  f4:	88 71       	andi	r24, 0x18	; 24
  f6:	80 31       	cpi	r24, 0x10	; 16
  f8:	01 f0       	breq	.+0      	; 0xfa <_ZN6SdFile2lsEhh+0xfa>
  fa:	81 14       	cp	r8, r1
  fc:	91 04       	cpc	r9, r1
  fe:	01 f0       	breq	.+0      	; 0x100 <_ZN6SdFile2lsEhh+0x100>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	60 e2       	ldi	r22, 0x20	; 32
 106:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 10a:	f8 01       	movw	r30, r16
 10c:	44 8d       	ldd	r20, Z+28	; 0x1c
 10e:	55 8d       	ldd	r21, Z+29	; 0x1d
 110:	66 8d       	ldd	r22, Z+30	; 0x1e
 112:	77 8d       	ldd	r23, Z+31	; 0x1f
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2a e0       	ldi	r18, 0x0A	; 10
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 128:	2e 8d       	ldd	r18, Y+30	; 0x1e
 12a:	3f 8d       	ldd	r19, Y+31	; 0x1f
 12c:	21 15       	cp	r18, r1
 12e:	31 05       	cpc	r19, r1
 130:	01 f0       	breq	.+0      	; 0x132 <_ZN6SdFile2lsEhh+0x132>
 132:	f8 01       	movw	r30, r16
 134:	83 85       	ldd	r24, Z+11	; 0x0b
 136:	88 71       	andi	r24, 0x18	; 24
 138:	80 31       	cpi	r24, 0x10	; 16
 13a:	01 f4       	brne	.+0      	; 0x13c <_ZN6SdFile2lsEhh+0x13c>
 13c:	f6 01       	movw	r30, r12
 13e:	82 85       	ldd	r24, Z+10	; 0x0a
 140:	93 85       	ldd	r25, Z+11	; 0x0b
 142:	a4 85       	ldd	r26, Z+12	; 0x0c
 144:	b5 85       	ldd	r27, Z+13	; 0x0d
 146:	15 e0       	ldi	r17, 0x05	; 5
 148:	b6 95       	lsr	r27
 14a:	a7 95       	ror	r26
 14c:	97 95       	ror	r25
 14e:	87 95       	ror	r24
 150:	1a 95       	dec	r17
 152:	01 f4       	brne	.+0      	; 0x154 <_ZN6SdFile2lsEhh+0x154>
 154:	8c 01       	movw	r16, r24
 156:	1c 82       	std	Y+4, r1	; 0x04
 158:	1b 82       	std	Y+3, r1	; 0x03
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	3a 83       	std	Y+2, r19	; 0x02
 160:	29 83       	std	Y+1, r18	; 0x01
 162:	1e 82       	std	Y+6, r1	; 0x06
 164:	ac 01       	movw	r20, r24
 166:	41 50       	subi	r20, 0x01	; 1
 168:	50 40       	sbci	r21, 0x00	; 0
 16a:	ce 01       	movw	r24, r28
 16c:	01 96       	adiw	r24, 0x01	; 1
 16e:	b6 01       	movw	r22, r12
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 176:	88 23       	and	r24, r24
 178:	01 f0       	breq	.+0      	; 0x17a <_ZN6SdFile2lsEhh+0x17a>
 17a:	ce 01       	movw	r24, r28
 17c:	01 96       	adiw	r24, 0x01	; 1
 17e:	6b 2d       	mov	r22, r11
 180:	4a 2d       	mov	r20, r10
 182:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 186:	a8 01       	movw	r20, r16
 188:	b5 e0       	ldi	r27, 0x05	; 5
 18a:	44 0f       	add	r20, r20
 18c:	55 1f       	adc	r21, r21
 18e:	ba 95       	dec	r27
 190:	01 f4       	brne	.+0      	; 0x192 <_ZN6SdFile2lsEhh+0x192>
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	70 e0       	ldi	r23, 0x00	; 0
 196:	c6 01       	movw	r24, r12
 198:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 19c:	c6 01       	movw	r24, r12
 19e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile2lsEhh>
 1a2:	8c 01       	movw	r16, r24
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	01 f0       	breq	.+0      	; 0x1a8 <_ZN6SdFile2lsEhh+0x1a8>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <_ZN6SdFile2lsEhh+0x1aa>
 1aa:	6f 96       	adiw	r28, 0x1f	; 31
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	f8 94       	cli
 1b0:	de bf       	out	0x3e, r29	; 62
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	cd bf       	out	0x3d, r28	; 61
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	1f 91       	pop	r17
 1bc:	0f 91       	pop	r16
 1be:	ff 90       	pop	r15
 1c0:	ef 90       	pop	r14
 1c2:	df 90       	pop	r13
 1c4:	cf 90       	pop	r12
 1c6:	bf 90       	pop	r11
 1c8:	af 90       	pop	r10
 1ca:	9f 90       	pop	r9
 1cc:	8f 90       	pop	r8
 1ce:	7f 90       	pop	r7
 1d0:	6f 90       	pop	r6
 1d2:	5f 90       	pop	r5
 1d4:	4f 90       	pop	r4
 1d6:	3f 90       	pop	r3
 1d8:	2f 90       	pop	r2
 1da:	08 95       	ret

Disassembly of section .text._ZN6SdFile4openEPS_PKch:

00000000 <_ZN6SdFile4openEPS_PKch>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
  write_P(str);
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
  println();
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
}
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  1e:	df 93       	push	r29
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	2b 97       	sbiw	r28, 0x0b	; 11
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	f8 94       	cli
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	0f be       	out	0x3f, r0	; 63
  2e:	cd bf       	out	0x3d, r28	; 61
  30:	3c 01       	movw	r6, r24
  32:	5b 01       	movw	r10, r22
  34:	ca 01       	movw	r24, r20
  36:	82 2e       	mov	r8, r18
  38:	f3 01       	movw	r30, r6
  3a:	25 81       	ldd	r18, Z+5	; 0x05
  3c:	22 23       	and	r18, r18
  3e:	01 f0       	breq	.+0      	; 0x40 <_ZN6SdFile4openEPS_PKch+0x40>
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6SdFile4openEPS_PKch+0x42>
  42:	8e 01       	movw	r16, r28
  44:	0f 5f       	subi	r16, 0xFF	; 255
  46:	1f 4f       	sbci	r17, 0xFF	; 255
  48:	b8 01       	movw	r22, r16
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <_ZN6SdFile4openEPS_PKch+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN6SdFile4openEPS_PKch+0x54>
  54:	f5 01       	movw	r30, r10
  56:	83 8d       	ldd	r24, Z+27	; 0x1b
  58:	94 8d       	ldd	r25, Z+28	; 0x1c
  5a:	f3 01       	movw	r30, r6
  5c:	94 8f       	std	Z+28, r25	; 0x1c
  5e:	83 8f       	std	Z+27, r24	; 0x1b
  60:	f5 01       	movw	r30, r10
  62:	16 82       	std	Z+6, r1	; 0x06
  64:	17 82       	std	Z+7, r1	; 0x07
  66:	10 86       	std	Z+8, r1	; 0x08
  68:	11 86       	std	Z+9, r1	; 0x09
  6a:	12 86       	std	Z+10, r1	; 0x0a
  6c:	13 86       	std	Z+11, r1	; 0x0b
  6e:	14 86       	std	Z+12, r1	; 0x0c
  70:	15 86       	std	Z+13, r1	; 0x0d
  72:	99 24       	eor	r9, r9
  74:	28 01       	movw	r4, r16
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN6SdFile4openEPS_PKch+0x78>
  78:	c5 01       	movw	r24, r10
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
  7e:	bc 01       	movw	r22, r24
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	01 f4       	brne	.+0      	; 0x84 <_ZN6SdFile4openEPS_PKch+0x84>
  84:	00 c0       	rjmp	.+0      	; 0x86 <_ZN6SdFile4openEPS_PKch+0x86>
  86:	97 01       	movw	r18, r14
  88:	86 01       	movw	r16, r12
  8a:	e5 e0       	ldi	r30, 0x05	; 5
  8c:	36 95       	lsr	r19
  8e:	27 95       	ror	r18
  90:	17 95       	ror	r17
  92:	07 95       	ror	r16
  94:	ea 95       	dec	r30
  96:	01 f4       	brne	.+0      	; 0x98 <_ZN6SdFile4openEPS_PKch+0x98>
  98:	0f 70       	andi	r16, 0x0F	; 15
  9a:	fc 01       	movw	r30, r24
  9c:	80 81       	ld	r24, Z
  9e:	88 23       	and	r24, r24
  a0:	01 f0       	breq	.+0      	; 0xa2 <_ZN6SdFile4openEPS_PKch+0xa2>
  a2:	85 3e       	cpi	r24, 0xE5	; 229
  a4:	01 f4       	brne	.+0      	; 0xa6 <_ZN6SdFile4openEPS_PKch+0xa6>
  a6:	99 20       	and	r9, r9
  a8:	01 f4       	brne	.+0      	; 0xaa <_ZN6SdFile4openEPS_PKch+0xaa>
  aa:	f3 01       	movw	r30, r6
  ac:	02 8b       	std	Z+18, r16	; 0x12
  ae:	80 91 00 00 	lds	r24, 0x0000
  b2:	90 91 00 00 	lds	r25, 0x0000
  b6:	a0 91 00 00 	lds	r26, 0x0000
  ba:	b0 91 00 00 	lds	r27, 0x0000
  be:	86 87       	std	Z+14, r24	; 0x0e
  c0:	97 87       	std	Z+15, r25	; 0x0f
  c2:	a0 8b       	std	Z+16, r26	; 0x10
  c4:	b1 8b       	std	Z+17, r27	; 0x11
  c6:	99 24       	eor	r9, r9
  c8:	93 94       	inc	r9
  ca:	fb 01       	movw	r30, r22
  cc:	80 81       	ld	r24, Z
  ce:	88 23       	and	r24, r24
  d0:	01 f4       	brne	.+0      	; 0xd2 <_ZN6SdFile4openEPS_PKch+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN6SdFile4openEPS_PKch+0xd4>
  d4:	c2 01       	movw	r24, r4
  d6:	4b e0       	ldi	r20, 0x0B	; 11
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
  de:	00 97       	sbiw	r24, 0x00	; 0
  e0:	01 f4       	brne	.+0      	; 0xe2 <_ZN6SdFile4openEPS_PKch+0xe2>
  e2:	88 2d       	mov	r24, r8
  e4:	80 73       	andi	r24, 0x30	; 48
  e6:	80 33       	cpi	r24, 0x30	; 48
  e8:	01 f4       	brne	.+0      	; 0xea <_ZN6SdFile4openEPS_PKch+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6SdFile4openEPS_PKch+0xec>
  ec:	c3 01       	movw	r24, r6
  ee:	60 2f       	mov	r22, r16
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6SdFile4openEPS_PKch+0xf2>
  f2:	f5 01       	movw	r30, r10
  f4:	c2 84       	ldd	r12, Z+10	; 0x0a
  f6:	d3 84       	ldd	r13, Z+11	; 0x0b
  f8:	e4 84       	ldd	r14, Z+12	; 0x0c
  fa:	f5 84       	ldd	r15, Z+13	; 0x0d
  fc:	83 89       	ldd	r24, Z+19	; 0x13
  fe:	94 89       	ldd	r25, Z+20	; 0x14
 100:	a5 89       	ldd	r26, Z+21	; 0x15
 102:	b6 89       	ldd	r27, Z+22	; 0x16
 104:	c8 16       	cp	r12, r24
 106:	d9 06       	cpc	r13, r25
 108:	ea 06       	cpc	r14, r26
 10a:	fb 06       	cpc	r15, r27
 10c:	00 f4       	brcc	.+0      	; 0x10e <_ZN6SdFile4openEPS_PKch+0x10e>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <_ZN6SdFile4openEPS_PKch+0x110>
 110:	88 2d       	mov	r24, r8
 112:	82 71       	andi	r24, 0x12	; 18
 114:	82 31       	cpi	r24, 0x12	; 18
 116:	01 f0       	breq	.+0      	; 0x118 <_ZN6SdFile4openEPS_PKch+0x118>
 118:	00 c0       	rjmp	.+0      	; 0x11a <_ZN6SdFile4openEPS_PKch+0x11a>
 11a:	99 20       	and	r9, r9
 11c:	01 f0       	breq	.+0      	; 0x11e <_ZN6SdFile4openEPS_PKch+0x11e>
 11e:	c3 01       	movw	r24, r6
 120:	61 e0       	ldi	r22, 0x01	; 1
 122:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
 126:	8c 01       	movw	r16, r24
 128:	00 97       	sbiw	r24, 0x00	; 0
 12a:	01 f4       	brne	.+0      	; 0x12c <_ZN6SdFile4openEPS_PKch+0x12c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <_ZN6SdFile4openEPS_PKch+0x12e>
 12e:	f5 01       	movw	r30, r10
 130:	85 81       	ldd	r24, Z+5	; 0x05
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	01 f4       	brne	.+0      	; 0x136 <_ZN6SdFile4openEPS_PKch+0x136>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN6SdFile4openEPS_PKch+0x138>
 138:	c5 01       	movw	r24, r10
 13a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
 13e:	88 23       	and	r24, r24
 140:	01 f0       	breq	.+0      	; 0x142 <_ZN6SdFile4openEPS_PKch+0x142>
 142:	f3 01       	movw	r30, r6
 144:	12 8a       	std	Z+18, r1	; 0x12
 146:	00 e0       	ldi	r16, 0x00	; 0
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	f8 01       	movw	r30, r16
 14e:	11 92       	st	Z+, r1
 150:	8a 95       	dec	r24
 152:	01 f4       	brne	.+0      	; 0x154 <_ZN6SdFile4openEPS_PKch+0x154>
 154:	d8 01       	movw	r26, r16
 156:	fe 01       	movw	r30, r28
 158:	31 96       	adiw	r30, 0x01	; 1
 15a:	8b e0       	ldi	r24, 0x0B	; 11
 15c:	01 90       	ld	r0, Z+
 15e:	0d 92       	st	X+, r0
 160:	81 50       	subi	r24, 0x01	; 1
 162:	01 f4       	brne	.+0      	; 0x164 <_ZN6SdFile4openEPS_PKch+0x164>
 164:	e0 91 00 00 	lds	r30, 0x0000
 168:	f0 91 00 00 	lds	r31, 0x0000
 16c:	30 97       	sbiw	r30, 0x00	; 0
 16e:	01 f0       	breq	.+0      	; 0x170 <_ZN6SdFile4openEPS_PKch+0x170>
 170:	b8 01       	movw	r22, r16
 172:	62 5f       	subi	r22, 0xF2	; 242
 174:	7f 4f       	sbci	r23, 0xFF	; 255
 176:	c8 01       	movw	r24, r16
 178:	40 96       	adiw	r24, 0x10	; 16
 17a:	09 95       	icall
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN6SdFile4openEPS_PKch+0x17e>
 17e:	81 e2       	ldi	r24, 0x21	; 33
 180:	98 e2       	ldi	r25, 0x28	; 40
 182:	f8 01       	movw	r30, r16
 184:	91 8b       	std	Z+17, r25	; 0x11
 186:	80 8b       	std	Z+16, r24	; 0x10
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	98 e0       	ldi	r25, 0x08	; 8
 18c:	97 87       	std	Z+15, r25	; 0x0f
 18e:	86 87       	std	Z+14, r24	; 0x0e
 190:	f8 01       	movw	r30, r16
 192:	80 89       	ldd	r24, Z+16	; 0x10
 194:	91 89       	ldd	r25, Z+17	; 0x11
 196:	93 8b       	std	Z+19, r25	; 0x13
 198:	82 8b       	std	Z+18, r24	; 0x12
 19a:	91 8f       	std	Z+25, r25	; 0x19
 19c:	80 8f       	std	Z+24, r24	; 0x18
 19e:	86 85       	ldd	r24, Z+14	; 0x0e
 1a0:	97 85       	ldd	r25, Z+15	; 0x0f
 1a2:	97 8b       	std	Z+23, r25	; 0x17
 1a4:	86 8b       	std	Z+22, r24	; 0x16
 1a6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
 1aa:	88 23       	and	r24, r24
 1ac:	01 f0       	breq	.+0      	; 0x1ae <_ZN6SdFile4openEPS_PKch+0x1ae>
 1ae:	c3 01       	movw	r24, r6
 1b0:	f3 01       	movw	r30, r6
 1b2:	62 89       	ldd	r22, Z+18	; 0x12
 1b4:	48 2d       	mov	r20, r8
 1b6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile4openEPS_PKch>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <_ZN6SdFile4openEPS_PKch+0x1bc>
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	2b 96       	adiw	r28, 0x0b	; 11
 1c0:	0f b6       	in	r0, 0x3f	; 63
 1c2:	f8 94       	cli
 1c4:	de bf       	out	0x3e, r29	; 62
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	cd bf       	out	0x3d, r28	; 61
 1ca:	df 91       	pop	r29
 1cc:	cf 91       	pop	r28
 1ce:	1f 91       	pop	r17
 1d0:	0f 91       	pop	r16
 1d2:	ff 90       	pop	r15
 1d4:	ef 90       	pop	r14
 1d6:	df 90       	pop	r13
 1d8:	cf 90       	pop	r12
 1da:	bf 90       	pop	r11
 1dc:	af 90       	pop	r10
 1de:	9f 90       	pop	r9
 1e0:	8f 90       	pop	r8
 1e2:	7f 90       	pop	r7
 1e4:	6f 90       	pop	r6
 1e6:	5f 90       	pop	r5
 1e8:	4f 90       	pop	r4
 1ea:	08 95       	ret

Disassembly of section .text._ZN6SdFile6removeEPS_PKc:

00000000 <_ZN6SdFile6removeEPS_PKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	cd b7       	in	r28, 0x3d	; 61
  write_P(str);
   6:	de b7       	in	r29, 0x3e	; 62
   8:	6d 97       	sbiw	r28, 0x1d	; 29
  println();
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
}
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	9c 01       	movw	r18, r24
  16:	ab 01       	movw	r20, r22
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	9a 83       	std	Y+2, r25	; 0x02
  22:	89 83       	std	Y+1, r24	; 0x01
  24:	1e 82       	std	Y+6, r1	; 0x06
  26:	ce 01       	movw	r24, r28
  28:	01 96       	adiw	r24, 0x01	; 1
  2a:	b9 01       	movw	r22, r18
  2c:	22 e0       	ldi	r18, 0x02	; 2
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile6removeEPS_PKc>
  32:	88 23       	and	r24, r24
  34:	01 f0       	breq	.+0      	; 0x36 <_ZN6SdFile6removeEPS_PKc+0x36>
  36:	ce 01       	movw	r24, r28
  38:	01 96       	adiw	r24, 0x01	; 1
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile6removeEPS_PKc>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN6SdFile6removeEPS_PKc+0x40>
  40:	80 e0       	ldi	r24, 0x00	; 0
  42:	6d 96       	adiw	r28, 0x1d	; 29
  44:	0f b6       	in	r0, 0x3f	; 63
  46:	f8 94       	cli
  48:	de bf       	out	0x3e, r29	; 62
  4a:	0f be       	out	0x3f, r0	; 63
  4c:	cd bf       	out	0x3d, r28	; 61
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	08 95       	ret

Disassembly of section .text._ZN6SdFile7makeDirEPS_PKc:

00000000 <_ZN6SdFile7makeDirEPS_PKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
  write_P(str);
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
  println();
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
}
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	a0 97       	sbiw	r28, 0x20	; 32
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	8c 01       	movw	r16, r24
  26:	7b 01       	movw	r14, r22
  28:	23 e3       	ldi	r18, 0x33	; 51
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
  2e:	88 23       	and	r24, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6SdFile7makeDirEPS_PKc+0x32>
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6SdFile7makeDirEPS_PKc+0x34>
  34:	81 e0       	ldi	r24, 0x01	; 1
  36:	d8 01       	movw	r26, r16
  38:	14 96       	adiw	r26, 0x04	; 4
  3a:	8c 93       	st	X, r24
  3c:	14 97       	sbiw	r26, 0x04	; 4
  3e:	84 e0       	ldi	r24, 0x04	; 4
  40:	15 96       	adiw	r26, 0x05	; 5
  42:	8c 93       	st	X, r24
  44:	c8 01       	movw	r24, r16
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
  4a:	88 23       	and	r24, r24
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN6SdFile7makeDirEPS_PKc+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6SdFile7makeDirEPS_PKc+0x50>
  50:	c8 01       	movw	r24, r16
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
  56:	88 23       	and	r24, r24
  58:	01 f4       	brne	.+0      	; 0x5a <_ZN6SdFile7makeDirEPS_PKc+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN6SdFile7makeDirEPS_PKc+0x5c>
  5c:	c8 01       	movw	r24, r16
  5e:	61 e0       	ldi	r22, 0x01	; 1
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
  64:	dc 01       	movw	r26, r24
  66:	00 97       	sbiw	r24, 0x00	; 0
  68:	01 f4       	brne	.+0      	; 0x6a <_ZN6SdFile7makeDirEPS_PKc+0x6a>
  6a:	00 c0       	rjmp	.+0      	; 0x6c <_ZN6SdFile7makeDirEPS_PKc+0x6c>
  6c:	80 e1       	ldi	r24, 0x10	; 16
  6e:	1b 96       	adiw	r26, 0x0b	; 11
  70:	8c 93       	st	X, r24
  72:	1b 97       	sbiw	r26, 0x0b	; 11
  74:	ae 01       	movw	r20, r28
  76:	4f 5f       	subi	r20, 0xFF	; 255
  78:	5f 4f       	sbci	r21, 0xFF	; 255
  7a:	cd 01       	movw	r24, r26
  7c:	20 e2       	ldi	r18, 0x20	; 32
  7e:	fc 01       	movw	r30, r24
  80:	01 90       	ld	r0, Z+
  82:	cf 01       	movw	r24, r30
  84:	fa 01       	movw	r30, r20
  86:	01 92       	st	Z+, r0
  88:	af 01       	movw	r20, r30
  8a:	21 50       	subi	r18, 0x01	; 1
  8c:	01 f4       	brne	.+0      	; 0x8e <_ZN6SdFile7makeDirEPS_PKc+0x8e>
  8e:	54 96       	adiw	r26, 0x14	; 20
  90:	ad 90       	ld	r10, X+
  92:	bc 90       	ld	r11, X
  94:	55 97       	sbiw	r26, 0x15	; 21
  96:	5a 96       	adiw	r26, 0x1a	; 26
  98:	cd 90       	ld	r12, X+
  9a:	dc 90       	ld	r13, X
  9c:	5b 97       	sbiw	r26, 0x1b	; 27
  9e:	fe 01       	movw	r30, r28
  a0:	32 96       	adiw	r30, 0x02	; 2
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	90 e2       	ldi	r25, 0x20	; 32
  a6:	91 93       	st	Z+, r25
  a8:	81 50       	subi	r24, 0x01	; 1
  aa:	01 f4       	brne	.+0      	; 0xac <_ZN6SdFile7makeDirEPS_PKc+0xac>
  ac:	8e e2       	ldi	r24, 0x2E	; 46
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	d8 01       	movw	r26, r16
  b2:	5b 96       	adiw	r26, 0x1b	; 27
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	5c 97       	sbiw	r26, 0x1c	; 28
  ba:	57 96       	adiw	r26, 0x17	; 23
  bc:	4d 91       	ld	r20, X+
  be:	5d 91       	ld	r21, X+
  c0:	6d 91       	ld	r22, X+
  c2:	7c 91       	ld	r23, X
  c4:	5a 97       	sbiw	r26, 0x1a	; 26
  c6:	42 50       	subi	r20, 0x02	; 2
  c8:	50 40       	sbci	r21, 0x00	; 0
  ca:	60 40       	sbci	r22, 0x00	; 0
  cc:	70 40       	sbci	r23, 0x00	; 0
  ce:	05 84       	ldd	r0, Z+13	; 0x0d
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <_ZN6SdFile7makeDirEPS_PKc+0xd2>
  d2:	44 0f       	add	r20, r20
  d4:	55 1f       	adc	r21, r21
  d6:	66 1f       	adc	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	0a 94       	dec	r0
  dc:	02 f4       	brpl	.+0      	; 0xde <_ZN6SdFile7makeDirEPS_PKc+0xde>
  de:	86 85       	ldd	r24, Z+14	; 0x0e
  e0:	97 85       	ldd	r25, Z+15	; 0x0f
  e2:	a0 89       	ldd	r26, Z+16	; 0x10
  e4:	b1 89       	ldd	r27, Z+17	; 0x11
  e6:	48 0f       	add	r20, r24
  e8:	59 1f       	adc	r21, r25
  ea:	6a 1f       	adc	r22, r26
  ec:	7b 1f       	adc	r23, r27
  ee:	cb 01       	movw	r24, r22
  f0:	ba 01       	movw	r22, r20
  f2:	41 e0       	ldi	r20, 0x01	; 1
  f4:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
  f8:	88 23       	and	r24, r24
  fa:	01 f4       	brne	.+0      	; 0xfc <_ZN6SdFile7makeDirEPS_PKc+0xfc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_ZN6SdFile7makeDirEPS_PKc+0xfe>
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	fe 01       	movw	r30, r28
 104:	31 96       	adiw	r30, 0x01	; 1
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	01 90       	ld	r0, Z+
 10a:	0d 92       	st	X+, r0
 10c:	81 50       	subi	r24, 0x01	; 1
 10e:	01 f4       	brne	.+0      	; 0x110 <_ZN6SdFile7makeDirEPS_PKc+0x110>
 110:	b0 92 00 00 	sts	0x0000, r11
 114:	a0 92 00 00 	sts	0x0000, r10
 118:	d0 92 00 00 	sts	0x0000, r13
 11c:	c0 92 00 00 	sts	0x0000, r12
 120:	8e e2       	ldi	r24, 0x2E	; 46
 122:	8a 83       	std	Y+2, r24	; 0x02
 124:	f7 01       	movw	r30, r14
 126:	85 81       	ldd	r24, Z+5	; 0x05
 128:	82 50       	subi	r24, 0x02	; 2
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	00 f0       	brcs	.+0      	; 0x12e <_ZN6SdFile7makeDirEPS_PKc+0x12e>
 12e:	87 89       	ldd	r24, Z+23	; 0x17
 130:	90 8d       	ldd	r25, Z+24	; 0x18
 132:	a1 8d       	ldd	r26, Z+25	; 0x19
 134:	b2 8d       	ldd	r27, Z+26	; 0x1a
 136:	9c 01       	movw	r18, r24
 138:	cd 01       	movw	r24, r26
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN6SdFile7makeDirEPS_PKc+0x13c>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	a0 e0       	ldi	r26, 0x00	; 0
 146:	b0 e0       	ldi	r27, 0x00	; 0
 148:	fe 01       	movw	r30, r28
 14a:	31 96       	adiw	r30, 0x01	; 1
 14c:	40 e2       	ldi	r20, 0x20	; 32
 14e:	01 90       	ld	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	41 50       	subi	r20, 0x01	; 1
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN6SdFile7makeDirEPS_PKc+0x156>
 156:	90 93 00 00 	sts	0x0000, r25
 15a:	80 93 00 00 	sts	0x0000, r24
 15e:	30 93 00 00 	sts	0x0000, r19
 162:	20 93 00 00 	sts	0x0000, r18
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	a0 e0       	ldi	r26, 0x00	; 0
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	f8 01       	movw	r30, r16
 170:	82 87       	std	Z+10, r24	; 0x0a
 172:	93 87       	std	Z+11, r25	; 0x0b
 174:	a4 87       	std	Z+12, r26	; 0x0c
 176:	b5 87       	std	Z+13, r27	; 0x0d
 178:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile7makeDirEPS_PKc>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_ZN6SdFile7makeDirEPS_PKc+0x17e>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	a0 96       	adiw	r28, 0x20	; 32
 182:	0f b6       	in	r0, 0x3f	; 63
 184:	f8 94       	cli
 186:	de bf       	out	0x3e, r29	; 62
 188:	0f be       	out	0x3f, r0	; 63
 18a:	cd bf       	out	0x3d, r28	; 61
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	ff 90       	pop	r15
 196:	ef 90       	pop	r14
 198:	df 90       	pop	r13
 19a:	cf 90       	pop	r12
 19c:	bf 90       	pop	r11
 19e:	af 90       	pop	r10
 1a0:	08 95       	ret

Disassembly of section .text._ZN6SdFile16createContiguousEPS_PKcm:

00000000 <_ZN6SdFile16createContiguousEPS_PKcm>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
  write_P(str);
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
  println();
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
}
  10:	ec 01       	movw	r28, r24
  12:	68 01       	movw	r12, r16
  14:	79 01       	movw	r14, r18
  16:	01 15       	cp	r16, r1
  18:	11 05       	cpc	r17, r1
  1a:	21 05       	cpc	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6SdFile16createContiguousEPS_PKcm+0x20>
  20:	23 e3       	ldi	r18, 0x33	; 51
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile16createContiguousEPS_PKcm>
  26:	88 23       	and	r24, r24
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN6SdFile16createContiguousEPS_PKcm+0x2a>
  2a:	eb 8d       	ldd	r30, Y+27	; 0x1b
  2c:	fc 8d       	ldd	r31, Y+28	; 0x1c
  2e:	b7 01       	movw	r22, r14
  30:	a6 01       	movw	r20, r12
  32:	41 50       	subi	r20, 0x01	; 1
  34:	50 40       	sbci	r21, 0x00	; 0
  36:	60 40       	sbci	r22, 0x00	; 0
  38:	70 40       	sbci	r23, 0x00	; 0
  3a:	85 85       	ldd	r24, Z+13	; 0x0d
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	09 96       	adiw	r24, 0x09	; 9
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN6SdFile16createContiguousEPS_PKcm+0x42>
  42:	76 95       	lsr	r23
  44:	67 95       	ror	r22
  46:	57 95       	ror	r21
  48:	47 95       	ror	r20
  4a:	8a 95       	dec	r24
  4c:	02 f4       	brpl	.+0      	; 0x4e <_ZN6SdFile16createContiguousEPS_PKcm+0x4e>
  4e:	4f 5f       	subi	r20, 0xFF	; 255
  50:	5f 4f       	sbci	r21, 0xFF	; 255
  52:	6f 4f       	sbci	r22, 0xFF	; 255
  54:	7f 4f       	sbci	r23, 0xFF	; 255
  56:	9e 01       	movw	r18, r28
  58:	29 5e       	subi	r18, 0xE9	; 233
  5a:	3f 4f       	sbci	r19, 0xFF	; 255
  5c:	cf 01       	movw	r24, r30
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile16createContiguousEPS_PKcm>
  62:	88 23       	and	r24, r24
  64:	01 f4       	brne	.+0      	; 0x66 <_ZN6SdFile16createContiguousEPS_PKcm+0x66>
  66:	ce 01       	movw	r24, r28
  68:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile16createContiguousEPS_PKcm>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6SdFile16createContiguousEPS_PKcm+0x6e>
  6e:	cb 8a       	std	Y+19, r12	; 0x13
  70:	dc 8a       	std	Y+20, r13	; 0x14
  72:	ed 8a       	std	Y+21, r14	; 0x15
  74:	fe 8a       	std	Y+22, r15	; 0x16
  76:	8c 81       	ldd	r24, Y+4	; 0x04
  78:	80 68       	ori	r24, 0x80	; 128
  7a:	8c 83       	std	Y+4, r24	; 0x04
  7c:	ce 01       	movw	r24, r28
  7e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile16createContiguousEPS_PKcm>
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN6SdFile16createContiguousEPS_PKcm+0x84>
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	08 95       	ret

Disassembly of section .text._ZN6SdFile5writeEPKvj:

00000000 <_ZN6SdFile5writeEPKvj>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
  write_P(str);
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
  println();
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
}
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	cf 93       	push	r28
  20:	df 93       	push	r29
  22:	00 d0       	rcall	.+0      	; 0x24 <_ZN6SdFile5writeEPKvj+0x24>
  24:	00 d0       	rcall	.+0      	; 0x26 <_ZN6SdFile5writeEPKvj+0x26>
  26:	00 d0       	rcall	.+0      	; 0x28 <_ZN6SdFile5writeEPKvj+0x28>
  28:	cd b7       	in	r28, 0x3d	; 61
  2a:	de b7       	in	r29, 0x3e	; 62
  2c:	8c 01       	movw	r16, r24
  2e:	b6 2e       	mov	r11, r22
  30:	c7 2e       	mov	r12, r23
  32:	5e 83       	std	Y+6, r21	; 0x06
  34:	4d 83       	std	Y+5, r20	; 0x05
  36:	dc 01       	movw	r26, r24
  38:	15 96       	adiw	r26, 0x05	; 5
  3a:	8c 91       	ld	r24, X
  3c:	15 97       	sbiw	r26, 0x05	; 5
  3e:	81 30       	cpi	r24, 0x01	; 1
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6SdFile5writeEPKvj+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6SdFile5writeEPKvj+0x44>
  44:	14 96       	adiw	r26, 0x04	; 4
  46:	8c 91       	ld	r24, X
  48:	14 97       	sbiw	r26, 0x04	; 4
  4a:	81 ff       	sbrs	r24, 1
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6SdFile5writeEPKvj+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6SdFile5writeEPKvj+0x50>
  50:	f8 01       	movw	r30, r16
  52:	43 89       	ldd	r20, Z+19	; 0x13
  54:	54 89       	ldd	r21, Z+20	; 0x14
  56:	65 89       	ldd	r22, Z+21	; 0x15
  58:	76 89       	ldd	r23, Z+22	; 0x16
  5a:	82 85       	ldd	r24, Z+10	; 0x0a
  5c:	93 85       	ldd	r25, Z+11	; 0x0b
  5e:	a4 85       	ldd	r26, Z+12	; 0x0c
  60:	b5 85       	ldd	r27, Z+13	; 0x0d
  62:	84 17       	cp	r24, r20
  64:	95 07       	cpc	r25, r21
  66:	a6 07       	cpc	r26, r22
  68:	b7 07       	cpc	r27, r23
  6a:	01 f0       	breq	.+0      	; 0x6c <_ZN6SdFile5writeEPKvj+0x6c>
  6c:	c8 01       	movw	r24, r16
  6e:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
  72:	88 23       	and	r24, r24
  74:	01 f4       	brne	.+0      	; 0x76 <_ZN6SdFile5writeEPKvj+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN6SdFile5writeEPKvj+0x78>
  78:	2d 80       	ldd	r2, Y+5	; 0x05
  7a:	3e 80       	ldd	r3, Y+6	; 0x06
  7c:	4b 2c       	mov	r4, r11
  7e:	5c 2c       	mov	r5, r12
  80:	00 c0       	rjmp	.+0      	; 0x82 <_ZN6SdFile5writeEPKvj+0x82>
  82:	f8 01       	movw	r30, r16
  84:	23 8d       	ldd	r18, Z+27	; 0x1b
  86:	34 8d       	ldd	r19, Z+28	; 0x1c
  88:	f9 01       	movw	r30, r18
  8a:	b4 80       	ldd	r11, Z+4	; 0x04
  8c:	ba 94       	dec	r11
  8e:	ac 01       	movw	r20, r24
  90:	bd 01       	movw	r22, r26
  92:	03 2e       	mov	r0, r19
  94:	39 e0       	ldi	r19, 0x09	; 9
  96:	76 95       	lsr	r23
  98:	67 95       	ror	r22
  9a:	57 95       	ror	r21
  9c:	47 95       	ror	r20
  9e:	3a 95       	dec	r19
  a0:	01 f4       	brne	.+0      	; 0xa2 <_ZN6SdFile5writeEPKvj+0xa2>
  a2:	30 2d       	mov	r19, r0
  a4:	b4 22       	and	r11, r20
  a6:	4f ef       	ldi	r20, 0xFF	; 255
  a8:	64 2e       	mov	r6, r20
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	74 2e       	mov	r7, r20
  ae:	68 22       	and	r6, r24
  b0:	79 22       	and	r7, r25
  b2:	bb 20       	and	r11, r11
  b4:	01 f0       	breq	.+0      	; 0xb6 <_ZN6SdFile5writeEPKvj+0xb6>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <_ZN6SdFile5writeEPKvj+0xb8>
  b8:	61 14       	cp	r6, r1
  ba:	71 04       	cpc	r7, r1
  bc:	01 f0       	breq	.+0      	; 0xbe <_ZN6SdFile5writeEPKvj+0xbe>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <_ZN6SdFile5writeEPKvj+0xc0>
  c0:	d8 01       	movw	r26, r16
  c2:	16 96       	adiw	r26, 0x06	; 6
  c4:	4d 91       	ld	r20, X+
  c6:	5d 91       	ld	r21, X+
  c8:	6d 91       	ld	r22, X+
  ca:	7c 91       	ld	r23, X
  cc:	19 97       	sbiw	r26, 0x09	; 9
  ce:	41 15       	cp	r20, r1
  d0:	51 05       	cpc	r21, r1
  d2:	61 05       	cpc	r22, r1
  d4:	71 05       	cpc	r23, r1
  d6:	01 f4       	brne	.+0      	; 0xd8 <_ZN6SdFile5writeEPKvj+0xd8>
  d8:	57 96       	adiw	r26, 0x17	; 23
  da:	8d 91       	ld	r24, X+
  dc:	9d 91       	ld	r25, X+
  de:	0d 90       	ld	r0, X+
  e0:	bc 91       	ld	r27, X
  e2:	a0 2d       	mov	r26, r0
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	a1 05       	cpc	r26, r1
  e8:	b1 05       	cpc	r27, r1
  ea:	01 f0       	breq	.+0      	; 0xec <_ZN6SdFile5writeEPKvj+0xec>
  ec:	f8 01       	movw	r30, r16
  ee:	86 83       	std	Z+6, r24	; 0x06
  f0:	97 83       	std	Z+7, r25	; 0x07
  f2:	a0 87       	std	Z+8, r26	; 0x08
  f4:	b1 87       	std	Z+9, r27	; 0x09
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN6SdFile5writeEPKvj+0xf8>
  f8:	c9 01       	movw	r24, r18
  fa:	9e 01       	movw	r18, r28
  fc:	2f 5f       	subi	r18, 0xFF	; 255
  fe:	3f 4f       	sbci	r19, 0xFF	; 255
 100:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 104:	88 23       	and	r24, r24
 106:	01 f4       	brne	.+0      	; 0x108 <_ZN6SdFile5writeEPKvj+0x108>
 108:	00 c0       	rjmp	.+0      	; 0x10a <_ZN6SdFile5writeEPKvj+0x10a>
 10a:	49 81       	ldd	r20, Y+1	; 0x01
 10c:	5a 81       	ldd	r21, Y+2	; 0x02
 10e:	6b 81       	ldd	r22, Y+3	; 0x03
 110:	7c 81       	ldd	r23, Y+4	; 0x04
 112:	d8 01       	movw	r26, r16
 114:	5b 96       	adiw	r26, 0x1b	; 27
 116:	ed 91       	ld	r30, X+
 118:	fc 91       	ld	r31, X
 11a:	5c 97       	sbiw	r26, 0x1c	; 28
 11c:	87 89       	ldd	r24, Z+23	; 0x17
 11e:	80 31       	cpi	r24, 0x10	; 16
 120:	01 f4       	brne	.+0      	; 0x122 <_ZN6SdFile5writeEPKvj+0x122>
 122:	88 ef       	ldi	r24, 0xF8	; 248
 124:	9f ef       	ldi	r25, 0xFF	; 255
 126:	a0 e0       	ldi	r26, 0x00	; 0
 128:	b0 e0       	ldi	r27, 0x00	; 0
 12a:	00 c0       	rjmp	.+0      	; 0x12c <_ZN6SdFile5writeEPKvj+0x12c>
 12c:	88 ef       	ldi	r24, 0xF8	; 248
 12e:	9f ef       	ldi	r25, 0xFF	; 255
 130:	af ef       	ldi	r26, 0xFF	; 255
 132:	bf e0       	ldi	r27, 0x0F	; 15
 134:	48 17       	cp	r20, r24
 136:	59 07       	cpc	r21, r25
 138:	6a 07       	cpc	r22, r26
 13a:	7b 07       	cpc	r23, r27
 13c:	00 f0       	brcs	.+0      	; 0x13e <_ZN6SdFile5writeEPKvj+0x13e>
 13e:	c8 01       	movw	r24, r16
 140:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 144:	88 23       	and	r24, r24
 146:	01 f4       	brne	.+0      	; 0x148 <_ZN6SdFile5writeEPKvj+0x148>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN6SdFile5writeEPKvj+0x14a>
 14a:	f8 01       	movw	r30, r16
 14c:	46 83       	std	Z+6, r20	; 0x06
 14e:	57 83       	std	Z+7, r21	; 0x07
 150:	60 87       	std	Z+8, r22	; 0x08
 152:	71 87       	std	Z+9, r23	; 0x09
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	92 e0       	ldi	r25, 0x02	; 2
 158:	86 19       	sub	r24, r6
 15a:	97 09       	sbc	r25, r7
 15c:	41 01       	movw	r8, r2
 15e:	82 15       	cp	r24, r2
 160:	93 05       	cpc	r25, r3
 162:	00 f4       	brcc	.+0      	; 0x164 <_ZN6SdFile5writeEPKvj+0x164>
 164:	4c 01       	movw	r8, r24
 166:	d8 01       	movw	r26, r16
 168:	5b 96       	adiw	r26, 0x1b	; 27
 16a:	ed 91       	ld	r30, X+
 16c:	fc 91       	ld	r31, X
 16e:	5c 97       	sbiw	r26, 0x1c	; 28
 170:	16 96       	adiw	r26, 0x06	; 6
 172:	cd 90       	ld	r12, X+
 174:	dd 90       	ld	r13, X+
 176:	ed 90       	ld	r14, X+
 178:	fc 90       	ld	r15, X
 17a:	19 97       	sbiw	r26, 0x09	; 9
 17c:	8e ef       	ldi	r24, 0xFE	; 254
 17e:	9f ef       	ldi	r25, 0xFF	; 255
 180:	af ef       	ldi	r26, 0xFF	; 255
 182:	bf ef       	ldi	r27, 0xFF	; 255
 184:	c8 0e       	add	r12, r24
 186:	d9 1e       	adc	r13, r25
 188:	ea 1e       	adc	r14, r26
 18a:	fb 1e       	adc	r15, r27
 18c:	05 84       	ldd	r0, Z+13	; 0x0d
 18e:	00 c0       	rjmp	.+0      	; 0x190 <_ZN6SdFile5writeEPKvj+0x190>
 190:	cc 0c       	add	r12, r12
 192:	dd 1c       	adc	r13, r13
 194:	ee 1c       	adc	r14, r14
 196:	ff 1c       	adc	r15, r15
 198:	0a 94       	dec	r0
 19a:	02 f4       	brpl	.+0      	; 0x19c <_ZN6SdFile5writeEPKvj+0x19c>
 19c:	86 85       	ldd	r24, Z+14	; 0x0e
 19e:	97 85       	ldd	r25, Z+15	; 0x0f
 1a0:	a0 89       	ldd	r26, Z+16	; 0x10
 1a2:	b1 89       	ldd	r27, Z+17	; 0x11
 1a4:	c8 0e       	add	r12, r24
 1a6:	d9 1e       	adc	r13, r25
 1a8:	ea 1e       	adc	r14, r26
 1aa:	fb 1e       	adc	r15, r27
 1ac:	cb 0c       	add	r12, r11
 1ae:	d1 1c       	adc	r13, r1
 1b0:	e1 1c       	adc	r14, r1
 1b2:	f1 1c       	adc	r15, r1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	89 16       	cp	r8, r25
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	99 06       	cpc	r9, r25
 1bc:	01 f4       	brne	.+0      	; 0x1be <_ZN6SdFile5writeEPKvj+0x1be>
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	90 91 00 00 	lds	r25, 0x0000
 1c6:	a0 91 00 00 	lds	r26, 0x0000
 1ca:	b0 91 00 00 	lds	r27, 0x0000
 1ce:	8c 15       	cp	r24, r12
 1d0:	9d 05       	cpc	r25, r13
 1d2:	ae 05       	cpc	r26, r14
 1d4:	bf 05       	cpc	r27, r15
 1d6:	01 f4       	brne	.+0      	; 0x1d8 <_ZN6SdFile5writeEPKvj+0x1d8>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	9f ef       	ldi	r25, 0xFF	; 255
 1dc:	af ef       	ldi	r26, 0xFF	; 255
 1de:	bf ef       	ldi	r27, 0xFF	; 255
 1e0:	80 93 00 00 	sts	0x0000, r24
 1e4:	90 93 00 00 	sts	0x0000, r25
 1e8:	a0 93 00 00 	sts	0x0000, r26
 1ec:	b0 93 00 00 	sts	0x0000, r27
 1f0:	80 91 00 00 	lds	r24, 0x0000
 1f4:	90 91 00 00 	lds	r25, 0x0000
 1f8:	b7 01       	movw	r22, r14
 1fa:	a6 01       	movw	r20, r12
 1fc:	92 01       	movw	r18, r4
 1fe:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 202:	88 23       	and	r24, r24
 204:	01 f4       	brne	.+0      	; 0x206 <_ZN6SdFile5writeEPKvj+0x206>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN6SdFile5writeEPKvj+0x208>
 208:	a0 e0       	ldi	r26, 0x00	; 0
 20a:	b2 e0       	ldi	r27, 0x02	; 2
 20c:	4a 0e       	add	r4, r26
 20e:	5b 1e       	adc	r5, r27
 210:	00 c0       	rjmp	.+0      	; 0x212 <_ZN6SdFile5writeEPKvj+0x212>
 212:	61 14       	cp	r6, r1
 214:	71 04       	cpc	r7, r1
 216:	01 f4       	brne	.+0      	; 0x218 <_ZN6SdFile5writeEPKvj+0x218>
 218:	f8 01       	movw	r30, r16
 21a:	82 85       	ldd	r24, Z+10	; 0x0a
 21c:	93 85       	ldd	r25, Z+11	; 0x0b
 21e:	a4 85       	ldd	r26, Z+12	; 0x0c
 220:	b5 85       	ldd	r27, Z+13	; 0x0d
 222:	43 89       	ldd	r20, Z+19	; 0x13
 224:	54 89       	ldd	r21, Z+20	; 0x14
 226:	65 89       	ldd	r22, Z+21	; 0x15
 228:	76 89       	ldd	r23, Z+22	; 0x16
 22a:	84 17       	cp	r24, r20
 22c:	95 07       	cpc	r25, r21
 22e:	a6 07       	cpc	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	00 f0       	brcs	.+0      	; 0x234 <_ZN6SdFile5writeEPKvj+0x234>
 234:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 238:	88 23       	and	r24, r24
 23a:	01 f4       	brne	.+0      	; 0x23c <_ZN6SdFile5writeEPKvj+0x23c>
 23c:	00 c0       	rjmp	.+0      	; 0x23e <_ZN6SdFile5writeEPKvj+0x23e>
 23e:	c0 92 00 00 	sts	0x0000, r12
 242:	d0 92 00 00 	sts	0x0000, r13
 246:	e0 92 00 00 	sts	0x0000, r14
 24a:	f0 92 00 00 	sts	0x0000, r15
 24e:	80 91 00 00 	lds	r24, 0x0000
 252:	81 60       	ori	r24, 0x01	; 1
 254:	80 93 00 00 	sts	0x0000, r24
 258:	00 c0       	rjmp	.+0      	; 0x25a <_ZN6SdFile5writeEPKvj+0x25a>
 25a:	c7 01       	movw	r24, r14
 25c:	b6 01       	movw	r22, r12
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 264:	88 23       	and	r24, r24
 266:	01 f4       	brne	.+0      	; 0x268 <_ZN6SdFile5writeEPKvj+0x268>
 268:	00 c0       	rjmp	.+0      	; 0x26a <_ZN6SdFile5writeEPKvj+0x26a>
 26a:	93 01       	movw	r18, r6
 26c:	20 50       	subi	r18, 0x00	; 0
 26e:	30 40       	sbci	r19, 0x00	; 0
 270:	c9 01       	movw	r24, r18
 272:	88 0d       	add	r24, r8
 274:	99 1d       	adc	r25, r9
 276:	d2 01       	movw	r26, r4
 278:	f9 01       	movw	r30, r18
 27a:	00 c0       	rjmp	.+0      	; 0x27c <_ZN6SdFile5writeEPKvj+0x27c>
 27c:	4d 91       	ld	r20, X+
 27e:	41 93       	st	Z+, r20
 280:	e8 17       	cp	r30, r24
 282:	f9 07       	cpc	r31, r25
 284:	01 f4       	brne	.+0      	; 0x286 <_ZN6SdFile5writeEPKvj+0x286>
 286:	e2 1b       	sub	r30, r18
 288:	f3 0b       	sbc	r31, r19
 28a:	4e 0e       	add	r4, r30
 28c:	5f 1e       	adc	r5, r31
 28e:	28 18       	sub	r2, r8
 290:	39 08       	sbc	r3, r9
 292:	a4 01       	movw	r20, r8
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	f8 01       	movw	r30, r16
 29a:	82 85       	ldd	r24, Z+10	; 0x0a
 29c:	93 85       	ldd	r25, Z+11	; 0x0b
 29e:	a4 85       	ldd	r26, Z+12	; 0x0c
 2a0:	b5 85       	ldd	r27, Z+13	; 0x0d
 2a2:	84 0f       	add	r24, r20
 2a4:	95 1f       	adc	r25, r21
 2a6:	a6 1f       	adc	r26, r22
 2a8:	b7 1f       	adc	r27, r23
 2aa:	82 87       	std	Z+10, r24	; 0x0a
 2ac:	93 87       	std	Z+11, r25	; 0x0b
 2ae:	a4 87       	std	Z+12, r26	; 0x0c
 2b0:	b5 87       	std	Z+13, r27	; 0x0d
 2b2:	f8 01       	movw	r30, r16
 2b4:	82 85       	ldd	r24, Z+10	; 0x0a
 2b6:	93 85       	ldd	r25, Z+11	; 0x0b
 2b8:	a4 85       	ldd	r26, Z+12	; 0x0c
 2ba:	b5 85       	ldd	r27, Z+13	; 0x0d
 2bc:	21 14       	cp	r2, r1
 2be:	31 04       	cpc	r3, r1
 2c0:	01 f0       	breq	.+0      	; 0x2c2 <_ZN6SdFile5writeEPKvj+0x2c2>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <_ZN6SdFile5writeEPKvj+0x2c4>
 2c4:	43 89       	ldd	r20, Z+19	; 0x13
 2c6:	54 89       	ldd	r21, Z+20	; 0x14
 2c8:	65 89       	ldd	r22, Z+21	; 0x15
 2ca:	76 89       	ldd	r23, Z+22	; 0x16
 2cc:	48 17       	cp	r20, r24
 2ce:	59 07       	cpc	r21, r25
 2d0:	6a 07       	cpc	r22, r26
 2d2:	7b 07       	cpc	r23, r27
 2d4:	00 f4       	brcc	.+0      	; 0x2d6 <_ZN6SdFile5writeEPKvj+0x2d6>
 2d6:	83 8b       	std	Z+19, r24	; 0x13
 2d8:	94 8b       	std	Z+20, r25	; 0x14
 2da:	a5 8b       	std	Z+21, r26	; 0x15
 2dc:	b6 8b       	std	Z+22, r27	; 0x16
 2de:	84 81       	ldd	r24, Z+4	; 0x04
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	84 83       	std	Z+4, r24	; 0x04
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <_ZN6SdFile5writeEPKvj+0x2e6>
 2e6:	80 91 00 00 	lds	r24, 0x0000
 2ea:	90 91 00 00 	lds	r25, 0x0000
 2ee:	00 97       	sbiw	r24, 0x00	; 0
 2f0:	01 f0       	breq	.+0      	; 0x2f2 <_ZN6SdFile5writeEPKvj+0x2f2>
 2f2:	8d 81       	ldd	r24, Y+5	; 0x05
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	00 97       	sbiw	r24, 0x00	; 0
 2f8:	01 f0       	breq	.+0      	; 0x2fa <_ZN6SdFile5writeEPKvj+0x2fa>
 2fa:	84 81       	ldd	r24, Z+4	; 0x04
 2fc:	80 68       	ori	r24, 0x80	; 128
 2fe:	84 83       	std	Z+4, r24	; 0x04
 300:	f8 01       	movw	r30, r16
 302:	84 81       	ldd	r24, Z+4	; 0x04
 304:	83 ff       	sbrs	r24, 3
 306:	00 c0       	rjmp	.+0      	; 0x308 <_ZN6SdFile5writeEPKvj+0x308>
 308:	c8 01       	movw	r24, r16
 30a:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKvj>
 30e:	88 23       	and	r24, r24
 310:	01 f4       	brne	.+0      	; 0x312 <_ZN6SdFile5writeEPKvj+0x312>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	d8 01       	movw	r26, r16
 318:	13 96       	adiw	r26, 0x03	; 3
 31a:	9c 93       	st	X, r25
 31c:	8e 93       	st	-X, r24
 31e:	12 97       	sbiw	r26, 0x02	; 2
 320:	1e 82       	std	Y+6, r1	; 0x06
 322:	1d 82       	std	Y+5, r1	; 0x05
 324:	8d 81       	ldd	r24, Y+5	; 0x05
 326:	9e 81       	ldd	r25, Y+6	; 0x06
 328:	26 96       	adiw	r28, 0x06	; 6
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	f8 94       	cli
 32e:	de bf       	out	0x3e, r29	; 62
 330:	0f be       	out	0x3f, r0	; 63
 332:	cd bf       	out	0x3d, r28	; 61
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	1f 91       	pop	r17
 33a:	0f 91       	pop	r16
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	bf 90       	pop	r11
 346:	9f 90       	pop	r9
 348:	8f 90       	pop	r8
 34a:	7f 90       	pop	r7
 34c:	6f 90       	pop	r6
 34e:	5f 90       	pop	r5
 350:	4f 90       	pop	r4
 352:	3f 90       	pop	r3
 354:	2f 90       	pop	r2
 356:	08 95       	ret
 358:	82 fd       	sbrc	r24, 2
 35a:	00 c0       	rjmp	.+0      	; 0x35c <_ZN6SdFile5writeEPKvj+0x35c>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <__SREG__+0x31f>

Disassembly of section .text._ZN6SdFile5writeEh:

00000000 <_ZN6SdFile5writeEh>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	0f 92       	push	r0
  write_P(str);
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
  println();
   a:	69 83       	std	Y+1, r22	; 0x01
   c:	be 01       	movw	r22, r28
   e:	6f 5f       	subi	r22, 0xFF	; 255
}
  10:	7f 4f       	sbci	r23, 0xFF	; 255
  12:	41 e0       	ldi	r20, 0x01	; 1
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEh>
  1a:	0f 90       	pop	r0
  1c:	df 91       	pop	r29
  1e:	cf 91       	pop	r28
  20:	08 95       	ret

Disassembly of section .text._ZN6SdFile5writeEPKc:

00000000 <_ZN6SdFile5writeEPKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	db 01       	movw	r26, r22
   2:	0d 90       	ld	r0, X+
   4:	00 20       	and	r0, r0
  write_P(str);
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN6SdFile5writeEPKc+0x8>
   8:	ad 01       	movw	r20, r26
  println();
   a:	41 50       	subi	r20, 0x01	; 1
   c:	50 40       	sbci	r21, 0x00	; 0
   e:	46 1b       	sub	r20, r22
}
  10:	57 0b       	sbc	r21, r23
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile5writeEPKc>
  16:	08 95       	ret

Disassembly of section .text._ZN6SdFile7write_PEPKc:

00000000 <_ZN6SdFile7write_PEPKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
  write_P(str);
   6:	df 93       	push	r29
   8:	8c 01       	movw	r16, r24
  println();
   a:	eb 01       	movw	r28, r22
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZN6SdFile7write_PEPKc+0xe>
   e:	d8 01       	movw	r26, r16
}
  10:	ed 91       	ld	r30, X+
  12:	fc 91       	ld	r31, X
  14:	01 90       	ld	r0, Z+
  16:	f0 81       	ld	r31, Z
  18:	e0 2d       	mov	r30, r0
  1a:	c8 01       	movw	r24, r16
  1c:	09 95       	icall
  1e:	21 96       	adiw	r28, 0x01	; 1
  20:	fe 01       	movw	r30, r28
  22:	64 91       	lpm	r22, Z
  24:	66 23       	and	r22, r22
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN6SdFile7write_PEPKc+0x28>
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN6SdFile9writeln_PEPKc:

00000000 <_ZN6SdFile9writeln_PEPKc>:
/**
 * Write a PROGMEM string followed by CR/LF to a file.
 *
 * Use SdFile::writeError to check for errors.
 */
void SdFile::writeln_P(PGM_P str) {
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
  write_P(str);
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile9writeln_PEPKc>
  println();
   a:	ce 01       	movw	r24, r28
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6SdFile9writeln_PEPKc>
}
  10:	df 91       	pop	r29
  12:	cf 91       	pop	r28
  14:	08 95       	ret

SdVolume.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .stab         0000162c  00000000  00000000  00000034  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00005c83  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .text._ZN8SdVolume10cacheFlushEv 0000007c  00000000  00000000  000072e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  6 .text._ZN8SdVolume13cacheRawBlockEmh 00000076  00000000  00000000  0000735f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN8SdVolume14cacheZeroBlockEm 00000052  00000000  00000000  000073d5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZNK8SdVolume6fatGetEmPm 0000010c  00000000  00000000  00007427  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZNK8SdVolume9chainSizeEmPm 000000d6  00000000  00000000  00007533  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN8SdVolume6fatPutEmm 00000154  00000000  00000000  00007609  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN8SdVolume15allocContiguousEmPm 0000022a  00000000  00000000  0000775d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN8SdVolume9freeChainEm 000000ae  00000000  00000000  00007987  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN8SdVolume4initEP7Sd2Cardh 0000025a  00000000  00000000  00007a35  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .bss._ZN8SdVolume17cacheMirrorBlock_E 00000004  00000000  00000000  00007c8f  2**0
                  ALLOC
 15 .bss._ZN8SdVolume11cacheDirty_E 00000001  00000000  00000000  00007c8f  2**0
                  ALLOC
 16 .bss._ZN8SdVolume7sdCard_E 00000002  00000000  00000000  00007c8f  2**0
                  ALLOC
 17 .bss._ZN8SdVolume12cacheBuffer_E 00000200  00000000  00000000  00007c8f  2**0
                  ALLOC
 18 .data._ZN8SdVolume17cacheBlockNumber_E 00000004  00000000  00000000  00007c8f  2**0
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text._ZN8SdVolume10cacheFlushEv:

00000000 <_ZN8SdVolume10cacheFlushEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	80 91 00 00 	lds	r24, 0x0000
   4:	88 23       	and	r24, r24
   6:	01 f0       	breq	.+0      	; 0x8 <_ZN8SdVolume10cacheFlushEv+0x8>
   8:	40 91 00 00 	lds	r20, 0x0000
   c:	50 91 00 00 	lds	r21, 0x0000
  10:	60 91 00 00 	lds	r22, 0x0000
  14:	70 91 00 00 	lds	r23, 0x0000
  18:	80 91 00 00 	lds	r24, 0x0000
  1c:	90 91 00 00 	lds	r25, 0x0000
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume10cacheFlushEv>
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  28:	88 23       	and	r24, r24
    if (part > 4)return false;
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZN8SdVolume10cacheFlushEv+0x2c>
  2c:	40 91 00 00 	lds	r20, 0x0000
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	50 91 00 00 	lds	r21, 0x0000
  34:	60 91 00 00 	lds	r22, 0x0000
  38:	70 91 00 00 	lds	r23, 0x0000
  3c:	41 15       	cp	r20, r1
  3e:	51 05       	cpc	r21, r1
  40:	61 05       	cpc	r22, r1
  42:	71 05       	cpc	r23, r1
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	01 f0       	breq	.+0      	; 0x46 <_ZN8SdVolume10cacheFlushEv+0x46>
  46:	80 91 00 00 	lds	r24, 0x0000
  4a:	90 91 00 00 	lds	r25, 0x0000
  4e:	20 e0       	ldi	r18, 0x00	; 0
  50:	30 e0       	ldi	r19, 0x00	; 0
  52:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume10cacheFlushEv>
    if ((p->boot & 0X7F) !=0  ||
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <_ZN8SdVolume10cacheFlushEv+0x5a>
  5a:	10 92 00 00 	sts	0x0000, r1
  5e:	10 92 00 00 	sts	0x0000, r1
  62:	10 92 00 00 	sts	0x0000, r1
  66:	10 92 00 00 	sts	0x0000, r1
  6a:	10 92 00 00 	sts	0x0000, r1
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZN8SdVolume10cacheFlushEv+0x70>
  70:	80 e0       	ldi	r24, 0x00	; 0
  72:	08 95       	ret
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	08 95       	ret
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	08 95       	ret

Disassembly of section .text._ZN8SdVolume13cacheRawBlockEmh:

00000000 <_ZN8SdVolume13cacheRawBlockEmh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	cf 93       	push	r28
   a:	6b 01       	movw	r12, r22
   c:	7c 01       	movw	r14, r24
   e:	c4 2f       	mov	r28, r20
  10:	80 91 00 00 	lds	r24, 0x0000
  14:	90 91 00 00 	lds	r25, 0x0000
  18:	a0 91 00 00 	lds	r26, 0x0000
  1c:	b0 91 00 00 	lds	r27, 0x0000
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  20:	8c 15       	cp	r24, r12
  22:	9d 05       	cpc	r25, r13
  24:	ae 05       	cpc	r26, r14
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	bf 05       	cpc	r27, r15
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN8SdVolume13cacheRawBlockEmh+0x2a>
    if (part > 4)return false;
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume13cacheRawBlockEmh>
  2e:	88 23       	and	r24, r24
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	01 f0       	breq	.+0      	; 0x32 <_ZN8SdVolume13cacheRawBlockEmh+0x32>
  32:	80 91 00 00 	lds	r24, 0x0000
  36:	90 91 00 00 	lds	r25, 0x0000
  3a:	b7 01       	movw	r22, r14
  3c:	a6 01       	movw	r20, r12
  3e:	20 e0       	ldi	r18, 0x00	; 0
  40:	30 e0       	ldi	r19, 0x00	; 0
  42:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume13cacheRawBlockEmh>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  46:	88 23       	and	r24, r24
  48:	01 f0       	breq	.+0      	; 0x4a <_ZN8SdVolume13cacheRawBlockEmh+0x4a>
  4a:	c0 92 00 00 	sts	0x0000, r12
  4e:	d0 92 00 00 	sts	0x0000, r13
  52:	e0 92 00 00 	sts	0x0000, r14
    if ((p->boot & 0X7F) !=0  ||
  56:	f0 92 00 00 	sts	0x0000, r15
  5a:	80 91 00 00 	lds	r24, 0x0000
  5e:	8c 2b       	or	r24, r28
  60:	80 93 00 00 	sts	0x0000, r24
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN8SdVolume13cacheRawBlockEmh+0x68>
  68:	80 e0       	ldi	r24, 0x00	; 0
  6a:	cf 91       	pop	r28
  6c:	ff 90       	pop	r15
  6e:	ef 90       	pop	r14
  70:	df 90       	pop	r13
  72:	cf 90       	pop	r12
  74:	08 95       	ret

Disassembly of section .text._ZN8SdVolume14cacheZeroBlockEm:

00000000 <_ZN8SdVolume14cacheZeroBlockEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	6b 01       	movw	r12, r22
   a:	7c 01       	movw	r14, r24
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume14cacheZeroBlockEm>
  10:	88 23       	and	r24, r24
  12:	01 f0       	breq	.+0      	; 0x14 <_ZN8SdVolume14cacheZeroBlockEm+0x14>
  14:	e0 e0       	ldi	r30, 0x00	; 0
  16:	f0 e0       	ldi	r31, 0x00	; 0
  18:	80 e0       	ldi	r24, 0x00	; 0
  1a:	90 e0       	ldi	r25, 0x00	; 0
  1c:	11 92       	st	Z+, r1
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	01 96       	adiw	r24, 0x01	; 1
  20:	22 e0       	ldi	r18, 0x02	; 2
  22:	80 30       	cpi	r24, 0x00	; 0
  24:	92 07       	cpc	r25, r18
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN8SdVolume14cacheZeroBlockEm+0x28>
  28:	c0 92 00 00 	sts	0x0000, r12
    if (part > 4)return false;
  2c:	d0 92 00 00 	sts	0x0000, r13
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	e0 92 00 00 	sts	0x0000, r14
  34:	f0 92 00 00 	sts	0x0000, r15
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 93 00 00 	sts	0x0000, r24
  42:	81 e0       	ldi	r24, 0x01	; 1
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	00 c0       	rjmp	.+0      	; 0x46 <_ZN8SdVolume14cacheZeroBlockEm+0x46>
  46:	80 e0       	ldi	r24, 0x00	; 0
  48:	ff 90       	pop	r15
  4a:	ef 90       	pop	r14
  4c:	df 90       	pop	r13
  4e:	cf 90       	pop	r12
  50:	08 95       	ret

Disassembly of section .text._ZNK8SdVolume6fatGetEmPm:

00000000 <_ZNK8SdVolume6fatGetEmPm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	6a 01       	movw	r12, r20
  18:	7b 01       	movw	r14, r22
  1a:	59 01       	movw	r10, r18
  1c:	89 85       	ldd	r24, Y+9	; 0x09
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	9a 85       	ldd	r25, Y+10	; 0x0a
  20:	ab 85       	ldd	r26, Y+11	; 0x0b
  22:	bc 85       	ldd	r27, Y+12	; 0x0c
  24:	01 96       	adiw	r24, 0x01	; 1
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	a1 1d       	adc	r26, r1
  28:	b1 1d       	adc	r27, r1
    if (part > 4)return false;
  2a:	84 17       	cp	r24, r20
  2c:	95 07       	cpc	r25, r21
  2e:	a6 07       	cpc	r26, r22
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	b7 07       	cpc	r27, r23
  32:	00 f4       	brcc	.+0      	; 0x34 <_ZNK8SdVolume6fatGetEmPm+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZNK8SdVolume6fatGetEmPm+0x36>
  36:	4b 89       	ldd	r20, Y+19	; 0x13
  38:	5c 89       	ldd	r21, Y+20	; 0x14
  3a:	6d 89       	ldd	r22, Y+21	; 0x15
  3c:	7e 89       	ldd	r23, Y+22	; 0x16
  3e:	8f 89       	ldd	r24, Y+23	; 0x17
  40:	80 31       	cpi	r24, 0x10	; 16
  42:	01 f4       	brne	.+0      	; 0x44 <_ZNK8SdVolume6fatGetEmPm+0x44>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	bb 27       	eor	r27, r27
  46:	af 2d       	mov	r26, r15
  48:	9e 2d       	mov	r25, r14
  4a:	8d 2d       	mov	r24, r13
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZNK8SdVolume6fatGetEmPm+0x4e>
  4e:	d7 01       	movw	r26, r14
  50:	c6 01       	movw	r24, r12
  52:	37 e0       	ldi	r19, 0x07	; 7
  54:	b6 95       	lsr	r27
    if ((p->boot & 0X7F) !=0  ||
  56:	a7 95       	ror	r26
  58:	97 95       	ror	r25
  5a:	87 95       	ror	r24
  5c:	3a 95       	dec	r19
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZNK8SdVolume6fatGetEmPm+0x60>
  60:	8c 01       	movw	r16, r24
  62:	9d 01       	movw	r18, r26
  64:	04 0f       	add	r16, r20
  66:	15 1f       	adc	r17, r21
  68:	26 1f       	adc	r18, r22
  6a:	37 1f       	adc	r19, r23
  6c:	c9 01       	movw	r24, r18
  6e:	b8 01       	movw	r22, r16
  70:	00 91 00 00 	lds	r16, 0x0000
  74:	10 91 00 00 	lds	r17, 0x0000
  78:	20 91 00 00 	lds	r18, 0x0000
  7c:	30 91 00 00 	lds	r19, 0x0000
  80:	60 17       	cp	r22, r16
  82:	71 07       	cpc	r23, r17
  84:	82 07       	cpc	r24, r18
  86:	93 07       	cpc	r25, r19
  88:	01 f0       	breq	.+0      	; 0x8a <_ZNK8SdVolume6fatGetEmPm+0x8a>
  8a:	40 e0       	ldi	r20, 0x00	; 0
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8c:	0e 94 00 00 	call	0	; 0x0 <_ZNK8SdVolume6fatGetEmPm>
  90:	88 23       	and	r24, r24
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	01 f0       	breq	.+0      	; 0x94 <_ZNK8SdVolume6fatGetEmPm+0x94>
  94:	8f 89       	ldd	r24, Y+23	; 0x17
  96:	80 31       	cpi	r24, 0x10	; 16
  98:	01 f4       	brne	.+0      	; 0x9a <_ZNK8SdVolume6fatGetEmPm+0x9a>
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	c8 22       	and	r12, r24
  a4:	d9 22       	and	r13, r25
  a6:	ea 22       	and	r14, r26
  a8:	fb 22       	and	r15, r27
  aa:	f6 01       	movw	r30, r12
  ac:	ee 0f       	add	r30, r30
  ae:	ff 1f       	adc	r31, r31
  b0:	e0 50       	subi	r30, 0x00	; 0
  b2:	f0 40       	sbci	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	91 81       	ldd	r25, Z+1	; 0x01
  b8:	a0 e0       	ldi	r26, 0x00	; 0
  ba:	b0 e0       	ldi	r27, 0x00	; 0
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZNK8SdVolume6fatGetEmPm+0xbe>
  be:	0f e7       	ldi	r16, 0x7F	; 127
  c0:	10 e0       	ldi	r17, 0x00	; 0
  c2:	20 e0       	ldi	r18, 0x00	; 0
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	c0 22       	and	r12, r16
  c8:	d1 22       	and	r13, r17
  ca:	e2 22       	and	r14, r18
  cc:	f3 22       	and	r15, r19
  ce:	f6 01       	movw	r30, r12
  d0:	ee 0f       	add	r30, r30
  d2:	ff 1f       	adc	r31, r31
  d4:	ee 0f       	add	r30, r30
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  d6:	ff 1f       	adc	r31, r31
  blocksPerCluster_ = bpb->sectorsPerCluster;
  d8:	e0 50       	subi	r30, 0x00	; 0

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  da:	f0 40       	sbci	r31, 0x00	; 0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  dc:	80 81       	ld	r24, Z
  de:	91 81       	ldd	r25, Z+1	; 0x01
  e0:	a2 81       	ldd	r26, Z+2	; 0x02
  e2:	b3 81       	ldd	r27, Z+3	; 0x03
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  e4:	bf 70       	andi	r27, 0x0F	; 15
  e6:	f5 01       	movw	r30, r10
  e8:	80 83       	st	Z, r24
  ea:	91 83       	std	Z+1, r25	; 0x01
  ec:	a2 83       	std	Z+2, r26	; 0x02
  ee:	b3 83       	std	Z+3, r27	; 0x03
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <_ZNK8SdVolume6fatGetEmPm+0xf4>
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	1f 91       	pop	r17
  fc:	0f 91       	pop	r16
  fe:	ff 90       	pop	r15
 100:	ef 90       	pop	r14
 102:	df 90       	pop	r13
 104:	cf 90       	pop	r12
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	08 95       	ret

Disassembly of section .text._ZNK8SdVolume9chainSizeEmPm:

00000000 <_ZNK8SdVolume9chainSizeEmPm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	00 d0       	rcall	.+0      	; 0x1e <_ZNK8SdVolume9chainSizeEmPm+0x1e>
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	00 d0       	rcall	.+0      	; 0x20 <_ZNK8SdVolume9chainSizeEmPm+0x20>
  20:	cd b7       	in	r28, 0x3d	; 61
  22:	de b7       	in	r29, 0x3e	; 62
  24:	8c 01       	movw	r16, r24
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	49 83       	std	Y+1, r20	; 0x01
  28:	5a 83       	std	Y+2, r21	; 0x02
    if (part > 4)return false;
  2a:	6b 83       	std	Y+3, r22	; 0x03
  2c:	7c 83       	std	Y+4, r23	; 0x04
  2e:	39 01       	movw	r6, r18
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	cc 24       	eor	r12, r12
  32:	dd 24       	eor	r13, r13
  34:	76 01       	movw	r14, r12
  36:	81 2c       	mov	r8, r1
  38:	f2 e0       	ldi	r31, 0x02	; 2
  3a:	9f 2e       	mov	r9, r31
  3c:	a1 2c       	mov	r10, r1
  3e:	b1 2c       	mov	r11, r1
  40:	49 81       	ldd	r20, Y+1	; 0x01
  42:	5a 81       	ldd	r21, Y+2	; 0x02
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	6b 81       	ldd	r22, Y+3	; 0x03
  46:	7c 81       	ldd	r23, Y+4	; 0x04
  48:	c8 01       	movw	r24, r16
  4a:	9e 01       	movw	r18, r28
  4c:	2f 5f       	subi	r18, 0xFF	; 255
  4e:	3f 4f       	sbci	r19, 0xFF	; 255
  50:	0e 94 00 00 	call	0	; 0x0 <_ZNK8SdVolume9chainSizeEmPm>
  54:	88 23       	and	r24, r24
    if ((p->boot & 0X7F) !=0  ||
  56:	01 f0       	breq	.+0      	; 0x58 <_ZNK8SdVolume9chainSizeEmPm+0x58>
  58:	d5 01       	movw	r26, r10
  5a:	c4 01       	movw	r24, r8
  5c:	f8 01       	movw	r30, r16
  5e:	05 84       	ldd	r0, Z+13	; 0x0d
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZNK8SdVolume9chainSizeEmPm+0x62>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	aa 1f       	adc	r26, r26
  68:	bb 1f       	adc	r27, r27
  6a:	0a 94       	dec	r0
  6c:	02 f4       	brpl	.+0      	; 0x6e <_ZNK8SdVolume9chainSizeEmPm+0x6e>
  6e:	c8 0e       	add	r12, r24
  70:	d9 1e       	adc	r13, r25
  72:	ea 1e       	adc	r14, r26
  74:	fb 1e       	adc	r15, r27
  76:	49 81       	ldd	r20, Y+1	; 0x01
  78:	5a 81       	ldd	r21, Y+2	; 0x02
  7a:	6b 81       	ldd	r22, Y+3	; 0x03
  7c:	7c 81       	ldd	r23, Y+4	; 0x04
  7e:	87 89       	ldd	r24, Z+23	; 0x17
  80:	80 31       	cpi	r24, 0x10	; 16
  82:	01 f4       	brne	.+0      	; 0x84 <_ZNK8SdVolume9chainSizeEmPm+0x84>
  84:	88 ef       	ldi	r24, 0xF8	; 248
  86:	9f ef       	ldi	r25, 0xFF	; 255
  88:	a0 e0       	ldi	r26, 0x00	; 0
  8a:	b0 e0       	ldi	r27, 0x00	; 0
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZNK8SdVolume9chainSizeEmPm+0x8e>
  8e:	88 ef       	ldi	r24, 0xF8	; 248
  90:	9f ef       	ldi	r25, 0xFF	; 255
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	af ef       	ldi	r26, 0xFF	; 255
  94:	bf e0       	ldi	r27, 0x0F	; 15
  96:	48 17       	cp	r20, r24
  98:	59 07       	cpc	r21, r25
  9a:	6a 07       	cpc	r22, r26
  9c:	7b 07       	cpc	r23, r27
  9e:	00 f0       	brcs	.+0      	; 0xa0 <_ZNK8SdVolume9chainSizeEmPm+0xa0>
  a0:	f3 01       	movw	r30, r6
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	c0 82       	st	Z, r12
  a4:	d1 82       	std	Z+1, r13	; 0x01
  a6:	e2 82       	std	Z+2, r14	; 0x02
  a8:	f3 82       	std	Z+3, r15	; 0x03
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZNK8SdVolume9chainSizeEmPm+0xae>
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0f 90       	pop	r0
  b2:	0f 90       	pop	r0
  b4:	0f 90       	pop	r0
  b6:	0f 90       	pop	r0
  b8:	df 91       	pop	r29
  ba:	cf 91       	pop	r28
  bc:	1f 91       	pop	r17
  be:	0f 91       	pop	r16
  c0:	ff 90       	pop	r15
  c2:	ef 90       	pop	r14
  c4:	df 90       	pop	r13
  c6:	cf 90       	pop	r12
  c8:	bf 90       	pop	r11
  ca:	af 90       	pop	r10
  cc:	9f 90       	pop	r9
  ce:	8f 90       	pop	r8
  d0:	7f 90       	pop	r7
  d2:	6f 90       	pop	r6
  d4:	08 95       	ret

Disassembly of section .text._ZN8SdVolume6fatPutEmm:

00000000 <_ZN8SdVolume6fatPutEmm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	6f 92       	push	r6
   6:	7f 92       	push	r7
   8:	8f 92       	push	r8
   a:	9f 92       	push	r9
   c:	af 92       	push	r10
   e:	bf 92       	push	r11
  10:	cf 92       	push	r12
  12:	df 92       	push	r13
  14:	ef 92       	push	r14
  16:	ff 92       	push	r15
  18:	0f 93       	push	r16
  1a:	1f 93       	push	r17
  1c:	cf 93       	push	r28
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	df 93       	push	r29
  20:	ec 01       	movw	r28, r24
  22:	6a 01       	movw	r12, r20
  24:	7b 01       	movw	r14, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	28 01       	movw	r4, r16
  28:	39 01       	movw	r6, r18
    if (part > 4)return false;
  2a:	42 30       	cpi	r20, 0x02	; 2
  2c:	51 05       	cpc	r21, r1
  2e:	61 05       	cpc	r22, r1
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	71 05       	cpc	r23, r1
  32:	00 f4       	brcc	.+0      	; 0x34 <_ZN8SdVolume6fatPutEmm+0x34>
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN8SdVolume6fatPutEmm+0x36>
  36:	89 85       	ldd	r24, Y+9	; 0x09
  38:	9a 85       	ldd	r25, Y+10	; 0x0a
  3a:	ab 85       	ldd	r26, Y+11	; 0x0b
  3c:	bc 85       	ldd	r27, Y+12	; 0x0c
  3e:	01 96       	adiw	r24, 0x01	; 1
  40:	a1 1d       	adc	r26, r1
  42:	b1 1d       	adc	r27, r1
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	84 17       	cp	r24, r20
  46:	95 07       	cpc	r25, r21
  48:	a6 07       	cpc	r26, r22
  4a:	b7 07       	cpc	r27, r23
  4c:	00 f4       	brcc	.+0      	; 0x4e <_ZN8SdVolume6fatPutEmm+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN8SdVolume6fatPutEmm+0x50>
  50:	4b 89       	ldd	r20, Y+19	; 0x13
  52:	5c 89       	ldd	r21, Y+20	; 0x14
  54:	6d 89       	ldd	r22, Y+21	; 0x15
    if ((p->boot & 0X7F) !=0  ||
  56:	7e 89       	ldd	r23, Y+22	; 0x16
  58:	8f 89       	ldd	r24, Y+23	; 0x17
  5a:	80 31       	cpi	r24, 0x10	; 16
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN8SdVolume6fatPutEmm+0x5e>
  5e:	bb 27       	eor	r27, r27
  60:	af 2d       	mov	r26, r15
  62:	9e 2d       	mov	r25, r14
  64:	8d 2d       	mov	r24, r13
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN8SdVolume6fatPutEmm+0x68>
  68:	d7 01       	movw	r26, r14
  6a:	c6 01       	movw	r24, r12
  6c:	27 e0       	ldi	r18, 0x07	; 7
  6e:	b6 95       	lsr	r27
  70:	a7 95       	ror	r26
  72:	97 95       	ror	r25
  74:	87 95       	ror	r24
  76:	2a 95       	dec	r18
  78:	01 f4       	brne	.+0      	; 0x7a <_ZN8SdVolume6fatPutEmm+0x7a>
  7a:	4c 01       	movw	r8, r24
  7c:	5d 01       	movw	r10, r26
  7e:	84 0e       	add	r8, r20
  80:	95 1e       	adc	r9, r21
  82:	a6 1e       	adc	r10, r22
  84:	b7 1e       	adc	r11, r23
  86:	80 91 00 00 	lds	r24, 0x0000
  8a:	90 91 00 00 	lds	r25, 0x0000
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8e:	a0 91 00 00 	lds	r26, 0x0000
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	b0 91 00 00 	lds	r27, 0x0000
  96:	88 16       	cp	r8, r24
  98:	99 06       	cpc	r9, r25
  9a:	aa 06       	cpc	r10, r26
  9c:	bb 06       	cpc	r11, r27
  9e:	01 f0       	breq	.+0      	; 0xa0 <_ZN8SdVolume6fatPutEmm+0xa0>
  a0:	c5 01       	movw	r24, r10
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	b4 01       	movw	r22, r8
  a4:	40 e0       	ldi	r20, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume6fatPutEmm>
  aa:	88 23       	and	r24, r24
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN8SdVolume6fatPutEmm+0xae>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN8SdVolume6fatPutEmm+0xb0>
  b0:	8f 89       	ldd	r24, Y+23	; 0x17
  b2:	80 31       	cpi	r24, 0x10	; 16
  b4:	01 f4       	brne	.+0      	; 0xb6 <_ZN8SdVolume6fatPutEmm+0xb6>
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	c8 22       	and	r12, r24
  c0:	d9 22       	and	r13, r25
  c2:	ea 22       	and	r14, r26
  c4:	fb 22       	and	r15, r27
  c6:	f6 01       	movw	r30, r12
  c8:	ee 0f       	add	r30, r30
  ca:	ff 1f       	adc	r31, r31
  cc:	e0 50       	subi	r30, 0x00	; 0
  ce:	f0 40       	sbci	r31, 0x00	; 0
  d0:	51 82       	std	Z+1, r5	; 0x01
  d2:	40 82       	st	Z, r4
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_ZN8SdVolume6fatPutEmm+0xd6>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  d6:	8f e7       	ldi	r24, 0x7F	; 127
  blocksPerCluster_ = bpb->sectorsPerCluster;
  d8:	90 e0       	ldi	r25, 0x00	; 0

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  da:	a0 e0       	ldi	r26, 0x00	; 0
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	c8 22       	and	r12, r24
  e0:	d9 22       	and	r13, r25
  e2:	ea 22       	and	r14, r26
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  e4:	fb 22       	and	r15, r27
  e6:	f6 01       	movw	r30, r12
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	f0 40       	sbci	r31, 0x00	; 0
  f4:	40 82       	st	Z, r4
  f6:	51 82       	std	Z+1, r5	; 0x01
  f8:	62 82       	std	Z+2, r6	; 0x02
  fa:	73 82       	std	Z+3, r7	; 0x03
  fc:	80 91 00 00 	lds	r24, 0x0000
 100:	81 60       	ori	r24, 0x01	; 1
 102:	80 93 00 00 	sts	0x0000, r24
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
 106:	8a 89       	ldd	r24, Y+18	; 0x12
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	00 f0       	brcs	.+0      	; 0x10c <_ZN8SdVolume6fatPutEmm+0x10c>
 10c:	8d 81       	ldd	r24, Y+5	; 0x05
 10e:	9e 81       	ldd	r25, Y+6	; 0x06
 110:	af 81       	ldd	r26, Y+7	; 0x07
 112:	b8 85       	ldd	r27, Y+8	; 0x08
 114:	88 0d       	add	r24, r8
 116:	99 1d       	adc	r25, r9
 118:	aa 1d       	adc	r26, r10
 11a:	bb 1d       	adc	r27, r11
 11c:	80 93 00 00 	sts	0x0000, r24
 120:	90 93 00 00 	sts	0x0000, r25
 124:	a0 93 00 00 	sts	0x0000, r26
 128:	b0 93 00 00 	sts	0x0000, r27
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN8SdVolume6fatPutEmm+0x130>

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	ff 90       	pop	r15
 13c:	ef 90       	pop	r14
 13e:	df 90       	pop	r13
 140:	cf 90       	pop	r12
 142:	bf 90       	pop	r11
 144:	af 90       	pop	r10
 146:	9f 90       	pop	r9
 148:	8f 90       	pop	r8
 14a:	7f 90       	pop	r7

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
 14c:	6f 90       	pop	r6
 14e:	5f 90       	pop	r5
 150:	4f 90       	pop	r4
 152:	08 95       	ret

Disassembly of section .text._ZN8SdVolume15allocContiguousEmPm:

00000000 <_ZN8SdVolume15allocContiguousEmPm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	cd b7       	in	r28, 0x3d	; 61
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	de b7       	in	r29, 0x3e	; 62
  28:	2f 97       	sbiw	r28, 0x0f	; 15
    if (part > 4)return false;
  2a:	0f b6       	in	r0, 0x3f	; 63
  2c:	f8 94       	cli
  2e:	de bf       	out	0x3e, r29	; 62
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	0f be       	out	0x3f, r0	; 63
  32:	cd bf       	out	0x3d, r28	; 61
  34:	1c 01       	movw	r2, r24
  36:	4c 87       	std	Y+12, r20	; 0x0c
  38:	5d 87       	std	Y+13, r21	; 0x0d
  3a:	6e 87       	std	Y+14, r22	; 0x0e
  3c:	7f 87       	std	Y+15, r23	; 0x0f
  3e:	3b 87       	std	Y+11, r19	; 0x0b
  40:	2a 87       	std	Y+10, r18	; 0x0a
  42:	d9 01       	movw	r26, r18
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	4d 90       	ld	r4, X+
  46:	5d 90       	ld	r5, X+
  48:	6d 90       	ld	r6, X+
  4a:	7c 90       	ld	r7, X
  4c:	13 97       	sbiw	r26, 0x03	; 3
  4e:	41 14       	cp	r4, r1
  50:	51 04       	cpc	r5, r1
  52:	61 04       	cpc	r6, r1
  54:	71 04       	cpc	r7, r1
    if ((p->boot & 0X7F) !=0  ||
  56:	01 f0       	breq	.+0      	; 0x58 <_ZN8SdVolume15allocContiguousEmPm+0x58>
  58:	08 94       	sec
  5a:	41 1c       	adc	r4, r1
  5c:	51 1c       	adc	r5, r1
  5e:	61 1c       	adc	r6, r1
  60:	71 1c       	adc	r7, r1
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN8SdVolume15allocContiguousEmPm+0x64>
  64:	fc 01       	movw	r30, r24
  66:	40 80       	ld	r4, Z
  68:	51 80       	ldd	r5, Z+1	; 0x01
  6a:	62 80       	ldd	r6, Z+2	; 0x02
  6c:	73 80       	ldd	r7, Z+3	; 0x03
  6e:	f1 e0       	ldi	r31, 0x01	; 1
  70:	fd 83       	std	Y+5, r31	; 0x05
  72:	2c 85       	ldd	r18, Y+12	; 0x0c
  74:	3d 85       	ldd	r19, Y+13	; 0x0d
  76:	4e 85       	ldd	r20, Y+14	; 0x0e
  78:	5f 85       	ldd	r21, Y+15	; 0x0f
  7a:	21 30       	cpi	r18, 0x01	; 1
  7c:	31 05       	cpc	r19, r1
  7e:	41 05       	cpc	r20, r1
  80:	51 05       	cpc	r21, r1
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN8SdVolume15allocContiguousEmPm+0x84>
  84:	1d 82       	std	Y+5, r1	; 0x05
  86:	d1 01       	movw	r26, r2
  88:	19 96       	adiw	r26, 0x09	; 9
  8a:	cd 90       	ld	r12, X+
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8c:	dd 90       	ld	r13, X+
  8e:	ed 90       	ld	r14, X+
  90:	fc 90       	ld	r15, X
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	1c 97       	sbiw	r26, 0x0c	; 12
  94:	08 94       	sec
  96:	c1 1c       	adc	r12, r1
  98:	d1 1c       	adc	r13, r1
  9a:	e1 1c       	adc	r14, r1
  9c:	f1 1c       	adc	r15, r1
  9e:	53 01       	movw	r10, r6
  a0:	42 01       	movw	r8, r4
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	1e 82       	std	Y+6, r1	; 0x06
  a4:	1f 82       	std	Y+7, r1	; 0x07
  a6:	18 86       	std	Y+8, r1	; 0x08
  a8:	19 86       	std	Y+9, r1	; 0x09
  aa:	f1 01       	movw	r30, r2
  ac:	81 85       	ldd	r24, Z+9	; 0x09
  ae:	92 85       	ldd	r25, Z+10	; 0x0a
  b0:	a3 85       	ldd	r26, Z+11	; 0x0b
  b2:	b4 85       	ldd	r27, Z+12	; 0x0c
  b4:	2e 81       	ldd	r18, Y+6	; 0x06
  b6:	3f 81       	ldd	r19, Y+7	; 0x07
  b8:	48 85       	ldd	r20, Y+8	; 0x08
  ba:	59 85       	ldd	r21, Y+9	; 0x09
  bc:	28 17       	cp	r18, r24
  be:	39 07       	cpc	r19, r25
  c0:	4a 07       	cpc	r20, r26
  c2:	5b 07       	cpc	r21, r27
  c4:	00 f0       	brcs	.+0      	; 0xc6 <_ZN8SdVolume15allocContiguousEmPm+0xc6>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <_ZN8SdVolume15allocContiguousEmPm+0xc8>
  c8:	c8 14       	cp	r12, r8
  ca:	d9 04       	cpc	r13, r9
  cc:	ea 04       	cpc	r14, r10
  ce:	fb 04       	cpc	r15, r11
  d0:	00 f4       	brcc	.+0      	; 0xd2 <_ZN8SdVolume15allocContiguousEmPm+0xd2>
  d2:	42 e0       	ldi	r20, 0x02	; 2
  d4:	84 2e       	mov	r8, r20
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  d6:	91 2c       	mov	r9, r1
  blocksPerCluster_ = bpb->sectorsPerCluster;
  d8:	a1 2c       	mov	r10, r1

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  da:	b1 2c       	mov	r11, r1
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  dc:	52 e0       	ldi	r21, 0x02	; 2
  de:	45 2e       	mov	r4, r21
  e0:	51 2c       	mov	r5, r1
  e2:	61 2c       	mov	r6, r1
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  e4:	71 2c       	mov	r7, r1
  e6:	c1 01       	movw	r24, r2
  e8:	b5 01       	movw	r22, r10
  ea:	a4 01       	movw	r20, r8
  ec:	9e 01       	movw	r18, r28
  ee:	2f 5f       	subi	r18, 0xFF	; 255
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  f0:	3f 4f       	sbci	r19, 0xFF	; 255
  f2:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume15allocContiguousEmPm>
  f6:	88 23       	and	r24, r24
  f8:	01 f4       	brne	.+0      	; 0xfa <_ZN8SdVolume15allocContiguousEmPm+0xfa>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_ZN8SdVolume15allocContiguousEmPm+0xfc>
  fc:	49 81       	ldd	r20, Y+1	; 0x01
  fe:	5a 81       	ldd	r21, Y+2	; 0x02
 100:	6b 81       	ldd	r22, Y+3	; 0x03
 102:	7c 81       	ldd	r23, Y+4	; 0x04
 104:	d5 01       	movw	r26, r10
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
 106:	c4 01       	movw	r24, r8
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	a1 1d       	adc	r26, r1
 10c:	b1 1d       	adc	r27, r1
 10e:	41 15       	cp	r20, r1
 110:	51 05       	cpc	r21, r1
 112:	61 05       	cpc	r22, r1
 114:	71 05       	cpc	r23, r1
 116:	01 f0       	breq	.+0      	; 0x118 <_ZN8SdVolume15allocContiguousEmPm+0x118>
 118:	2c 01       	movw	r4, r24
 11a:	3d 01       	movw	r6, r26
 11c:	00 c0       	rjmp	.+0      	; 0x11e <_ZN8SdVolume15allocContiguousEmPm+0x11e>
 11e:	84 19       	sub	r24, r4
 120:	95 09       	sbc	r25, r5
 122:	a6 09       	sbc	r26, r6
 124:	b7 09       	sbc	r27, r7
 126:	2c 85       	ldd	r18, Y+12	; 0x0c
 128:	3d 85       	ldd	r19, Y+13	; 0x0d
 12a:	4e 85       	ldd	r20, Y+14	; 0x0e
 12c:	5f 85       	ldd	r21, Y+15	; 0x0f
 12e:	82 17       	cp	r24, r18

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
 130:	93 07       	cpc	r25, r19
 132:	a4 07       	cpc	r26, r20
 134:	b5 07       	cpc	r27, r21
 136:	01 f0       	breq	.+0      	; 0x138 <_ZN8SdVolume15allocContiguousEmPm+0x138>
 138:	8e 81       	ldd	r24, Y+6	; 0x06
 13a:	9f 81       	ldd	r25, Y+7	; 0x07
 13c:	a8 85       	ldd	r26, Y+8	; 0x08
 13e:	b9 85       	ldd	r27, Y+9	; 0x09
 140:	01 96       	adiw	r24, 0x01	; 1
 142:	a1 1d       	adc	r26, r1
 144:	b1 1d       	adc	r27, r1
 146:	8e 83       	std	Y+6, r24	; 0x06
 148:	9f 83       	std	Y+7, r25	; 0x07
 14a:	a8 87       	std	Y+8, r26	; 0x08

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
 14c:	b9 87       	std	Y+9, r27	; 0x09
 14e:	08 94       	sec
 150:	81 1c       	adc	r8, r1
 152:	91 1c       	adc	r9, r1
 154:	a1 1c       	adc	r10, r1
 156:	b1 1c       	adc	r11, r1

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
 158:	00 c0       	rjmp	.+0      	; 0x15a <_ZN8SdVolume15allocContiguousEmPm+0x15a>
 15a:	c1 01       	movw	r24, r2
 15c:	a4 01       	movw	r20, r8
 15e:	b5 01       	movw	r22, r10
 160:	0f ef       	ldi	r16, 0xFF	; 255
 162:	1f ef       	ldi	r17, 0xFF	; 255
 164:	2f ef       	ldi	r18, 0xFF	; 255
 166:	3f e0       	ldi	r19, 0x0F	; 15
 168:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume15allocContiguousEmPm>
 16c:	88 23       	and	r24, r24
 16e:	01 f4       	brne	.+0      	; 0x170 <_ZN8SdVolume15allocContiguousEmPm+0x170>
 170:	00 c0       	rjmp	.+0      	; 0x172 <_ZN8SdVolume15allocContiguousEmPm+0x172>
 172:	68 01       	movw	r12, r16
 174:	79 01       	movw	r14, r18
 176:	08 94       	sec
 178:	c1 08       	sbc	r12, r1
 17a:	d1 08       	sbc	r13, r1
 17c:	e1 08       	sbc	r14, r1

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
 17e:	f1 08       	sbc	r15, r1
 180:	c1 01       	movw	r24, r2
 182:	b7 01       	movw	r22, r14
 184:	a6 01       	movw	r20, r12
 186:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume15allocContiguousEmPm>
 18a:	88 23       	and	r24, r24
 18c:	01 f0       	breq	.+0      	; 0x18e <_ZN8SdVolume15allocContiguousEmPm+0x18e>
 18e:	97 01       	movw	r18, r14
 190:	86 01       	movw	r16, r12
 192:	00 c0       	rjmp	.+0      	; 0x194 <_ZN8SdVolume15allocContiguousEmPm+0x194>
 194:	95 01       	movw	r18, r10
 196:	84 01       	movw	r16, r8
 198:	40 16       	cp	r4, r16
 19a:	51 06       	cpc	r5, r17
 19c:	62 06       	cpc	r6, r18
 19e:	73 06       	cpc	r7, r19
 1a0:	00 f0       	brcs	.+0      	; 0x1a2 <_ZN8SdVolume15allocContiguousEmPm+0x1a2>
 1a2:	aa 85       	ldd	r26, Y+10	; 0x0a
 1a4:	bb 85       	ldd	r27, Y+11	; 0x0b
 1a6:	4d 91       	ld	r20, X+

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
 1a8:	5d 91       	ld	r21, X+
 1aa:	6d 91       	ld	r22, X+
 1ac:	7c 91       	ld	r23, X
 1ae:	13 97       	sbiw	r26, 0x03	; 3
 1b0:	41 15       	cp	r20, r1
 1b2:	51 05       	cpc	r21, r1
 1b4:	61 05       	cpc	r22, r1
 1b6:	71 05       	cpc	r23, r1
 1b8:	01 f0       	breq	.+0      	; 0x1ba <_ZN8SdVolume15allocContiguousEmPm+0x1ba>
 1ba:	c1 01       	movw	r24, r2
 1bc:	93 01       	movw	r18, r6
 1be:	82 01       	movw	r16, r4
 1c0:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume15allocContiguousEmPm>
 1c4:	88 23       	and	r24, r24
 1c6:	01 f0       	breq	.+0      	; 0x1c8 <_ZN8SdVolume15allocContiguousEmPm+0x1c8>
 1c8:	ea 85       	ldd	r30, Y+10	; 0x0a
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
 1ca:	fb 85       	ldd	r31, Y+11	; 0x0b
 1cc:	40 82       	st	Z, r4
 1ce:	51 82       	std	Z+1, r5	; 0x01
 1d0:	62 82       	std	Z+2, r6	; 0x02
 1d2:	73 82       	std	Z+3, r7	; 0x03
 1d4:	fd 81       	ldd	r31, Y+5	; 0x05
 1d6:	ff 23       	and	r31, r31
 1d8:	01 f0       	breq	.+0      	; 0x1da <_ZN8SdVolume15allocContiguousEmPm+0x1da>

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
 1da:	08 94       	sec
 1dc:	41 1c       	adc	r4, r1
 1de:	51 1c       	adc	r5, r1
 1e0:	61 1c       	adc	r6, r1
 1e2:	71 1c       	adc	r7, r1
 1e4:	d1 01       	movw	r26, r2
 1e6:	4d 92       	st	X+, r4
 1e8:	5d 92       	st	X+, r5
 1ea:	6d 92       	st	X+, r6
 1ec:	7c 92       	st	X, r7
 1ee:	13 97       	sbiw	r26, 0x03	; 3

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <_ZN8SdVolume15allocContiguousEmPm+0x1f2>
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_ZN8SdVolume15allocContiguousEmPm+0x1f6>
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	2f 96       	adiw	r28, 0x0f	; 15
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	f8 94       	cli
 1fe:	de bf       	out	0x3e, r29	; 62
 200:	0f be       	out	0x3f, r0	; 63
    fatType_ = 12;
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df 91       	pop	r29
  } else if (clusterCount_ < 65525) {
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	0f 91       	pop	r16
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
    fatType_ = 16;
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
 21c:	7f 90       	pop	r7
 21e:	6f 90       	pop	r6
 220:	5f 90       	pop	r5
 222:	4f 90       	pop	r4
 224:	3f 90       	pop	r3
 226:	2f 90       	pop	r2
 228:	08 95       	ret

Disassembly of section .text._ZN8SdVolume9freeChainEm:

00000000 <_ZN8SdVolume9freeChainEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	00 d0       	rcall	.+0      	; 0x16 <_ZN8SdVolume9freeChainEm+0x16>
  16:	00 d0       	rcall	.+0      	; 0x18 <_ZN8SdVolume9freeChainEm+0x18>
  18:	cd b7       	in	r28, 0x3d	; 61
  1a:	de b7       	in	r29, 0x3e	; 62
  1c:	5c 01       	movw	r10, r24
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	6a 01       	movw	r12, r20
  20:	7b 01       	movw	r14, r22
  22:	82 e0       	ldi	r24, 0x02	; 2
  24:	90 e0       	ldi	r25, 0x00	; 0
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	a0 e0       	ldi	r26, 0x00	; 0
  28:	b0 e0       	ldi	r27, 0x00	; 0
    if (part > 4)return false;
  2a:	f5 01       	movw	r30, r10
  2c:	80 83       	st	Z, r24
  2e:	91 83       	std	Z+1, r25	; 0x01
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	a2 83       	std	Z+2, r26	; 0x02
  32:	b3 83       	std	Z+3, r27	; 0x03
  34:	c5 01       	movw	r24, r10
  36:	b7 01       	movw	r22, r14
  38:	a6 01       	movw	r20, r12
  3a:	9e 01       	movw	r18, r28
  3c:	2f 5f       	subi	r18, 0xFF	; 255
  3e:	3f 4f       	sbci	r19, 0xFF	; 255
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume9freeChainEm>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	88 23       	and	r24, r24
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN8SdVolume9freeChainEm+0x48>
  48:	c5 01       	movw	r24, r10
  4a:	b7 01       	movw	r22, r14
  4c:	a6 01       	movw	r20, r12
  4e:	00 e0       	ldi	r16, 0x00	; 0
  50:	10 e0       	ldi	r17, 0x00	; 0
  52:	20 e0       	ldi	r18, 0x00	; 0
  54:	30 e0       	ldi	r19, 0x00	; 0
    if ((p->boot & 0X7F) !=0  ||
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume9freeChainEm>
  5a:	88 23       	and	r24, r24
  5c:	01 f0       	breq	.+0      	; 0x5e <_ZN8SdVolume9freeChainEm+0x5e>
  5e:	c9 80       	ldd	r12, Y+1	; 0x01
  60:	da 80       	ldd	r13, Y+2	; 0x02
  62:	eb 80       	ldd	r14, Y+3	; 0x03
  64:	fc 80       	ldd	r15, Y+4	; 0x04
  66:	f5 01       	movw	r30, r10
  68:	87 89       	ldd	r24, Z+23	; 0x17
  6a:	80 31       	cpi	r24, 0x10	; 16
  6c:	01 f4       	brne	.+0      	; 0x6e <_ZN8SdVolume9freeChainEm+0x6e>
  6e:	88 ef       	ldi	r24, 0xF8	; 248
  70:	9f ef       	ldi	r25, 0xFF	; 255
  72:	a0 e0       	ldi	r26, 0x00	; 0
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN8SdVolume9freeChainEm+0x78>
  78:	88 ef       	ldi	r24, 0xF8	; 248
  7a:	9f ef       	ldi	r25, 0xFF	; 255
  7c:	af ef       	ldi	r26, 0xFF	; 255
  7e:	bf e0       	ldi	r27, 0x0F	; 15
  80:	c8 16       	cp	r12, r24
  82:	d9 06       	cpc	r13, r25
  84:	ea 06       	cpc	r14, r26
  86:	fb 06       	cpc	r15, r27
  88:	00 f0       	brcs	.+0      	; 0x8a <_ZN8SdVolume9freeChainEm+0x8a>
  8a:	81 e0       	ldi	r24, 0x01	; 1
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN8SdVolume9freeChainEm+0x8e>
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	0f 90       	pop	r0
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	1f 91       	pop	r17
  9e:	0f 91       	pop	r16
  a0:	ff 90       	pop	r15
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	ef 90       	pop	r14
  a4:	df 90       	pop	r13
  a6:	cf 90       	pop	r12
  a8:	bf 90       	pop	r11
  aa:	af 90       	pop	r10
  ac:	08 95       	ret

Disassembly of section .text._ZN8SdVolume4initEP7Sd2Cardh:

00000000 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	ec 01       	movw	r28, r24
  1c:	14 2f       	mov	r17, r20
  uint32_t volumeStartBlock = 0;
  sdCard_ = dev;
  1e:	70 93 00 00 	sts	0x0000, r23
  22:	60 93 00 00 	sts	0x0000, r22
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
  26:	44 23       	and	r20, r20
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN8SdVolume4initEP7Sd2Cardh+0x2a>
    if (part > 4)return false;
  2a:	45 30       	cpi	r20, 0x05	; 5
  2c:	00 f0       	brcs	.+0      	; 0x2e <_ZN8SdVolume4initEP7Sd2Cardh+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN8SdVolume4initEP7Sd2Cardh+0x30>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  30:	60 e0       	ldi	r22, 0x00	; 0
  32:	70 e0       	ldi	r23, 0x00	; 0
  34:	80 e0       	ldi	r24, 0x00	; 0
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume4initEP7Sd2Cardh>
  3e:	88 23       	and	r24, r24
  40:	01 f4       	brne	.+0      	; 0x42 <_ZN8SdVolume4initEP7Sd2Cardh+0x42>
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN8SdVolume4initEP7Sd2Cardh+0x44>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
  44:	e1 2f       	mov	r30, r17
  46:	f0 e0       	ldi	r31, 0x00	; 0
  48:	a4 e0       	ldi	r26, 0x04	; 4
  4a:	ee 0f       	add	r30, r30
  4c:	ff 1f       	adc	r31, r31
  4e:	aa 95       	dec	r26
  50:	01 f4       	brne	.+0      	; 0x52 <_ZN8SdVolume4initEP7Sd2Cardh+0x52>
  52:	e0 50       	subi	r30, 0x00	; 0
  54:	f0 40       	sbci	r31, 0x00	; 0
    if ((p->boot & 0X7F) !=0  ||
  56:	80 81       	ld	r24, Z
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	8f 77       	andi	r24, 0x7F	; 127
  5c:	90 70       	andi	r25, 0x00	; 0
  5e:	00 97       	sbiw	r24, 0x00	; 0
  60:	01 f0       	breq	.+0      	; 0x62 <_ZN8SdVolume4initEP7Sd2Cardh+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN8SdVolume4initEP7Sd2Cardh+0x64>
  64:	84 85       	ldd	r24, Z+12	; 0x0c
  66:	95 85       	ldd	r25, Z+13	; 0x0d
  68:	a6 85       	ldd	r26, Z+14	; 0x0e
  6a:	b7 85       	ldd	r27, Z+15	; 0x0f
  6c:	84 36       	cpi	r24, 0x64	; 100
  6e:	91 05       	cpc	r25, r1
  70:	a1 05       	cpc	r26, r1
  72:	b1 05       	cpc	r27, r1
  74:	00 f4       	brcc	.+0      	; 0x76 <_ZN8SdVolume4initEP7Sd2Cardh+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_ZN8SdVolume4initEP7Sd2Cardh+0x78>
  78:	80 84       	ldd	r8, Z+8	; 0x08
  7a:	91 84       	ldd	r9, Z+9	; 0x09
  7c:	a2 84       	ldd	r10, Z+10	; 0x0a
  7e:	b3 84       	ldd	r11, Z+11	; 0x0b
  80:	81 14       	cp	r8, r1
  82:	91 04       	cpc	r9, r1
  84:	a1 04       	cpc	r10, r1
  86:	b1 04       	cpc	r11, r1
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN8SdVolume4initEP7Sd2Cardh+0x8a>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <_ZN8SdVolume4initEP7Sd2Cardh+0x8c>
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
  uint32_t volumeStartBlock = 0;
  8c:	88 24       	eor	r8, r8
  8e:	99 24       	eor	r9, r9
  90:	54 01       	movw	r10, r8
      // not a valid partition
      return false;
    }
    volumeStartBlock = p->firstSector;
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
  92:	c5 01       	movw	r24, r10
  94:	b4 01       	movw	r22, r8
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume4initEP7Sd2Cardh>
  9c:	88 23       	and	r24, r24
  9e:	01 f4       	brne	.+0      	; 0xa0 <_ZN8SdVolume4initEP7Sd2Cardh+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN8SdVolume4initEP7Sd2Cardh+0xa2>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
  if (bpb->bytesPerSector != 512 ||
  a2:	80 91 00 00 	lds	r24, 0x0000
  a6:	90 91 00 00 	lds	r25, 0x0000
  aa:	22 e0       	ldi	r18, 0x02	; 2
  ac:	80 30       	cpi	r24, 0x00	; 0
  ae:	92 07       	cpc	r25, r18
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN8SdVolume4initEP7Sd2Cardh+0xb2>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <_ZN8SdVolume4initEP7Sd2Cardh+0xb4>
  b4:	30 91 00 00 	lds	r19, 0x0000
  b8:	33 23       	and	r19, r19
  ba:	01 f4       	brne	.+0      	; 0xbc <_ZN8SdVolume4initEP7Sd2Cardh+0xbc>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN8SdVolume4initEP7Sd2Cardh+0xbe>
  be:	80 91 00 00 	lds	r24, 0x0000
  c2:	90 91 00 00 	lds	r25, 0x0000
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	01 f4       	brne	.+0      	; 0xca <_ZN8SdVolume4initEP7Sd2Cardh+0xca>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN8SdVolume4initEP7Sd2Cardh+0xcc>
  cc:	20 91 00 00 	lds	r18, 0x0000
  d0:	22 23       	and	r18, r18
  d2:	01 f4       	brne	.+0      	; 0xd4 <_ZN8SdVolume4initEP7Sd2Cardh+0xd4>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <_ZN8SdVolume4initEP7Sd2Cardh+0xd6>
    bpb->reservedSectorCount == 0 ||
    bpb->sectorsPerCluster == 0) {
       // not valid FAT volume
      return false;
  }
  fatCount_ = bpb->fatCount;
  d6:	3a 8b       	std	Y+18, r19	; 0x12
  blocksPerCluster_ = bpb->sectorsPerCluster;
  d8:	2c 83       	std	Y+4, r18	; 0x04

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  da:	1d 86       	std	Y+13, r1	; 0x0d
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	41 e0       	ldi	r20, 0x01	; 1
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <_ZN8SdVolume4initEP7Sd2Cardh+0xe4>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  e4:	81 2f       	mov	r24, r17
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	8d 87       	std	Y+13, r24	; 0x0d
  ea:	18 30       	cpi	r17, 0x08	; 8
  ec:	00 f0       	brcs	.+0      	; 0xee <_ZN8SdVolume4initEP7Sd2Cardh+0xee>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN8SdVolume4initEP7Sd2Cardh+0xf0>
  fatCount_ = bpb->fatCount;
  blocksPerCluster_ = bpb->sectorsPerCluster;

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
  f0:	1d 85       	ldd	r17, Y+13	; 0x0d
  f2:	ca 01       	movw	r24, r20
  f4:	01 2e       	mov	r0, r17
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <_ZN8SdVolume4initEP7Sd2Cardh+0xf8>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	02 f4       	brpl	.+0      	; 0x100 <_ZN8SdVolume4initEP7Sd2Cardh+0x100>
 100:	28 17       	cp	r18, r24
 102:	39 07       	cpc	r19, r25
 104:	01 f4       	brne	.+0      	; 0x106 <_ZN8SdVolume4initEP7Sd2Cardh+0x106>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
 106:	80 91 00 00 	lds	r24, 0x0000
 10a:	90 91 00 00 	lds	r25, 0x0000
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f0       	breq	.+0      	; 0x112 <_ZN8SdVolume4initEP7Sd2Cardh+0x112>
 112:	a0 e0       	ldi	r26, 0x00	; 0
 114:	b0 e0       	ldi	r27, 0x00	; 0
 116:	00 c0       	rjmp	.+0      	; 0x118 <_ZN8SdVolume4initEP7Sd2Cardh+0x118>
 118:	80 91 00 00 	lds	r24, 0x0000
 11c:	90 91 00 00 	lds	r25, 0x0000
 120:	a0 91 00 00 	lds	r26, 0x0000
 124:	b0 91 00 00 	lds	r27, 0x0000
 128:	8d 83       	std	Y+5, r24	; 0x05
 12a:	9e 83       	std	Y+6, r25	; 0x06
 12c:	af 83       	std	Y+7, r26	; 0x07
 12e:	b8 87       	std	Y+8, r27	; 0x08

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
 130:	c0 90 00 00 	lds	r12, 0x0000
 134:	d0 90 00 00 	lds	r13, 0x0000
 138:	ee 24       	eor	r14, r14
 13a:	ff 24       	eor	r15, r15
 13c:	c8 0c       	add	r12, r8
 13e:	d9 1c       	adc	r13, r9
 140:	ea 1c       	adc	r14, r10
 142:	fb 1c       	adc	r15, r11
 144:	cb 8a       	std	Y+19, r12	; 0x13
 146:	dc 8a       	std	Y+20, r13	; 0x14
 148:	ed 8a       	std	Y+21, r14	; 0x15
 14a:	fe 8a       	std	Y+22, r15	; 0x16

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
 14c:	60 90 00 00 	lds	r6, 0x0000
 150:	70 90 00 00 	lds	r7, 0x0000
 154:	79 8e       	std	Y+25, r7	; 0x19
 156:	68 8e       	std	Y+24, r6	; 0x18

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
 158:	20 91 00 00 	lds	r18, 0x0000
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	bc 01       	movw	r22, r24
 164:	cd 01       	movw	r24, r26
 166:	0e 94 00 00 	call	0	; 0x0 <_ZN8SdVolume4initEP7Sd2Cardh>
 16a:	dc 01       	movw	r26, r24
 16c:	cb 01       	movw	r24, r22
 16e:	8c 0d       	add	r24, r12
 170:	9d 1d       	adc	r25, r13
 172:	ae 1d       	adc	r26, r14
 174:	bf 1d       	adc	r27, r15
 176:	8a 8f       	std	Y+26, r24	; 0x1a
 178:	9b 8f       	std	Y+27, r25	; 0x1b
 17a:	ac 8f       	std	Y+28, r26	; 0x1c
 17c:	bd 8f       	std	Y+29, r27	; 0x1d

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
 17e:	a3 01       	movw	r20, r6
 180:	e5 e0       	ldi	r30, 0x05	; 5
 182:	44 0f       	add	r20, r20
 184:	55 1f       	adc	r21, r21
 186:	ea 95       	dec	r30
 188:	01 f4       	brne	.+0      	; 0x18a <_ZN8SdVolume4initEP7Sd2Cardh+0x18a>
 18a:	41 50       	subi	r20, 0x01	; 1
 18c:	5e 4f       	sbci	r21, 0xFE	; 254
 18e:	45 2f       	mov	r20, r21
 190:	55 27       	eor	r21, r21
 192:	46 95       	lsr	r20
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	48 0f       	add	r20, r24
 19a:	59 1f       	adc	r21, r25
 19c:	6a 1f       	adc	r22, r26
 19e:	7b 1f       	adc	r23, r27
 1a0:	4e 87       	std	Y+14, r20	; 0x0e
 1a2:	5f 87       	std	Y+15, r21	; 0x0f
 1a4:	68 8b       	std	Y+16, r22	; 0x10
 1a6:	79 8b       	std	Y+17, r23	; 0x11

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
                           bpb->totalSectors16 : bpb->totalSectors32;
 1a8:	80 91 00 00 	lds	r24, 0x0000
 1ac:	90 91 00 00 	lds	r25, 0x0000
 1b0:	00 97       	sbiw	r24, 0x00	; 0
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <_ZN8SdVolume4initEP7Sd2Cardh+0x1b4>
 1b4:	a0 e0       	ldi	r26, 0x00	; 0
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <_ZN8SdVolume4initEP7Sd2Cardh+0x1ba>
 1ba:	80 91 00 00 	lds	r24, 0x0000
 1be:	90 91 00 00 	lds	r25, 0x0000
 1c2:	a0 91 00 00 	lds	r26, 0x0000
 1c6:	b0 91 00 00 	lds	r27, 0x0000
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
 1ca:	84 1a       	sub	r8, r20
 1cc:	95 0a       	sbc	r9, r21
 1ce:	a6 0a       	sbc	r10, r22
 1d0:	b7 0a       	sbc	r11, r23
 1d2:	88 0e       	add	r8, r24
 1d4:	99 1e       	adc	r9, r25
 1d6:	aa 1e       	adc	r10, r26
 1d8:	bb 1e       	adc	r11, r27

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <_ZN8SdVolume4initEP7Sd2Cardh+0x1dc>
 1dc:	b6 94       	lsr	r11
 1de:	a7 94       	ror	r10
 1e0:	97 94       	ror	r9
 1e2:	87 94       	ror	r8
 1e4:	1a 95       	dec	r17
 1e6:	02 f4       	brpl	.+0      	; 0x1e8 <_ZN8SdVolume4initEP7Sd2Cardh+0x1e8>
 1e8:	89 86       	std	Y+9, r8	; 0x09
 1ea:	9a 86       	std	Y+10, r9	; 0x0a
 1ec:	ab 86       	std	Y+11, r10	; 0x0b
 1ee:	bc 86       	std	Y+12, r11	; 0x0c

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
 1f0:	85 ef       	ldi	r24, 0xF5	; 245
 1f2:	88 16       	cp	r8, r24
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	98 06       	cpc	r9, r24
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	a8 06       	cpc	r10, r24
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	b8 06       	cpc	r11, r24
 200:	00 f4       	brcc	.+0      	; 0x202 <_ZN8SdVolume4initEP7Sd2Cardh+0x202>
    fatType_ = 12;
 202:	8c e0       	ldi	r24, 0x0C	; 12
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN8SdVolume4initEP7Sd2Cardh+0x206>
  } else if (clusterCount_ < 65525) {
 206:	25 ef       	ldi	r18, 0xF5	; 245
 208:	82 16       	cp	r8, r18
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	92 06       	cpc	r9, r18
 20e:	20 e0       	ldi	r18, 0x00	; 0
 210:	a2 06       	cpc	r10, r18
 212:	20 e0       	ldi	r18, 0x00	; 0
 214:	b2 06       	cpc	r11, r18
 216:	00 f4       	brcc	.+0      	; 0x218 <_ZN8SdVolume4initEP7Sd2Cardh+0x218>
    fatType_ = 16;
 218:	80 e1       	ldi	r24, 0x10	; 16
 21a:	00 c0       	rjmp	.+0      	; 0x21c <_ZN8SdVolume4initEP7Sd2Cardh+0x21c>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
 21c:	80 91 00 00 	lds	r24, 0x0000
 220:	90 91 00 00 	lds	r25, 0x0000
 224:	a0 91 00 00 	lds	r26, 0x0000
 228:	b0 91 00 00 	lds	r27, 0x0000
 22c:	8a 8f       	std	Y+26, r24	; 0x1a
 22e:	9b 8f       	std	Y+27, r25	; 0x1b
 230:	ac 8f       	std	Y+28, r26	; 0x1c
 232:	bd 8f       	std	Y+29, r27	; 0x1d
    fatType_ = 32;
 234:	80 e2       	ldi	r24, 0x20	; 32
 236:	8f 8b       	std	Y+23, r24	; 0x17
  }
  return true;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	00 c0       	rjmp	.+0      	; 0x23c <_ZN8SdVolume4initEP7Sd2Cardh+0x23c>

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
 23c:	80 e0       	ldi	r24, 0x00	; 0
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
    fatType_ = 32;
  }
  return true;
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	1f 91       	pop	r17
 244:	ff 90       	pop	r15
 246:	ef 90       	pop	r14
 248:	df 90       	pop	r13
 24a:	cf 90       	pop	r12
 24c:	bf 90       	pop	r11
 24e:	af 90       	pop	r10
 250:	9f 90       	pop	r9
 252:	8f 90       	pop	r8
 254:	7f 90       	pop	r7
 256:	6f 90       	pop	r6
 258:	08 95       	ret
